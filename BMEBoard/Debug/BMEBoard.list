
BMEBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0ec  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  0800e2ac  0800e2ac  0001e2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e934  0800e934  00020914  2**0
                  CONTENTS
  4 .ARM          00000008  0800e934  0800e934  0001e934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e93c  0800e93c  00020914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e93c  0800e93c  0001e93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e944  0800e944  0001e944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000914  20000000  0800e948  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000332f4  20000914  0800f25c  00020914  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20033c08  0800f25c  00023c08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020914  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036efd  00000000  00000000  00020944  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005e50  00000000  00000000  00057841  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000025e0  00000000  00000000  0005d698  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002308  00000000  00000000  0005fc78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003a2c7  00000000  00000000  00061f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00027b3f  00000000  00000000  0009c247  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0014fb46  00000000  00000000  000c3d86  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002138cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1b0  00000000  00000000  00213948  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000914 	.word	0x20000914
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800e294 	.word	0x0800e294

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000918 	.word	0x20000918
 80001fc:	0800e294 	.word	0x0800e294

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000214:	f000 b972 	b.w	80004fc <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	4688      	mov	r8, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14b      	bne.n	80002d6 <__udivmoddi4+0xa6>
 800023e:	428a      	cmp	r2, r1
 8000240:	4615      	mov	r5, r2
 8000242:	d967      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0720 	rsb	r7, r2, #32
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	fa20 f707 	lsr.w	r7, r0, r7
 8000256:	4095      	lsls	r5, r2
 8000258:	ea47 0803 	orr.w	r8, r7, r3
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbb8 f7fe 	udiv	r7, r8, lr
 8000268:	fa1f fc85 	uxth.w	ip, r5
 800026c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000270:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000274:	fb07 f10c 	mul.w	r1, r7, ip
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18eb      	adds	r3, r5, r3
 800027e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000282:	f080 811b 	bcs.w	80004bc <__udivmoddi4+0x28c>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8118 	bls.w	80004bc <__udivmoddi4+0x28c>
 800028c:	3f02      	subs	r7, #2
 800028e:	442b      	add	r3, r5
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0fe 	udiv	r0, r3, lr
 8000298:	fb0e 3310 	mls	r3, lr, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a4:	45a4      	cmp	ip, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	192c      	adds	r4, r5, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x290>
 80002b2:	45a4      	cmp	ip, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x290>
 80002b8:	3802      	subs	r0, #2
 80002ba:	442c      	add	r4, r5
 80002bc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c0:	eba4 040c 	sub.w	r4, r4, ip
 80002c4:	2700      	movs	r7, #0
 80002c6:	b11e      	cbz	r6, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c6 4300 	strd	r4, r3, [r6]
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xbe>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80eb 	beq.w	80004b6 <__udivmoddi4+0x286>
 80002e0:	2700      	movs	r7, #0
 80002e2:	e9c6 0100 	strd	r0, r1, [r6]
 80002e6:	4638      	mov	r0, r7
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f783 	clz	r7, r3
 80002f2:	2f00      	cmp	r7, #0
 80002f4:	d147      	bne.n	8000386 <__udivmoddi4+0x156>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd0>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80fa 	bhi.w	80004f4 <__udivmoddi4+0x2c4>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	4698      	mov	r8, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800030e:	e9c6 4800 	strd	r4, r8, [r6]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xe8>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 808f 	bne.w	8000440 <__udivmoddi4+0x210>
 8000322:	1b49      	subs	r1, r1, r5
 8000324:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000328:	fa1f f885 	uxth.w	r8, r5
 800032c:	2701      	movs	r7, #1
 800032e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fb0e 111c 	mls	r1, lr, ip, r1
 8000338:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800033c:	fb08 f10c 	mul.w	r1, r8, ip
 8000340:	4299      	cmp	r1, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x124>
 8000344:	18eb      	adds	r3, r5, r3
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4299      	cmp	r1, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 8000352:	4684      	mov	ip, r0
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000360:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x14c>
 800036c:	192c      	adds	r4, r5, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x14a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80b6 	bhi.w	80004e6 <__udivmoddi4+0x2b6>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e79f      	b.n	80002c6 <__udivmoddi4+0x96>
 8000386:	f1c7 0c20 	rsb	ip, r7, #32
 800038a:	40bb      	lsls	r3, r7
 800038c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000390:	ea4e 0e03 	orr.w	lr, lr, r3
 8000394:	fa01 f407 	lsl.w	r4, r1, r7
 8000398:	fa20 f50c 	lsr.w	r5, r0, ip
 800039c:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a4:	4325      	orrs	r5, r4
 80003a6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003aa:	0c2c      	lsrs	r4, r5, #16
 80003ac:	fb08 3319 	mls	r3, r8, r9, r3
 80003b0:	fa1f fa8e 	uxth.w	sl, lr
 80003b4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b8:	fb09 f40a 	mul.w	r4, r9, sl
 80003bc:	429c      	cmp	r4, r3
 80003be:	fa02 f207 	lsl.w	r2, r2, r7
 80003c2:	fa00 f107 	lsl.w	r1, r0, r7
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1e 0303 	adds.w	r3, lr, r3
 80003cc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d0:	f080 8087 	bcs.w	80004e2 <__udivmoddi4+0x2b2>
 80003d4:	429c      	cmp	r4, r3
 80003d6:	f240 8084 	bls.w	80004e2 <__udivmoddi4+0x2b2>
 80003da:	f1a9 0902 	sub.w	r9, r9, #2
 80003de:	4473      	add	r3, lr
 80003e0:	1b1b      	subs	r3, r3, r4
 80003e2:	b2ad      	uxth	r5, r5
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1e 0404 	adds.w	r4, lr, r4
 80003fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000400:	d26b      	bcs.n	80004da <__udivmoddi4+0x2aa>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d969      	bls.n	80004da <__udivmoddi4+0x2aa>
 8000406:	3802      	subs	r0, #2
 8000408:	4474      	add	r4, lr
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c2      	mov	sl, r8
 800041a:	464b      	mov	r3, r9
 800041c:	d354      	bcc.n	80004c8 <__udivmoddi4+0x298>
 800041e:	d051      	beq.n	80004c4 <__udivmoddi4+0x294>
 8000420:	2e00      	cmp	r6, #0
 8000422:	d069      	beq.n	80004f8 <__udivmoddi4+0x2c8>
 8000424:	ebb1 050a 	subs.w	r5, r1, sl
 8000428:	eb64 0403 	sbc.w	r4, r4, r3
 800042c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000430:	40fd      	lsrs	r5, r7
 8000432:	40fc      	lsrs	r4, r7
 8000434:	ea4c 0505 	orr.w	r5, ip, r5
 8000438:	e9c6 5400 	strd	r5, r4, [r6]
 800043c:	2700      	movs	r7, #0
 800043e:	e747      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000440:	f1c2 0320 	rsb	r3, r2, #32
 8000444:	fa20 f703 	lsr.w	r7, r0, r3
 8000448:	4095      	lsls	r5, r2
 800044a:	fa01 f002 	lsl.w	r0, r1, r2
 800044e:	fa21 f303 	lsr.w	r3, r1, r3
 8000452:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000456:	4338      	orrs	r0, r7
 8000458:	0c01      	lsrs	r1, r0, #16
 800045a:	fbb3 f7fe 	udiv	r7, r3, lr
 800045e:	fa1f f885 	uxth.w	r8, r5
 8000462:	fb0e 3317 	mls	r3, lr, r7, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb07 f308 	mul.w	r3, r7, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	fa04 f402 	lsl.w	r4, r4, r2
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x256>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800047c:	d22f      	bcs.n	80004de <__udivmoddi4+0x2ae>
 800047e:	428b      	cmp	r3, r1
 8000480:	d92d      	bls.n	80004de <__udivmoddi4+0x2ae>
 8000482:	3f02      	subs	r7, #2
 8000484:	4429      	add	r1, r5
 8000486:	1acb      	subs	r3, r1, r3
 8000488:	b281      	uxth	r1, r0
 800048a:	fbb3 f0fe 	udiv	r0, r3, lr
 800048e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb00 f308 	mul.w	r3, r0, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x27e>
 800049e:	1869      	adds	r1, r5, r1
 80004a0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a4:	d217      	bcs.n	80004d6 <__udivmoddi4+0x2a6>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d915      	bls.n	80004d6 <__udivmoddi4+0x2a6>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4429      	add	r1, r5
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b4:	e73b      	b.n	800032e <__udivmoddi4+0xfe>
 80004b6:	4637      	mov	r7, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e709      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004bc:	4607      	mov	r7, r0
 80004be:	e6e7      	b.n	8000290 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c4:	4541      	cmp	r1, r8
 80004c6:	d2ab      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004c8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004cc:	eb69 020e 	sbc.w	r2, r9, lr
 80004d0:	3801      	subs	r0, #1
 80004d2:	4613      	mov	r3, r2
 80004d4:	e7a4      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d6:	4660      	mov	r0, ip
 80004d8:	e7e9      	b.n	80004ae <__udivmoddi4+0x27e>
 80004da:	4618      	mov	r0, r3
 80004dc:	e795      	b.n	800040a <__udivmoddi4+0x1da>
 80004de:	4667      	mov	r7, ip
 80004e0:	e7d1      	b.n	8000486 <__udivmoddi4+0x256>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e77c      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	442c      	add	r4, r5
 80004ea:	e747      	b.n	800037c <__udivmoddi4+0x14c>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	442b      	add	r3, r5
 80004f2:	e72f      	b.n	8000354 <__udivmoddi4+0x124>
 80004f4:	4638      	mov	r0, r7
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xda>
 80004f8:	4637      	mov	r7, r6
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0xa0>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000506:	463b      	mov	r3, r7
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
 8000514:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000516:	4b31      	ldr	r3, [pc, #196]	; (80005dc <MX_ADC1_Init+0xdc>)
 8000518:	4a31      	ldr	r2, [pc, #196]	; (80005e0 <MX_ADC1_Init+0xe0>)
 800051a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 800051c:	4b2f      	ldr	r3, [pc, #188]	; (80005dc <MX_ADC1_Init+0xdc>)
 800051e:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 8000522:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000524:	4b2d      	ldr	r3, [pc, #180]	; (80005dc <MX_ADC1_Init+0xdc>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800052a:	4b2c      	ldr	r3, [pc, #176]	; (80005dc <MX_ADC1_Init+0xdc>)
 800052c:	2200      	movs	r2, #0
 800052e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000530:	4b2a      	ldr	r3, [pc, #168]	; (80005dc <MX_ADC1_Init+0xdc>)
 8000532:	2201      	movs	r2, #1
 8000534:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000536:	4b29      	ldr	r3, [pc, #164]	; (80005dc <MX_ADC1_Init+0xdc>)
 8000538:	2208      	movs	r2, #8
 800053a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800053c:	4b27      	ldr	r3, [pc, #156]	; (80005dc <MX_ADC1_Init+0xdc>)
 800053e:	2200      	movs	r2, #0
 8000540:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000542:	4b26      	ldr	r3, [pc, #152]	; (80005dc <MX_ADC1_Init+0xdc>)
 8000544:	2201      	movs	r2, #1
 8000546:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000548:	4b24      	ldr	r3, [pc, #144]	; (80005dc <MX_ADC1_Init+0xdc>)
 800054a:	2202      	movs	r2, #2
 800054c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800054e:	4b23      	ldr	r3, [pc, #140]	; (80005dc <MX_ADC1_Init+0xdc>)
 8000550:	2200      	movs	r2, #0
 8000552:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000556:	4b21      	ldr	r3, [pc, #132]	; (80005dc <MX_ADC1_Init+0xdc>)
 8000558:	2200      	movs	r2, #0
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <MX_ADC1_Init+0xdc>)
 800055e:	2200      	movs	r2, #0
 8000560:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000562:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <MX_ADC1_Init+0xdc>)
 8000564:	2201      	movs	r2, #1
 8000566:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800056a:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <MX_ADC1_Init+0xdc>)
 800056c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000570:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000572:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <MX_ADC1_Init+0xdc>)
 8000574:	2200      	movs	r2, #0
 8000576:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800057a:	4818      	ldr	r0, [pc, #96]	; (80005dc <MX_ADC1_Init+0xdc>)
 800057c:	f001 fafc 	bl	8001b78 <HAL_ADC_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000586:	f000 fd59 	bl	800103c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800058a:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <MX_ADC1_Init+0xe4>)
 800058c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800058e:	2306      	movs	r3, #6
 8000590:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000592:	2307      	movs	r3, #7
 8000594:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000596:	237f      	movs	r3, #127	; 0x7f
 8000598:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800059a:	2304      	movs	r3, #4
 800059c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a2:	463b      	mov	r3, r7
 80005a4:	4619      	mov	r1, r3
 80005a6:	480d      	ldr	r0, [pc, #52]	; (80005dc <MX_ADC1_Init+0xdc>)
 80005a8:	f002 f87e 	bl	80026a8 <HAL_ADC_ConfigChannel>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80005b2:	f000 fd43 	bl	800103c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <MX_ADC1_Init+0xe8>)
 80005b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005ba:	230c      	movs	r3, #12
 80005bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005be:	463b      	mov	r3, r7
 80005c0:	4619      	mov	r1, r3
 80005c2:	4806      	ldr	r0, [pc, #24]	; (80005dc <MX_ADC1_Init+0xdc>)
 80005c4:	f002 f870 	bl	80026a8 <HAL_ADC_ConfigChannel>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80005ce:	f000 fd35 	bl	800103c <Error_Handler>
  }

}
 80005d2:	bf00      	nop
 80005d4:	3718      	adds	r7, #24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200336d4 	.word	0x200336d4
 80005e0:	50040000 	.word	0x50040000
 80005e4:	08600004 	.word	0x08600004
 80005e8:	21800100 	.word	0x21800100

080005ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a3b      	ldr	r2, [pc, #236]	; (80006f8 <HAL_ADC_MspInit+0x10c>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d170      	bne.n	80006f0 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800060e:	4b3b      	ldr	r3, [pc, #236]	; (80006fc <HAL_ADC_MspInit+0x110>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	4a3a      	ldr	r2, [pc, #232]	; (80006fc <HAL_ADC_MspInit+0x110>)
 8000614:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061a:	4b38      	ldr	r3, [pc, #224]	; (80006fc <HAL_ADC_MspInit+0x110>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	4b35      	ldr	r3, [pc, #212]	; (80006fc <HAL_ADC_MspInit+0x110>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	4a34      	ldr	r2, [pc, #208]	; (80006fc <HAL_ADC_MspInit+0x110>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000632:	4b32      	ldr	r3, [pc, #200]	; (80006fc <HAL_ADC_MspInit+0x110>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b2f      	ldr	r3, [pc, #188]	; (80006fc <HAL_ADC_MspInit+0x110>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	4a2e      	ldr	r2, [pc, #184]	; (80006fc <HAL_ADC_MspInit+0x110>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064a:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <HAL_ADC_MspInit+0x110>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Rain_lvl_Pin;
 8000656:	2302      	movs	r3, #2
 8000658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800065a:	230b      	movs	r3, #11
 800065c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Rain_lvl_GPIO_Port, &GPIO_InitStruct);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4619      	mov	r1, r3
 8000668:	4825      	ldr	r0, [pc, #148]	; (8000700 <HAL_ADC_MspInit+0x114>)
 800066a:	f004 f82d 	bl	80046c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Wind_DIR_Pin;
 800066e:	2308      	movs	r3, #8
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000672:	230b      	movs	r3, #11
 8000674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Wind_DIR_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000684:	f004 f820 	bl	80046c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <HAL_ADC_MspInit+0x118>)
 800068a:	4a1f      	ldr	r2, [pc, #124]	; (8000708 <HAL_ADC_MspInit+0x11c>)
 800068c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800068e:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <HAL_ADC_MspInit+0x118>)
 8000690:	2205      	movs	r2, #5
 8000692:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000694:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <HAL_ADC_MspInit+0x118>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800069a:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <HAL_ADC_MspInit+0x118>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006a0:	4b18      	ldr	r3, [pc, #96]	; (8000704 <HAL_ADC_MspInit+0x118>)
 80006a2:	2280      	movs	r2, #128	; 0x80
 80006a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <HAL_ADC_MspInit+0x118>)
 80006a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <HAL_ADC_MspInit+0x118>)
 80006b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <HAL_ADC_MspInit+0x118>)
 80006b8:	2220      	movs	r2, #32
 80006ba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <HAL_ADC_MspInit+0x118>)
 80006be:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80006c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006c4:	480f      	ldr	r0, [pc, #60]	; (8000704 <HAL_ADC_MspInit+0x118>)
 80006c6:	f003 fd05 	bl	80040d4 <HAL_DMA_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <HAL_ADC_MspInit+0xe8>
    {
      Error_Handler();
 80006d0:	f000 fcb4 	bl	800103c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4a0b      	ldr	r2, [pc, #44]	; (8000704 <HAL_ADC_MspInit+0x118>)
 80006d8:	651a      	str	r2, [r3, #80]	; 0x50
 80006da:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <HAL_ADC_MspInit+0x118>)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2105      	movs	r1, #5
 80006e4:	2012      	movs	r0, #18
 80006e6:	f003 fb61 	bl	8003dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80006ea:	2012      	movs	r0, #18
 80006ec:	f003 fb8a 	bl	8003e04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006f0:	bf00      	nop
 80006f2:	3728      	adds	r7, #40	; 0x28
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	50040000 	.word	0x50040000
 80006fc:	40021000 	.word	0x40021000
 8000700:	48000800 	.word	0x48000800
 8000704:	20033768 	.word	0x20033768
 8000708:	40020008 	.word	0x40020008

0800070c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_CAN1_Init+0x64>)
 8000712:	4a18      	ldr	r2, [pc, #96]	; (8000774 <MX_CAN1_Init+0x68>)
 8000714:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_CAN1_Init+0x64>)
 8000718:	2205      	movs	r2, #5
 800071a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_CAN1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_CAN1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_CAN1_Init+0x64>)
 800072a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800072e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_CAN1_Init+0x64>)
 8000732:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000736:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_CAN1_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_CAN1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_CAN1_Init+0x64>)
 8000746:	2201      	movs	r2, #1
 8000748:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_CAN1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MX_CAN1_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_CAN1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_CAN1_Init+0x64>)
 800075e:	f002 fdb3 	bl	80032c8 <HAL_CAN_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000768:	f000 fc68 	bl	800103c <Error_Handler>
  }

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200337c8 	.word	0x200337c8
 8000774:	40006400 	.word	0x40006400

08000778 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a24      	ldr	r2, [pc, #144]	; (8000828 <HAL_CAN_MspInit+0xb0>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d141      	bne.n	800081e <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800079a:	4b24      	ldr	r3, [pc, #144]	; (800082c <HAL_CAN_MspInit+0xb4>)
 800079c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079e:	4a23      	ldr	r2, [pc, #140]	; (800082c <HAL_CAN_MspInit+0xb4>)
 80007a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007a4:	6593      	str	r3, [r2, #88]	; 0x58
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <HAL_CAN_MspInit+0xb4>)
 80007a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	4b1e      	ldr	r3, [pc, #120]	; (800082c <HAL_CAN_MspInit+0xb4>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a1d      	ldr	r2, [pc, #116]	; (800082c <HAL_CAN_MspInit+0xb4>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b1b      	ldr	r3, [pc, #108]	; (800082c <HAL_CAN_MspInit+0xb4>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d0:	2302      	movs	r3, #2
 80007d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d8:	2303      	movs	r3, #3
 80007da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80007dc:	2309      	movs	r3, #9
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ea:	f003 ff6d 	bl	80046c8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2105      	movs	r1, #5
 80007f2:	2013      	movs	r0, #19
 80007f4:	f003 fada 	bl	8003dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80007f8:	2013      	movs	r0, #19
 80007fa:	f003 fb03 	bl	8003e04 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2105      	movs	r1, #5
 8000802:	2014      	movs	r0, #20
 8000804:	f003 fad2 	bl	8003dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000808:	2014      	movs	r0, #20
 800080a:	f003 fafb 	bl	8003e04 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2105      	movs	r1, #5
 8000812:	2015      	movs	r0, #21
 8000814:	f003 faca 	bl	8003dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000818:	2015      	movs	r0, #21
 800081a:	f003 faf3 	bl	8003e04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800081e:	bf00      	nop
 8000820:	3728      	adds	r7, #40	; 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40006400 	.word	0x40006400
 800082c:	40021000 	.word	0x40021000

08000830 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000834:	4b0d      	ldr	r3, [pc, #52]	; (800086c <MX_CRC_Init+0x3c>)
 8000836:	4a0e      	ldr	r2, [pc, #56]	; (8000870 <MX_CRC_Init+0x40>)
 8000838:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_CRC_Init+0x3c>)
 800083c:	2200      	movs	r2, #0
 800083e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <MX_CRC_Init+0x3c>)
 8000842:	2200      	movs	r2, #0
 8000844:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_CRC_Init+0x3c>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_CRC_Init+0x3c>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_CRC_Init+0x3c>)
 8000854:	2201      	movs	r2, #1
 8000856:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_CRC_Init+0x3c>)
 800085a:	f003 faeb 	bl	8003e34 <HAL_CRC_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000864:	f000 fbea 	bl	800103c <Error_Handler>
  }

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	2003382c 	.word	0x2003382c
 8000870:	40023000 	.word	0x40023000

08000874 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <HAL_CRC_MspInit+0x38>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d10b      	bne.n	800089e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <HAL_CRC_MspInit+0x3c>)
 8000888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800088a:	4a09      	ldr	r2, [pc, #36]	; (80008b0 <HAL_CRC_MspInit+0x3c>)
 800088c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000890:	6493      	str	r3, [r2, #72]	; 0x48
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <HAL_CRC_MspInit+0x3c>)
 8000894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000896:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800089e:	bf00      	nop
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40023000 	.word	0x40023000
 80008b0:	40021000 	.word	0x40021000

080008b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_DMA_Init+0x50>)
 80008bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008be:	4a11      	ldr	r2, [pc, #68]	; (8000904 <MX_DMA_Init+0x50>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6493      	str	r3, [r2, #72]	; 0x48
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_DMA_Init+0x50>)
 80008c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_DMA_Init+0x50>)
 80008d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008d6:	4a0b      	ldr	r2, [pc, #44]	; (8000904 <MX_DMA_Init+0x50>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6493      	str	r3, [r2, #72]	; 0x48
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_DMA_Init+0x50>)
 80008e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2105      	movs	r1, #5
 80008ee:	200b      	movs	r0, #11
 80008f0:	f003 fa5c 	bl	8003dac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008f4:	200b      	movs	r0, #11
 80008f6:	f003 fa85 	bl	8003e04 <HAL_NVIC_EnableIRQ>

}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40021000 	.word	0x40021000

08000908 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
return 0;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	MeasureTask_attributes.stack_size = 2048 * 4;
 800092c:	4b57      	ldr	r3, [pc, #348]	; (8000a8c <_Z16MX_FREERTOS_Initv+0x164>)
 800092e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000932:	615a      	str	r2, [r3, #20]
	MeasureTask_attributes.priority = (osPriority_t) osPriorityNormal;
 8000934:	4b55      	ldr	r3, [pc, #340]	; (8000a8c <_Z16MX_FREERTOS_Initv+0x164>)
 8000936:	2218      	movs	r2, #24
 8000938:	619a      	str	r2, [r3, #24]

	ProcessCAN_attributes.priority = (osPriority_t) osPriorityNormal;
 800093a:	4b55      	ldr	r3, [pc, #340]	; (8000a90 <_Z16MX_FREERTOS_Initv+0x168>)
 800093c:	2218      	movs	r2, #24
 800093e:	619a      	str	r2, [r3, #24]
	ProcessCAN_attributes.stack_size = 2048 * 4;
 8000940:	4b53      	ldr	r3, [pc, #332]	; (8000a90 <_Z16MX_FREERTOS_Initv+0x168>)
 8000942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000946:	615a      	str	r2, [r3, #20]


	SysMonitor_attributes.priority = (osPriority_t) osPriorityLow;
 8000948:	4b52      	ldr	r3, [pc, #328]	; (8000a94 <_Z16MX_FREERTOS_Initv+0x16c>)
 800094a:	2208      	movs	r2, #8
 800094c:	619a      	str	r2, [r3, #24]
	SysMonitor_attributes.stack_size = 2048 * 4;
 800094e:	4b51      	ldr	r3, [pc, #324]	; (8000a94 <_Z16MX_FREERTOS_Initv+0x16c>)
 8000950:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000954:	615a      	str	r2, [r3, #20]

	UI_attributes.priority = (osPriority_t) osPriorityBelowNormal7;
 8000956:	4b50      	ldr	r3, [pc, #320]	; (8000a98 <_Z16MX_FREERTOS_Initv+0x170>)
 8000958:	2217      	movs	r2, #23
 800095a:	619a      	str	r2, [r3, #24]
	UI_attributes.stack_size = 2048 * 4;
 800095c:	4b4e      	ldr	r3, [pc, #312]	; (8000a98 <_Z16MX_FREERTOS_Initv+0x170>)
 800095e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000962:	615a      	str	r2, [r3, #20]

	ProcessUART_attributes.priority = (osPriority_t) osPriorityNormal;
 8000964:	4b4d      	ldr	r3, [pc, #308]	; (8000a9c <_Z16MX_FREERTOS_Initv+0x174>)
 8000966:	2218      	movs	r2, #24
 8000968:	619a      	str	r2, [r3, #24]
	ProcessUART_attributes.stack_size = 2048 * 4;
 800096a:	4b4c      	ldr	r3, [pc, #304]	; (8000a9c <_Z16MX_FREERTOS_Initv+0x174>)
 800096c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000970:	615a      	str	r2, [r3, #20]

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of BME280_lock */
  BME280_lockHandle = osMutexNew(&BME280_lock_attributes);
 8000972:	484b      	ldr	r0, [pc, #300]	; (8000aa0 <_Z16MX_FREERTOS_Initv+0x178>)
 8000974:	f00a fa5e 	bl	800ae34 <osMutexNew>
 8000978:	4602      	mov	r2, r0
 800097a:	4b4a      	ldr	r3, [pc, #296]	; (8000aa4 <_Z16MX_FREERTOS_Initv+0x17c>)
 800097c:	601a      	str	r2, [r3, #0]

  /* creation of SerialID_lock */
  SerialID_lockHandle = osMutexNew(&SerialID_lock_attributes);
 800097e:	484a      	ldr	r0, [pc, #296]	; (8000aa8 <_Z16MX_FREERTOS_Initv+0x180>)
 8000980:	f00a fa58 	bl	800ae34 <osMutexNew>
 8000984:	4602      	mov	r2, r0
 8000986:	4b49      	ldr	r3, [pc, #292]	; (8000aac <_Z16MX_FREERTOS_Initv+0x184>)
 8000988:	601a      	str	r2, [r3, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of MeasureTimer */
  MeasureTimerHandle = osTimerNew(startMeasurement, osTimerPeriodic, (void*) nullptr, &MeasureTimer_attributes);
 800098a:	4b49      	ldr	r3, [pc, #292]	; (8000ab0 <_Z16MX_FREERTOS_Initv+0x188>)
 800098c:	2200      	movs	r2, #0
 800098e:	2101      	movs	r1, #1
 8000990:	4848      	ldr	r0, [pc, #288]	; (8000ab4 <_Z16MX_FREERTOS_Initv+0x18c>)
 8000992:	f00a f979 	bl	800ac88 <osTimerNew>
 8000996:	4602      	mov	r2, r0
 8000998:	4b47      	ldr	r3, [pc, #284]	; (8000ab8 <_Z16MX_FREERTOS_Initv+0x190>)
 800099a:	601a      	str	r2, [r3, #0]

  /* creation of LEDTimeout */
  LEDTimeoutHandle = osTimerNew(stopLEDs, osTimerOnce, (void*) nullptr, &LEDTimeout_attributes);
 800099c:	4b47      	ldr	r3, [pc, #284]	; (8000abc <_Z16MX_FREERTOS_Initv+0x194>)
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	4847      	ldr	r0, [pc, #284]	; (8000ac0 <_Z16MX_FREERTOS_Initv+0x198>)
 80009a4:	f00a f970 	bl	800ac88 <osTimerNew>
 80009a8:	4602      	mov	r2, r0
 80009aa:	4b46      	ldr	r3, [pc, #280]	; (8000ac4 <_Z16MX_FREERTOS_Initv+0x19c>)
 80009ac:	601a      	str	r2, [r3, #0]

  /* creation of LEDSlow */
  LEDSlowHandle = osTimerNew(LEDSlowToggle, osTimerPeriodic, (void*) nullptr, &LEDSlow_attributes);
 80009ae:	4b46      	ldr	r3, [pc, #280]	; (8000ac8 <_Z16MX_FREERTOS_Initv+0x1a0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	2101      	movs	r1, #1
 80009b4:	4845      	ldr	r0, [pc, #276]	; (8000acc <_Z16MX_FREERTOS_Initv+0x1a4>)
 80009b6:	f00a f967 	bl	800ac88 <osTimerNew>
 80009ba:	4602      	mov	r2, r0
 80009bc:	4b44      	ldr	r3, [pc, #272]	; (8000ad0 <_Z16MX_FREERTOS_Initv+0x1a8>)
 80009be:	601a      	str	r2, [r3, #0]

  /* creation of LEDFast */
  LEDFastHandle = osTimerNew(LEDFastToggle, osTimerPeriodic, (void*) nullptr, &LEDFast_attributes);
 80009c0:	4b44      	ldr	r3, [pc, #272]	; (8000ad4 <_Z16MX_FREERTOS_Initv+0x1ac>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	2101      	movs	r1, #1
 80009c6:	4844      	ldr	r0, [pc, #272]	; (8000ad8 <_Z16MX_FREERTOS_Initv+0x1b0>)
 80009c8:	f00a f95e 	bl	800ac88 <osTimerNew>
 80009cc:	4602      	mov	r2, r0
 80009ce:	4b43      	ldr	r3, [pc, #268]	; (8000adc <_Z16MX_FREERTOS_Initv+0x1b4>)
 80009d0:	601a      	str	r2, [r3, #0]

  /* creation of ButtonTimeout */
  ButtonTimeoutHandle = osTimerNew(ProcessButtons, osTimerOnce, (void*) nullptr, &ButtonTimeout_attributes);
 80009d2:	4b43      	ldr	r3, [pc, #268]	; (8000ae0 <_Z16MX_FREERTOS_Initv+0x1b8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	2100      	movs	r1, #0
 80009d8:	4842      	ldr	r0, [pc, #264]	; (8000ae4 <_Z16MX_FREERTOS_Initv+0x1bc>)
 80009da:	f00a f955 	bl	800ac88 <osTimerNew>
 80009de:	4602      	mov	r2, r0
 80009e0:	4b41      	ldr	r3, [pc, #260]	; (8000ae8 <_Z16MX_FREERTOS_Initv+0x1c0>)
 80009e2:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CANInbox */
  CANInboxHandle = osMessageQueueNew (16, sizeof(uint32_t), &CANInbox_attributes);
 80009e4:	4a41      	ldr	r2, [pc, #260]	; (8000aec <_Z16MX_FREERTOS_Initv+0x1c4>)
 80009e6:	2104      	movs	r1, #4
 80009e8:	2010      	movs	r0, #16
 80009ea:	f00a fabd 	bl	800af68 <osMessageQueueNew>
 80009ee:	4602      	mov	r2, r0
 80009f0:	4b3f      	ldr	r3, [pc, #252]	; (8000af0 <_Z16MX_FREERTOS_Initv+0x1c8>)
 80009f2:	601a      	str	r2, [r3, #0]

  /* creation of CANOutbox */
  CANOutboxHandle = osMessageQueueNew (16, sizeof(uint32_t), &CANOutbox_attributes);
 80009f4:	4a3f      	ldr	r2, [pc, #252]	; (8000af4 <_Z16MX_FREERTOS_Initv+0x1cc>)
 80009f6:	2104      	movs	r1, #4
 80009f8:	2010      	movs	r0, #16
 80009fa:	f00a fab5 	bl	800af68 <osMessageQueueNew>
 80009fe:	4602      	mov	r2, r0
 8000a00:	4b3d      	ldr	r3, [pc, #244]	; (8000af8 <_Z16MX_FREERTOS_Initv+0x1d0>)
 8000a02:	601a      	str	r2, [r3, #0]

  /* creation of UARTOutbox */
  UARTOutboxHandle = osMessageQueueNew (16, sizeof(uint32_t), &UARTOutbox_attributes);
 8000a04:	4a3d      	ldr	r2, [pc, #244]	; (8000afc <_Z16MX_FREERTOS_Initv+0x1d4>)
 8000a06:	2104      	movs	r1, #4
 8000a08:	2010      	movs	r0, #16
 8000a0a:	f00a faad 	bl	800af68 <osMessageQueueNew>
 8000a0e:	4602      	mov	r2, r0
 8000a10:	4b3b      	ldr	r3, [pc, #236]	; (8000b00 <_Z16MX_FREERTOS_Initv+0x1d8>)
 8000a12:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MeasureTask */
  MeasureTaskHandle = osThreadNew(startMeasuring, (void*) nullptr, &MeasureTask_attributes);
 8000a14:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <_Z16MX_FREERTOS_Initv+0x164>)
 8000a16:	2100      	movs	r1, #0
 8000a18:	483a      	ldr	r0, [pc, #232]	; (8000b04 <_Z16MX_FREERTOS_Initv+0x1dc>)
 8000a1a:	f00a f84b 	bl	800aab4 <osThreadNew>
 8000a1e:	4602      	mov	r2, r0
 8000a20:	4b39      	ldr	r3, [pc, #228]	; (8000b08 <_Z16MX_FREERTOS_Initv+0x1e0>)
 8000a22:	601a      	str	r2, [r3, #0]

  /* creation of ProcessCAN */
  ProcessCANHandle = osThreadNew(startCANIO, (void*) nullptr, &ProcessCAN_attributes);
 8000a24:	4a1a      	ldr	r2, [pc, #104]	; (8000a90 <_Z16MX_FREERTOS_Initv+0x168>)
 8000a26:	2100      	movs	r1, #0
 8000a28:	4838      	ldr	r0, [pc, #224]	; (8000b0c <_Z16MX_FREERTOS_Initv+0x1e4>)
 8000a2a:	f00a f843 	bl	800aab4 <osThreadNew>
 8000a2e:	4602      	mov	r2, r0
 8000a30:	4b37      	ldr	r3, [pc, #220]	; (8000b10 <_Z16MX_FREERTOS_Initv+0x1e8>)
 8000a32:	601a      	str	r2, [r3, #0]

  /* creation of SysMonitor */
  SysMonitorHandle = osThreadNew(startMonitoring, (void*) nullptr, &SysMonitor_attributes);
 8000a34:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <_Z16MX_FREERTOS_Initv+0x16c>)
 8000a36:	2100      	movs	r1, #0
 8000a38:	4836      	ldr	r0, [pc, #216]	; (8000b14 <_Z16MX_FREERTOS_Initv+0x1ec>)
 8000a3a:	f00a f83b 	bl	800aab4 <osThreadNew>
 8000a3e:	4602      	mov	r2, r0
 8000a40:	4b35      	ldr	r3, [pc, #212]	; (8000b18 <_Z16MX_FREERTOS_Initv+0x1f0>)
 8000a42:	601a      	str	r2, [r3, #0]

  /* creation of UI */
  UIHandle = osThreadNew(startUI, (void*) nullptr, &UI_attributes);
 8000a44:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <_Z16MX_FREERTOS_Initv+0x170>)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4834      	ldr	r0, [pc, #208]	; (8000b1c <_Z16MX_FREERTOS_Initv+0x1f4>)
 8000a4a:	f00a f833 	bl	800aab4 <osThreadNew>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	4b33      	ldr	r3, [pc, #204]	; (8000b20 <_Z16MX_FREERTOS_Initv+0x1f8>)
 8000a52:	601a      	str	r2, [r3, #0]

  /* creation of ProcessUART */
  ProcessUARTHandle = osThreadNew(startUARTIO, (void*) nullptr, &ProcessUART_attributes);
 8000a54:	4a11      	ldr	r2, [pc, #68]	; (8000a9c <_Z16MX_FREERTOS_Initv+0x174>)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4832      	ldr	r0, [pc, #200]	; (8000b24 <_Z16MX_FREERTOS_Initv+0x1fc>)
 8000a5a:	f00a f82b 	bl	800aab4 <osThreadNew>
 8000a5e:	4602      	mov	r2, r0
 8000a60:	4b31      	ldr	r3, [pc, #196]	; (8000b28 <_Z16MX_FREERTOS_Initv+0x200>)
 8000a62:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of MeasureEvent */
  MeasureEventHandle = osEventFlagsNew(&MeasureEvent_attributes);
 8000a64:	4831      	ldr	r0, [pc, #196]	; (8000b2c <_Z16MX_FREERTOS_Initv+0x204>)
 8000a66:	f00a f993 	bl	800ad90 <osEventFlagsNew>
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	4b30      	ldr	r3, [pc, #192]	; (8000b30 <_Z16MX_FREERTOS_Initv+0x208>)
 8000a6e:	601a      	str	r2, [r3, #0]

  /* creation of LEDEvent */
  LEDEventHandle = osEventFlagsNew(&LEDEvent_attributes);
 8000a70:	4830      	ldr	r0, [pc, #192]	; (8000b34 <_Z16MX_FREERTOS_Initv+0x20c>)
 8000a72:	f00a f98d 	bl	800ad90 <osEventFlagsNew>
 8000a76:	4602      	mov	r2, r0
 8000a78:	4b2f      	ldr	r3, [pc, #188]	; (8000b38 <_Z16MX_FREERTOS_Initv+0x210>)
 8000a7a:	601a      	str	r2, [r3, #0]

  /* creation of ButtonEvent */
  ButtonEventHandle = osEventFlagsNew(&ButtonEvent_attributes);
 8000a7c:	482f      	ldr	r0, [pc, #188]	; (8000b3c <_Z16MX_FREERTOS_Initv+0x214>)
 8000a7e:	f00a f987 	bl	800ad90 <osEventFlagsNew>
 8000a82:	4602      	mov	r2, r0
 8000a84:	4b2e      	ldr	r3, [pc, #184]	; (8000b40 <_Z16MX_FREERTOS_Initv+0x218>)
 8000a86:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000024 	.word	0x20000024
 8000a94:	20000048 	.word	0x20000048
 8000a98:	2000006c 	.word	0x2000006c
 8000a9c:	20000090 	.word	0x20000090
 8000aa0:	0800e880 	.word	0x0800e880
 8000aa4:	20000964 	.word	0x20000964
 8000aa8:	0800e890 	.word	0x0800e890
 8000aac:	20000968 	.word	0x20000968
 8000ab0:	0800e830 	.word	0x0800e830
 8000ab4:	08000ba5 	.word	0x08000ba5
 8000ab8:	20000950 	.word	0x20000950
 8000abc:	0800e840 	.word	0x0800e840
 8000ac0:	08000bb9 	.word	0x08000bb9
 8000ac4:	20000954 	.word	0x20000954
 8000ac8:	0800e850 	.word	0x0800e850
 8000acc:	08000bcd 	.word	0x08000bcd
 8000ad0:	20000958 	.word	0x20000958
 8000ad4:	0800e860 	.word	0x0800e860
 8000ad8:	08000be1 	.word	0x08000be1
 8000adc:	2000095c 	.word	0x2000095c
 8000ae0:	0800e870 	.word	0x0800e870
 8000ae4:	08000bf5 	.word	0x08000bf5
 8000ae8:	20000960 	.word	0x20000960
 8000aec:	0800e7e8 	.word	0x0800e7e8
 8000af0:	20000944 	.word	0x20000944
 8000af4:	0800e800 	.word	0x0800e800
 8000af8:	20000948 	.word	0x20000948
 8000afc:	0800e818 	.word	0x0800e818
 8000b00:	2000094c 	.word	0x2000094c
 8000b04:	08000b45 	.word	0x08000b45
 8000b08:	20000930 	.word	0x20000930
 8000b0c:	08000b55 	.word	0x08000b55
 8000b10:	20000934 	.word	0x20000934
 8000b14:	08000b65 	.word	0x08000b65
 8000b18:	20000938 	.word	0x20000938
 8000b1c:	08000b75 	.word	0x08000b75
 8000b20:	2000093c 	.word	0x2000093c
 8000b24:	08000b95 	.word	0x08000b95
 8000b28:	20000940 	.word	0x20000940
 8000b2c:	0800e8a0 	.word	0x0800e8a0
 8000b30:	2000096c 	.word	0x2000096c
 8000b34:	0800e8b0 	.word	0x0800e8b0
 8000b38:	20000970 	.word	0x20000970
 8000b3c:	0800e8c0 	.word	0x0800e8c0
 8000b40:	20000974 	.word	0x20000974

08000b44 <_Z14startMeasuringPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startMeasuring */
void startMeasuring(void *argument)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMeasuring */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f00a f857 	bl	800ac00 <osDelay>
 8000b52:	e7fb      	b.n	8000b4c <_Z14startMeasuringPv+0x8>

08000b54 <_Z10startCANIOPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startCANIO */
void startCANIO(void *argument)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startCANIO */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f00a f84f 	bl	800ac00 <osDelay>
 8000b62:	e7fb      	b.n	8000b5c <_Z10startCANIOPv+0x8>

08000b64 <_Z15startMonitoringPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMonitoring */
void startMonitoring(void *argument)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMonitoring */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f00a f847 	bl	800ac00 <osDelay>
 8000b72:	e7fb      	b.n	8000b6c <_Z15startMonitoringPv+0x8>

08000b74 <_Z7startUIPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startUI */
void startUI(void *argument)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUI */
  /* Infinite loop */
  for(;;)
  {

  HAL_GPIO_TogglePin(GPIOD, LED_B_Pin|LED_G_Pin|LED_R_Pin);
 8000b7c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b80:	4803      	ldr	r0, [pc, #12]	; (8000b90 <_Z7startUIPv+0x1c>)
 8000b82:	f004 f851 	bl	8004c28 <HAL_GPIO_TogglePin>
    osDelay(1500);
 8000b86:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000b8a:	f00a f839 	bl	800ac00 <osDelay>
  HAL_GPIO_TogglePin(GPIOD, LED_B_Pin|LED_G_Pin|LED_R_Pin);
 8000b8e:	e7f5      	b.n	8000b7c <_Z7startUIPv+0x8>
 8000b90:	48000c00 	.word	0x48000c00

08000b94 <_Z11startUARTIOPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startUARTIO */
void startUARTIO(void *argument)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUARTIO */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f00a f82f 	bl	800ac00 <osDelay>
 8000ba2:	e7fb      	b.n	8000b9c <_Z11startUARTIOPv+0x8>

08000ba4 <_Z16startMeasurementPv>:
  /* USER CODE END startUARTIO */
}

/* startMeasurement function */
void startMeasurement(void *argument)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMeasurement */

  /* USER CODE END startMeasurement */
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <_Z8stopLEDsPv>:

/* stopLEDs function */
void stopLEDs(void *argument)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN stopLEDs */

  /* USER CODE END stopLEDs */
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <_Z13LEDSlowTogglePv>:

/* LEDSlowToggle function */
void LEDSlowToggle(void *argument)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LEDSlowToggle */

  /* USER CODE END LEDSlowToggle */
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <_Z13LEDFastTogglePv>:

/* LEDFastToggle function */
void LEDFastToggle(void *argument)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LEDFastToggle */

  /* USER CODE END LEDFastToggle */
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <_Z14ProcessButtonsPv>:

/* ProcessButtons function */
void ProcessButtons(void *argument)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ProcessButtons */

  /* USER CODE END ProcessButtons */
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c1e:	4b52      	ldr	r3, [pc, #328]	; (8000d68 <MX_GPIO_Init+0x160>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	4a51      	ldr	r2, [pc, #324]	; (8000d68 <MX_GPIO_Init+0x160>)
 8000c24:	f043 0310 	orr.w	r3, r3, #16
 8000c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2a:	4b4f      	ldr	r3, [pc, #316]	; (8000d68 <MX_GPIO_Init+0x160>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	f003 0310 	and.w	r3, r3, #16
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	4b4c      	ldr	r3, [pc, #304]	; (8000d68 <MX_GPIO_Init+0x160>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	4a4b      	ldr	r2, [pc, #300]	; (8000d68 <MX_GPIO_Init+0x160>)
 8000c3c:	f043 0304 	orr.w	r3, r3, #4
 8000c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c42:	4b49      	ldr	r3, [pc, #292]	; (8000d68 <MX_GPIO_Init+0x160>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	4b46      	ldr	r3, [pc, #280]	; (8000d68 <MX_GPIO_Init+0x160>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	4a45      	ldr	r2, [pc, #276]	; (8000d68 <MX_GPIO_Init+0x160>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5a:	4b43      	ldr	r3, [pc, #268]	; (8000d68 <MX_GPIO_Init+0x160>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	4b40      	ldr	r3, [pc, #256]	; (8000d68 <MX_GPIO_Init+0x160>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	4a3f      	ldr	r2, [pc, #252]	; (8000d68 <MX_GPIO_Init+0x160>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c72:	4b3d      	ldr	r3, [pc, #244]	; (8000d68 <MX_GPIO_Init+0x160>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7e:	4b3a      	ldr	r3, [pc, #232]	; (8000d68 <MX_GPIO_Init+0x160>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	4a39      	ldr	r2, [pc, #228]	; (8000d68 <MX_GPIO_Init+0x160>)
 8000c84:	f043 0308 	orr.w	r3, r3, #8
 8000c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8a:	4b37      	ldr	r3, [pc, #220]	; (8000d68 <MX_GPIO_Init+0x160>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	f003 0308 	and.w	r3, r3, #8
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2102      	movs	r1, #2
 8000c9a:	4834      	ldr	r0, [pc, #208]	; (8000d6c <MX_GPIO_Init+0x164>)
 8000c9c:	f003 ff94 	bl	8004bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_B_Pin|LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000ca6:	4832      	ldr	r0, [pc, #200]	; (8000d70 <MX_GPIO_Init+0x168>)
 8000ca8:	f003 ff8e 	bl	8004bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TP13_Pin|TP9_Pin;
 8000cac:	f242 0310 	movw	r3, #8208	; 0x2010
 8000cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	482c      	ldr	r0, [pc, #176]	; (8000d74 <MX_GPIO_Init+0x16c>)
 8000cc2:	f003 fd01 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BME_CS_Pin;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BME_CS_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4823      	ldr	r0, [pc, #140]	; (8000d6c <MX_GPIO_Init+0x164>)
 8000cde:	f003 fcf3 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP33_Pin;
 8000ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TP33_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4820      	ldr	r0, [pc, #128]	; (8000d78 <MX_GPIO_Init+0x170>)
 8000cf8:	f003 fce6 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TP22_Pin|TP23_Pin;
 8000cfc:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4816      	ldr	r0, [pc, #88]	; (8000d6c <MX_GPIO_Init+0x164>)
 8000d12:	f003 fcd9 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin|LED_R_Pin;
 8000d16:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4810      	ldr	r0, [pc, #64]	; (8000d70 <MX_GPIO_Init+0x168>)
 8000d30:	f003 fcca 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_BTN_Pin;
 8000d34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <MX_GPIO_Init+0x174>)
 8000d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_BTN_GPIO_Port, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	4809      	ldr	r0, [pc, #36]	; (8000d70 <MX_GPIO_Init+0x168>)
 8000d4a:	f003 fcbd 	bl	80046c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2105      	movs	r1, #5
 8000d52:	2028      	movs	r0, #40	; 0x28
 8000d54:	f003 f82a 	bl	8003dac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d58:	2028      	movs	r0, #40	; 0x28
 8000d5a:	f003 f853 	bl	8003e04 <HAL_NVIC_EnableIRQ>

}
 8000d5e:	bf00      	nop
 8000d60:	3728      	adds	r7, #40	; 0x28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	48000400 	.word	0x48000400
 8000d70:	48000c00 	.word	0x48000c00
 8000d74:	48000800 	.word	0x48000800
 8000d78:	48001000 	.word	0x48001000
 8000d7c:	10110000 	.word	0x10110000

08000d80 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d86:	4a1c      	ldr	r2, [pc, #112]	; (8000df8 <MX_I2C1_Init+0x78>)
 8000d88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <MX_I2C1_Init+0x7c>)
 8000d8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dba:	480e      	ldr	r0, [pc, #56]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000dbc:	f003 ff80 	bl	8004cc0 <HAL_I2C_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dc6:	f000 f939 	bl	800103c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4809      	ldr	r0, [pc, #36]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000dce:	f004 f93d 	bl	800504c <HAL_I2CEx_ConfigAnalogFilter>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dd8:	f000 f930 	bl	800103c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000de0:	f004 f9aa 	bl	8005138 <HAL_I2CEx_ConfigDigitalFilter>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dea:	f000 f927 	bl	800103c <Error_Handler>
  }

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20033850 	.word	0x20033850
 8000df8:	40005400 	.word	0x40005400
 8000dfc:	2000090e 	.word	0x2000090e

08000e00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a17      	ldr	r2, [pc, #92]	; (8000e7c <HAL_I2C_MspInit+0x7c>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d127      	bne.n	8000e72 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_I2C_MspInit+0x80>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	4a16      	ldr	r2, [pc, #88]	; (8000e80 <HAL_I2C_MspInit+0x80>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_I2C_MspInit+0x80>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e3a:	23c0      	movs	r3, #192	; 0xc0
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3e:	2312      	movs	r3, #18
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e4a:	2304      	movs	r3, #4
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	480b      	ldr	r0, [pc, #44]	; (8000e84 <HAL_I2C_MspInit+0x84>)
 8000e56:	f003 fc37 	bl	80046c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <HAL_I2C_MspInit+0x80>)
 8000e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5e:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <HAL_I2C_MspInit+0x80>)
 8000e60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e64:	6593      	str	r3, [r2, #88]	; 0x58
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_I2C_MspInit+0x80>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	; 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40005400 	.word	0x40005400
 8000e80:	40021000 	.word	0x40021000
 8000e84:	48000400 	.word	0x48000400

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8c:	f000 fc67 	bl	800175e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e90:	f000 f81c 	bl	8000ecc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e94:	f7ff feb8 	bl	8000c08 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e98:	f7ff fd0c 	bl	80008b4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e9c:	f7ff fb30 	bl	8000500 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000ea0:	f7ff fc34 	bl	800070c <MX_CAN1_Init>
  MX_I2C1_Init();
 8000ea4:	f7ff ff6c 	bl	8000d80 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000ea8:	f000 f90e 	bl	80010c8 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000eac:	f000 faf6 	bl	800149c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000eb0:	f000 fb94 	bl	80015dc <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000eb4:	f7ff fcbc 	bl	8000830 <MX_CRC_Init>
  MX_RNG_Init();
 8000eb8:	f000 f8d0 	bl	800105c <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000ebc:	f009 fd8e 	bl	800a9dc <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ec0:	f7ff fd32 	bl	8000928 <_Z16MX_FREERTOS_Initv>
  /* Start scheduler */
  osKernelStart();
 8000ec4:	f009 fdc0 	bl	800aa48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <main+0x40>
	...

08000ecc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b0be      	sub	sp, #248	; 0xf8
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ed6:	2244      	movs	r2, #68	; 0x44
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f00c ffcd 	bl	800de7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	229c      	movs	r2, #156	; 0x9c
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f00c ffbf 	bl	800de7a <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000efc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f00:	f004 f9ae 	bl	8005260 <HAL_PWREx_ControlVoltageScaling>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	bf14      	ite	ne
 8000f0a:	2301      	movne	r3, #1
 8000f0c:	2300      	moveq	r3, #0
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <_Z18SystemClock_Configv+0x4c>
  {
    Error_Handler();
 8000f14:	f000 f892 	bl	800103c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f18:	2310      	movs	r3, #16
 8000f1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f2a:	2360      	movs	r3, #96	; 0x60
 8000f2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f30:	2302      	movs	r3, #2
 8000f32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f36:	2301      	movs	r3, #1
 8000f38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000f42:	2310      	movs	r3, #16
 8000f44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8000f54:	2308      	movs	r3, #8
 8000f56:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f004 fa32 	bl	80053c8 <HAL_RCC_OscConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	bf14      	ite	ne
 8000f6a:	2301      	movne	r3, #1
 8000f6c:	2300      	moveq	r3, #0
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8000f74:	f000 f862 	bl	800103c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f78:	230f      	movs	r3, #15
 8000f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f96:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f004 ff8f 	bl	8005ec0 <HAL_RCC_ClockConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	bf14      	ite	ne
 8000fa8:	2301      	movne	r3, #1
 8000faa:	2300      	moveq	r3, #0
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <_Z18SystemClock_Configv+0xea>
  {
    Error_Handler();
 8000fb2:	f000 f843 	bl	800103c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8000fb6:	4b17      	ldr	r3, [pc, #92]	; (8001014 <_Z18SystemClock_Configv+0x148>)
 8000fb8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fc2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8000fca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000fce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000fda:	2310      	movs	r3, #16
 8000fdc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000fea:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000fee:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f005 fb18 	bl	8006628 <HAL_RCCEx_PeriphCLKConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	bf14      	ite	ne
 8000ffe:	2301      	movne	r3, #1
 8001000:	2300      	moveq	r3, #0
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <_Z18SystemClock_Configv+0x140>
  {
    Error_Handler();
 8001008:	f000 f818 	bl	800103c <Error_Handler>
  }
}
 800100c:	bf00      	nop
 800100e:	37f8      	adds	r7, #248	; 0xf8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	00044041 	.word	0x00044041

08001018 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d101      	bne.n	800102e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800102a:	f000 fbb1 	bl	8001790 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40012c00 	.word	0x40012c00

0800103c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001040:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001042:	e7fe      	b.n	8001042 <Error_Handler+0x6>

08001044 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <MX_RNG_Init+0x24>)
 8001062:	4a08      	ldr	r2, [pc, #32]	; (8001084 <MX_RNG_Init+0x28>)
 8001064:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_RNG_Init+0x24>)
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800106c:	4804      	ldr	r0, [pc, #16]	; (8001080 <MX_RNG_Init+0x24>)
 800106e:	f006 fc17 	bl	80078a0 <HAL_RNG_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001078:	f7ff ffe0 	bl	800103c <Error_Handler>
  }

}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	200338cc 	.word	0x200338cc
 8001084:	50060800 	.word	0x50060800

08001088 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <HAL_RNG_MspInit+0x38>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d10b      	bne.n	80010b2 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_RNG_MspInit+0x3c>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	4a09      	ldr	r2, [pc, #36]	; (80010c4 <HAL_RNG_MspInit+0x3c>)
 80010a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <HAL_RNG_MspInit+0x3c>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	50060800 	.word	0x50060800
 80010c4:	40021000 	.word	0x40021000

080010c8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <MX_SPI1_Init+0x74>)
 80010ce:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <MX_SPI1_Init+0x78>)
 80010d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010d2:	4b1a      	ldr	r3, [pc, #104]	; (800113c <MX_SPI1_Init+0x74>)
 80010d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <MX_SPI1_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <MX_SPI1_Init+0x74>)
 80010e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <MX_SPI1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <MX_SPI1_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_SPI1_Init+0x74>)
 80010f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MX_SPI1_Init+0x74>)
 80010fe:	2208      	movs	r2, #8
 8001100:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_SPI1_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_SPI1_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <MX_SPI1_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_SPI1_Init+0x74>)
 8001116:	2207      	movs	r2, #7
 8001118:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <MX_SPI1_Init+0x74>)
 800111c:	2200      	movs	r2, #0
 800111e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_SPI1_Init+0x74>)
 8001122:	2208      	movs	r2, #8
 8001124:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <MX_SPI1_Init+0x74>)
 8001128:	f006 fc58 	bl	80079dc <HAL_SPI_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001132:	f7ff ff83 	bl	800103c <Error_Handler>
  }

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200338f0 	.word	0x200338f0
 8001140:	40013000 	.word	0x40013000

08001144 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <HAL_SPI_MspInit+0x8c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d130      	bne.n	80011c8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <HAL_SPI_MspInit+0x90>)
 8001168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800116a:	4a1a      	ldr	r2, [pc, #104]	; (80011d4 <HAL_SPI_MspInit+0x90>)
 800116c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001170:	6613      	str	r3, [r2, #96]	; 0x60
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_SPI_MspInit+0x90>)
 8001174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001176:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_SPI_MspInit+0x90>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <HAL_SPI_MspInit+0x90>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_SPI_MspInit+0x90>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001196:	23e0      	movs	r3, #224	; 0xe0
 8001198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011a6:	2305      	movs	r3, #5
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b4:	f003 fa88 	bl	80046c8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2105      	movs	r1, #5
 80011bc:	2023      	movs	r0, #35	; 0x23
 80011be:	f002 fdf5 	bl	8003dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80011c2:	2023      	movs	r0, #35	; 0x23
 80011c4:	f002 fe1e 	bl	8003e04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40013000 	.word	0x40013000
 80011d4:	40021000 	.word	0x40021000

080011d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <HAL_MspInit+0x4c>)
 80011e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e2:	4a10      	ldr	r2, [pc, #64]	; (8001224 <HAL_MspInit+0x4c>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_MspInit+0x4c>)
 80011ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_MspInit+0x4c>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <HAL_MspInit+0x4c>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001200:	6593      	str	r3, [r2, #88]	; 0x58
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_MspInit+0x4c>)
 8001204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	210f      	movs	r1, #15
 8001212:	f06f 0001 	mvn.w	r0, #1
 8001216:	f002 fdc9 	bl	8003dac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000

08001228 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08c      	sub	sp, #48	; 0x30
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	2019      	movs	r0, #25
 800123e:	f002 fdb5 	bl	8003dac <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001242:	2019      	movs	r0, #25
 8001244:	f002 fdde 	bl	8003e04 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001248:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <HAL_InitTick+0x9c>)
 800124a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124c:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <HAL_InitTick+0x9c>)
 800124e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001252:	6613      	str	r3, [r2, #96]	; 0x60
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <HAL_InitTick+0x9c>)
 8001256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001260:	f107 0210 	add.w	r2, r7, #16
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f005 f8d8 	bl	8006420 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001270:	f005 f8c0 	bl	80063f4 <HAL_RCC_GetPCLK2Freq>
 8001274:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001278:	4a13      	ldr	r2, [pc, #76]	; (80012c8 <HAL_InitTick+0xa0>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	0c9b      	lsrs	r3, r3, #18
 8001280:	3b01      	subs	r3, #1
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <HAL_InitTick+0xa4>)
 8001286:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <HAL_InitTick+0xa8>)
 8001288:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <HAL_InitTick+0xa4>)
 800128c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001290:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <HAL_InitTick+0xa4>)
 8001294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001296:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <HAL_InitTick+0xa4>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <HAL_InitTick+0xa4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80012a4:	4809      	ldr	r0, [pc, #36]	; (80012cc <HAL_InitTick+0xa4>)
 80012a6:	f006 ff23 	bl	80080f0 <HAL_TIM_Base_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d104      	bne.n	80012ba <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80012b0:	4806      	ldr	r0, [pc, #24]	; (80012cc <HAL_InitTick+0xa4>)
 80012b2:	f007 f817 	bl	80082e4 <HAL_TIM_Base_Start_IT>
 80012b6:	4603      	mov	r3, r0
 80012b8:	e000      	b.n	80012bc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3730      	adds	r7, #48	; 0x30
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40021000 	.word	0x40021000
 80012c8:	431bde83 	.word	0x431bde83
 80012cc:	2003397c 	.word	0x2003397c
 80012d0:	40012c00 	.word	0x40012c00

080012d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <NMI_Handler+0x4>

080012da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <HardFault_Handler+0x4>

080012e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <MemManage_Handler+0x4>

080012e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <BusFault_Handler+0x4>

080012ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <UsageFault_Handler+0x4>

080012f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <DMA1_Channel1_IRQHandler+0x10>)
 8001306:	f003 f8ce 	bl	80044a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20033768 	.word	0x20033768

08001314 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <ADC1_IRQHandler+0x10>)
 800131a:	f000 ffc3 	bl	80022a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200336d4 	.word	0x200336d4

08001328 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <CAN1_TX_IRQHandler+0x10>)
 800132e:	f002 fa2d 	bl	800378c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200337c8 	.word	0x200337c8

0800133c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <CAN1_RX0_IRQHandler+0x10>)
 8001342:	f002 fa23 	bl	800378c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200337c8 	.word	0x200337c8

08001350 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <CAN1_RX1_IRQHandler+0x10>)
 8001356:	f002 fa19 	bl	800378c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200337c8 	.word	0x200337c8

08001364 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800136a:	f007 f95f 	bl	800862c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2003397c 	.word	0x2003397c

08001378 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <TIM3_IRQHandler+0x10>)
 800137e:	f007 f955 	bl	800862c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20033a38 	.word	0x20033a38

0800138c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <SPI1_IRQHandler+0x10>)
 8001392:	f006 fd45 	bl	8007e20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200338f0 	.word	0x200338f0

080013a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <USART1_IRQHandler+0x10>)
 80013a6:	f008 f8b5 	bl	8009514 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20033af4 	.word	0x20033af4

080013b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80013b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013bc:	f003 fc5c 	bl	8004c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013cc:	4a14      	ldr	r2, [pc, #80]	; (8001420 <_sbrk+0x5c>)
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <_sbrk+0x60>)
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <_sbrk+0x64>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <_sbrk+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d207      	bcs.n	8001404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f4:	f00c fd0c 	bl	800de10 <__errno>
 80013f8:	4602      	mov	r2, r0
 80013fa:	230c      	movs	r3, #12
 80013fc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001402:	e009      	b.n	8001418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <_sbrk+0x64>)
 8001414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200a0000 	.word	0x200a0000
 8001424:	00000400 	.word	0x00000400
 8001428:	20000978 	.word	0x20000978
 800142c:	20033c08 	.word	0x20033c08

08001430 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <SystemInit+0x64>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143a:	4a16      	ldr	r2, [pc, #88]	; (8001494 <SystemInit+0x64>)
 800143c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <SystemInit+0x68>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a13      	ldr	r2, [pc, #76]	; (8001498 <SystemInit+0x68>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <SystemInit+0x68>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <SystemInit+0x68>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a0f      	ldr	r2, [pc, #60]	; (8001498 <SystemInit+0x68>)
 800145c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001460:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001464:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <SystemInit+0x68>)
 8001468:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800146c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <SystemInit+0x68>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a09      	ldr	r2, [pc, #36]	; (8001498 <SystemInit+0x68>)
 8001474:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001478:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <SystemInit+0x68>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <SystemInit+0x64>)
 8001482:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001486:	609a      	str	r2, [r3, #8]
#endif
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00
 8001498:	40021000 	.word	0x40021000

0800149c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <MX_TIM3_Init+0xa0>)
 80014bc:	4a20      	ldr	r2, [pc, #128]	; (8001540 <MX_TIM3_Init+0xa4>)
 80014be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014c0:	4b1e      	ldr	r3, [pc, #120]	; (800153c <MX_TIM3_Init+0xa0>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c6:	4b1d      	ldr	r3, [pc, #116]	; (800153c <MX_TIM3_Init+0xa0>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014cc:	4b1b      	ldr	r3, [pc, #108]	; (800153c <MX_TIM3_Init+0xa0>)
 80014ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <MX_TIM3_Init+0xa0>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <MX_TIM3_Init+0xa0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80014e0:	4816      	ldr	r0, [pc, #88]	; (800153c <MX_TIM3_Init+0xa0>)
 80014e2:	f006 ffb3 	bl	800844c <HAL_TIM_IC_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80014ec:	f7ff fda6 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	480f      	ldr	r0, [pc, #60]	; (800153c <MX_TIM3_Init+0xa0>)
 8001500:	f007 fdde 	bl	80090c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800150a:	f7ff fd97 	bl	800103c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001512:	2301      	movs	r3, #1
 8001514:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2200      	movs	r2, #0
 8001522:	4619      	mov	r1, r3
 8001524:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_TIM3_Init+0xa0>)
 8001526:	f007 f9c3 	bl	80088b0 <HAL_TIM_IC_ConfigChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001530:	f7ff fd84 	bl	800103c <Error_Handler>
  }

}
 8001534:	bf00      	nop
 8001536:	3720      	adds	r7, #32
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20033a38 	.word	0x20033a38
 8001540:	40000400 	.word	0x40000400

08001544 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a1b      	ldr	r2, [pc, #108]	; (80015d0 <HAL_TIM_IC_MspInit+0x8c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d12f      	bne.n	80015c6 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <HAL_TIM_IC_MspInit+0x90>)
 8001568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156a:	4a1a      	ldr	r2, [pc, #104]	; (80015d4 <HAL_TIM_IC_MspInit+0x90>)
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	6593      	str	r3, [r2, #88]	; 0x58
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <HAL_TIM_IC_MspInit+0x90>)
 8001574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_TIM_IC_MspInit+0x90>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <HAL_TIM_IC_MspInit+0x90>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_TIM_IC_MspInit+0x90>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Wind_SPD_Pin;
 8001596:	2340      	movs	r3, #64	; 0x40
 8001598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015a6:	2302      	movs	r3, #2
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Wind_SPD_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4809      	ldr	r0, [pc, #36]	; (80015d8 <HAL_TIM_IC_MspInit+0x94>)
 80015b2:	f003 f889 	bl	80046c8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2105      	movs	r1, #5
 80015ba:	201d      	movs	r0, #29
 80015bc:	f002 fbf6 	bl	8003dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015c0:	201d      	movs	r0, #29
 80015c2:	f002 fc1f 	bl	8003e04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80015c6:	bf00      	nop
 80015c8:	3728      	adds	r7, #40	; 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40000400 	.word	0x40000400
 80015d4:	40021000 	.word	0x40021000
 80015d8:	48000800 	.word	0x48000800

080015dc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80015e0:	4b22      	ldr	r3, [pc, #136]	; (800166c <MX_USART1_UART_Init+0x90>)
 80015e2:	4a23      	ldr	r2, [pc, #140]	; (8001670 <MX_USART1_UART_Init+0x94>)
 80015e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015e6:	4b21      	ldr	r3, [pc, #132]	; (800166c <MX_USART1_UART_Init+0x90>)
 80015e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <MX_USART1_UART_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015f4:	4b1d      	ldr	r3, [pc, #116]	; (800166c <MX_USART1_UART_Init+0x90>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <MX_USART1_UART_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <MX_USART1_UART_Init+0x90>)
 8001602:	220c      	movs	r2, #12
 8001604:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <MX_USART1_UART_Init+0x90>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <MX_USART1_UART_Init+0x90>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001612:	4b16      	ldr	r3, [pc, #88]	; (800166c <MX_USART1_UART_Init+0x90>)
 8001614:	2200      	movs	r2, #0
 8001616:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <MX_USART1_UART_Init+0x90>)
 800161a:	2200      	movs	r2, #0
 800161c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <MX_USART1_UART_Init+0x90>)
 8001620:	2200      	movs	r2, #0
 8001622:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001624:	4811      	ldr	r0, [pc, #68]	; (800166c <MX_USART1_UART_Init+0x90>)
 8001626:	f007 febb 	bl	80093a0 <HAL_UART_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001630:	f7ff fd04 	bl	800103c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001634:	2100      	movs	r1, #0
 8001636:	480d      	ldr	r0, [pc, #52]	; (800166c <MX_USART1_UART_Init+0x90>)
 8001638:	f009 f848 	bl	800a6cc <HAL_UARTEx_SetTxFifoThreshold>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001642:	f7ff fcfb 	bl	800103c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001646:	2100      	movs	r1, #0
 8001648:	4808      	ldr	r0, [pc, #32]	; (800166c <MX_USART1_UART_Init+0x90>)
 800164a:	f009 f8cb 	bl	800a7e4 <HAL_UARTEx_SetRxFifoThreshold>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001654:	f7ff fcf2 	bl	800103c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001658:	4804      	ldr	r0, [pc, #16]	; (800166c <MX_USART1_UART_Init+0x90>)
 800165a:	f008 ffcf 	bl	800a5fc <HAL_UARTEx_DisableFifoMode>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001664:	f7ff fcea 	bl	800103c <Error_Handler>
  }

}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20033af4 	.word	0x20033af4
 8001670:	40013800 	.word	0x40013800

08001674 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <HAL_UART_MspInit+0x90>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d131      	bne.n	80016fa <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <HAL_UART_MspInit+0x94>)
 8001698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169a:	4a1b      	ldr	r2, [pc, #108]	; (8001708 <HAL_UART_MspInit+0x94>)
 800169c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a0:	6613      	str	r3, [r2, #96]	; 0x60
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_UART_MspInit+0x94>)
 80016a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	4b16      	ldr	r3, [pc, #88]	; (8001708 <HAL_UART_MspInit+0x94>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	4a15      	ldr	r2, [pc, #84]	; (8001708 <HAL_UART_MspInit+0x94>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <HAL_UART_MspInit+0x94>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016d8:	2307      	movs	r3, #7
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e6:	f002 ffef 	bl	80046c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2105      	movs	r1, #5
 80016ee:	2025      	movs	r0, #37	; 0x25
 80016f0:	f002 fb5c 	bl	8003dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016f4:	2025      	movs	r0, #37	; 0x25
 80016f6:	f002 fb85 	bl	8003e04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016fa:	bf00      	nop
 80016fc:	3728      	adds	r7, #40	; 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40013800 	.word	0x40013800
 8001708:	40021000 	.word	0x40021000

0800170c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800170c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001744 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001710:	f7ff fe8e 	bl	8001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001714:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001716:	e003      	b.n	8001720 <LoopCopyDataInit>

08001718 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800171a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800171c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800171e:	3104      	adds	r1, #4

08001720 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001720:	480a      	ldr	r0, [pc, #40]	; (800174c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001724:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001726:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001728:	d3f6      	bcc.n	8001718 <CopyDataInit>
	ldr	r2, =_sbss
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <LoopForever+0x12>)
	b	LoopFillZerobss
 800172c:	e002      	b.n	8001734 <LoopFillZerobss>

0800172e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800172e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001730:	f842 3b04 	str.w	r3, [r2], #4

08001734 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <LoopForever+0x16>)
	cmp	r2, r3
 8001736:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001738:	d3f9      	bcc.n	800172e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800173a:	f00c fb6f 	bl	800de1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800173e:	f7ff fba3 	bl	8000e88 <main>

08001742 <LoopForever>:

LoopForever:
    b LoopForever
 8001742:	e7fe      	b.n	8001742 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001744:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001748:	0800e948 	.word	0x0800e948
	ldr	r0, =_sdata
 800174c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001750:	20000914 	.word	0x20000914
	ldr	r2, =_sbss
 8001754:	20000914 	.word	0x20000914
	ldr	r3, = _ebss
 8001758:	20033c08 	.word	0x20033c08

0800175c <CAN1_SCE_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800175c:	e7fe      	b.n	800175c <CAN1_SCE_IRQHandler>

0800175e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001768:	2003      	movs	r0, #3
 800176a:	f002 faff 	bl	8003d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800176e:	2000      	movs	r0, #0
 8001770:	f7ff fd5a 	bl	8001228 <HAL_InitTick>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d002      	beq.n	8001780 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	71fb      	strb	r3, [r7, #7]
 800177e:	e001      	b.n	8001784 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001780:	f7ff fd2a 	bl	80011d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001784:	79fb      	ldrb	r3, [r7, #7]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_IncTick+0x20>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_IncTick+0x24>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <HAL_IncTick+0x24>)
 80017a2:	6013      	str	r3, [r2, #0]
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	200000bc 	.word	0x200000bc
 80017b4:	20033bb4 	.word	0x20033bb4

080017b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return uwTick;
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <HAL_GetTick+0x14>)
 80017be:	681b      	ldr	r3, [r3, #0]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20033bb4 	.word	0x20033bb4

080017d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	431a      	orrs	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	609a      	str	r2, [r3, #8]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	609a      	str	r2, [r3, #8]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <LL_ADC_GetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_10B
  *         @arg @ref LL_ADC_RESOLUTION_8B
  *         @arg @ref LL_ADC_RESOLUTION_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	f003 0318 	and.w	r3, r3, #24
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001854:	b480      	push	{r7}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3360      	adds	r3, #96	; 0x60
 8001866:	461a      	mov	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <LL_ADC_SetOffset+0x44>)
 8001876:	4013      	ands	r3, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	4313      	orrs	r3, r2
 8001884:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800188c:	bf00      	nop
 800188e:	371c      	adds	r7, #28
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	03fff000 	.word	0x03fff000

0800189c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3360      	adds	r3, #96	; 0x60
 80018aa:	461a      	mov	r2, r3
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b087      	sub	sp, #28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	3360      	adds	r3, #96	; 0x60
 80018d8:	461a      	mov	r2, r3
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	431a      	orrs	r2, r3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018f2:	bf00      	nop
 80018f4:	371c      	adds	r7, #28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	615a      	str	r2, [r3, #20]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800194a:	b480      	push	{r7}
 800194c:	b087      	sub	sp, #28
 800194e:	af00      	add	r7, sp, #0
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	3330      	adds	r3, #48	; 0x30
 800195a:	461a      	mov	r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	0a1b      	lsrs	r3, r3, #8
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	4413      	add	r3, r2
 8001968:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	211f      	movs	r1, #31
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	401a      	ands	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	0e9b      	lsrs	r3, r3, #26
 8001982:	f003 011f 	and.w	r1, r3, #31
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	f003 031f 	and.w	r3, r3, #31
 800198c:	fa01 f303 	lsl.w	r3, r1, r3
 8001990:	431a      	orrs	r2, r3
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001996:	bf00      	nop
 8001998:	371c      	adds	r7, #28
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	3314      	adds	r3, #20
 80019d8:	461a      	mov	r2, r3
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	0e5b      	lsrs	r3, r3, #25
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	4413      	add	r3, r2
 80019e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	0d1b      	lsrs	r3, r3, #20
 80019f0:	f003 031f 	and.w	r3, r3, #31
 80019f4:	2107      	movs	r1, #7
 80019f6:	fa01 f303 	lsl.w	r3, r1, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	401a      	ands	r2, r3
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	0d1b      	lsrs	r3, r3, #20
 8001a02:	f003 031f 	and.w	r3, r3, #31
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a12:	bf00      	nop
 8001a14:	371c      	adds	r7, #28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f003 0318 	and.w	r3, r3, #24
 8001a42:	4908      	ldr	r1, [pc, #32]	; (8001a64 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a44:	40d9      	lsrs	r1, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	400b      	ands	r3, r1
 8001a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a56:	bf00      	nop
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	0007ffff 	.word	0x0007ffff

08001a68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6093      	str	r3, [r2, #8]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001aa0:	d101      	bne.n	8001aa6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ac4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ac8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001af0:	d101      	bne.n	8001af6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <LL_ADC_IsEnabled+0x18>
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e000      	b.n	8001b1e <LL_ADC_IsEnabled+0x1a>
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d101      	bne.n	8001b42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d101      	bne.n	8001b68 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e37b      	b.n	800228a <HAL_ADC_Init+0x712>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a9e      	ldr	r2, [pc, #632]	; (8001e10 <HAL_ADC_Init+0x298>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d004      	beq.n	8001ba6 <HAL_ADC_Init+0x2e>
 8001b9c:	f240 11a1 	movw	r1, #417	; 0x1a1
 8001ba0:	489c      	ldr	r0, [pc, #624]	; (8001e14 <HAL_ADC_Init+0x29c>)
 8001ba2:	f7ff fa4f 	bl	8001044 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bae:	d049      	beq.n	8001c44 <HAL_ADC_Init+0xcc>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bb8:	d044      	beq.n	8001c44 <HAL_ADC_Init+0xcc>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001bc2:	d03f      	beq.n	8001c44 <HAL_ADC_Init+0xcc>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d03b      	beq.n	8001c44 <HAL_ADC_Init+0xcc>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001bd4:	d036      	beq.n	8001c44 <HAL_ADC_Init+0xcc>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001bde:	d031      	beq.n	8001c44 <HAL_ADC_Init+0xcc>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001be8:	d02c      	beq.n	8001c44 <HAL_ADC_Init+0xcc>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bf2:	d027      	beq.n	8001c44 <HAL_ADC_Init+0xcc>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001bfc:	d022      	beq.n	8001c44 <HAL_ADC_Init+0xcc>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001c06:	d01d      	beq.n	8001c44 <HAL_ADC_Init+0xcc>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001c10:	d018      	beq.n	8001c44 <HAL_ADC_Init+0xcc>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c1a:	d013      	beq.n	8001c44 <HAL_ADC_Init+0xcc>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001c24:	d00e      	beq.n	8001c44 <HAL_ADC_Init+0xcc>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001c2e:	d009      	beq.n	8001c44 <HAL_ADC_Init+0xcc>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001c38:	d004      	beq.n	8001c44 <HAL_ADC_Init+0xcc>
 8001c3a:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8001c3e:	4875      	ldr	r0, [pc, #468]	; (8001e14 <HAL_ADC_Init+0x29c>)
 8001c40:	f7ff fa00 	bl	8001044 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d010      	beq.n	8001c6e <HAL_ADC_Init+0xf6>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d00c      	beq.n	8001c6e <HAL_ADC_Init+0xf6>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b10      	cmp	r3, #16
 8001c5a:	d008      	beq.n	8001c6e <HAL_ADC_Init+0xf6>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b18      	cmp	r3, #24
 8001c62:	d004      	beq.n	8001c6e <HAL_ADC_Init+0xf6>
 8001c64:	f240 11a3 	movw	r1, #419	; 0x1a3
 8001c68:	486a      	ldr	r0, [pc, #424]	; (8001e14 <HAL_ADC_Init+0x29c>)
 8001c6a:	f7ff f9eb 	bl	8001044 <assert_failed>
#if defined(ADC_CFGR_DFSDMCFG) &&defined(DFSDM1_Channel0)
  assert_param(IS_ADC_DFSDMCFG_MODE(hadc));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d008      	beq.n	8001c88 <HAL_ADC_Init+0x110>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d004      	beq.n	8001c88 <HAL_ADC_Init+0x110>
 8001c7e:	f240 11a5 	movw	r1, #421	; 0x1a5
 8001c82:	4864      	ldr	r0, [pc, #400]	; (8001e14 <HAL_ADC_Init+0x29c>)
 8001c84:	f7ff f9de 	bl	8001044 <assert_failed>
#endif
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d008      	beq.n	8001ca2 <HAL_ADC_Init+0x12a>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	d004      	beq.n	8001ca2 <HAL_ADC_Init+0x12a>
 8001c98:	f240 11a7 	movw	r1, #423	; 0x1a7
 8001c9c:	485d      	ldr	r0, [pc, #372]	; (8001e14 <HAL_ADC_Init+0x29c>)
 8001c9e:	f7ff f9d1 	bl	8001044 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d008      	beq.n	8001cbc <HAL_ADC_Init+0x144>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d004      	beq.n	8001cbc <HAL_ADC_Init+0x144>
 8001cb2:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8001cb6:	4857      	ldr	r0, [pc, #348]	; (8001e14 <HAL_ADC_Init+0x29c>)
 8001cb8:	f7ff f9c4 	bl	8001044 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	7e5b      	ldrb	r3, [r3, #25]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d008      	beq.n	8001cd6 <HAL_ADC_Init+0x15e>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	7e5b      	ldrb	r3, [r3, #25]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d004      	beq.n	8001cd6 <HAL_ADC_Init+0x15e>
 8001ccc:	f240 11a9 	movw	r1, #425	; 0x1a9
 8001cd0:	4850      	ldr	r0, [pc, #320]	; (8001e14 <HAL_ADC_Init+0x29c>)
 8001cd2:	f7ff f9b7 	bl	8001044 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d013      	beq.n	8001d06 <HAL_ADC_Init+0x18e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce6:	d00e      	beq.n	8001d06 <HAL_ADC_Init+0x18e>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cf0:	d009      	beq.n	8001d06 <HAL_ADC_Init+0x18e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001cfa:	d004      	beq.n	8001d06 <HAL_ADC_Init+0x18e>
 8001cfc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001d00:	4844      	ldr	r0, [pc, #272]	; (8001e14 <HAL_ADC_Init+0x29c>)
 8001d02:	f7ff f99f 	bl	8001044 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc, hadc->Init.ExternalTrigConv));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d0e:	d053      	beq.n	8001db8 <HAL_ADC_Init+0x240>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d14:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 8001d18:	d04e      	beq.n	8001db8 <HAL_ADC_Init+0x240>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8001d22:	d049      	beq.n	8001db8 <HAL_ADC_Init+0x240>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	f5b3 6f98 	cmp.w	r3, #1216	; 0x4c0
 8001d2c:	d044      	beq.n	8001db8 <HAL_ADC_Init+0x240>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d32:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001d36:	d03f      	beq.n	8001db8 <HAL_ADC_Init+0x240>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3c:	f5b3 6fa8 	cmp.w	r3, #1344	; 0x540
 8001d40:	d03a      	beq.n	8001db8 <HAL_ADC_Init+0x240>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d46:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8001d4a:	d035      	beq.n	8001db8 <HAL_ADC_Init+0x240>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d50:	f5b3 6fb8 	cmp.w	r3, #1472	; 0x5c0
 8001d54:	d030      	beq.n	8001db8 <HAL_ADC_Init+0x240>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001d5e:	d02b      	beq.n	8001db8 <HAL_ADC_Init+0x240>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001d68:	d026      	beq.n	8001db8 <HAL_ADC_Init+0x240>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8001d72:	d021      	beq.n	8001db8 <HAL_ADC_Init+0x240>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d78:	f5b3 6fd8 	cmp.w	r3, #1728	; 0x6c0
 8001d7c:	d01c      	beq.n	8001db8 <HAL_ADC_Init+0x240>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001d86:	d017      	beq.n	8001db8 <HAL_ADC_Init+0x240>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	f5b3 6fe8 	cmp.w	r3, #1856	; 0x740
 8001d90:	d012      	beq.n	8001db8 <HAL_ADC_Init+0x240>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d96:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8001d9a:	d00d      	beq.n	8001db8 <HAL_ADC_Init+0x240>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da0:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 8001da4:	d008      	beq.n	8001db8 <HAL_ADC_Init+0x240>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d004      	beq.n	8001db8 <HAL_ADC_Init+0x240>
 8001dae:	f240 11ab 	movw	r1, #427	; 0x1ab
 8001db2:	4818      	ldr	r0, [pc, #96]	; (8001e14 <HAL_ADC_Init+0x29c>)
 8001db4:	f7ff f946 	bl	8001044 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <HAL_ADC_Init+0x25e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d004      	beq.n	8001dd6 <HAL_ADC_Init+0x25e>
 8001dcc:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001dd0:	4810      	ldr	r0, [pc, #64]	; (8001e14 <HAL_ADC_Init+0x29c>)
 8001dd2:	f7ff f937 	bl	8001044 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d008      	beq.n	8001df0 <HAL_ADC_Init+0x278>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d004      	beq.n	8001df0 <HAL_ADC_Init+0x278>
 8001de6:	f240 11ad 	movw	r1, #429	; 0x1ad
 8001dea:	480a      	ldr	r0, [pc, #40]	; (8001e14 <HAL_ADC_Init+0x29c>)
 8001dec:	f7ff f92a 	bl	8001044 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00f      	beq.n	8001e18 <HAL_ADC_Init+0x2a0>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e00:	d00a      	beq.n	8001e18 <HAL_ADC_Init+0x2a0>
 8001e02:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8001e06:	4803      	ldr	r0, [pc, #12]	; (8001e14 <HAL_ADC_Init+0x29c>)
 8001e08:	f7ff f91c 	bl	8001044 <assert_failed>
 8001e0c:	e004      	b.n	8001e18 <HAL_ADC_Init+0x2a0>
 8001e0e:	bf00      	nop
 8001e10:	50040000 	.word	0x50040000
 8001e14:	0800e384 	.word	0x0800e384
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7e1b      	ldrb	r3, [r3, #24]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d008      	beq.n	8001e32 <HAL_ADC_Init+0x2ba>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	7e1b      	ldrb	r3, [r3, #24]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d004      	beq.n	8001e32 <HAL_ADC_Init+0x2ba>
 8001e28:	f240 11af 	movw	r1, #431	; 0x1af
 8001e2c:	4855      	ldr	r0, [pc, #340]	; (8001f84 <HAL_ADC_Init+0x40c>)
 8001e2e:	f7ff f909 	bl	8001044 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d009      	beq.n	8001e50 <HAL_ADC_Init+0x2d8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d004      	beq.n	8001e50 <HAL_ADC_Init+0x2d8>
 8001e46:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8001e4a:	484e      	ldr	r0, [pc, #312]	; (8001f84 <HAL_ADC_Init+0x40c>)
 8001e4c:	f7ff f8fa 	bl	8001044 <assert_failed>

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d02d      	beq.n	8001eb4 <HAL_ADC_Init+0x33c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_ADC_Init+0x2f0>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	2b10      	cmp	r3, #16
 8001e66:	d904      	bls.n	8001e72 <HAL_ADC_Init+0x2fa>
 8001e68:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8001e6c:	4845      	ldr	r0, [pc, #276]	; (8001f84 <HAL_ADC_Init+0x40c>)
 8001e6e:	f7ff f8e9 	bl	8001044 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d009      	beq.n	8001e90 <HAL_ADC_Init+0x318>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d004      	beq.n	8001e90 <HAL_ADC_Init+0x318>
 8001e86:	f240 11b5 	movw	r1, #437	; 0x1b5
 8001e8a:	483e      	ldr	r0, [pc, #248]	; (8001f84 <HAL_ADC_Init+0x40c>)
 8001e8c:	f7ff f8da 	bl	8001044 <assert_failed>

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d10c      	bne.n	8001eb4 <HAL_ADC_Init+0x33c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_ADC_Init+0x332>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d904      	bls.n	8001eb4 <HAL_ADC_Init+0x33c>
 8001eaa:	f240 11b9 	movw	r1, #441	; 0x1b9
 8001eae:	4835      	ldr	r0, [pc, #212]	; (8001f84 <HAL_ADC_Init+0x40c>)
 8001eb0:	f7ff f8c8 	bl	8001044 <assert_failed>
    }
  }

  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d108      	bne.n	8001ed0 <HAL_ADC_Init+0x358>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7e5b      	ldrb	r3, [r3, #25]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d104      	bne.n	8001ed0 <HAL_ADC_Init+0x358>
 8001ec6:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8001eca:	482e      	ldr	r0, [pc, #184]	; (8001f84 <HAL_ADC_Init+0x40c>)
 8001ecc:	f7ff f8ba 	bl	8001044 <assert_failed>

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d132      	bne.n	8001f3e <HAL_ADC_Init+0x3c6>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a2b      	ldr	r2, [pc, #172]	; (8001f88 <HAL_ADC_Init+0x410>)
 8001edc:	669a      	str	r2, [r3, #104]	; 0x68
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a2a      	ldr	r2, [pc, #168]	; (8001f8c <HAL_ADC_Init+0x414>)
 8001ee2:	66da      	str	r2, [r3, #108]	; 0x6c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a2a      	ldr	r2, [pc, #168]	; (8001f90 <HAL_ADC_Init+0x418>)
 8001ee8:	671a      	str	r2, [r3, #112]	; 0x70
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a29      	ldr	r2, [pc, #164]	; (8001f94 <HAL_ADC_Init+0x41c>)
 8001eee:	675a      	str	r2, [r3, #116]	; 0x74
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a29      	ldr	r2, [pc, #164]	; (8001f98 <HAL_ADC_Init+0x420>)
 8001ef4:	679a      	str	r2, [r3, #120]	; 0x78
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a28      	ldr	r2, [pc, #160]	; (8001f9c <HAL_ADC_Init+0x424>)
 8001efa:	67da      	str	r2, [r3, #124]	; 0x7c
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a28      	ldr	r2, [pc, #160]	; (8001fa0 <HAL_ADC_Init+0x428>)
 8001f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a27      	ldr	r2, [pc, #156]	; (8001fa4 <HAL_ADC_Init+0x42c>)
 8001f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a26      	ldr	r2, [pc, #152]	; (8001fa8 <HAL_ADC_Init+0x430>)
 8001f10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (hadc->MspInitCallback == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d103      	bne.n	8001f26 <HAL_ADC_Init+0x3ae>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a22      	ldr	r2, [pc, #136]	; (8001fac <HAL_ADC_Init+0x434>)
 8001f22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fda2 	bl	8001a8c <LL_ADC_IsDeepPowerDownEnabled>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d004      	beq.n	8001f58 <HAL_ADC_Init+0x3e0>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fd88 	bl	8001a68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fdbd 	bl	8001adc <LL_ADC_IsInternalRegulatorEnabled>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d12d      	bne.n	8001fc4 <HAL_ADC_Init+0x44c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fda1 	bl	8001ab4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001f72:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_ADC_Init+0x438>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	099b      	lsrs	r3, r3, #6
 8001f78:	4a0e      	ldr	r2, [pc, #56]	; (8001fb4 <HAL_ADC_Init+0x43c>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	099b      	lsrs	r3, r3, #6
 8001f80:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f82:	e01c      	b.n	8001fbe <HAL_ADC_Init+0x446>
 8001f84:	0800e384 	.word	0x0800e384
 8001f88:	08002659 	.word	0x08002659
 8001f8c:	0800266d 	.word	0x0800266d
 8001f90:	08002681 	.word	0x08002681
 8001f94:	08002695 	.word	0x08002695
 8001f98:	08003265 	.word	0x08003265
 8001f9c:	08003279 	.word	0x08003279
 8001fa0:	0800328d 	.word	0x0800328d
 8001fa4:	080032a1 	.word	0x080032a1
 8001fa8:	080032b5 	.word	0x080032b5
 8001fac:	080005ed 	.word	0x080005ed
 8001fb0:	200000b4 	.word	0x200000b4
 8001fb4:	053e2d63 	.word	0x053e2d63
    {
      wait_loop_index--;
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f9      	bne.n	8001fb8 <HAL_ADC_Init+0x440>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fd87 	bl	8001adc <LL_ADC_IsInternalRegulatorEnabled>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10d      	bne.n	8001ff0 <HAL_ADC_Init+0x478>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd8:	f043 0210 	orr.w	r2, r3, #16
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe4:	f043 0201 	orr.w	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fd98 	bl	8001b2a <LL_ADC_REG_IsConversionOngoing>
 8001ffa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b00      	cmp	r3, #0
 8002006:	f040 8137 	bne.w	8002278 <HAL_ADC_Init+0x700>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2b00      	cmp	r3, #0
 800200e:	f040 8133 	bne.w	8002278 <HAL_ADC_Init+0x700>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800201a:	f043 0202 	orr.w	r2, r3, #2
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff fd6c 	bl	8001b04 <LL_ADC_IsEnabled>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10b      	bne.n	800204a <HAL_ADC_Init+0x4d2>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002032:	4898      	ldr	r0, [pc, #608]	; (8002294 <HAL_ADC_Init+0x71c>)
 8002034:	f7ff fd66 	bl	8001b04 <LL_ADC_IsEnabled>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d105      	bne.n	800204a <HAL_ADC_Init+0x4d2>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4619      	mov	r1, r3
 8002044:	4894      	ldr	r0, [pc, #592]	; (8002298 <HAL_ADC_Init+0x720>)
 8002046:	f7ff fbc3 	bl	80017d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	7e5b      	ldrb	r3, [r3, #25]
 800204e:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002054:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800205a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002060:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002068:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d106      	bne.n	8002086 <HAL_ADC_Init+0x50e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	3b01      	subs	r3, #1
 800207e:	045b      	lsls	r3, r3, #17
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208a:	2b00      	cmp	r3, #0
 800208c:	d009      	beq.n	80020a2 <HAL_ADC_Init+0x52a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	4b7c      	ldr	r3, [pc, #496]	; (800229c <HAL_ADC_Init+0x724>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	69b9      	ldr	r1, [r7, #24]
 80020b2:	430b      	orrs	r3, r1
 80020b4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fd35 	bl	8001b2a <LL_ADC_REG_IsConversionOngoing>
 80020c0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fd42 	bl	8001b50 <LL_ADC_INJ_IsConversionOngoing>
 80020cc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f040 80af 	bne.w	8002234 <HAL_ADC_Init+0x6bc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f040 80ab 	bne.w	8002234 <HAL_ADC_Init+0x6bc>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	7e1b      	ldrb	r3, [r3, #24]
 80020e6:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020e8:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020f0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002100:	f023 0306 	bic.w	r3, r3, #6
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	69b9      	ldr	r1, [r7, #24]
 800210a:	430b      	orrs	r3, r1
 800210c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002114:	2b01      	cmp	r3, #1
 8002116:	f040 8085 	bne.w	8002224 <HAL_ADC_Init+0x6ac>
      {
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211e:	2b00      	cmp	r3, #0
 8002120:	d020      	beq.n	8002164 <HAL_ADC_Init+0x5ec>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002126:	2b04      	cmp	r3, #4
 8002128:	d01c      	beq.n	8002164 <HAL_ADC_Init+0x5ec>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212e:	2b08      	cmp	r3, #8
 8002130:	d018      	beq.n	8002164 <HAL_ADC_Init+0x5ec>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002136:	2b0c      	cmp	r3, #12
 8002138:	d014      	beq.n	8002164 <HAL_ADC_Init+0x5ec>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213e:	2b10      	cmp	r3, #16
 8002140:	d010      	beq.n	8002164 <HAL_ADC_Init+0x5ec>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002146:	2b14      	cmp	r3, #20
 8002148:	d00c      	beq.n	8002164 <HAL_ADC_Init+0x5ec>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214e:	2b18      	cmp	r3, #24
 8002150:	d008      	beq.n	8002164 <HAL_ADC_Init+0x5ec>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002156:	2b1c      	cmp	r3, #28
 8002158:	d004      	beq.n	8002164 <HAL_ADC_Init+0x5ec>
 800215a:	f240 216f 	movw	r1, #623	; 0x26f
 800215e:	4850      	ldr	r0, [pc, #320]	; (80022a0 <HAL_ADC_Init+0x728>)
 8002160:	f7fe ff70 	bl	8001044 <assert_failed>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	2b00      	cmp	r3, #0
 800216a:	d025      	beq.n	80021b8 <HAL_ADC_Init+0x640>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	2b20      	cmp	r3, #32
 8002172:	d021      	beq.n	80021b8 <HAL_ADC_Init+0x640>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	2b40      	cmp	r3, #64	; 0x40
 800217a:	d01d      	beq.n	80021b8 <HAL_ADC_Init+0x640>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	2b60      	cmp	r3, #96	; 0x60
 8002182:	d019      	beq.n	80021b8 <HAL_ADC_Init+0x640>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	2b80      	cmp	r3, #128	; 0x80
 800218a:	d015      	beq.n	80021b8 <HAL_ADC_Init+0x640>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	2ba0      	cmp	r3, #160	; 0xa0
 8002192:	d011      	beq.n	80021b8 <HAL_ADC_Init+0x640>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	2bc0      	cmp	r3, #192	; 0xc0
 800219a:	d00d      	beq.n	80021b8 <HAL_ADC_Init+0x640>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	2be0      	cmp	r3, #224	; 0xe0
 80021a2:	d009      	beq.n	80021b8 <HAL_ADC_Init+0x640>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021ac:	d004      	beq.n	80021b8 <HAL_ADC_Init+0x640>
 80021ae:	f44f 711c 	mov.w	r1, #624	; 0x270
 80021b2:	483b      	ldr	r0, [pc, #236]	; (80022a0 <HAL_ADC_Init+0x728>)
 80021b4:	f7fe ff46 	bl	8001044 <assert_failed>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d009      	beq.n	80021d4 <HAL_ADC_Init+0x65c>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c8:	d004      	beq.n	80021d4 <HAL_ADC_Init+0x65c>
 80021ca:	f240 2171 	movw	r1, #625	; 0x271
 80021ce:	4834      	ldr	r0, [pc, #208]	; (80022a0 <HAL_ADC_Init+0x728>)
 80021d0:	f7fe ff38 	bl	8001044 <assert_failed>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d00a      	beq.n	80021f2 <HAL_ADC_Init+0x67a>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e0:	f240 4201 	movw	r2, #1025	; 0x401
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d004      	beq.n	80021f2 <HAL_ADC_Init+0x67a>
 80021e8:	f240 2172 	movw	r1, #626	; 0x272
 80021ec:	482c      	ldr	r0, [pc, #176]	; (80022a0 <HAL_ADC_Init+0x728>)
 80021ee:	f7fe ff29 	bl	8001044 <assert_failed>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80021fc:	f023 0304 	bic.w	r3, r3, #4
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002208:	4311      	orrs	r1, r2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800220e:	4311      	orrs	r1, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002214:	430a      	orrs	r2, r1
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f042 0201 	orr.w	r2, r2, #1
 8002220:	611a      	str	r2, [r3, #16]
 8002222:	e007      	b.n	8002234 <HAL_ADC_Init+0x6bc>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0201 	bic.w	r2, r2, #1
 8002232:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d10c      	bne.n	8002256 <HAL_ADC_Init+0x6de>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f023 010f 	bic.w	r1, r3, #15
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	1e5a      	subs	r2, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	631a      	str	r2, [r3, #48]	; 0x30
 8002254:	e007      	b.n	8002266 <HAL_ADC_Init+0x6ee>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 020f 	bic.w	r2, r2, #15
 8002264:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226a:	f023 0303 	bic.w	r3, r3, #3
 800226e:	f043 0201 	orr.w	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	659a      	str	r2, [r3, #88]	; 0x58
 8002276:	e007      	b.n	8002288 <HAL_ADC_Init+0x710>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227c:	f043 0210 	orr.w	r2, r3, #16
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002288:	7ffb      	ldrb	r3, [r7, #31]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3720      	adds	r7, #32
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	50040000 	.word	0x50040000
 8002298:	50040300 	.word	0x50040300
 800229c:	fff0c007 	.word	0xfff0c007
 80022a0:	0800e384 	.word	0x0800e384

080022a4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80022ac:	2300      	movs	r3, #0
 80022ae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	617b      	str	r3, [r7, #20]
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a88      	ldr	r2, [pc, #544]	; (80024e8 <HAL_ADC_IRQHandler+0x244>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d004      	beq.n	80022d4 <HAL_ADC_IRQHandler+0x30>
 80022ca:	f640 01c5 	movw	r1, #2245	; 0x8c5
 80022ce:	4887      	ldr	r0, [pc, #540]	; (80024ec <HAL_ADC_IRQHandler+0x248>)
 80022d0:	f7fe feb8 	bl	8001044 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d008      	beq.n	80022ee <HAL_ADC_IRQHandler+0x4a>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d004      	beq.n	80022ee <HAL_ADC_IRQHandler+0x4a>
 80022e4:	f640 01c6 	movw	r1, #2246	; 0x8c6
 80022e8:	4880      	ldr	r0, [pc, #512]	; (80024ec <HAL_ADC_IRQHandler+0x248>)
 80022ea:	f7fe feab 	bl	8001044 <assert_failed>

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d019      	beq.n	800232c <HAL_ADC_IRQHandler+0x88>
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d014      	beq.n	800232c <HAL_ADC_IRQHandler+0x88>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b00      	cmp	r3, #0
 800230c:	d105      	bne.n	800231a <HAL_ADC_IRQHandler+0x76>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002312:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	4798      	blx	r3
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2202      	movs	r2, #2
 800232a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b00      	cmp	r3, #0
 8002334:	d004      	beq.n	8002340 <HAL_ADC_IRQHandler+0x9c>
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d109      	bne.n	8002354 <HAL_ADC_IRQHandler+0xb0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002346:	2b00      	cmp	r3, #0
 8002348:	d05f      	beq.n	800240a <HAL_ADC_IRQHandler+0x166>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b00      	cmp	r3, #0
 8002352:	d05a      	beq.n	800240a <HAL_ADC_IRQHandler+0x166>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <HAL_ADC_IRQHandler+0xc8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002364:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fad7 	bl	8001924 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d03e      	beq.n	80023fa <HAL_ADC_IRQHandler+0x156>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d135      	bne.n	80023fa <HAL_ADC_IRQHandler+0x156>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b08      	cmp	r3, #8
 800239a:	d12e      	bne.n	80023fa <HAL_ADC_IRQHandler+0x156>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fbc2 	bl	8001b2a <LL_ADC_REG_IsConversionOngoing>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d11a      	bne.n	80023e2 <HAL_ADC_IRQHandler+0x13e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 020c 	bic.w	r2, r2, #12
 80023ba:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d112      	bne.n	80023fa <HAL_ADC_IRQHandler+0x156>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d8:	f043 0201 	orr.w	r2, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	659a      	str	r2, [r3, #88]	; 0x58
 80023e0:	e00b      	b.n	80023fa <HAL_ADC_IRQHandler+0x156>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	f043 0210 	orr.w	r2, r3, #16
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	f043 0201 	orr.w	r2, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: Into callback function "HAL_ADC_ConvCpltCallback()",             */
    /*       to determine if conversion has been triggered from EOC or EOS,   */
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	4798      	blx	r3
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	220c      	movs	r2, #12
 8002408:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	f003 0320 	and.w	r3, r3, #32
 8002410:	2b00      	cmp	r3, #0
 8002412:	d004      	beq.n	800241e <HAL_ADC_IRQHandler+0x17a>
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HAL_ADC_IRQHandler+0x18e>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002424:	2b00      	cmp	r3, #0
 8002426:	d077      	beq.n	8002518 <HAL_ADC_IRQHandler+0x274>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242e:	2b00      	cmp	r3, #0
 8002430:	d072      	beq.n	8002518 <HAL_ADC_IRQHandler+0x274>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	d105      	bne.n	800244a <HAL_ADC_IRQHandler+0x1a6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff faa7 	bl	80019a2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002454:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fa62 	bl	8001924 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002460:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10c      	bne.n	800248a <HAL_ADC_IRQHandler+0x1e6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002476:	2b00      	cmp	r3, #0
 8002478:	d146      	bne.n	8002508 <HAL_ADC_IRQHandler+0x264>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d043      	beq.n	8002508 <HAL_ADC_IRQHandler+0x264>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8002486:	2b00      	cmp	r3, #0
 8002488:	d13e      	bne.n	8002508 <HAL_ADC_IRQHandler+0x264>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002494:	2b40      	cmp	r3, #64	; 0x40
 8002496:	d137      	bne.n	8002508 <HAL_ADC_IRQHandler+0x264>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d132      	bne.n	8002508 <HAL_ADC_IRQHandler+0x264>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fb52 	bl	8001b50 <LL_ADC_INJ_IsConversionOngoing>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d11e      	bne.n	80024f0 <HAL_ADC_IRQHandler+0x24c>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024c0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d116      	bne.n	8002508 <HAL_ADC_IRQHandler+0x264>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024de:	f043 0201 	orr.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	659a      	str	r2, [r3, #88]	; 0x58
 80024e6:	e00f      	b.n	8002508 <HAL_ADC_IRQHandler+0x264>
 80024e8:	50040000 	.word	0x50040000
 80024ec:	0800e384 	.word	0x0800e384
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f4:	f043 0210 	orr.w	r2, r3, #16
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	f043 0201 	orr.w	r2, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	65da      	str	r2, [r3, #92]	; 0x5c
              if (__HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) or
              if (__HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOC)) to determine whether
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	4798      	blx	r3
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2260      	movs	r2, #96	; 0x60
 8002516:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251e:	2b00      	cmp	r3, #0
 8002520:	d012      	beq.n	8002548 <HAL_ADC_IRQHandler+0x2a4>
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00d      	beq.n	8002548 <HAL_ADC_IRQHandler+0x2a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002530:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	4798      	blx	r3
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2280      	movs	r2, #128	; 0x80
 8002546:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d014      	beq.n	800257c <HAL_ADC_IRQHandler+0x2d8>
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00f      	beq.n	800257c <HAL_ADC_IRQHandler+0x2d8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002560:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	4798      	blx	r3
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800257a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002582:	2b00      	cmp	r3, #0
 8002584:	d014      	beq.n	80025b0 <HAL_ADC_IRQHandler+0x30c>
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00f      	beq.n	80025b0 <HAL_ADC_IRQHandler+0x30c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002594:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	4798      	blx	r3
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d02b      	beq.n	8002612 <HAL_ADC_IRQHandler+0x36e>
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f003 0310 	and.w	r3, r3, #16
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d026      	beq.n	8002612 <HAL_ADC_IRQHandler+0x36e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d102      	bne.n	80025d2 <HAL_ADC_IRQHandler+0x32e>
    {
      overrun_error = 1UL;
 80025cc:	2301      	movs	r3, #1
 80025ce:	61fb      	str	r3, [r7, #28]
 80025d0:	e008      	b.n	80025e4 <HAL_ADC_IRQHandler+0x340>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_ADC_IRQHandler+0x340>
        {
          overrun_error = 1UL;
 80025e0:	2301      	movs	r3, #1
 80025e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d10f      	bne.n	800260a <HAL_ADC_IRQHandler+0x366>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ee:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fa:	f043 0202 	orr.w	r2, r3, #2
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Note: In case of overrun, ADC conversion data is preserved until     */
      /*       flag OVR is reset.                                             */
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	4798      	blx	r3
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2210      	movs	r2, #16
 8002610:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002618:	2b00      	cmp	r3, #0
 800261a:	d019      	beq.n	8002650 <HAL_ADC_IRQHandler+0x3ac>
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002622:	2b00      	cmp	r3, #0
 8002624:	d014      	beq.n	8002650 <HAL_ADC_IRQHandler+0x3ac>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002636:	f043 0208 	orr.w	r2, r3, #8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002646:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	4798      	blx	r3
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002650:	bf00      	nop
 8002652:	3720      	adds	r7, #32
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b0b7      	sub	sp, #220	; 0xdc
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4aa3      	ldr	r2, [pc, #652]	; (8002950 <HAL_ADC_ConfigChannel+0x2a8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d004      	beq.n	80026d0 <HAL_ADC_ConfigChannel+0x28>
 80026c6:	f640 2195 	movw	r1, #2709	; 0xa95
 80026ca:	48a2      	ldr	r0, [pc, #648]	; (8002954 <HAL_ADC_ConfigChannel+0x2ac>)
 80026cc:	f7fe fcba 	bl	8001044 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b06      	cmp	r3, #6
 80026d6:	d04f      	beq.n	8002778 <HAL_ADC_ConfigChannel+0xd0>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b0c      	cmp	r3, #12
 80026de:	d04b      	beq.n	8002778 <HAL_ADC_ConfigChannel+0xd0>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b12      	cmp	r3, #18
 80026e6:	d047      	beq.n	8002778 <HAL_ADC_ConfigChannel+0xd0>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b18      	cmp	r3, #24
 80026ee:	d043      	beq.n	8002778 <HAL_ADC_ConfigChannel+0xd0>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026f8:	d03e      	beq.n	8002778 <HAL_ADC_ConfigChannel+0xd0>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8002702:	d039      	beq.n	8002778 <HAL_ADC_ConfigChannel+0xd0>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 800270c:	d034      	beq.n	8002778 <HAL_ADC_ConfigChannel+0xd0>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 8002716:	d02f      	beq.n	8002778 <HAL_ADC_ConfigChannel+0xd0>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8002720:	d02a      	beq.n	8002778 <HAL_ADC_ConfigChannel+0xd0>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800272a:	d025      	beq.n	8002778 <HAL_ADC_ConfigChannel+0xd0>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f240 2206 	movw	r2, #518	; 0x206
 8002734:	4293      	cmp	r3, r2
 8002736:	d01f      	beq.n	8002778 <HAL_ADC_ConfigChannel+0xd0>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8002740:	d01a      	beq.n	8002778 <HAL_ADC_ConfigChannel+0xd0>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f240 2212 	movw	r2, #530	; 0x212
 800274a:	4293      	cmp	r3, r2
 800274c:	d014      	beq.n	8002778 <HAL_ADC_ConfigChannel+0xd0>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8002756:	d00f      	beq.n	8002778 <HAL_ADC_ConfigChannel+0xd0>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002760:	d00a      	beq.n	8002778 <HAL_ADC_ConfigChannel+0xd0>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f240 3206 	movw	r2, #774	; 0x306
 800276a:	4293      	cmp	r3, r2
 800276c:	d004      	beq.n	8002778 <HAL_ADC_ConfigChannel+0xd0>
 800276e:	f640 2196 	movw	r1, #2710	; 0xa96
 8002772:	4878      	ldr	r0, [pc, #480]	; (8002954 <HAL_ADC_ConfigChannel+0x2ac>)
 8002774:	f7fe fc66 	bl	8001044 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d025      	beq.n	80027cc <HAL_ADC_ConfigChannel+0x124>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002788:	d020      	beq.n	80027cc <HAL_ADC_ConfigChannel+0x124>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d01c      	beq.n	80027cc <HAL_ADC_ConfigChannel+0x124>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d018      	beq.n	80027cc <HAL_ADC_ConfigChannel+0x124>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d014      	beq.n	80027cc <HAL_ADC_ConfigChannel+0x124>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d010      	beq.n	80027cc <HAL_ADC_ConfigChannel+0x124>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b05      	cmp	r3, #5
 80027b0:	d00c      	beq.n	80027cc <HAL_ADC_ConfigChannel+0x124>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b06      	cmp	r3, #6
 80027b8:	d008      	beq.n	80027cc <HAL_ADC_ConfigChannel+0x124>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b07      	cmp	r3, #7
 80027c0:	d004      	beq.n	80027cc <HAL_ADC_ConfigChannel+0x124>
 80027c2:	f640 2197 	movw	r1, #2711	; 0xa97
 80027c6:	4863      	ldr	r0, [pc, #396]	; (8002954 <HAL_ADC_ConfigChannel+0x2ac>)
 80027c8:	f7fe fc3c 	bl	8001044 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b7f      	cmp	r3, #127	; 0x7f
 80027d2:	d009      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x140>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4a5f      	ldr	r2, [pc, #380]	; (8002958 <HAL_ADC_ConfigChannel+0x2b0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d004      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x140>
 80027de:	f640 2198 	movw	r1, #2712	; 0xa98
 80027e2:	485c      	ldr	r0, [pc, #368]	; (8002954 <HAL_ADC_ConfigChannel+0x2ac>)
 80027e4:	f7fe fc2e 	bl	8001044 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d014      	beq.n	800281a <HAL_ADC_ConfigChannel+0x172>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d010      	beq.n	800281a <HAL_ADC_ConfigChannel+0x172>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d00c      	beq.n	800281a <HAL_ADC_ConfigChannel+0x172>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d008      	beq.n	800281a <HAL_ADC_ConfigChannel+0x172>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	2b03      	cmp	r3, #3
 800280e:	d004      	beq.n	800281a <HAL_ADC_ConfigChannel+0x172>
 8002810:	f640 2199 	movw	r1, #2713	; 0xa99
 8002814:	484f      	ldr	r0, [pc, #316]	; (8002954 <HAL_ADC_ConfigChannel+0x2ac>)
 8002816:	f7fe fc15 	bl	8001044 <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	695c      	ldr	r4, [r3, #20]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff f808 	bl	8001838 <LL_ADC_GetResolution>
 8002828:	4603      	mov	r3, r0
 800282a:	089b      	lsrs	r3, r3, #2
 800282c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002830:	fa22 f303 	lsr.w	r3, r2, r3
 8002834:	429c      	cmp	r4, r3
 8002836:	d904      	bls.n	8002842 <HAL_ADC_ConfigChannel+0x19a>
 8002838:	f640 219a 	movw	r1, #2714	; 0xa9a
 800283c:	4845      	ldr	r0, [pc, #276]	; (8002954 <HAL_ADC_ConfigChannel+0x2ac>)
 800283e:	f7fe fc01 	bl	8001044 <assert_failed>

  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b04      	cmp	r3, #4
 8002848:	d009      	beq.n	800285e <HAL_ADC_ConfigChannel+0x1b6>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002850:	2b01      	cmp	r3, #1
 8002852:	d104      	bne.n	800285e <HAL_ADC_ConfigChannel+0x1b6>
 8002854:	f640 219e 	movw	r1, #2718	; 0xa9e
 8002858:	483e      	ldr	r0, [pc, #248]	; (8002954 <HAL_ADC_ConfigChannel+0x2ac>)
 800285a:	f7fe fbf3 	bl	8001044 <assert_failed>

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	4a3d      	ldr	r2, [pc, #244]	; (8002958 <HAL_ADC_ConfigChannel+0x2b0>)
 8002864:	4293      	cmp	r3, r2
 8002866:	f000 80bc 	beq.w	80029e2 <HAL_ADC_ConfigChannel+0x33a>
  {
    assert_param(IS_ADC_CHANNEL(hadc, sConfig->Channel));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a38      	ldr	r2, [pc, #224]	; (8002950 <HAL_ADC_ConfigChannel+0x2a8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	f040 80b0 	bne.w	80029d6 <HAL_ADC_ConfigChannel+0x32e>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a38      	ldr	r2, [pc, #224]	; (800295c <HAL_ADC_ConfigChannel+0x2b4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	f000 8100 	beq.w	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a36      	ldr	r2, [pc, #216]	; (8002960 <HAL_ADC_ConfigChannel+0x2b8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	f000 80fa 	beq.w	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a34      	ldr	r2, [pc, #208]	; (8002964 <HAL_ADC_ConfigChannel+0x2bc>)
 8002894:	4293      	cmp	r3, r2
 8002896:	f000 80f4 	beq.w	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a32      	ldr	r2, [pc, #200]	; (8002968 <HAL_ADC_ConfigChannel+0x2c0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	f000 80ee 	beq.w	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a30      	ldr	r2, [pc, #192]	; (800296c <HAL_ADC_ConfigChannel+0x2c4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	f000 80e8 	beq.w	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a2e      	ldr	r2, [pc, #184]	; (8002970 <HAL_ADC_ConfigChannel+0x2c8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	f000 80e2 	beq.w	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a2c      	ldr	r2, [pc, #176]	; (8002974 <HAL_ADC_ConfigChannel+0x2cc>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	f000 80dc 	beq.w	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a2a      	ldr	r2, [pc, #168]	; (8002978 <HAL_ADC_ConfigChannel+0x2d0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	f000 80d6 	beq.w	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a28      	ldr	r2, [pc, #160]	; (800297c <HAL_ADC_ConfigChannel+0x2d4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	f000 80d0 	beq.w	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a26      	ldr	r2, [pc, #152]	; (8002980 <HAL_ADC_ConfigChannel+0x2d8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	f000 80ca 	beq.w	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a24      	ldr	r2, [pc, #144]	; (8002984 <HAL_ADC_ConfigChannel+0x2dc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	f000 80c4 	beq.w	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a22      	ldr	r2, [pc, #136]	; (8002988 <HAL_ADC_ConfigChannel+0x2e0>)
 8002900:	4293      	cmp	r3, r2
 8002902:	f000 80be 	beq.w	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a20      	ldr	r2, [pc, #128]	; (800298c <HAL_ADC_ConfigChannel+0x2e4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	f000 80b8 	beq.w	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a1e      	ldr	r2, [pc, #120]	; (8002990 <HAL_ADC_ConfigChannel+0x2e8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	f000 80b2 	beq.w	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a1c      	ldr	r2, [pc, #112]	; (8002994 <HAL_ADC_ConfigChannel+0x2ec>)
 8002924:	4293      	cmp	r3, r2
 8002926:	f000 80ac 	beq.w	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a1a      	ldr	r2, [pc, #104]	; (8002998 <HAL_ADC_ConfigChannel+0x2f0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	f000 80a6 	beq.w	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a18      	ldr	r2, [pc, #96]	; (800299c <HAL_ADC_ConfigChannel+0x2f4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	f000 80a0 	beq.w	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a16      	ldr	r2, [pc, #88]	; (80029a0 <HAL_ADC_ConfigChannel+0x2f8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	f000 809a 	beq.w	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 800294e:	e029      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x2fc>
 8002950:	50040000 	.word	0x50040000
 8002954:	0800e384 	.word	0x0800e384
 8002958:	407f0000 	.word	0x407f0000
 800295c:	04300002 	.word	0x04300002
 8002960:	08600004 	.word	0x08600004
 8002964:	0c900008 	.word	0x0c900008
 8002968:	10c00010 	.word	0x10c00010
 800296c:	14f00020 	.word	0x14f00020
 8002970:	19200040 	.word	0x19200040
 8002974:	1d500080 	.word	0x1d500080
 8002978:	21800100 	.word	0x21800100
 800297c:	25b00200 	.word	0x25b00200
 8002980:	2a000400 	.word	0x2a000400
 8002984:	2e300800 	.word	0x2e300800
 8002988:	32601000 	.word	0x32601000
 800298c:	36902000 	.word	0x36902000
 8002990:	3ac04000 	.word	0x3ac04000
 8002994:	3ef08000 	.word	0x3ef08000
 8002998:	43210000 	.word	0x43210000
 800299c:	47520000 	.word	0x47520000
 80029a0:	4b840000 	.word	0x4b840000
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4aad      	ldr	r2, [pc, #692]	; (8002c60 <HAL_ADC_ConfigChannel+0x5b8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d069      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4aac      	ldr	r2, [pc, #688]	; (8002c64 <HAL_ADC_ConfigChannel+0x5bc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d064      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4aaa      	ldr	r2, [pc, #680]	; (8002c68 <HAL_ADC_ConfigChannel+0x5c0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d05f      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4aa9      	ldr	r2, [pc, #676]	; (8002c6c <HAL_ADC_ConfigChannel+0x5c4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d05a      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4aa7      	ldr	r2, [pc, #668]	; (8002c70 <HAL_ADC_ConfigChannel+0x5c8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d055      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 80029d6:	f640 21a3 	movw	r1, #2723	; 0xaa3
 80029da:	48a6      	ldr	r0, [pc, #664]	; (8002c74 <HAL_ADC_ConfigChannel+0x5cc>)
 80029dc:	f7fe fb32 	bl	8001044 <assert_failed>
 80029e0:	e04f      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x3da>
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4aa4      	ldr	r2, [pc, #656]	; (8002c78 <HAL_ADC_ConfigChannel+0x5d0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d04a      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4aa2      	ldr	r2, [pc, #648]	; (8002c7c <HAL_ADC_ConfigChannel+0x5d4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d045      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4aa1      	ldr	r2, [pc, #644]	; (8002c80 <HAL_ADC_ConfigChannel+0x5d8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d040      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a9f      	ldr	r2, [pc, #636]	; (8002c84 <HAL_ADC_ConfigChannel+0x5dc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d03b      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a9e      	ldr	r2, [pc, #632]	; (8002c88 <HAL_ADC_ConfigChannel+0x5e0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d036      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a9c      	ldr	r2, [pc, #624]	; (8002c8c <HAL_ADC_ConfigChannel+0x5e4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d031      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a9b      	ldr	r2, [pc, #620]	; (8002c90 <HAL_ADC_ConfigChannel+0x5e8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d02c      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a99      	ldr	r2, [pc, #612]	; (8002c94 <HAL_ADC_ConfigChannel+0x5ec>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d027      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a98      	ldr	r2, [pc, #608]	; (8002c98 <HAL_ADC_ConfigChannel+0x5f0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d022      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a96      	ldr	r2, [pc, #600]	; (8002c9c <HAL_ADC_ConfigChannel+0x5f4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01d      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a95      	ldr	r2, [pc, #596]	; (8002ca0 <HAL_ADC_ConfigChannel+0x5f8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d018      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a93      	ldr	r2, [pc, #588]	; (8002ca4 <HAL_ADC_ConfigChannel+0x5fc>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d013      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a92      	ldr	r2, [pc, #584]	; (8002ca8 <HAL_ADC_ConfigChannel+0x600>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d00e      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a90      	ldr	r2, [pc, #576]	; (8002cac <HAL_ADC_ConfigChannel+0x604>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d009      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a8f      	ldr	r2, [pc, #572]	; (8002cb0 <HAL_ADC_ConfigChannel+0x608>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d004      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 8002a78:	f640 21a7 	movw	r1, #2727	; 0xaa7
 8002a7c:	487d      	ldr	r0, [pc, #500]	; (8002c74 <HAL_ADC_ConfigChannel+0x5cc>)
 8002a7e:	f7fe fae1 	bl	8001044 <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x3e8>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e3d5      	b.n	800323c <HAL_ADC_ConfigChannel+0xb94>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff f844 	bl	8001b2a <LL_ADC_REG_IsConversionOngoing>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f040 83ba 	bne.w	800321e <HAL_ADC_ConfigChannel+0xb76>
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6859      	ldr	r1, [r3, #4]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f7fe ff47 	bl	800194a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff f832 	bl	8001b2a <LL_ADC_REG_IsConversionOngoing>
 8002ac6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff f83e 	bl	8001b50 <LL_ADC_INJ_IsConversionOngoing>
 8002ad4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ad8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f040 81ec 	bne.w	8002eba <HAL_ADC_ConfigChannel+0x812>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ae2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 81e7 	bne.w	8002eba <HAL_ADC_ConfigChannel+0x812>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002af4:	d10f      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x46e>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2200      	movs	r2, #0
 8002b00:	4619      	mov	r1, r3
 8002b02:	f7fe ff61 	bl	80019c8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe fef5 	bl	80018fe <LL_ADC_SetSamplingTimeCommonConfig>
 8002b14:	e00e      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x48c>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6819      	ldr	r1, [r3, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	461a      	mov	r2, r3
 8002b24:	f7fe ff50 	bl	80019c8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe fee5 	bl	80018fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	695a      	ldr	r2, [r3, #20]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	08db      	lsrs	r3, r3, #3
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d00a      	beq.n	8002b6c <HAL_ADC_ConfigChannel+0x4c4>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6919      	ldr	r1, [r3, #16]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b66:	f7fe fe75 	bl	8001854 <LL_ADC_SetOffset>
 8002b6a:	e1a6      	b.n	8002eba <HAL_ADC_ConfigChannel+0x812>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2100      	movs	r1, #0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe fe92 	bl	800189c <LL_ADC_GetOffsetChannel>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10a      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x4f0>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2100      	movs	r1, #0
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe fe87 	bl	800189c <LL_ADC_GetOffsetChannel>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	0e9b      	lsrs	r3, r3, #26
 8002b92:	f003 021f 	and.w	r2, r3, #31
 8002b96:	e01e      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x52e>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe fe7c 	bl	800189c <LL_ADC_GetOffsetChannel>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x522>
  {
    return 32U;
 8002bc6:	2320      	movs	r3, #32
 8002bc8:	e004      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x52c>
  }
  return __builtin_clz(value);
 8002bca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d105      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x546>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	0e9b      	lsrs	r3, r3, #26
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	e018      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x578>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bfa:	fa93 f3a3 	rbit	r3, r3
 8002bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002c02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x56e>
    return 32U;
 8002c12:	2320      	movs	r3, #32
 8002c14:	e004      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x578>
  return __builtin_clz(value);
 8002c16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d106      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x58a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fe fe4b 	bl	80018c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2101      	movs	r1, #1
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fe fe2f 	bl	800189c <LL_ADC_GetOffsetChannel>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d135      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x60c>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe fe24 	bl	800189c <LL_ADC_GetOffsetChannel>
 8002c54:	4603      	mov	r3, r0
 8002c56:	0e9b      	lsrs	r3, r3, #26
 8002c58:	f003 021f 	and.w	r2, r3, #31
 8002c5c:	e049      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x64a>
 8002c5e:	bf00      	nop
 8002c60:	80000001 	.word	0x80000001
 8002c64:	c7520000 	.word	0xc7520000
 8002c68:	cb840000 	.word	0xcb840000
 8002c6c:	c75a0000 	.word	0xc75a0000
 8002c70:	cb8c0000 	.word	0xcb8c0000
 8002c74:	0800e384 	.word	0x0800e384
 8002c78:	04300002 	.word	0x04300002
 8002c7c:	08600004 	.word	0x08600004
 8002c80:	0c900008 	.word	0x0c900008
 8002c84:	10c00010 	.word	0x10c00010
 8002c88:	14f00020 	.word	0x14f00020
 8002c8c:	19200040 	.word	0x19200040
 8002c90:	1d500080 	.word	0x1d500080
 8002c94:	21800100 	.word	0x21800100
 8002c98:	25b00200 	.word	0x25b00200
 8002c9c:	2a000400 	.word	0x2a000400
 8002ca0:	2e300800 	.word	0x2e300800
 8002ca4:	32601000 	.word	0x32601000
 8002ca8:	36902000 	.word	0x36902000
 8002cac:	3ac04000 	.word	0x3ac04000
 8002cb0:	3ef08000 	.word	0x3ef08000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2101      	movs	r1, #1
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe fdee 	bl	800189c <LL_ADC_GetOffsetChannel>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002cd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002cda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x63e>
    return 32U;
 8002ce2:	2320      	movs	r3, #32
 8002ce4:	e004      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 8002ce6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d105      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x662>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	0e9b      	lsrs	r3, r3, #26
 8002d04:	f003 031f 	and.w	r3, r3, #31
 8002d08:	e018      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x694>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002d1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002d26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x68a>
    return 32U;
 8002d2e:	2320      	movs	r3, #32
 8002d30:	e004      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002d32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d36:	fab3 f383 	clz	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d106      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2200      	movs	r2, #0
 8002d46:	2101      	movs	r1, #1
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fe fdbd 	bl	80018c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2102      	movs	r1, #2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fe fda1 	bl	800189c <LL_ADC_GetOffsetChannel>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10a      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x6d2>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2102      	movs	r1, #2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe fd96 	bl	800189c <LL_ADC_GetOffsetChannel>
 8002d70:	4603      	mov	r3, r0
 8002d72:	0e9b      	lsrs	r3, r3, #26
 8002d74:	f003 021f 	and.w	r2, r3, #31
 8002d78:	e01e      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x710>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2102      	movs	r1, #2
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fe fd8b 	bl	800189c <LL_ADC_GetOffsetChannel>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d90:	fa93 f3a3 	rbit	r3, r3
 8002d94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002da0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x704>
    return 32U;
 8002da8:	2320      	movs	r3, #32
 8002daa:	e004      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x70e>
  return __builtin_clz(value);
 8002dac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002db0:	fab3 f383 	clz	r3, r3
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d105      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x728>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	0e9b      	lsrs	r3, r3, #26
 8002dca:	f003 031f 	and.w	r3, r3, #31
 8002dce:	e016      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x756>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002de2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002de4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002de8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x74c>
    return 32U;
 8002df0:	2320      	movs	r3, #32
 8002df2:	e004      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x756>
  return __builtin_clz(value);
 8002df4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002df8:	fab3 f383 	clz	r3, r3
 8002dfc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d106      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x768>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2200      	movs	r2, #0
 8002e08:	2102      	movs	r1, #2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe fd5c 	bl	80018c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2103      	movs	r1, #3
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe fd40 	bl	800189c <LL_ADC_GetOffsetChannel>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10a      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x794>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2103      	movs	r1, #3
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fe fd35 	bl	800189c <LL_ADC_GetOffsetChannel>
 8002e32:	4603      	mov	r3, r0
 8002e34:	0e9b      	lsrs	r3, r3, #26
 8002e36:	f003 021f 	and.w	r2, r3, #31
 8002e3a:	e017      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x7c4>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2103      	movs	r1, #3
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fe fd2a 	bl	800189c <LL_ADC_GetOffsetChannel>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002e54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e56:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002e58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x7ba>
    return 32U;
 8002e5e:	2320      	movs	r3, #32
 8002e60:	e003      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x7c2>
  return __builtin_clz(value);
 8002e62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e64:	fab3 f383 	clz	r3, r3
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d105      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x7dc>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	0e9b      	lsrs	r3, r3, #26
 8002e7e:	f003 031f 	and.w	r3, r3, #31
 8002e82:	e011      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x800>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e8c:	fa93 f3a3 	rbit	r3, r3
 8002e90:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e94:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x7f8>
    return 32U;
 8002e9c:	2320      	movs	r3, #32
 8002e9e:	e003      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x800>
  return __builtin_clz(value);
 8002ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea2:	fab3 f383 	clz	r3, r3
 8002ea6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d106      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x812>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2103      	movs	r1, #3
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fe fd07 	bl	80018c8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe fe20 	bl	8001b04 <LL_ADC_IsEnabled>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f040 8140 	bne.w	800314c <HAL_ADC_ConfigChannel+0xaa4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	6819      	ldr	r1, [r3, #0]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	f7fe fda1 	bl	8001a20 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	4a8f      	ldr	r2, [pc, #572]	; (8003120 <HAL_ADC_ConfigChannel+0xa78>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	f040 8131 	bne.w	800314c <HAL_ADC_ConfigChannel+0xaa4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10b      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x86a>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	0e9b      	lsrs	r3, r3, #26
 8002f00:	3301      	adds	r3, #1
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	2b09      	cmp	r3, #9
 8002f08:	bf94      	ite	ls
 8002f0a:	2301      	movls	r3, #1
 8002f0c:	2300      	movhi	r3, #0
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	e019      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x89e>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002f20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f22:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002f24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x886>
    return 32U;
 8002f2a:	2320      	movs	r3, #32
 8002f2c:	e003      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x88e>
  return __builtin_clz(value);
 8002f2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f30:	fab3 f383 	clz	r3, r3
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	3301      	adds	r3, #1
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	2b09      	cmp	r3, #9
 8002f3e:	bf94      	ite	ls
 8002f40:	2301      	movls	r3, #1
 8002f42:	2300      	movhi	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d079      	beq.n	800303e <HAL_ADC_ConfigChannel+0x996>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d107      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x8be>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	0e9b      	lsrs	r3, r3, #26
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	069b      	lsls	r3, r3, #26
 8002f60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f64:	e015      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x8ea>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f6e:	fa93 f3a3 	rbit	r3, r3
 8002f72:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f76:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x8da>
    return 32U;
 8002f7e:	2320      	movs	r3, #32
 8002f80:	e003      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x8e2>
  return __builtin_clz(value);
 8002f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f84:	fab3 f383 	clz	r3, r3
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	069b      	lsls	r3, r3, #26
 8002f8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d109      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x90a>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	0e9b      	lsrs	r3, r3, #26
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	f003 031f 	and.w	r3, r3, #31
 8002faa:	2101      	movs	r1, #1
 8002fac:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb0:	e017      	b.n	8002fe2 <HAL_ADC_ConfigChannel+0x93a>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x926>
    return 32U;
 8002fca:	2320      	movs	r3, #32
 8002fcc:	e003      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x92e>
  return __builtin_clz(value);
 8002fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd0:	fab3 f383 	clz	r3, r3
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	2101      	movs	r1, #1
 8002fde:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe2:	ea42 0103 	orr.w	r1, r2, r3
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10a      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x960>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	0e9b      	lsrs	r3, r3, #26
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	f003 021f 	and.w	r2, r3, #31
 8002ffe:	4613      	mov	r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	4413      	add	r3, r2
 8003004:	051b      	lsls	r3, r3, #20
 8003006:	e018      	b.n	800303a <HAL_ADC_ConfigChannel+0x992>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003010:	fa93 f3a3 	rbit	r3, r3
 8003014:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003018:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800301a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x97c>
    return 32U;
 8003020:	2320      	movs	r3, #32
 8003022:	e003      	b.n	800302c <HAL_ADC_ConfigChannel+0x984>
  return __builtin_clz(value);
 8003024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	3301      	adds	r3, #1
 800302e:	f003 021f 	and.w	r2, r3, #31
 8003032:	4613      	mov	r3, r2
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	4413      	add	r3, r2
 8003038:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800303a:	430b      	orrs	r3, r1
 800303c:	e081      	b.n	8003142 <HAL_ADC_ConfigChannel+0xa9a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003046:	2b00      	cmp	r3, #0
 8003048:	d107      	bne.n	800305a <HAL_ADC_ConfigChannel+0x9b2>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	0e9b      	lsrs	r3, r3, #26
 8003050:	3301      	adds	r3, #1
 8003052:	069b      	lsls	r3, r3, #26
 8003054:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003058:	e015      	b.n	8003086 <HAL_ADC_ConfigChannel+0x9de>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003062:	fa93 f3a3 	rbit	r3, r3
 8003066:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800306c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x9ce>
    return 32U;
 8003072:	2320      	movs	r3, #32
 8003074:	e003      	b.n	800307e <HAL_ADC_ConfigChannel+0x9d6>
  return __builtin_clz(value);
 8003076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003078:	fab3 f383 	clz	r3, r3
 800307c:	b2db      	uxtb	r3, r3
 800307e:	3301      	adds	r3, #1
 8003080:	069b      	lsls	r3, r3, #26
 8003082:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x9fe>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	0e9b      	lsrs	r3, r3, #26
 8003098:	3301      	adds	r3, #1
 800309a:	f003 031f 	and.w	r3, r3, #31
 800309e:	2101      	movs	r1, #1
 80030a0:	fa01 f303 	lsl.w	r3, r1, r3
 80030a4:	e017      	b.n	80030d6 <HAL_ADC_ConfigChannel+0xa2e>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	fa93 f3a3 	rbit	r3, r3
 80030b2:	61fb      	str	r3, [r7, #28]
  return result;
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0xa1a>
    return 32U;
 80030be:	2320      	movs	r3, #32
 80030c0:	e003      	b.n	80030ca <HAL_ADC_ConfigChannel+0xa22>
  return __builtin_clz(value);
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	fab3 f383 	clz	r3, r3
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	3301      	adds	r3, #1
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	2101      	movs	r1, #1
 80030d2:	fa01 f303 	lsl.w	r3, r1, r3
 80030d6:	ea42 0103 	orr.w	r1, r2, r3
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10d      	bne.n	8003102 <HAL_ADC_ConfigChannel+0xa5a>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	0e9b      	lsrs	r3, r3, #26
 80030ec:	3301      	adds	r3, #1
 80030ee:	f003 021f 	and.w	r2, r3, #31
 80030f2:	4613      	mov	r3, r2
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	4413      	add	r3, r2
 80030f8:	3b1e      	subs	r3, #30
 80030fa:	051b      	lsls	r3, r3, #20
 80030fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003100:	e01e      	b.n	8003140 <HAL_ADC_ConfigChannel+0xa98>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	fa93 f3a3 	rbit	r3, r3
 800310e:	613b      	str	r3, [r7, #16]
  return result;
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d104      	bne.n	8003124 <HAL_ADC_ConfigChannel+0xa7c>
    return 32U;
 800311a:	2320      	movs	r3, #32
 800311c:	e006      	b.n	800312c <HAL_ADC_ConfigChannel+0xa84>
 800311e:	bf00      	nop
 8003120:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	fab3 f383 	clz	r3, r3
 800312a:	b2db      	uxtb	r3, r3
 800312c:	3301      	adds	r3, #1
 800312e:	f003 021f 	and.w	r2, r3, #31
 8003132:	4613      	mov	r3, r2
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	4413      	add	r3, r2
 8003138:	3b1e      	subs	r3, #30
 800313a:	051b      	lsls	r3, r3, #20
 800313c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003140:	430b      	orrs	r3, r1
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	6892      	ldr	r2, [r2, #8]
 8003146:	4619      	mov	r1, r3
 8003148:	f7fe fc3e 	bl	80019c8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	4b3c      	ldr	r3, [pc, #240]	; (8003244 <HAL_ADC_ConfigChannel+0xb9c>)
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d06b      	beq.n	8003230 <HAL_ADC_ConfigChannel+0xb88>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003158:	483b      	ldr	r0, [pc, #236]	; (8003248 <HAL_ADC_ConfigChannel+0xba0>)
 800315a:	f7fe fb5f 	bl	800181c <LL_ADC_GetCommonPathInternalCh>
 800315e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a39      	ldr	r2, [pc, #228]	; (800324c <HAL_ADC_ConfigChannel+0xba4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d126      	bne.n	80031ba <HAL_ADC_ConfigChannel+0xb12>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800316c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003170:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d120      	bne.n	80031ba <HAL_ADC_ConfigChannel+0xb12>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a34      	ldr	r2, [pc, #208]	; (8003250 <HAL_ADC_ConfigChannel+0xba8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d156      	bne.n	8003230 <HAL_ADC_ConfigChannel+0xb88>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003182:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003186:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800318a:	4619      	mov	r1, r3
 800318c:	482e      	ldr	r0, [pc, #184]	; (8003248 <HAL_ADC_ConfigChannel+0xba0>)
 800318e:	f7fe fb32 	bl	80017f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003192:	4b30      	ldr	r3, [pc, #192]	; (8003254 <HAL_ADC_ConfigChannel+0xbac>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	099b      	lsrs	r3, r3, #6
 8003198:	4a2f      	ldr	r2, [pc, #188]	; (8003258 <HAL_ADC_ConfigChannel+0xbb0>)
 800319a:	fba2 2303 	umull	r2, r3, r2, r3
 800319e:	099a      	lsrs	r2, r3, #6
 80031a0:	4613      	mov	r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031aa:	e002      	b.n	80031b2 <HAL_ADC_ConfigChannel+0xb0a>
          {
            wait_loop_index--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1f9      	bne.n	80031ac <HAL_ADC_ConfigChannel+0xb04>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031b8:	e03a      	b.n	8003230 <HAL_ADC_ConfigChannel+0xb88>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a27      	ldr	r2, [pc, #156]	; (800325c <HAL_ADC_ConfigChannel+0xbb4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d113      	bne.n	80031ec <HAL_ADC_ConfigChannel+0xb44>
 80031c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10d      	bne.n	80031ec <HAL_ADC_ConfigChannel+0xb44>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1e      	ldr	r2, [pc, #120]	; (8003250 <HAL_ADC_ConfigChannel+0xba8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d12a      	bne.n	8003230 <HAL_ADC_ConfigChannel+0xb88>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031e2:	4619      	mov	r1, r3
 80031e4:	4818      	ldr	r0, [pc, #96]	; (8003248 <HAL_ADC_ConfigChannel+0xba0>)
 80031e6:	f7fe fb06 	bl	80017f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031ea:	e021      	b.n	8003230 <HAL_ADC_ConfigChannel+0xb88>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1b      	ldr	r2, [pc, #108]	; (8003260 <HAL_ADC_ConfigChannel+0xbb8>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d11c      	bne.n	8003230 <HAL_ADC_ConfigChannel+0xb88>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d116      	bne.n	8003230 <HAL_ADC_ConfigChannel+0xb88>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a12      	ldr	r2, [pc, #72]	; (8003250 <HAL_ADC_ConfigChannel+0xba8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d111      	bne.n	8003230 <HAL_ADC_ConfigChannel+0xb88>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800320c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003210:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003214:	4619      	mov	r1, r3
 8003216:	480c      	ldr	r0, [pc, #48]	; (8003248 <HAL_ADC_ConfigChannel+0xba0>)
 8003218:	f7fe faed 	bl	80017f6 <LL_ADC_SetCommonPathInternalCh>
 800321c:	e008      	b.n	8003230 <HAL_ADC_ConfigChannel+0xb88>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003222:	f043 0220 	orr.w	r2, r3, #32
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003238:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800323c:	4618      	mov	r0, r3
 800323e:	37dc      	adds	r7, #220	; 0xdc
 8003240:	46bd      	mov	sp, r7
 8003242:	bd90      	pop	{r4, r7, pc}
 8003244:	80080000 	.word	0x80080000
 8003248:	50040300 	.word	0x50040300
 800324c:	c7520000 	.word	0xc7520000
 8003250:	50040000 	.word	0x50040000
 8003254:	200000b4 	.word	0x200000b4
 8003258:	053e2d63 	.word	0x053e2d63
 800325c:	cb840000 	.word	0xcb840000
 8003260:	80000001 	.word	0x80000001

08003264 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e24d      	b.n	8003776 <HAL_CAN_Init+0x4ae>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a9e      	ldr	r2, [pc, #632]	; (8003558 <HAL_CAN_Init+0x290>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d004      	beq.n	80032ee <HAL_CAN_Init+0x26>
 80032e4:	f240 111d 	movw	r1, #285	; 0x11d
 80032e8:	489c      	ldr	r0, [pc, #624]	; (800355c <HAL_CAN_Init+0x294>)
 80032ea:	f7fd feab 	bl	8001044 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	7e1b      	ldrb	r3, [r3, #24]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <HAL_CAN_Init+0x40>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	7e1b      	ldrb	r3, [r3, #24]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d004      	beq.n	8003308 <HAL_CAN_Init+0x40>
 80032fe:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003302:	4896      	ldr	r0, [pc, #600]	; (800355c <HAL_CAN_Init+0x294>)
 8003304:	f7fd fe9e 	bl	8001044 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	7e5b      	ldrb	r3, [r3, #25]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <HAL_CAN_Init+0x5a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	7e5b      	ldrb	r3, [r3, #25]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d004      	beq.n	8003322 <HAL_CAN_Init+0x5a>
 8003318:	f240 111f 	movw	r1, #287	; 0x11f
 800331c:	488f      	ldr	r0, [pc, #572]	; (800355c <HAL_CAN_Init+0x294>)
 800331e:	f7fd fe91 	bl	8001044 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	7e9b      	ldrb	r3, [r3, #26]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d008      	beq.n	800333c <HAL_CAN_Init+0x74>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	7e9b      	ldrb	r3, [r3, #26]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d004      	beq.n	800333c <HAL_CAN_Init+0x74>
 8003332:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003336:	4889      	ldr	r0, [pc, #548]	; (800355c <HAL_CAN_Init+0x294>)
 8003338:	f7fd fe84 	bl	8001044 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	7edb      	ldrb	r3, [r3, #27]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <HAL_CAN_Init+0x8e>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	7edb      	ldrb	r3, [r3, #27]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d004      	beq.n	8003356 <HAL_CAN_Init+0x8e>
 800334c:	f240 1121 	movw	r1, #289	; 0x121
 8003350:	4882      	ldr	r0, [pc, #520]	; (800355c <HAL_CAN_Init+0x294>)
 8003352:	f7fd fe77 	bl	8001044 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	7f1b      	ldrb	r3, [r3, #28]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d008      	beq.n	8003370 <HAL_CAN_Init+0xa8>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	7f1b      	ldrb	r3, [r3, #28]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d004      	beq.n	8003370 <HAL_CAN_Init+0xa8>
 8003366:	f44f 7191 	mov.w	r1, #290	; 0x122
 800336a:	487c      	ldr	r0, [pc, #496]	; (800355c <HAL_CAN_Init+0x294>)
 800336c:	f7fd fe6a 	bl	8001044 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	7f5b      	ldrb	r3, [r3, #29]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_CAN_Init+0xc2>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	7f5b      	ldrb	r3, [r3, #29]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d004      	beq.n	800338a <HAL_CAN_Init+0xc2>
 8003380:	f240 1123 	movw	r1, #291	; 0x123
 8003384:	4875      	ldr	r0, [pc, #468]	; (800355c <HAL_CAN_Init+0x294>)
 8003386:	f7fd fe5d 	bl	8001044 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d013      	beq.n	80033ba <HAL_CAN_Init+0xf2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339a:	d00e      	beq.n	80033ba <HAL_CAN_Init+0xf2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033a4:	d009      	beq.n	80033ba <HAL_CAN_Init+0xf2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80033ae:	d004      	beq.n	80033ba <HAL_CAN_Init+0xf2>
 80033b0:	f44f 7192 	mov.w	r1, #292	; 0x124
 80033b4:	4869      	ldr	r0, [pc, #420]	; (800355c <HAL_CAN_Init+0x294>)
 80033b6:	f7fd fe45 	bl	8001044 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d013      	beq.n	80033ea <HAL_CAN_Init+0x122>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033ca:	d00e      	beq.n	80033ea <HAL_CAN_Init+0x122>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033d4:	d009      	beq.n	80033ea <HAL_CAN_Init+0x122>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033de:	d004      	beq.n	80033ea <HAL_CAN_Init+0x122>
 80033e0:	f240 1125 	movw	r1, #293	; 0x125
 80033e4:	485d      	ldr	r0, [pc, #372]	; (800355c <HAL_CAN_Init+0x294>)
 80033e6:	f7fd fe2d 	bl	8001044 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d04f      	beq.n	8003492 <HAL_CAN_Init+0x1ca>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fa:	d04a      	beq.n	8003492 <HAL_CAN_Init+0x1ca>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003404:	d045      	beq.n	8003492 <HAL_CAN_Init+0x1ca>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800340e:	d040      	beq.n	8003492 <HAL_CAN_Init+0x1ca>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003418:	d03b      	beq.n	8003492 <HAL_CAN_Init+0x1ca>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003422:	d036      	beq.n	8003492 <HAL_CAN_Init+0x1ca>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800342c:	d031      	beq.n	8003492 <HAL_CAN_Init+0x1ca>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8003436:	d02c      	beq.n	8003492 <HAL_CAN_Init+0x1ca>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003440:	d027      	beq.n	8003492 <HAL_CAN_Init+0x1ca>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 800344a:	d022      	beq.n	8003492 <HAL_CAN_Init+0x1ca>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8003454:	d01d      	beq.n	8003492 <HAL_CAN_Init+0x1ca>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 800345e:	d018      	beq.n	8003492 <HAL_CAN_Init+0x1ca>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003468:	d013      	beq.n	8003492 <HAL_CAN_Init+0x1ca>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8003472:	d00e      	beq.n	8003492 <HAL_CAN_Init+0x1ca>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800347c:	d009      	beq.n	8003492 <HAL_CAN_Init+0x1ca>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8003486:	d004      	beq.n	8003492 <HAL_CAN_Init+0x1ca>
 8003488:	f44f 7193 	mov.w	r1, #294	; 0x126
 800348c:	4833      	ldr	r0, [pc, #204]	; (800355c <HAL_CAN_Init+0x294>)
 800348e:	f7fd fdd9 	bl	8001044 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d027      	beq.n	80034ea <HAL_CAN_Init+0x222>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034a2:	d022      	beq.n	80034ea <HAL_CAN_Init+0x222>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ac:	d01d      	beq.n	80034ea <HAL_CAN_Init+0x222>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034b6:	d018      	beq.n	80034ea <HAL_CAN_Init+0x222>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034c0:	d013      	beq.n	80034ea <HAL_CAN_Init+0x222>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80034ca:	d00e      	beq.n	80034ea <HAL_CAN_Init+0x222>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80034d4:	d009      	beq.n	80034ea <HAL_CAN_Init+0x222>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80034de:	d004      	beq.n	80034ea <HAL_CAN_Init+0x222>
 80034e0:	f240 1127 	movw	r1, #295	; 0x127
 80034e4:	481d      	ldr	r0, [pc, #116]	; (800355c <HAL_CAN_Init+0x294>)
 80034e6:	f7fd fdad 	bl	8001044 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d004      	beq.n	80034fc <HAL_CAN_Init+0x234>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034fa:	d904      	bls.n	8003506 <HAL_CAN_Init+0x23e>
 80034fc:	f44f 7194 	mov.w	r1, #296	; 0x128
 8003500:	4816      	ldr	r0, [pc, #88]	; (800355c <HAL_CAN_Init+0x294>)
 8003502:	f7fd fd9f 	bl	8001044 <assert_failed>

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d14c      	bne.n	80035ac <HAL_CAN_Init+0x2e4>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a12      	ldr	r2, [pc, #72]	; (8003560 <HAL_CAN_Init+0x298>)
 8003516:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a12      	ldr	r2, [pc, #72]	; (8003564 <HAL_CAN_Init+0x29c>)
 800351c:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a11      	ldr	r2, [pc, #68]	; (8003568 <HAL_CAN_Init+0x2a0>)
 8003522:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a11      	ldr	r2, [pc, #68]	; (800356c <HAL_CAN_Init+0x2a4>)
 8003528:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a10      	ldr	r2, [pc, #64]	; (8003570 <HAL_CAN_Init+0x2a8>)
 800352e:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a10      	ldr	r2, [pc, #64]	; (8003574 <HAL_CAN_Init+0x2ac>)
 8003534:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a0f      	ldr	r2, [pc, #60]	; (8003578 <HAL_CAN_Init+0x2b0>)
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a0f      	ldr	r2, [pc, #60]	; (800357c <HAL_CAN_Init+0x2b4>)
 8003540:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a0e      	ldr	r2, [pc, #56]	; (8003580 <HAL_CAN_Init+0x2b8>)
 8003546:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a0e      	ldr	r2, [pc, #56]	; (8003584 <HAL_CAN_Init+0x2bc>)
 800354c:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a0d      	ldr	r2, [pc, #52]	; (8003588 <HAL_CAN_Init+0x2c0>)
 8003552:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	e019      	b.n	800358c <HAL_CAN_Init+0x2c4>
 8003558:	40006400 	.word	0x40006400
 800355c:	0800e3bc 	.word	0x0800e3bc
 8003560:	08003b83 	.word	0x08003b83
 8003564:	08003b97 	.word	0x08003b97
 8003568:	08003bab 	.word	0x08003bab
 800356c:	08003bbf 	.word	0x08003bbf
 8003570:	08003b0b 	.word	0x08003b0b
 8003574:	08003b1f 	.word	0x08003b1f
 8003578:	08003b33 	.word	0x08003b33
 800357c:	08003b47 	.word	0x08003b47
 8003580:	08003b5b 	.word	0x08003b5b
 8003584:	08003b6f 	.word	0x08003b6f
 8003588:	08003bd3 	.word	0x08003bd3
 800358c:	4a7c      	ldr	r2, [pc, #496]	; (8003780 <HAL_CAN_Init+0x4b8>)
 800358e:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a7c      	ldr	r2, [pc, #496]	; (8003784 <HAL_CAN_Init+0x4bc>)
 8003594:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d102      	bne.n	80035a4 <HAL_CAN_Init+0x2dc>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a79      	ldr	r2, [pc, #484]	; (8003788 <HAL_CAN_Init+0x4c0>)
 80035a2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0202 	bic.w	r2, r2, #2
 80035ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035bc:	f7fe f8fc 	bl	80017b8 <HAL_GetTick>
 80035c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035c2:	e012      	b.n	80035ea <HAL_CAN_Init+0x322>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035c4:	f7fe f8f8 	bl	80017b8 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b0a      	cmp	r3, #10
 80035d0:	d90b      	bls.n	80035ea <HAL_CAN_Init+0x322>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2205      	movs	r2, #5
 80035e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e0c5      	b.n	8003776 <HAL_CAN_Init+0x4ae>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e5      	bne.n	80035c4 <HAL_CAN_Init+0x2fc>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0201 	orr.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003608:	f7fe f8d6 	bl	80017b8 <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800360e:	e012      	b.n	8003636 <HAL_CAN_Init+0x36e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003610:	f7fe f8d2 	bl	80017b8 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b0a      	cmp	r3, #10
 800361c:	d90b      	bls.n	8003636 <HAL_CAN_Init+0x36e>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2205      	movs	r2, #5
 800362e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e09f      	b.n	8003776 <HAL_CAN_Init+0x4ae>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0e5      	beq.n	8003610 <HAL_CAN_Init+0x348>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	7e1b      	ldrb	r3, [r3, #24]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d108      	bne.n	800365e <HAL_CAN_Init+0x396>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	e007      	b.n	800366e <HAL_CAN_Init+0x3a6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800366c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	7e5b      	ldrb	r3, [r3, #25]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d108      	bne.n	8003688 <HAL_CAN_Init+0x3c0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	e007      	b.n	8003698 <HAL_CAN_Init+0x3d0>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003696:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	7e9b      	ldrb	r3, [r3, #26]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d108      	bne.n	80036b2 <HAL_CAN_Init+0x3ea>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0220 	orr.w	r2, r2, #32
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	e007      	b.n	80036c2 <HAL_CAN_Init+0x3fa>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0220 	bic.w	r2, r2, #32
 80036c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	7edb      	ldrb	r3, [r3, #27]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d108      	bne.n	80036dc <HAL_CAN_Init+0x414>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0210 	bic.w	r2, r2, #16
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	e007      	b.n	80036ec <HAL_CAN_Init+0x424>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0210 	orr.w	r2, r2, #16
 80036ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	7f1b      	ldrb	r3, [r3, #28]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d108      	bne.n	8003706 <HAL_CAN_Init+0x43e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0208 	orr.w	r2, r2, #8
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	e007      	b.n	8003716 <HAL_CAN_Init+0x44e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0208 	bic.w	r2, r2, #8
 8003714:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	7f5b      	ldrb	r3, [r3, #29]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d108      	bne.n	8003730 <HAL_CAN_Init+0x468>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0204 	orr.w	r2, r2, #4
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	e007      	b.n	8003740 <HAL_CAN_Init+0x478>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0204 	bic.w	r2, r2, #4
 800373e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	431a      	orrs	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	ea42 0103 	orr.w	r1, r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	1e5a      	subs	r2, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	08003be7 	.word	0x08003be7
 8003784:	08003bfb 	.word	0x08003bfb
 8003788:	08000779 	.word	0x08000779

0800378c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08a      	sub	sp, #40	; 0x28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003794:	2300      	movs	r3, #0
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 8083 	beq.w	80038da <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d025      	beq.n	800382a <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2201      	movs	r2, #1
 80037e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d004      	beq.n	80037fa <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	4798      	blx	r3
 80037f8:	e017      	b.n	800382a <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d004      	beq.n	800380e <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
 800380c:	e00d      	b.n	800382a <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b00      	cmp	r3, #0
 8003816:	d004      	beq.n	8003822 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
 8003820:	e003      	b.n	800382a <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d026      	beq.n	8003882 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800383c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003844:	2b00      	cmp	r3, #0
 8003846:	d004      	beq.n	8003852 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	4798      	blx	r3
 8003850:	e017      	b.n	8003882 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003858:	2b00      	cmp	r3, #0
 800385a:	d004      	beq.n	8003866 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
 8003864:	e00d      	b.n	8003882 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800386c:	2b00      	cmp	r3, #0
 800386e:	d004      	beq.n	800387a <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
 8003878:	e003      	b.n	8003882 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d026      	beq.n	80038da <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003894:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d004      	beq.n	80038aa <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	4798      	blx	r3
 80038a8:	e017      	b.n	80038da <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d004      	beq.n	80038be <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24
 80038bc:	e00d      	b.n	80038da <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d004      	beq.n	80038d2 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
 80038d0:	e003      	b.n	80038da <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00c      	beq.n	80038fe <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d007      	beq.n	80038fe <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2210      	movs	r2, #16
 80038fc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00c      	beq.n	8003922 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d007      	beq.n	8003922 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2208      	movs	r2, #8
 8003918:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 mesage pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00c      	beq.n	8003966 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f003 0310 	and.w	r3, r3, #16
 8003952:	2b00      	cmp	r3, #0
 8003954:	d007      	beq.n	8003966 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800395c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2210      	movs	r2, #16
 8003964:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	f003 0320 	and.w	r3, r3, #32
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00c      	beq.n	800398a <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d007      	beq.n	800398a <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2208      	movs	r2, #8
 8003980:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	f003 0310 	and.w	r3, r3, #16
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 mesage pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00c      	beq.n	80039ce <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f003 0310 	and.w	r3, r3, #16
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d007      	beq.n	80039ce <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2210      	movs	r2, #16
 80039c4:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00c      	beq.n	80039f2 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d007      	beq.n	80039f2 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2208      	movs	r2, #8
 80039e8:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d075      	beq.n	8003ae8 <HAL_CAN_IRQHandler+0x35c>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d06c      	beq.n	8003ae0 <HAL_CAN_IRQHandler+0x354>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	f043 0302 	orr.w	r3, r3, #2
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	f043 0304 	orr.w	r3, r3, #4
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d03d      	beq.n	8003ae0 <HAL_CAN_IRQHandler+0x354>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d038      	beq.n	8003ae0 <HAL_CAN_IRQHandler+0x354>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a74:	2b30      	cmp	r3, #48	; 0x30
 8003a76:	d017      	beq.n	8003aa8 <HAL_CAN_IRQHandler+0x31c>
 8003a78:	2b30      	cmp	r3, #48	; 0x30
 8003a7a:	d804      	bhi.n	8003a86 <HAL_CAN_IRQHandler+0x2fa>
 8003a7c:	2b10      	cmp	r3, #16
 8003a7e:	d009      	beq.n	8003a94 <HAL_CAN_IRQHandler+0x308>
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	d00c      	beq.n	8003a9e <HAL_CAN_IRQHandler+0x312>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a84:	e024      	b.n	8003ad0 <HAL_CAN_IRQHandler+0x344>
        switch (esrflags & CAN_ESR_LEC)
 8003a86:	2b50      	cmp	r3, #80	; 0x50
 8003a88:	d018      	beq.n	8003abc <HAL_CAN_IRQHandler+0x330>
 8003a8a:	2b60      	cmp	r3, #96	; 0x60
 8003a8c:	d01b      	beq.n	8003ac6 <HAL_CAN_IRQHandler+0x33a>
 8003a8e:	2b40      	cmp	r3, #64	; 0x40
 8003a90:	d00f      	beq.n	8003ab2 <HAL_CAN_IRQHandler+0x326>
            break;
 8003a92:	e01d      	b.n	8003ad0 <HAL_CAN_IRQHandler+0x344>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	f043 0308 	orr.w	r3, r3, #8
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a9c:	e018      	b.n	8003ad0 <HAL_CAN_IRQHandler+0x344>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	f043 0310 	orr.w	r3, r3, #16
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003aa6:	e013      	b.n	8003ad0 <HAL_CAN_IRQHandler+0x344>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	f043 0320 	orr.w	r3, r3, #32
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ab0:	e00e      	b.n	8003ad0 <HAL_CAN_IRQHandler+0x344>
            errorcode |= HAL_CAN_ERROR_BR;
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003aba:	e009      	b.n	8003ad0 <HAL_CAN_IRQHandler+0x344>
            errorcode |= HAL_CAN_ERROR_BD;
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ac4:	e004      	b.n	8003ad0 <HAL_CAN_IRQHandler+0x344>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ace:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699a      	ldr	r2, [r3, #24]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ade:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2204      	movs	r2, #4
 8003ae6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d009      	beq.n	8003b02 <HAL_CAN_IRQHandler+0x376>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003b02:	bf00      	nop
 8003b04:	3728      	adds	r7, #40	; 0x28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
	...

08003c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c20:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <__NVIC_SetPriorityGrouping+0x44>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c42:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <__NVIC_SetPriorityGrouping+0x44>)
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	60d3      	str	r3, [r2, #12]
}
 8003c48:	bf00      	nop
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	e000ed00 	.word	0xe000ed00

08003c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c5c:	4b04      	ldr	r3, [pc, #16]	; (8003c70 <__NVIC_GetPriorityGrouping+0x18>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	0a1b      	lsrs	r3, r3, #8
 8003c62:	f003 0307 	and.w	r3, r3, #7
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	db0b      	blt.n	8003c9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	f003 021f 	and.w	r2, r3, #31
 8003c8c:	4907      	ldr	r1, [pc, #28]	; (8003cac <__NVIC_EnableIRQ+0x38>)
 8003c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	2001      	movs	r0, #1
 8003c96:	fa00 f202 	lsl.w	r2, r0, r2
 8003c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	e000e100 	.word	0xe000e100

08003cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	6039      	str	r1, [r7, #0]
 8003cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	db0a      	blt.n	8003cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	490c      	ldr	r1, [pc, #48]	; (8003cfc <__NVIC_SetPriority+0x4c>)
 8003cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cce:	0112      	lsls	r2, r2, #4
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cd8:	e00a      	b.n	8003cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	4908      	ldr	r1, [pc, #32]	; (8003d00 <__NVIC_SetPriority+0x50>)
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	3b04      	subs	r3, #4
 8003ce8:	0112      	lsls	r2, r2, #4
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	440b      	add	r3, r1
 8003cee:	761a      	strb	r2, [r3, #24]
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	e000e100 	.word	0xe000e100
 8003d00:	e000ed00 	.word	0xe000ed00

08003d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b089      	sub	sp, #36	; 0x24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f1c3 0307 	rsb	r3, r3, #7
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	bf28      	it	cs
 8003d22:	2304      	movcs	r3, #4
 8003d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	2b06      	cmp	r3, #6
 8003d2c:	d902      	bls.n	8003d34 <NVIC_EncodePriority+0x30>
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	3b03      	subs	r3, #3
 8003d32:	e000      	b.n	8003d36 <NVIC_EncodePriority+0x32>
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	43da      	mvns	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	401a      	ands	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	fa01 f303 	lsl.w	r3, r1, r3
 8003d56:	43d9      	mvns	r1, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d5c:	4313      	orrs	r3, r2
         );
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3724      	adds	r7, #36	; 0x24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
	...

08003d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b07      	cmp	r3, #7
 8003d78:	d00f      	beq.n	8003d9a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b06      	cmp	r3, #6
 8003d7e:	d00c      	beq.n	8003d9a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b05      	cmp	r3, #5
 8003d84:	d009      	beq.n	8003d9a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d006      	beq.n	8003d9a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	d003      	beq.n	8003d9a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003d92:	21a7      	movs	r1, #167	; 0xa7
 8003d94:	4804      	ldr	r0, [pc, #16]	; (8003da8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003d96:	f7fd f955 	bl	8001044 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff ff38 	bl	8003c10 <__NVIC_SetPriorityGrouping>
}
 8003da0:	bf00      	nop
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	0800e3f4 	.word	0x0800e3f4

08003dac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
 8003db8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b0f      	cmp	r3, #15
 8003dc2:	d903      	bls.n	8003dcc <HAL_NVIC_SetPriority+0x20>
 8003dc4:	21bf      	movs	r1, #191	; 0xbf
 8003dc6:	480e      	ldr	r0, [pc, #56]	; (8003e00 <HAL_NVIC_SetPriority+0x54>)
 8003dc8:	f7fd f93c 	bl	8001044 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b0f      	cmp	r3, #15
 8003dd0:	d903      	bls.n	8003dda <HAL_NVIC_SetPriority+0x2e>
 8003dd2:	21c0      	movs	r1, #192	; 0xc0
 8003dd4:	480a      	ldr	r0, [pc, #40]	; (8003e00 <HAL_NVIC_SetPriority+0x54>)
 8003dd6:	f7fd f935 	bl	8001044 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8003dda:	f7ff ff3d 	bl	8003c58 <__NVIC_GetPriorityGrouping>
 8003dde:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	68b9      	ldr	r1, [r7, #8]
 8003de4:	6978      	ldr	r0, [r7, #20]
 8003de6:	f7ff ff8d 	bl	8003d04 <NVIC_EncodePriority>
 8003dea:	4602      	mov	r2, r0
 8003dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003df0:	4611      	mov	r1, r2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff ff5c 	bl	8003cb0 <__NVIC_SetPriority>
}
 8003df8:	bf00      	nop
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	0800e3f4 	.word	0x0800e3f4

08003e04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	da03      	bge.n	8003e1e <HAL_NVIC_EnableIRQ+0x1a>
 8003e16:	21d3      	movs	r1, #211	; 0xd3
 8003e18:	4805      	ldr	r0, [pc, #20]	; (8003e30 <HAL_NVIC_EnableIRQ+0x2c>)
 8003e1a:	f7fd f913 	bl	8001044 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff ff26 	bl	8003c74 <__NVIC_EnableIRQ>
}
 8003e28:	bf00      	nop
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	0800e3f4 	.word	0x0800e3f4

08003e34 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e0a5      	b.n	8003f92 <HAL_CRC_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a54      	ldr	r2, [pc, #336]	; (8003f9c <HAL_CRC_Init+0x168>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d003      	beq.n	8003e58 <HAL_CRC_Init+0x24>
 8003e50:	2170      	movs	r1, #112	; 0x70
 8003e52:	4853      	ldr	r0, [pc, #332]	; (8003fa0 <HAL_CRC_Init+0x16c>)
 8003e54:	f7fd f8f6 	bl	8001044 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	7f5b      	ldrb	r3, [r3, #29]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d105      	bne.n	8003e6e <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7fc fd03 	bl	8000874 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2202      	movs	r2, #2
 8003e72:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	791b      	ldrb	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d007      	beq.n	8003e8c <HAL_CRC_Init+0x58>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	791b      	ldrb	r3, [r3, #4]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d003      	beq.n	8003e8c <HAL_CRC_Init+0x58>
 8003e84:	217e      	movs	r1, #126	; 0x7e
 8003e86:	4846      	ldr	r0, [pc, #280]	; (8003fa0 <HAL_CRC_Init+0x16c>)
 8003e88:	f7fd f8dc 	bl	8001044 <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	791b      	ldrb	r3, [r3, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10c      	bne.n	8003eae <HAL_CRC_Init+0x7a>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a42      	ldr	r2, [pc, #264]	; (8003fa4 <HAL_CRC_Init+0x170>)
 8003e9a:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0218 	bic.w	r2, r2, #24
 8003eaa:	609a      	str	r2, [r3, #8]
 8003eac:	e00c      	b.n	8003ec8 <HAL_CRC_Init+0x94>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6899      	ldr	r1, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f875 	bl	8003fa8 <HAL_CRCEx_Polynomial_Set>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_CRC_Init+0x94>
    {
      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e064      	b.n	8003f92 <HAL_CRC_Init+0x15e>
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	795b      	ldrb	r3, [r3, #5]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d007      	beq.n	8003ee0 <HAL_CRC_Init+0xac>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	795b      	ldrb	r3, [r3, #5]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d003      	beq.n	8003ee0 <HAL_CRC_Init+0xac>
 8003ed8:	2190      	movs	r1, #144	; 0x90
 8003eda:	4831      	ldr	r0, [pc, #196]	; (8003fa0 <HAL_CRC_Init+0x16c>)
 8003edc:	f7fd f8b2 	bl	8001044 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	795b      	ldrb	r3, [r3, #5]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d105      	bne.n	8003ef4 <HAL_CRC_Init+0xc0>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ef0:	611a      	str	r2, [r3, #16]
 8003ef2:	e004      	b.n	8003efe <HAL_CRC_Init+0xca>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6912      	ldr	r2, [r2, #16]
 8003efc:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00f      	beq.n	8003f26 <HAL_CRC_Init+0xf2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	d00b      	beq.n	8003f26 <HAL_CRC_Init+0xf2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	2b40      	cmp	r3, #64	; 0x40
 8003f14:	d007      	beq.n	8003f26 <HAL_CRC_Init+0xf2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	2b60      	cmp	r3, #96	; 0x60
 8003f1c:	d003      	beq.n	8003f26 <HAL_CRC_Init+0xf2>
 8003f1e:	219c      	movs	r1, #156	; 0x9c
 8003f20:	481f      	ldr	r0, [pc, #124]	; (8003fa0 <HAL_CRC_Init+0x16c>)
 8003f22:	f7fd f88f 	bl	8001044 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	695a      	ldr	r2, [r3, #20]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d007      	beq.n	8003f54 <HAL_CRC_Init+0x120>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	2b80      	cmp	r3, #128	; 0x80
 8003f4a:	d003      	beq.n	8003f54 <HAL_CRC_Init+0x120>
 8003f4c:	21a0      	movs	r1, #160	; 0xa0
 8003f4e:	4814      	ldr	r0, [pc, #80]	; (8003fa0 <HAL_CRC_Init+0x16c>)
 8003f50:	f7fd f878 	bl	8001044 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	609a      	str	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d00b      	beq.n	8003f8a <HAL_CRC_Init+0x156>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d007      	beq.n	8003f8a <HAL_CRC_Init+0x156>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d003      	beq.n	8003f8a <HAL_CRC_Init+0x156>
 8003f82:	21a5      	movs	r1, #165	; 0xa5
 8003f84:	4806      	ldr	r0, [pc, #24]	; (8003fa0 <HAL_CRC_Init+0x16c>)
 8003f86:	f7fd f85d 	bl	8001044 <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40023000 	.word	0x40023000
 8003fa0:	0800e430 	.word	0x0800e430
 8003fa4:	04c11db7 	.word	0x04c11db7

08003fa8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003fb8:	231f      	movs	r3, #31
 8003fba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00c      	beq.n	8003fdc <HAL_CRCEx_Polynomial_Set+0x34>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d009      	beq.n	8003fdc <HAL_CRCEx_Polynomial_Set+0x34>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b10      	cmp	r3, #16
 8003fcc:	d006      	beq.n	8003fdc <HAL_CRCEx_Polynomial_Set+0x34>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b18      	cmp	r3, #24
 8003fd2:	d003      	beq.n	8003fdc <HAL_CRCEx_Polynomial_Set+0x34>
 8003fd4:	215f      	movs	r1, #95	; 0x5f
 8003fd6:	483e      	ldr	r0, [pc, #248]	; (80040d0 <HAL_CRCEx_Polynomial_Set+0x128>)
 8003fd8:	f7fd f834 	bl	8001044 <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003fdc:	bf00      	nop
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1e5a      	subs	r2, r3, #1
 8003fe2:	613a      	str	r2, [r7, #16]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d009      	beq.n	8003ffc <HAL_CRCEx_Polynomial_Set+0x54>
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f003 031f 	and.w	r3, r3, #31
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_CRCEx_Polynomial_Set+0x36>
  {
  }

  switch (PolyLength)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b18      	cmp	r3, #24
 8004000:	d846      	bhi.n	8004090 <HAL_CRCEx_Polynomial_Set+0xe8>
 8004002:	a201      	add	r2, pc, #4	; (adr r2, 8004008 <HAL_CRCEx_Polynomial_Set+0x60>)
 8004004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004008:	08004097 	.word	0x08004097
 800400c:	08004091 	.word	0x08004091
 8004010:	08004091 	.word	0x08004091
 8004014:	08004091 	.word	0x08004091
 8004018:	08004091 	.word	0x08004091
 800401c:	08004091 	.word	0x08004091
 8004020:	08004091 	.word	0x08004091
 8004024:	08004091 	.word	0x08004091
 8004028:	08004085 	.word	0x08004085
 800402c:	08004091 	.word	0x08004091
 8004030:	08004091 	.word	0x08004091
 8004034:	08004091 	.word	0x08004091
 8004038:	08004091 	.word	0x08004091
 800403c:	08004091 	.word	0x08004091
 8004040:	08004091 	.word	0x08004091
 8004044:	08004091 	.word	0x08004091
 8004048:	08004079 	.word	0x08004079
 800404c:	08004091 	.word	0x08004091
 8004050:	08004091 	.word	0x08004091
 8004054:	08004091 	.word	0x08004091
 8004058:	08004091 	.word	0x08004091
 800405c:	08004091 	.word	0x08004091
 8004060:	08004091 	.word	0x08004091
 8004064:	08004091 	.word	0x08004091
 8004068:	0800406d 	.word	0x0800406d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	2b06      	cmp	r3, #6
 8004070:	d913      	bls.n	800409a <HAL_CRCEx_Polynomial_Set+0xf2>
      {
        status =   HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004076:	e010      	b.n	800409a <HAL_CRCEx_Polynomial_Set+0xf2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	2b07      	cmp	r3, #7
 800407c:	d90f      	bls.n	800409e <HAL_CRCEx_Polynomial_Set+0xf6>
      {
        status =   HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004082:	e00c      	b.n	800409e <HAL_CRCEx_Polynomial_Set+0xf6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	2b0f      	cmp	r3, #15
 8004088:	d90b      	bls.n	80040a2 <HAL_CRCEx_Polynomial_Set+0xfa>
      {
        status =   HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800408e:	e008      	b.n	80040a2 <HAL_CRCEx_Polynomial_Set+0xfa>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	75fb      	strb	r3, [r7, #23]
      break;
 8004094:	e006      	b.n	80040a4 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8004096:	bf00      	nop
 8004098:	e004      	b.n	80040a4 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 800409a:	bf00      	nop
 800409c:	e002      	b.n	80040a4 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 800409e:	bf00      	nop
 80040a0:	e000      	b.n	80040a4 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 80040a2:	bf00      	nop
  }
  if (status == HAL_OK)
 80040a4:	7dfb      	ldrb	r3, [r7, #23]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10d      	bne.n	80040c6 <HAL_CRCEx_Polynomial_Set+0x11e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f023 0118 	bic.w	r1, r3, #24
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80040c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	0800e468 	.word	0x0800e468

080040d4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e176      	b.n	80043d4 <HAL_DMA_Init+0x300>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a6b      	ldr	r2, [pc, #428]	; (8004298 <HAL_DMA_Init+0x1c4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d044      	beq.n	800417a <HAL_DMA_Init+0xa6>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a69      	ldr	r2, [pc, #420]	; (800429c <HAL_DMA_Init+0x1c8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d03f      	beq.n	800417a <HAL_DMA_Init+0xa6>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a68      	ldr	r2, [pc, #416]	; (80042a0 <HAL_DMA_Init+0x1cc>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d03a      	beq.n	800417a <HAL_DMA_Init+0xa6>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a66      	ldr	r2, [pc, #408]	; (80042a4 <HAL_DMA_Init+0x1d0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d035      	beq.n	800417a <HAL_DMA_Init+0xa6>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a65      	ldr	r2, [pc, #404]	; (80042a8 <HAL_DMA_Init+0x1d4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d030      	beq.n	800417a <HAL_DMA_Init+0xa6>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a63      	ldr	r2, [pc, #396]	; (80042ac <HAL_DMA_Init+0x1d8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d02b      	beq.n	800417a <HAL_DMA_Init+0xa6>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a62      	ldr	r2, [pc, #392]	; (80042b0 <HAL_DMA_Init+0x1dc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d026      	beq.n	800417a <HAL_DMA_Init+0xa6>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a60      	ldr	r2, [pc, #384]	; (80042b4 <HAL_DMA_Init+0x1e0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d021      	beq.n	800417a <HAL_DMA_Init+0xa6>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a5f      	ldr	r2, [pc, #380]	; (80042b8 <HAL_DMA_Init+0x1e4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d01c      	beq.n	800417a <HAL_DMA_Init+0xa6>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a5d      	ldr	r2, [pc, #372]	; (80042bc <HAL_DMA_Init+0x1e8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d017      	beq.n	800417a <HAL_DMA_Init+0xa6>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a5c      	ldr	r2, [pc, #368]	; (80042c0 <HAL_DMA_Init+0x1ec>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d012      	beq.n	800417a <HAL_DMA_Init+0xa6>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a5a      	ldr	r2, [pc, #360]	; (80042c4 <HAL_DMA_Init+0x1f0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00d      	beq.n	800417a <HAL_DMA_Init+0xa6>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a59      	ldr	r2, [pc, #356]	; (80042c8 <HAL_DMA_Init+0x1f4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d008      	beq.n	800417a <HAL_DMA_Init+0xa6>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a57      	ldr	r2, [pc, #348]	; (80042cc <HAL_DMA_Init+0x1f8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d003      	beq.n	800417a <HAL_DMA_Init+0xa6>
 8004172:	21a4      	movs	r1, #164	; 0xa4
 8004174:	4856      	ldr	r0, [pc, #344]	; (80042d0 <HAL_DMA_Init+0x1fc>)
 8004176:	f7fc ff65 	bl	8001044 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00c      	beq.n	800419c <HAL_DMA_Init+0xc8>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	2b10      	cmp	r3, #16
 8004188:	d008      	beq.n	800419c <HAL_DMA_Init+0xc8>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004192:	d003      	beq.n	800419c <HAL_DMA_Init+0xc8>
 8004194:	21a5      	movs	r1, #165	; 0xa5
 8004196:	484e      	ldr	r0, [pc, #312]	; (80042d0 <HAL_DMA_Init+0x1fc>)
 8004198:	f7fc ff54 	bl	8001044 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2b40      	cmp	r3, #64	; 0x40
 80041a2:	d007      	beq.n	80041b4 <HAL_DMA_Init+0xe0>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_DMA_Init+0xe0>
 80041ac:	21a6      	movs	r1, #166	; 0xa6
 80041ae:	4848      	ldr	r0, [pc, #288]	; (80042d0 <HAL_DMA_Init+0x1fc>)
 80041b0:	f7fc ff48 	bl	8001044 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	2b80      	cmp	r3, #128	; 0x80
 80041ba:	d007      	beq.n	80041cc <HAL_DMA_Init+0xf8>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <HAL_DMA_Init+0xf8>
 80041c4:	21a7      	movs	r1, #167	; 0xa7
 80041c6:	4842      	ldr	r0, [pc, #264]	; (80042d0 <HAL_DMA_Init+0x1fc>)
 80041c8:	f7fc ff3c 	bl	8001044 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00d      	beq.n	80041f0 <HAL_DMA_Init+0x11c>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041dc:	d008      	beq.n	80041f0 <HAL_DMA_Init+0x11c>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e6:	d003      	beq.n	80041f0 <HAL_DMA_Init+0x11c>
 80041e8:	21a8      	movs	r1, #168	; 0xa8
 80041ea:	4839      	ldr	r0, [pc, #228]	; (80042d0 <HAL_DMA_Init+0x1fc>)
 80041ec:	f7fc ff2a 	bl	8001044 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00d      	beq.n	8004214 <HAL_DMA_Init+0x140>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004200:	d008      	beq.n	8004214 <HAL_DMA_Init+0x140>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800420a:	d003      	beq.n	8004214 <HAL_DMA_Init+0x140>
 800420c:	21a9      	movs	r1, #169	; 0xa9
 800420e:	4830      	ldr	r0, [pc, #192]	; (80042d0 <HAL_DMA_Init+0x1fc>)
 8004210:	f7fc ff18 	bl	8001044 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d007      	beq.n	800422c <HAL_DMA_Init+0x158>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	2b20      	cmp	r3, #32
 8004222:	d003      	beq.n	800422c <HAL_DMA_Init+0x158>
 8004224:	21aa      	movs	r1, #170	; 0xaa
 8004226:	482a      	ldr	r0, [pc, #168]	; (80042d0 <HAL_DMA_Init+0x1fc>)
 8004228:	f7fc ff0c 	bl	8001044 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d012      	beq.n	800425a <HAL_DMA_Init+0x186>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423c:	d00d      	beq.n	800425a <HAL_DMA_Init+0x186>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004246:	d008      	beq.n	800425a <HAL_DMA_Init+0x186>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004250:	d003      	beq.n	800425a <HAL_DMA_Init+0x186>
 8004252:	21ab      	movs	r1, #171	; 0xab
 8004254:	481e      	ldr	r0, [pc, #120]	; (80042d0 <HAL_DMA_Init+0x1fc>)
 8004256:	f7fc fef5 	bl	8001044 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b5d      	cmp	r3, #93	; 0x5d
 8004260:	d903      	bls.n	800426a <HAL_DMA_Init+0x196>
 8004262:	21ad      	movs	r1, #173	; 0xad
 8004264:	481a      	ldr	r0, [pc, #104]	; (80042d0 <HAL_DMA_Init+0x1fc>)
 8004266:	f7fc feed 	bl	8001044 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	4b18      	ldr	r3, [pc, #96]	; (80042d4 <HAL_DMA_Init+0x200>)
 8004272:	429a      	cmp	r2, r3
 8004274:	d836      	bhi.n	80042e4 <HAL_DMA_Init+0x210>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	4b16      	ldr	r3, [pc, #88]	; (80042d8 <HAL_DMA_Init+0x204>)
 800427e:	4413      	add	r3, r2
 8004280:	4a16      	ldr	r2, [pc, #88]	; (80042dc <HAL_DMA_Init+0x208>)
 8004282:	fba2 2303 	umull	r2, r3, r2, r3
 8004286:	091b      	lsrs	r3, r3, #4
 8004288:	009a      	lsls	r2, r3, #2
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a13      	ldr	r2, [pc, #76]	; (80042e0 <HAL_DMA_Init+0x20c>)
 8004292:	641a      	str	r2, [r3, #64]	; 0x40
 8004294:	e035      	b.n	8004302 <HAL_DMA_Init+0x22e>
 8004296:	bf00      	nop
 8004298:	40020008 	.word	0x40020008
 800429c:	4002001c 	.word	0x4002001c
 80042a0:	40020030 	.word	0x40020030
 80042a4:	40020044 	.word	0x40020044
 80042a8:	40020058 	.word	0x40020058
 80042ac:	4002006c 	.word	0x4002006c
 80042b0:	40020080 	.word	0x40020080
 80042b4:	40020408 	.word	0x40020408
 80042b8:	4002041c 	.word	0x4002041c
 80042bc:	40020430 	.word	0x40020430
 80042c0:	40020444 	.word	0x40020444
 80042c4:	40020458 	.word	0x40020458
 80042c8:	4002046c 	.word	0x4002046c
 80042cc:	40020480 	.word	0x40020480
 80042d0:	0800e4a4 	.word	0x0800e4a4
 80042d4:	40020407 	.word	0x40020407
 80042d8:	bffdfff8 	.word	0xbffdfff8
 80042dc:	cccccccd 	.word	0xcccccccd
 80042e0:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	461a      	mov	r2, r3
 80042ea:	4b3c      	ldr	r3, [pc, #240]	; (80043dc <HAL_DMA_Init+0x308>)
 80042ec:	4413      	add	r3, r2
 80042ee:	4a3c      	ldr	r2, [pc, #240]	; (80043e0 <HAL_DMA_Init+0x30c>)
 80042f0:	fba2 2303 	umull	r2, r3, r2, r3
 80042f4:	091b      	lsrs	r3, r3, #4
 80042f6:	009a      	lsls	r2, r3, #2
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a39      	ldr	r2, [pc, #228]	; (80043e4 <HAL_DMA_Init+0x310>)
 8004300:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2202      	movs	r2, #2
 8004306:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004326:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800433e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4313      	orrs	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f955 	bl	8004604 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004362:	d102      	bne.n	800436a <HAL_DMA_Init+0x296>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800437e:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d010      	beq.n	80043aa <HAL_DMA_Init+0x2d6>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b04      	cmp	r3, #4
 800438e:	d80c      	bhi.n	80043aa <HAL_DMA_Init+0x2d6>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f975 	bl	8004680 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043a6:	605a      	str	r2, [r3, #4]
 80043a8:	e008      	b.n	80043bc <HAL_DMA_Init+0x2e8>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	bffdfbf8 	.word	0xbffdfbf8
 80043e0:	cccccccd 	.word	0xcccccccd
 80043e4:	40020400 	.word	0x40020400

080043e8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d005      	beq.n	800440c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2204      	movs	r2, #4
 8004404:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	73fb      	strb	r3, [r7, #15]
 800440a:	e047      	b.n	800449c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 020e 	bic.w	r2, r2, #14
 800441a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0201 	bic.w	r2, r2, #1
 800442a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004436:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800443a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004440:	f003 021c 	and.w	r2, r3, #28
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	2101      	movs	r1, #1
 800444a:	fa01 f202 	lsl.w	r2, r1, r2
 800444e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004458:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00c      	beq.n	800447c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004470:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800447a:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	4798      	blx	r3
    }
  }
  return status;
 800449c:	7bfb      	ldrb	r3, [r7, #15]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b084      	sub	sp, #16
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c2:	f003 031c 	and.w	r3, r3, #28
 80044c6:	2204      	movs	r2, #4
 80044c8:	409a      	lsls	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4013      	ands	r3, r2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d026      	beq.n	8004520 <HAL_DMA_IRQHandler+0x7a>
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d021      	beq.n	8004520 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d107      	bne.n	80044fa <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0204 	bic.w	r2, r2, #4
 80044f8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fe:	f003 021c 	and.w	r2, r3, #28
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	2104      	movs	r1, #4
 8004508:	fa01 f202 	lsl.w	r2, r1, r2
 800450c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	2b00      	cmp	r3, #0
 8004514:	d071      	beq.n	80045fa <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800451e:	e06c      	b.n	80045fa <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004524:	f003 031c 	and.w	r3, r3, #28
 8004528:	2202      	movs	r2, #2
 800452a:	409a      	lsls	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4013      	ands	r3, r2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d02e      	beq.n	8004592 <HAL_DMA_IRQHandler+0xec>
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d029      	beq.n	8004592 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10b      	bne.n	8004564 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 020a 	bic.w	r2, r2, #10
 800455a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004568:	f003 021c 	and.w	r2, r3, #28
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	2102      	movs	r1, #2
 8004572:	fa01 f202 	lsl.w	r2, r1, r2
 8004576:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	2b00      	cmp	r3, #0
 8004586:	d038      	beq.n	80045fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004590:	e033      	b.n	80045fa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	f003 031c 	and.w	r3, r3, #28
 800459a:	2208      	movs	r2, #8
 800459c:	409a      	lsls	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4013      	ands	r3, r2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d02a      	beq.n	80045fc <HAL_DMA_IRQHandler+0x156>
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d025      	beq.n	80045fc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 020e 	bic.w	r2, r2, #14
 80045be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c4:	f003 021c 	and.w	r2, r3, #28
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	2101      	movs	r1, #1
 80045ce:	fa01 f202 	lsl.w	r2, r1, r2
 80045d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d004      	beq.n	80045fc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80045fa:	bf00      	nop
 80045fc:	bf00      	nop
}
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	461a      	mov	r2, r3
 8004612:	4b17      	ldr	r3, [pc, #92]	; (8004670 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004614:	429a      	cmp	r2, r3
 8004616:	d80a      	bhi.n	800462e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461c:	089b      	lsrs	r3, r3, #2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004624:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6493      	str	r3, [r2, #72]	; 0x48
 800462c:	e007      	b.n	800463e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	089b      	lsrs	r3, r3, #2
 8004634:	009a      	lsls	r2, r3, #2
 8004636:	4b0f      	ldr	r3, [pc, #60]	; (8004674 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004638:	4413      	add	r3, r2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	b2db      	uxtb	r3, r3
 8004644:	3b08      	subs	r3, #8
 8004646:	4a0c      	ldr	r2, [pc, #48]	; (8004678 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004648:	fba2 2303 	umull	r2, r3, r2, r3
 800464c:	091b      	lsrs	r3, r3, #4
 800464e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a0a      	ldr	r2, [pc, #40]	; (800467c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004654:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	2201      	movs	r2, #1
 800465e:	409a      	lsls	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	40020407 	.word	0x40020407
 8004674:	4002081c 	.word	0x4002081c
 8004678:	cccccccd 	.word	0xcccccccd
 800467c:	40020880 	.word	0x40020880

08004680 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	b2db      	uxtb	r3, r3
 800468e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004694:	4413      	add	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	461a      	mov	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a08      	ldr	r2, [pc, #32]	; (80046c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80046a2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	f003 0303 	and.w	r3, r3, #3
 80046ac:	2201      	movs	r2, #1
 80046ae:	409a      	lsls	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80046b4:	bf00      	nop
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	1000823f 	.word	0x1000823f
 80046c4:	40020940 	.word	0x40020940

080046c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046d2:	2300      	movs	r3, #0
 80046d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046dc:	d023      	beq.n	8004726 <HAL_GPIO_Init+0x5e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a41      	ldr	r2, [pc, #260]	; (80047e8 <HAL_GPIO_Init+0x120>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d01f      	beq.n	8004726 <HAL_GPIO_Init+0x5e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a40      	ldr	r2, [pc, #256]	; (80047ec <HAL_GPIO_Init+0x124>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01b      	beq.n	8004726 <HAL_GPIO_Init+0x5e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a3f      	ldr	r2, [pc, #252]	; (80047f0 <HAL_GPIO_Init+0x128>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d017      	beq.n	8004726 <HAL_GPIO_Init+0x5e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a3e      	ldr	r2, [pc, #248]	; (80047f4 <HAL_GPIO_Init+0x12c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <HAL_GPIO_Init+0x5e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a3d      	ldr	r2, [pc, #244]	; (80047f8 <HAL_GPIO_Init+0x130>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00f      	beq.n	8004726 <HAL_GPIO_Init+0x5e>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a3c      	ldr	r2, [pc, #240]	; (80047fc <HAL_GPIO_Init+0x134>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00b      	beq.n	8004726 <HAL_GPIO_Init+0x5e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a3b      	ldr	r2, [pc, #236]	; (8004800 <HAL_GPIO_Init+0x138>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d007      	beq.n	8004726 <HAL_GPIO_Init+0x5e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a3a      	ldr	r2, [pc, #232]	; (8004804 <HAL_GPIO_Init+0x13c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d003      	beq.n	8004726 <HAL_GPIO_Init+0x5e>
 800471e:	21b3      	movs	r1, #179	; 0xb3
 8004720:	4839      	ldr	r0, [pc, #228]	; (8004808 <HAL_GPIO_Init+0x140>)
 8004722:	f7fc fc8f 	bl	8001044 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	b29b      	uxth	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_GPIO_Init+0x74>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	0c1b      	lsrs	r3, r3, #16
 8004736:	041b      	lsls	r3, r3, #16
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_GPIO_Init+0x7c>
 800473c:	21b4      	movs	r1, #180	; 0xb4
 800473e:	4832      	ldr	r0, [pc, #200]	; (8004808 <HAL_GPIO_Init+0x140>)
 8004740:	f7fc fc80 	bl	8001044 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d039      	beq.n	80047c0 <HAL_GPIO_Init+0xf8>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d035      	beq.n	80047c0 <HAL_GPIO_Init+0xf8>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b11      	cmp	r3, #17
 800475a:	d031      	beq.n	80047c0 <HAL_GPIO_Init+0xf8>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2b02      	cmp	r3, #2
 8004762:	d02d      	beq.n	80047c0 <HAL_GPIO_Init+0xf8>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b12      	cmp	r3, #18
 800476a:	d029      	beq.n	80047c0 <HAL_GPIO_Init+0xf8>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	4a26      	ldr	r2, [pc, #152]	; (800480c <HAL_GPIO_Init+0x144>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d024      	beq.n	80047c0 <HAL_GPIO_Init+0xf8>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	4a25      	ldr	r2, [pc, #148]	; (8004810 <HAL_GPIO_Init+0x148>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d01f      	beq.n	80047c0 <HAL_GPIO_Init+0xf8>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	4a23      	ldr	r2, [pc, #140]	; (8004814 <HAL_GPIO_Init+0x14c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d01a      	beq.n	80047c0 <HAL_GPIO_Init+0xf8>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	4a22      	ldr	r2, [pc, #136]	; (8004818 <HAL_GPIO_Init+0x150>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d015      	beq.n	80047c0 <HAL_GPIO_Init+0xf8>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	4a20      	ldr	r2, [pc, #128]	; (800481c <HAL_GPIO_Init+0x154>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d010      	beq.n	80047c0 <HAL_GPIO_Init+0xf8>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	4a1f      	ldr	r2, [pc, #124]	; (8004820 <HAL_GPIO_Init+0x158>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d00b      	beq.n	80047c0 <HAL_GPIO_Init+0xf8>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d007      	beq.n	80047c0 <HAL_GPIO_Init+0xf8>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b0b      	cmp	r3, #11
 80047b6:	d003      	beq.n	80047c0 <HAL_GPIO_Init+0xf8>
 80047b8:	21b5      	movs	r1, #181	; 0xb5
 80047ba:	4813      	ldr	r0, [pc, #76]	; (8004808 <HAL_GPIO_Init+0x140>)
 80047bc:	f7fc fc42 	bl	8001044 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 81ee 	beq.w	8004ba6 <HAL_GPIO_Init+0x4de>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	f000 81e9 	beq.w	8004ba6 <HAL_GPIO_Init+0x4de>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	f000 81e4 	beq.w	8004ba6 <HAL_GPIO_Init+0x4de>
 80047de:	21b6      	movs	r1, #182	; 0xb6
 80047e0:	4809      	ldr	r0, [pc, #36]	; (8004808 <HAL_GPIO_Init+0x140>)
 80047e2:	f7fc fc2f 	bl	8001044 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047e6:	e1de      	b.n	8004ba6 <HAL_GPIO_Init+0x4de>
 80047e8:	48000400 	.word	0x48000400
 80047ec:	48000800 	.word	0x48000800
 80047f0:	48000c00 	.word	0x48000c00
 80047f4:	48001000 	.word	0x48001000
 80047f8:	48001400 	.word	0x48001400
 80047fc:	48001800 	.word	0x48001800
 8004800:	48001c00 	.word	0x48001c00
 8004804:	48002000 	.word	0x48002000
 8004808:	0800e4dc 	.word	0x0800e4dc
 800480c:	10110000 	.word	0x10110000
 8004810:	10210000 	.word	0x10210000
 8004814:	10310000 	.word	0x10310000
 8004818:	10120000 	.word	0x10120000
 800481c:	10220000 	.word	0x10220000
 8004820:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	2101      	movs	r1, #1
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	fa01 f303 	lsl.w	r3, r1, r3
 8004830:	4013      	ands	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 81b2 	beq.w	8004ba0 <HAL_GPIO_Init+0x4d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d00b      	beq.n	800485c <HAL_GPIO_Init+0x194>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b02      	cmp	r3, #2
 800484a:	d007      	beq.n	800485c <HAL_GPIO_Init+0x194>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004850:	2b11      	cmp	r3, #17
 8004852:	d003      	beq.n	800485c <HAL_GPIO_Init+0x194>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2b12      	cmp	r3, #18
 800485a:	d144      	bne.n	80048e6 <HAL_GPIO_Init+0x21e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00f      	beq.n	8004884 <HAL_GPIO_Init+0x1bc>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d00b      	beq.n	8004884 <HAL_GPIO_Init+0x1bc>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	2b02      	cmp	r3, #2
 8004872:	d007      	beq.n	8004884 <HAL_GPIO_Init+0x1bc>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	2b03      	cmp	r3, #3
 800487a:	d003      	beq.n	8004884 <HAL_GPIO_Init+0x1bc>
 800487c:	21c6      	movs	r1, #198	; 0xc6
 800487e:	488b      	ldr	r0, [pc, #556]	; (8004aac <HAL_GPIO_Init+0x3e4>)
 8004880:	f7fc fbe0 	bl	8001044 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	2203      	movs	r2, #3
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	43db      	mvns	r3, r3
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4013      	ands	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048ba:	2201      	movs	r2, #1
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	43db      	mvns	r3, r3
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4013      	ands	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	091b      	lsrs	r3, r3, #4
 80048d0:	f003 0201 	and.w	r2, r3, #1
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	2203      	movs	r2, #3
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	43db      	mvns	r3, r3
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4013      	ands	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b02      	cmp	r3, #2
 800491c:	d003      	beq.n	8004926 <HAL_GPIO_Init+0x25e>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b12      	cmp	r3, #18
 8004924:	d153      	bne.n	80049ce <HAL_GPIO_Init+0x306>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800492c:	d023      	beq.n	8004976 <HAL_GPIO_Init+0x2ae>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a5f      	ldr	r2, [pc, #380]	; (8004ab0 <HAL_GPIO_Init+0x3e8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d01f      	beq.n	8004976 <HAL_GPIO_Init+0x2ae>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a5e      	ldr	r2, [pc, #376]	; (8004ab4 <HAL_GPIO_Init+0x3ec>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d01b      	beq.n	8004976 <HAL_GPIO_Init+0x2ae>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a5d      	ldr	r2, [pc, #372]	; (8004ab8 <HAL_GPIO_Init+0x3f0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d017      	beq.n	8004976 <HAL_GPIO_Init+0x2ae>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a5c      	ldr	r2, [pc, #368]	; (8004abc <HAL_GPIO_Init+0x3f4>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d013      	beq.n	8004976 <HAL_GPIO_Init+0x2ae>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a5b      	ldr	r2, [pc, #364]	; (8004ac0 <HAL_GPIO_Init+0x3f8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00f      	beq.n	8004976 <HAL_GPIO_Init+0x2ae>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a5a      	ldr	r2, [pc, #360]	; (8004ac4 <HAL_GPIO_Init+0x3fc>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00b      	beq.n	8004976 <HAL_GPIO_Init+0x2ae>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a59      	ldr	r2, [pc, #356]	; (8004ac8 <HAL_GPIO_Init+0x400>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d007      	beq.n	8004976 <HAL_GPIO_Init+0x2ae>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a58      	ldr	r2, [pc, #352]	; (8004acc <HAL_GPIO_Init+0x404>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d003      	beq.n	8004976 <HAL_GPIO_Init+0x2ae>
 800496e:	21ec      	movs	r1, #236	; 0xec
 8004970:	484e      	ldr	r0, [pc, #312]	; (8004aac <HAL_GPIO_Init+0x3e4>)
 8004972:	f7fc fb67 	bl	8001044 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	2b0f      	cmp	r3, #15
 800497c:	d903      	bls.n	8004986 <HAL_GPIO_Init+0x2be>
 800497e:	21ed      	movs	r1, #237	; 0xed
 8004980:	484a      	ldr	r0, [pc, #296]	; (8004aac <HAL_GPIO_Init+0x3e4>)
 8004982:	f7fc fb5f 	bl	8001044 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	08da      	lsrs	r2, r3, #3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3208      	adds	r2, #8
 800498e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004992:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	220f      	movs	r2, #15
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	43db      	mvns	r3, r3
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4013      	ands	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	08da      	lsrs	r2, r3, #3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3208      	adds	r2, #8
 80049c8:	6939      	ldr	r1, [r7, #16]
 80049ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	2203      	movs	r2, #3
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	43db      	mvns	r3, r3
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4013      	ands	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f003 0203 	and.w	r2, r3, #3
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 80c8 	beq.w	8004ba0 <HAL_GPIO_Init+0x4d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a10:	4b2f      	ldr	r3, [pc, #188]	; (8004ad0 <HAL_GPIO_Init+0x408>)
 8004a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a14:	4a2e      	ldr	r2, [pc, #184]	; (8004ad0 <HAL_GPIO_Init+0x408>)
 8004a16:	f043 0301 	orr.w	r3, r3, #1
 8004a1a:	6613      	str	r3, [r2, #96]	; 0x60
 8004a1c:	4b2c      	ldr	r3, [pc, #176]	; (8004ad0 <HAL_GPIO_Init+0x408>)
 8004a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	60bb      	str	r3, [r7, #8]
 8004a26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004a28:	4a2a      	ldr	r2, [pc, #168]	; (8004ad4 <HAL_GPIO_Init+0x40c>)
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	089b      	lsrs	r3, r3, #2
 8004a2e:	3302      	adds	r3, #2
 8004a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	220f      	movs	r2, #15
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	43db      	mvns	r3, r3
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a52:	d041      	beq.n	8004ad8 <HAL_GPIO_Init+0x410>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a16      	ldr	r2, [pc, #88]	; (8004ab0 <HAL_GPIO_Init+0x3e8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d025      	beq.n	8004aa8 <HAL_GPIO_Init+0x3e0>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a15      	ldr	r2, [pc, #84]	; (8004ab4 <HAL_GPIO_Init+0x3ec>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d01f      	beq.n	8004aa4 <HAL_GPIO_Init+0x3dc>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a14      	ldr	r2, [pc, #80]	; (8004ab8 <HAL_GPIO_Init+0x3f0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d019      	beq.n	8004aa0 <HAL_GPIO_Init+0x3d8>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a13      	ldr	r2, [pc, #76]	; (8004abc <HAL_GPIO_Init+0x3f4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d013      	beq.n	8004a9c <HAL_GPIO_Init+0x3d4>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a12      	ldr	r2, [pc, #72]	; (8004ac0 <HAL_GPIO_Init+0x3f8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00d      	beq.n	8004a98 <HAL_GPIO_Init+0x3d0>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a11      	ldr	r2, [pc, #68]	; (8004ac4 <HAL_GPIO_Init+0x3fc>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d007      	beq.n	8004a94 <HAL_GPIO_Init+0x3cc>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a10      	ldr	r2, [pc, #64]	; (8004ac8 <HAL_GPIO_Init+0x400>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d101      	bne.n	8004a90 <HAL_GPIO_Init+0x3c8>
 8004a8c:	2307      	movs	r3, #7
 8004a8e:	e024      	b.n	8004ada <HAL_GPIO_Init+0x412>
 8004a90:	2308      	movs	r3, #8
 8004a92:	e022      	b.n	8004ada <HAL_GPIO_Init+0x412>
 8004a94:	2306      	movs	r3, #6
 8004a96:	e020      	b.n	8004ada <HAL_GPIO_Init+0x412>
 8004a98:	2305      	movs	r3, #5
 8004a9a:	e01e      	b.n	8004ada <HAL_GPIO_Init+0x412>
 8004a9c:	2304      	movs	r3, #4
 8004a9e:	e01c      	b.n	8004ada <HAL_GPIO_Init+0x412>
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e01a      	b.n	8004ada <HAL_GPIO_Init+0x412>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e018      	b.n	8004ada <HAL_GPIO_Init+0x412>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e016      	b.n	8004ada <HAL_GPIO_Init+0x412>
 8004aac:	0800e4dc 	.word	0x0800e4dc
 8004ab0:	48000400 	.word	0x48000400
 8004ab4:	48000800 	.word	0x48000800
 8004ab8:	48000c00 	.word	0x48000c00
 8004abc:	48001000 	.word	0x48001000
 8004ac0:	48001400 	.word	0x48001400
 8004ac4:	48001800 	.word	0x48001800
 8004ac8:	48001c00 	.word	0x48001c00
 8004acc:	48002000 	.word	0x48002000
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40010000 	.word	0x40010000
 8004ad8:	2300      	movs	r3, #0
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	f002 0203 	and.w	r2, r2, #3
 8004ae0:	0092      	lsls	r2, r2, #2
 8004ae2:	4093      	lsls	r3, r2
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004aea:	4935      	ldr	r1, [pc, #212]	; (8004bc0 <HAL_GPIO_Init+0x4f8>)
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	089b      	lsrs	r3, r3, #2
 8004af0:	3302      	adds	r3, #2
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004af8:	4b32      	ldr	r3, [pc, #200]	; (8004bc4 <HAL_GPIO_Init+0x4fc>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	43db      	mvns	r3, r3
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	4013      	ands	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <HAL_GPIO_Init+0x454>
        {
          temp |= iocurrent;
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b1c:	4a29      	ldr	r2, [pc, #164]	; (8004bc4 <HAL_GPIO_Init+0x4fc>)
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004b22:	4b28      	ldr	r3, [pc, #160]	; (8004bc4 <HAL_GPIO_Init+0x4fc>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	43db      	mvns	r3, r3
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_GPIO_Init+0x47e>
        {
          temp |= iocurrent;
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b46:	4a1f      	ldr	r2, [pc, #124]	; (8004bc4 <HAL_GPIO_Init+0x4fc>)
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b4c:	4b1d      	ldr	r3, [pc, #116]	; (8004bc4 <HAL_GPIO_Init+0x4fc>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	43db      	mvns	r3, r3
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_GPIO_Init+0x4a8>
        {
          temp |= iocurrent;
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b70:	4a14      	ldr	r2, [pc, #80]	; (8004bc4 <HAL_GPIO_Init+0x4fc>)
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004b76:	4b13      	ldr	r3, [pc, #76]	; (8004bc4 <HAL_GPIO_Init+0x4fc>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4013      	ands	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_GPIO_Init+0x4d2>
        {
          temp |= iocurrent;
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b9a:	4a0a      	ldr	r2, [pc, #40]	; (8004bc4 <HAL_GPIO_Init+0x4fc>)
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f47f ae37 	bne.w	8004824 <HAL_GPIO_Init+0x15c>
  }
}
 8004bb6:	bf00      	nop
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40010000 	.word	0x40010000
 8004bc4:	40010400 	.word	0x40010400

08004bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	807b      	strh	r3, [r7, #2]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004bd8:	887b      	ldrh	r3, [r7, #2]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d004      	beq.n	8004be8 <HAL_GPIO_WritePin+0x20>
 8004bde:	887b      	ldrh	r3, [r7, #2]
 8004be0:	0c1b      	lsrs	r3, r3, #16
 8004be2:	041b      	lsls	r3, r3, #16
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d004      	beq.n	8004bf2 <HAL_GPIO_WritePin+0x2a>
 8004be8:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8004bec:	480d      	ldr	r0, [pc, #52]	; (8004c24 <HAL_GPIO_WritePin+0x5c>)
 8004bee:	f7fc fa29 	bl	8001044 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004bf2:	787b      	ldrb	r3, [r7, #1]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d007      	beq.n	8004c08 <HAL_GPIO_WritePin+0x40>
 8004bf8:	787b      	ldrb	r3, [r7, #1]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d004      	beq.n	8004c08 <HAL_GPIO_WritePin+0x40>
 8004bfe:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004c02:	4808      	ldr	r0, [pc, #32]	; (8004c24 <HAL_GPIO_WritePin+0x5c>)
 8004c04:	f7fc fa1e 	bl	8001044 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8004c08:	787b      	ldrb	r3, [r7, #1]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c0e:	887a      	ldrh	r2, [r7, #2]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c14:	e002      	b.n	8004c1c <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c16:	887a      	ldrh	r2, [r7, #2]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c1c:	bf00      	nop
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	0800e4dc 	.word	0x0800e4dc

08004c28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	460b      	mov	r3, r1
 8004c32:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004c34:	887b      	ldrh	r3, [r7, #2]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d004      	beq.n	8004c44 <HAL_GPIO_TogglePin+0x1c>
 8004c3a:	887b      	ldrh	r3, [r7, #2]
 8004c3c:	0c1b      	lsrs	r3, r3, #16
 8004c3e:	041b      	lsls	r3, r3, #16
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d004      	beq.n	8004c4e <HAL_GPIO_TogglePin+0x26>
 8004c44:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8004c48:	480a      	ldr	r0, [pc, #40]	; (8004c74 <HAL_GPIO_TogglePin+0x4c>)
 8004c4a:	f7fc f9fb 	bl	8001044 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c54:	887a      	ldrh	r2, [r7, #2]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	041a      	lsls	r2, r3, #16
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	43d9      	mvns	r1, r3
 8004c60:	887b      	ldrh	r3, [r7, #2]
 8004c62:	400b      	ands	r3, r1
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	619a      	str	r2, [r3, #24]
}
 8004c6a:	bf00      	nop
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	0800e4dc 	.word	0x0800e4dc

08004c78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	4603      	mov	r3, r0
 8004c80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c82:	4b08      	ldr	r3, [pc, #32]	; (8004ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c84:	695a      	ldr	r2, [r3, #20]
 8004c86:	88fb      	ldrh	r3, [r7, #6]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d006      	beq.n	8004c9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c8e:	4a05      	ldr	r2, [pc, #20]	; (8004ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c90:	88fb      	ldrh	r3, [r7, #6]
 8004c92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c94:	88fb      	ldrh	r3, [r7, #6]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 f806 	bl	8004ca8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c9c:	bf00      	nop
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40010400 	.word	0x40010400

08004ca8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	4603      	mov	r3, r0
 8004cb0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
	...

08004cc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e12f      	b.n	8004f32 <HAL_I2C_Init+0x272>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a99      	ldr	r2, [pc, #612]	; (8004f3c <HAL_I2C_Init+0x27c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d013      	beq.n	8004d04 <HAL_I2C_Init+0x44>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a97      	ldr	r2, [pc, #604]	; (8004f40 <HAL_I2C_Init+0x280>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00e      	beq.n	8004d04 <HAL_I2C_Init+0x44>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a96      	ldr	r2, [pc, #600]	; (8004f44 <HAL_I2C_Init+0x284>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d009      	beq.n	8004d04 <HAL_I2C_Init+0x44>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a94      	ldr	r2, [pc, #592]	; (8004f48 <HAL_I2C_Init+0x288>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d004      	beq.n	8004d04 <HAL_I2C_Init+0x44>
 8004cfa:	f240 11e5 	movw	r1, #485	; 0x1e5
 8004cfe:	4893      	ldr	r0, [pc, #588]	; (8004f4c <HAL_I2C_Init+0x28c>)
 8004d00:	f7fc f9a0 	bl	8001044 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d0c:	d304      	bcc.n	8004d18 <HAL_I2C_Init+0x58>
 8004d0e:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 8004d12:	488e      	ldr	r0, [pc, #568]	; (8004f4c <HAL_I2C_Init+0x28c>)
 8004d14:	f7fc f996 	bl	8001044 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d008      	beq.n	8004d32 <HAL_I2C_Init+0x72>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d004      	beq.n	8004d32 <HAL_I2C_Init+0x72>
 8004d28:	f240 11e7 	movw	r1, #487	; 0x1e7
 8004d2c:	4887      	ldr	r0, [pc, #540]	; (8004f4c <HAL_I2C_Init+0x28c>)
 8004d2e:	f7fc f989 	bl	8001044 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d009      	beq.n	8004d4e <HAL_I2C_Init+0x8e>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d42:	d004      	beq.n	8004d4e <HAL_I2C_Init+0x8e>
 8004d44:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8004d48:	4880      	ldr	r0, [pc, #512]	; (8004f4c <HAL_I2C_Init+0x28c>)
 8004d4a:	f7fc f97b 	bl	8001044 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	2bff      	cmp	r3, #255	; 0xff
 8004d54:	d904      	bls.n	8004d60 <HAL_I2C_Init+0xa0>
 8004d56:	f240 11e9 	movw	r1, #489	; 0x1e9
 8004d5a:	487c      	ldr	r0, [pc, #496]	; (8004f4c <HAL_I2C_Init+0x28c>)
 8004d5c:	f7fc f972 	bl	8001044 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d020      	beq.n	8004daa <HAL_I2C_Init+0xea>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d01c      	beq.n	8004daa <HAL_I2C_Init+0xea>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d018      	beq.n	8004daa <HAL_I2C_Init+0xea>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d014      	beq.n	8004daa <HAL_I2C_Init+0xea>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d010      	beq.n	8004daa <HAL_I2C_Init+0xea>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	2b05      	cmp	r3, #5
 8004d8e:	d00c      	beq.n	8004daa <HAL_I2C_Init+0xea>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	2b06      	cmp	r3, #6
 8004d96:	d008      	beq.n	8004daa <HAL_I2C_Init+0xea>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	2b07      	cmp	r3, #7
 8004d9e:	d004      	beq.n	8004daa <HAL_I2C_Init+0xea>
 8004da0:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8004da4:	4869      	ldr	r0, [pc, #420]	; (8004f4c <HAL_I2C_Init+0x28c>)
 8004da6:	f7fc f94d 	bl	8001044 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d009      	beq.n	8004dc6 <HAL_I2C_Init+0x106>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004dba:	d004      	beq.n	8004dc6 <HAL_I2C_Init+0x106>
 8004dbc:	f240 11eb 	movw	r1, #491	; 0x1eb
 8004dc0:	4862      	ldr	r0, [pc, #392]	; (8004f4c <HAL_I2C_Init+0x28c>)
 8004dc2:	f7fc f93f 	bl	8001044 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d009      	beq.n	8004de2 <HAL_I2C_Init+0x122>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dd6:	d004      	beq.n	8004de2 <HAL_I2C_Init+0x122>
 8004dd8:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8004ddc:	485b      	ldr	r0, [pc, #364]	; (8004f4c <HAL_I2C_Init+0x28c>)
 8004dde:	f7fc f931 	bl	8001044 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d12c      	bne.n	8004e48 <HAL_I2C_Init+0x188>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a55      	ldr	r2, [pc, #340]	; (8004f50 <HAL_I2C_Init+0x290>)
 8004dfa:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a55      	ldr	r2, [pc, #340]	; (8004f54 <HAL_I2C_Init+0x294>)
 8004e00:	651a      	str	r2, [r3, #80]	; 0x50
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a54      	ldr	r2, [pc, #336]	; (8004f58 <HAL_I2C_Init+0x298>)
 8004e06:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a54      	ldr	r2, [pc, #336]	; (8004f5c <HAL_I2C_Init+0x29c>)
 8004e0c:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a53      	ldr	r2, [pc, #332]	; (8004f60 <HAL_I2C_Init+0x2a0>)
 8004e12:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a53      	ldr	r2, [pc, #332]	; (8004f64 <HAL_I2C_Init+0x2a4>)
 8004e18:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a52      	ldr	r2, [pc, #328]	; (8004f68 <HAL_I2C_Init+0x2a8>)
 8004e1e:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a52      	ldr	r2, [pc, #328]	; (8004f6c <HAL_I2C_Init+0x2ac>)
 8004e24:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a51      	ldr	r2, [pc, #324]	; (8004f70 <HAL_I2C_Init+0x2b0>)
 8004e2a:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a51      	ldr	r2, [pc, #324]	; (8004f74 <HAL_I2C_Init+0x2b4>)
 8004e30:	671a      	str	r2, [r3, #112]	; 0x70

    if (hi2c->MspInitCallback == NULL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d102      	bne.n	8004e40 <HAL_I2C_Init+0x180>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a4e      	ldr	r2, [pc, #312]	; (8004f78 <HAL_I2C_Init+0x2b8>)
 8004e3e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2224      	movs	r2, #36	; 0x24
 8004e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0201 	bic.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d107      	bne.n	8004e96 <HAL_I2C_Init+0x1d6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e92:	609a      	str	r2, [r3, #8]
 8004e94:	e006      	b.n	8004ea4 <HAL_I2C_Init+0x1e4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004ea2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d104      	bne.n	8004eb6 <HAL_I2C_Init+0x1f6>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004eb4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6812      	ldr	r2, [r2, #0]
 8004ec0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ed8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691a      	ldr	r2, [r3, #16]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	ea42 0103 	orr.w	r1, r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	021a      	lsls	r2, r3, #8
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	69d9      	ldr	r1, [r3, #28]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1a      	ldr	r2, [r3, #32]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0201 	orr.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40005400 	.word	0x40005400
 8004f40:	40005800 	.word	0x40005800
 8004f44:	40005c00 	.word	0x40005c00
 8004f48:	40008400 	.word	0x40008400
 8004f4c:	0800e518 	.word	0x0800e518
 8004f50:	08004f7d 	.word	0x08004f7d
 8004f54:	08004f91 	.word	0x08004f91
 8004f58:	08004fa5 	.word	0x08004fa5
 8004f5c:	08004fb9 	.word	0x08004fb9
 8004f60:	08004fe9 	.word	0x08004fe9
 8004f64:	08004ffd 	.word	0x08004ffd
 8004f68:	08005011 	.word	0x08005011
 8004f6c:	08005025 	.word	0x08005025
 8004f70:	08005039 	.word	0x08005039
 8004f74:	08004fcd 	.word	0x08004fcd
 8004f78:	08000e01 	.word	0x08000e01

08004f7c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	70fb      	strb	r3, [r7, #3]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a32      	ldr	r2, [pc, #200]	; (8005124 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d012      	beq.n	8005086 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a30      	ldr	r2, [pc, #192]	; (8005128 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d00d      	beq.n	8005086 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a2f      	ldr	r2, [pc, #188]	; (800512c <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d008      	beq.n	8005086 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a2d      	ldr	r2, [pc, #180]	; (8005130 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d003      	beq.n	8005086 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800507e:	2164      	movs	r1, #100	; 0x64
 8005080:	482c      	ldr	r0, [pc, #176]	; (8005134 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8005082:	f7fb ffdf 	bl	8001044 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d007      	beq.n	800509c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005092:	d003      	beq.n	800509c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8005094:	2165      	movs	r1, #101	; 0x65
 8005096:	4827      	ldr	r0, [pc, #156]	; (8005134 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8005098:	f7fb ffd4 	bl	8001044 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b20      	cmp	r3, #32
 80050a6:	d138      	bne.n	800511a <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d101      	bne.n	80050b6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 80050b2:	2302      	movs	r3, #2
 80050b4:	e032      	b.n	800511c <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2224      	movs	r2, #36	; 0x24
 80050c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0201 	bic.w	r2, r2, #1
 80050d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6819      	ldr	r1, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f042 0201 	orr.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	e000      	b.n	800511c <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 800511a:	2302      	movs	r3, #2
  }
}
 800511c:	4618      	mov	r0, r3
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40005400 	.word	0x40005400
 8005128:	40005800 	.word	0x40005800
 800512c:	40005c00 	.word	0x40005c00
 8005130:	40008400 	.word	0x40008400
 8005134:	0800e550 	.word	0x0800e550

08005138 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a31      	ldr	r2, [pc, #196]	; (800520c <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d012      	beq.n	8005172 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a2f      	ldr	r2, [pc, #188]	; (8005210 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00d      	beq.n	8005172 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a2e      	ldr	r2, [pc, #184]	; (8005214 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d008      	beq.n	8005172 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a2c      	ldr	r2, [pc, #176]	; (8005218 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d003      	beq.n	8005172 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800516a:	2192      	movs	r1, #146	; 0x92
 800516c:	482b      	ldr	r0, [pc, #172]	; (800521c <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 800516e:	f7fb ff69 	bl	8001044 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b0f      	cmp	r3, #15
 8005176:	d903      	bls.n	8005180 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8005178:	2193      	movs	r1, #147	; 0x93
 800517a:	4828      	ldr	r0, [pc, #160]	; (800521c <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 800517c:	f7fb ff62 	bl	8001044 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b20      	cmp	r3, #32
 800518a:	d139      	bne.n	8005200 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8005196:	2302      	movs	r3, #2
 8005198:	e033      	b.n	8005202 <HAL_I2CEx_ConfigDigitalFilter+0xca>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2224      	movs	r2, #36	; 0x24
 80051a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0201 	bic.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80051c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0201 	orr.w	r2, r2, #1
 80051ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051fc:	2300      	movs	r3, #0
 80051fe:	e000      	b.n	8005202 <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005200:	2302      	movs	r3, #2
  }
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	40005400 	.word	0x40005400
 8005210:	40005800 	.word	0x40005800
 8005214:	40005c00 	.word	0x40005c00
 8005218:	40008400 	.word	0x40008400
 800521c:	0800e550 	.word	0x0800e550

08005220 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005224:	4b0d      	ldr	r3, [pc, #52]	; (800525c <HAL_PWREx_GetVoltageRange+0x3c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800522c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005230:	d102      	bne.n	8005238 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005236:	e00b      	b.n	8005250 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005238:	4b08      	ldr	r3, [pc, #32]	; (800525c <HAL_PWREx_GetVoltageRange+0x3c>)
 800523a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800523e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005246:	d102      	bne.n	800524e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005248:	f44f 7300 	mov.w	r3, #512	; 0x200
 800524c:	e000      	b.n	8005250 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800524e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005250:	4618      	mov	r0, r3
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40007000 	.word	0x40007000

08005260 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00b      	beq.n	8005286 <HAL_PWREx_ControlVoltageScaling+0x26>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005274:	d007      	beq.n	8005286 <HAL_PWREx_ControlVoltageScaling+0x26>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800527c:	d003      	beq.n	8005286 <HAL_PWREx_ControlVoltageScaling+0x26>
 800527e:	21a8      	movs	r1, #168	; 0xa8
 8005280:	484d      	ldr	r0, [pc, #308]	; (80053b8 <HAL_PWREx_ControlVoltageScaling+0x158>)
 8005282:	f7fb fedf 	bl	8001044 <assert_failed>

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d141      	bne.n	8005310 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800528c:	4b4b      	ldr	r3, [pc, #300]	; (80053bc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005298:	d131      	bne.n	80052fe <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800529a:	4b48      	ldr	r3, [pc, #288]	; (80053bc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800529c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052a0:	4a46      	ldr	r2, [pc, #280]	; (80053bc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80052a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052a6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052aa:	4b44      	ldr	r3, [pc, #272]	; (80053bc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052b2:	4a42      	ldr	r2, [pc, #264]	; (80053bc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80052b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80052ba:	4b41      	ldr	r3, [pc, #260]	; (80053c0 <HAL_PWREx_ControlVoltageScaling+0x160>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2232      	movs	r2, #50	; 0x32
 80052c0:	fb02 f303 	mul.w	r3, r2, r3
 80052c4:	4a3f      	ldr	r2, [pc, #252]	; (80053c4 <HAL_PWREx_ControlVoltageScaling+0x164>)
 80052c6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ca:	0c9b      	lsrs	r3, r3, #18
 80052cc:	3301      	adds	r3, #1
 80052ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052d0:	e002      	b.n	80052d8 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3b01      	subs	r3, #1
 80052d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052d8:	4b38      	ldr	r3, [pc, #224]	; (80053bc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e4:	d102      	bne.n	80052ec <HAL_PWREx_ControlVoltageScaling+0x8c>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1f2      	bne.n	80052d2 <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052ec:	4b33      	ldr	r3, [pc, #204]	; (80053bc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f8:	d158      	bne.n	80053ac <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e057      	b.n	80053ae <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052fe:	4b2f      	ldr	r3, [pc, #188]	; (80053bc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005304:	4a2d      	ldr	r2, [pc, #180]	; (80053bc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005306:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800530a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800530e:	e04d      	b.n	80053ac <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005316:	d141      	bne.n	800539c <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005318:	4b28      	ldr	r3, [pc, #160]	; (80053bc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005324:	d131      	bne.n	800538a <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005326:	4b25      	ldr	r3, [pc, #148]	; (80053bc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005328:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800532c:	4a23      	ldr	r2, [pc, #140]	; (80053bc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800532e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005332:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005336:	4b21      	ldr	r3, [pc, #132]	; (80053bc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800533e:	4a1f      	ldr	r2, [pc, #124]	; (80053bc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005340:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005344:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005346:	4b1e      	ldr	r3, [pc, #120]	; (80053c0 <HAL_PWREx_ControlVoltageScaling+0x160>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2232      	movs	r2, #50	; 0x32
 800534c:	fb02 f303 	mul.w	r3, r2, r3
 8005350:	4a1c      	ldr	r2, [pc, #112]	; (80053c4 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	0c9b      	lsrs	r3, r3, #18
 8005358:	3301      	adds	r3, #1
 800535a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800535c:	e002      	b.n	8005364 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3b01      	subs	r3, #1
 8005362:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005364:	4b15      	ldr	r3, [pc, #84]	; (80053bc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800536c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005370:	d102      	bne.n	8005378 <HAL_PWREx_ControlVoltageScaling+0x118>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1f2      	bne.n	800535e <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005378:	4b10      	ldr	r3, [pc, #64]	; (80053bc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005384:	d112      	bne.n	80053ac <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e011      	b.n	80053ae <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800538a:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800538c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005390:	4a0a      	ldr	r2, [pc, #40]	; (80053bc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005396:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800539a:	e007      	b.n	80053ac <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800539c:	4b07      	ldr	r3, [pc, #28]	; (80053bc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80053a4:	4a05      	ldr	r2, [pc, #20]	; (80053bc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80053a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	0800e58c 	.word	0x0800e58c
 80053bc:	40007000 	.word	0x40007000
 80053c0:	200000b4 	.word	0x200000b4
 80053c4:	431bde83 	.word	0x431bde83

080053c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d102      	bne.n	80053dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f000 bd6b 	b.w	8005eb2 <HAL_RCC_OscConfig+0xaea>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d028      	beq.n	8005436 <HAL_RCC_OscConfig+0x6e>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d122      	bne.n	8005436 <HAL_RCC_OscConfig+0x6e>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d11c      	bne.n	8005436 <HAL_RCC_OscConfig+0x6e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0320 	and.w	r3, r3, #32
 8005404:	2b00      	cmp	r3, #0
 8005406:	d116      	bne.n	8005436 <HAL_RCC_OscConfig+0x6e>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	2b00      	cmp	r3, #0
 8005412:	d110      	bne.n	8005436 <HAL_RCC_OscConfig+0x6e>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10a      	bne.n	8005436 <HAL_RCC_OscConfig+0x6e>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b00      	cmp	r3, #0
 800542a:	d104      	bne.n	8005436 <HAL_RCC_OscConfig+0x6e>
 800542c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8005430:	48a3      	ldr	r0, [pc, #652]	; (80056c0 <HAL_RCC_OscConfig+0x2f8>)
 8005432:	f7fb fe07 	bl	8001044 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005436:	4ba3      	ldr	r3, [pc, #652]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 030c 	and.w	r3, r3, #12
 800543e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005440:	4ba0      	ldr	r3, [pc, #640]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f003 0303 	and.w	r3, r3, #3
 8005448:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 813f 	beq.w	80056d6 <HAL_RCC_OscConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d008      	beq.n	8005472 <HAL_RCC_OscConfig+0xaa>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d004      	beq.n	8005472 <HAL_RCC_OscConfig+0xaa>
 8005468:	f240 11ab 	movw	r1, #427	; 0x1ab
 800546c:	4894      	ldr	r0, [pc, #592]	; (80056c0 <HAL_RCC_OscConfig+0x2f8>)
 800546e:	f7fb fde9 	bl	8001044 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	2bff      	cmp	r3, #255	; 0xff
 8005478:	d904      	bls.n	8005484 <HAL_RCC_OscConfig+0xbc>
 800547a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800547e:	4890      	ldr	r0, [pc, #576]	; (80056c0 <HAL_RCC_OscConfig+0x2f8>)
 8005480:	f7fb fde0 	bl	8001044 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d030      	beq.n	80054ee <HAL_RCC_OscConfig+0x126>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	2b10      	cmp	r3, #16
 8005492:	d02c      	beq.n	80054ee <HAL_RCC_OscConfig+0x126>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	2b20      	cmp	r3, #32
 800549a:	d028      	beq.n	80054ee <HAL_RCC_OscConfig+0x126>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	2b30      	cmp	r3, #48	; 0x30
 80054a2:	d024      	beq.n	80054ee <HAL_RCC_OscConfig+0x126>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	2b40      	cmp	r3, #64	; 0x40
 80054aa:	d020      	beq.n	80054ee <HAL_RCC_OscConfig+0x126>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	2b50      	cmp	r3, #80	; 0x50
 80054b2:	d01c      	beq.n	80054ee <HAL_RCC_OscConfig+0x126>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	2b60      	cmp	r3, #96	; 0x60
 80054ba:	d018      	beq.n	80054ee <HAL_RCC_OscConfig+0x126>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	2b70      	cmp	r3, #112	; 0x70
 80054c2:	d014      	beq.n	80054ee <HAL_RCC_OscConfig+0x126>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	2b80      	cmp	r3, #128	; 0x80
 80054ca:	d010      	beq.n	80054ee <HAL_RCC_OscConfig+0x126>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	2b90      	cmp	r3, #144	; 0x90
 80054d2:	d00c      	beq.n	80054ee <HAL_RCC_OscConfig+0x126>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	2ba0      	cmp	r3, #160	; 0xa0
 80054da:	d008      	beq.n	80054ee <HAL_RCC_OscConfig+0x126>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	2bb0      	cmp	r3, #176	; 0xb0
 80054e2:	d004      	beq.n	80054ee <HAL_RCC_OscConfig+0x126>
 80054e4:	f240 11ad 	movw	r1, #429	; 0x1ad
 80054e8:	4875      	ldr	r0, [pc, #468]	; (80056c0 <HAL_RCC_OscConfig+0x2f8>)
 80054ea:	f7fb fdab 	bl	8001044 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d007      	beq.n	8005504 <HAL_RCC_OscConfig+0x13c>
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	2b0c      	cmp	r3, #12
 80054f8:	f040 808f 	bne.w	800561a <HAL_RCC_OscConfig+0x252>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	f040 808b 	bne.w	800561a <HAL_RCC_OscConfig+0x252>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005504:	4b6f      	ldr	r3, [pc, #444]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d006      	beq.n	800551e <HAL_RCC_OscConfig+0x156>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d102      	bne.n	800551e <HAL_RCC_OscConfig+0x156>
      {
        return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	f000 bcca 	b.w	8005eb2 <HAL_RCC_OscConfig+0xaea>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1a      	ldr	r2, [r3, #32]
 8005522:	4b68      	ldr	r3, [pc, #416]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0308 	and.w	r3, r3, #8
 800552a:	2b00      	cmp	r3, #0
 800552c:	d004      	beq.n	8005538 <HAL_RCC_OscConfig+0x170>
 800552e:	4b65      	ldr	r3, [pc, #404]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005536:	e005      	b.n	8005544 <HAL_RCC_OscConfig+0x17c>
 8005538:	4b62      	ldr	r3, [pc, #392]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 800553a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800553e:	091b      	lsrs	r3, r3, #4
 8005540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005544:	4293      	cmp	r3, r2
 8005546:	d224      	bcs.n	8005592 <HAL_RCC_OscConfig+0x1ca>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	4618      	mov	r0, r3
 800554e:	f000 ffa9 	bl	80064a4 <RCC_SetFlashLatencyFromMSIRange>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d002      	beq.n	800555e <HAL_RCC_OscConfig+0x196>
          {
            return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	f000 bcaa 	b.w	8005eb2 <HAL_RCC_OscConfig+0xaea>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800555e:	4b59      	ldr	r3, [pc, #356]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a58      	ldr	r2, [pc, #352]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 8005564:	f043 0308 	orr.w	r3, r3, #8
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	4b56      	ldr	r3, [pc, #344]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	4953      	ldr	r1, [pc, #332]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 8005578:	4313      	orrs	r3, r2
 800557a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800557c:	4b51      	ldr	r3, [pc, #324]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	021b      	lsls	r3, r3, #8
 800558a:	494e      	ldr	r1, [pc, #312]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 800558c:	4313      	orrs	r3, r2
 800558e:	604b      	str	r3, [r1, #4]
 8005590:	e026      	b.n	80055e0 <HAL_RCC_OscConfig+0x218>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005592:	4b4c      	ldr	r3, [pc, #304]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a4b      	ldr	r2, [pc, #300]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 8005598:	f043 0308 	orr.w	r3, r3, #8
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	4b49      	ldr	r3, [pc, #292]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	4946      	ldr	r1, [pc, #280]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055b0:	4b44      	ldr	r3, [pc, #272]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	021b      	lsls	r3, r3, #8
 80055be:	4941      	ldr	r1, [pc, #260]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10a      	bne.n	80055e0 <HAL_RCC_OscConfig+0x218>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 ff68 	bl	80064a4 <RCC_SetFlashLatencyFromMSIRange>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <HAL_RCC_OscConfig+0x218>
            {
              return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	f000 bc69 	b.w	8005eb2 <HAL_RCC_OscConfig+0xaea>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055e0:	f000 fe5c 	bl	800629c <HAL_RCC_GetSysClockFreq>
 80055e4:	4601      	mov	r1, r0
 80055e6:	4b37      	ldr	r3, [pc, #220]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	091b      	lsrs	r3, r3, #4
 80055ec:	f003 030f 	and.w	r3, r3, #15
 80055f0:	4a35      	ldr	r2, [pc, #212]	; (80056c8 <HAL_RCC_OscConfig+0x300>)
 80055f2:	5cd3      	ldrb	r3, [r2, r3]
 80055f4:	f003 031f 	and.w	r3, r3, #31
 80055f8:	fa21 f303 	lsr.w	r3, r1, r3
 80055fc:	4a33      	ldr	r2, [pc, #204]	; (80056cc <HAL_RCC_OscConfig+0x304>)
 80055fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005600:	4b33      	ldr	r3, [pc, #204]	; (80056d0 <HAL_RCC_OscConfig+0x308>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4618      	mov	r0, r3
 8005606:	f7fb fe0f 	bl	8001228 <HAL_InitTick>
 800560a:	4603      	mov	r3, r0
 800560c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d05f      	beq.n	80056d4 <HAL_RCC_OscConfig+0x30c>
        {
          return status;
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	f000 bc4c 	b.w	8005eb2 <HAL_RCC_OscConfig+0xaea>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d033      	beq.n	800568a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005622:	4b28      	ldr	r3, [pc, #160]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a27      	ldr	r2, [pc, #156]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 8005628:	f043 0301 	orr.w	r3, r3, #1
 800562c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800562e:	f7fc f8c3 	bl	80017b8 <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005634:	e009      	b.n	800564a <HAL_RCC_OscConfig+0x282>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005636:	f7fc f8bf 	bl	80017b8 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d902      	bls.n	800564a <HAL_RCC_OscConfig+0x282>
          {
            return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	f000 bc34 	b.w	8005eb2 <HAL_RCC_OscConfig+0xaea>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800564a:	4b1e      	ldr	r3, [pc, #120]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0ef      	beq.n	8005636 <HAL_RCC_OscConfig+0x26e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005656:	4b1b      	ldr	r3, [pc, #108]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a1a      	ldr	r2, [pc, #104]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 800565c:	f043 0308 	orr.w	r3, r3, #8
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	4b18      	ldr	r3, [pc, #96]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	4915      	ldr	r1, [pc, #84]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 8005670:	4313      	orrs	r3, r2
 8005672:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005674:	4b13      	ldr	r3, [pc, #76]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	69db      	ldr	r3, [r3, #28]
 8005680:	021b      	lsls	r3, r3, #8
 8005682:	4910      	ldr	r1, [pc, #64]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 8005684:	4313      	orrs	r3, r2
 8005686:	604b      	str	r3, [r1, #4]
 8005688:	e025      	b.n	80056d6 <HAL_RCC_OscConfig+0x30e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800568a:	4b0e      	ldr	r3, [pc, #56]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a0d      	ldr	r2, [pc, #52]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 8005690:	f023 0301 	bic.w	r3, r3, #1
 8005694:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005696:	f7fc f88f 	bl	80017b8 <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800569c:	e009      	b.n	80056b2 <HAL_RCC_OscConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800569e:	f7fc f88b 	bl	80017b8 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d902      	bls.n	80056b2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	f000 bc00 	b.w	8005eb2 <HAL_RCC_OscConfig+0xaea>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056b2:	4b04      	ldr	r3, [pc, #16]	; (80056c4 <HAL_RCC_OscConfig+0x2fc>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1ef      	bne.n	800569e <HAL_RCC_OscConfig+0x2d6>
 80056be:	e00a      	b.n	80056d6 <HAL_RCC_OscConfig+0x30e>
 80056c0:	0800e5c8 	.word	0x0800e5c8
 80056c4:	40021000 	.word	0x40021000
 80056c8:	0800e8d0 	.word	0x0800e8d0
 80056cc:	200000b4 	.word	0x200000b4
 80056d0:	200000b8 	.word	0x200000b8
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d07e      	beq.n	80057e0 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00e      	beq.n	8005708 <HAL_RCC_OscConfig+0x340>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f2:	d009      	beq.n	8005708 <HAL_RCC_OscConfig+0x340>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056fc:	d004      	beq.n	8005708 <HAL_RCC_OscConfig+0x340>
 80056fe:	f240 2119 	movw	r1, #537	; 0x219
 8005702:	489b      	ldr	r0, [pc, #620]	; (8005970 <HAL_RCC_OscConfig+0x5a8>)
 8005704:	f7fb fc9e 	bl	8001044 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	2b08      	cmp	r3, #8
 800570c:	d005      	beq.n	800571a <HAL_RCC_OscConfig+0x352>
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	2b0c      	cmp	r3, #12
 8005712:	d10e      	bne.n	8005732 <HAL_RCC_OscConfig+0x36a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2b03      	cmp	r3, #3
 8005718:	d10b      	bne.n	8005732 <HAL_RCC_OscConfig+0x36a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800571a:	4b96      	ldr	r3, [pc, #600]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d05b      	beq.n	80057de <HAL_RCC_OscConfig+0x416>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d157      	bne.n	80057de <HAL_RCC_OscConfig+0x416>
      {
        return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e3bf      	b.n	8005eb2 <HAL_RCC_OscConfig+0xaea>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800573a:	d106      	bne.n	800574a <HAL_RCC_OscConfig+0x382>
 800573c:	4b8d      	ldr	r3, [pc, #564]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a8c      	ldr	r2, [pc, #560]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 8005742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	e01d      	b.n	8005786 <HAL_RCC_OscConfig+0x3be>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005752:	d10c      	bne.n	800576e <HAL_RCC_OscConfig+0x3a6>
 8005754:	4b87      	ldr	r3, [pc, #540]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a86      	ldr	r2, [pc, #536]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 800575a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	4b84      	ldr	r3, [pc, #528]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a83      	ldr	r2, [pc, #524]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 8005766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800576a:	6013      	str	r3, [r2, #0]
 800576c:	e00b      	b.n	8005786 <HAL_RCC_OscConfig+0x3be>
 800576e:	4b81      	ldr	r3, [pc, #516]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a80      	ldr	r2, [pc, #512]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 8005774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005778:	6013      	str	r3, [r2, #0]
 800577a:	4b7e      	ldr	r3, [pc, #504]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a7d      	ldr	r2, [pc, #500]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 8005780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005784:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d013      	beq.n	80057b6 <HAL_RCC_OscConfig+0x3ee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800578e:	f7fc f813 	bl	80017b8 <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x3e0>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005796:	f7fc f80f 	bl	80017b8 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b64      	cmp	r3, #100	; 0x64
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x3e0>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e384      	b.n	8005eb2 <HAL_RCC_OscConfig+0xaea>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057a8:	4b72      	ldr	r3, [pc, #456]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0f0      	beq.n	8005796 <HAL_RCC_OscConfig+0x3ce>
 80057b4:	e014      	b.n	80057e0 <HAL_RCC_OscConfig+0x418>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b6:	f7fb ffff 	bl	80017b8 <HAL_GetTick>
 80057ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057bc:	e008      	b.n	80057d0 <HAL_RCC_OscConfig+0x408>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057be:	f7fb fffb 	bl	80017b8 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b64      	cmp	r3, #100	; 0x64
 80057ca:	d901      	bls.n	80057d0 <HAL_RCC_OscConfig+0x408>
          {
            return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e370      	b.n	8005eb2 <HAL_RCC_OscConfig+0xaea>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057d0:	4b68      	ldr	r3, [pc, #416]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1f0      	bne.n	80057be <HAL_RCC_OscConfig+0x3f6>
 80057dc:	e000      	b.n	80057e0 <HAL_RCC_OscConfig+0x418>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057de:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d077      	beq.n	80058dc <HAL_RCC_OscConfig+0x514>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d009      	beq.n	8005808 <HAL_RCC_OscConfig+0x440>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057fc:	d004      	beq.n	8005808 <HAL_RCC_OscConfig+0x440>
 80057fe:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8005802:	485b      	ldr	r0, [pc, #364]	; (8005970 <HAL_RCC_OscConfig+0x5a8>)
 8005804:	f7fb fc1e 	bl	8001044 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	2b7f      	cmp	r3, #127	; 0x7f
 800580e:	d904      	bls.n	800581a <HAL_RCC_OscConfig+0x452>
 8005810:	f240 214d 	movw	r1, #589	; 0x24d
 8005814:	4856      	ldr	r0, [pc, #344]	; (8005970 <HAL_RCC_OscConfig+0x5a8>)
 8005816:	f7fb fc15 	bl	8001044 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	2b04      	cmp	r3, #4
 800581e:	d005      	beq.n	800582c <HAL_RCC_OscConfig+0x464>
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	2b0c      	cmp	r3, #12
 8005824:	d119      	bne.n	800585a <HAL_RCC_OscConfig+0x492>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2b02      	cmp	r3, #2
 800582a:	d116      	bne.n	800585a <HAL_RCC_OscConfig+0x492>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800582c:	4b51      	ldr	r3, [pc, #324]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005834:	2b00      	cmp	r3, #0
 8005836:	d005      	beq.n	8005844 <HAL_RCC_OscConfig+0x47c>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e336      	b.n	8005eb2 <HAL_RCC_OscConfig+0xaea>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005844:	4b4b      	ldr	r3, [pc, #300]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	061b      	lsls	r3, r3, #24
 8005852:	4948      	ldr	r1, [pc, #288]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 8005854:	4313      	orrs	r3, r2
 8005856:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005858:	e040      	b.n	80058dc <HAL_RCC_OscConfig+0x514>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d023      	beq.n	80058aa <HAL_RCC_OscConfig+0x4e2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005862:	4b44      	ldr	r3, [pc, #272]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a43      	ldr	r2, [pc, #268]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 8005868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800586c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586e:	f7fb ffa3 	bl	80017b8 <HAL_GetTick>
 8005872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005874:	e008      	b.n	8005888 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005876:	f7fb ff9f 	bl	80017b8 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b02      	cmp	r3, #2
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e314      	b.n	8005eb2 <HAL_RCC_OscConfig+0xaea>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005888:	4b3a      	ldr	r3, [pc, #232]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0f0      	beq.n	8005876 <HAL_RCC_OscConfig+0x4ae>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005894:	4b37      	ldr	r3, [pc, #220]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	061b      	lsls	r3, r3, #24
 80058a2:	4934      	ldr	r1, [pc, #208]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	604b      	str	r3, [r1, #4]
 80058a8:	e018      	b.n	80058dc <HAL_RCC_OscConfig+0x514>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058aa:	4b32      	ldr	r3, [pc, #200]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a31      	ldr	r2, [pc, #196]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 80058b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b6:	f7fb ff7f 	bl	80017b8 <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x508>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058be:	f7fb ff7b 	bl	80017b8 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x508>
          {
            return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e2f0      	b.n	8005eb2 <HAL_RCC_OscConfig+0xaea>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058d0:	4b28      	ldr	r3, [pc, #160]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1f0      	bne.n	80058be <HAL_RCC_OscConfig+0x4f6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0308 	and.w	r3, r3, #8
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d04e      	beq.n	8005986 <HAL_RCC_OscConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d008      	beq.n	8005902 <HAL_RCC_OscConfig+0x53a>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d004      	beq.n	8005902 <HAL_RCC_OscConfig+0x53a>
 80058f8:	f240 218d 	movw	r1, #653	; 0x28d
 80058fc:	481c      	ldr	r0, [pc, #112]	; (8005970 <HAL_RCC_OscConfig+0x5a8>)
 80058fe:	f7fb fba1 	bl	8001044 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d01c      	beq.n	8005944 <HAL_RCC_OscConfig+0x57c>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800590a:	4b1a      	ldr	r3, [pc, #104]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 800590c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005910:	4a18      	ldr	r2, [pc, #96]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 8005912:	f043 0301 	orr.w	r3, r3, #1
 8005916:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800591a:	f7fb ff4d 	bl	80017b8 <HAL_GetTick>
 800591e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005920:	e008      	b.n	8005934 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005922:	f7fb ff49 	bl	80017b8 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d901      	bls.n	8005934 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e2be      	b.n	8005eb2 <HAL_RCC_OscConfig+0xaea>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005934:	4b0f      	ldr	r3, [pc, #60]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 8005936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d0ef      	beq.n	8005922 <HAL_RCC_OscConfig+0x55a>
 8005942:	e020      	b.n	8005986 <HAL_RCC_OscConfig+0x5be>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005944:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 8005946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800594a:	4a0a      	ldr	r2, [pc, #40]	; (8005974 <HAL_RCC_OscConfig+0x5ac>)
 800594c:	f023 0301 	bic.w	r3, r3, #1
 8005950:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005954:	f7fb ff30 	bl	80017b8 <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800595a:	e00d      	b.n	8005978 <HAL_RCC_OscConfig+0x5b0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800595c:	f7fb ff2c 	bl	80017b8 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d906      	bls.n	8005978 <HAL_RCC_OscConfig+0x5b0>
        {
          return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e2a1      	b.n	8005eb2 <HAL_RCC_OscConfig+0xaea>
 800596e:	bf00      	nop
 8005970:	0800e5c8 	.word	0x0800e5c8
 8005974:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005978:	4b84      	ldr	r3, [pc, #528]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 800597a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1ea      	bne.n	800595c <HAL_RCC_OscConfig+0x594>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 80b2 	beq.w	8005af8 <HAL_RCC_OscConfig+0x730>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005994:	2300      	movs	r3, #0
 8005996:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00c      	beq.n	80059ba <HAL_RCC_OscConfig+0x5f2>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d008      	beq.n	80059ba <HAL_RCC_OscConfig+0x5f2>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	2b05      	cmp	r3, #5
 80059ae:	d004      	beq.n	80059ba <HAL_RCC_OscConfig+0x5f2>
 80059b0:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 80059b4:	4876      	ldr	r0, [pc, #472]	; (8005b90 <HAL_RCC_OscConfig+0x7c8>)
 80059b6:	f7fb fb45 	bl	8001044 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80059ba:	4b74      	ldr	r3, [pc, #464]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 80059bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10d      	bne.n	80059e2 <HAL_RCC_OscConfig+0x61a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059c6:	4b71      	ldr	r3, [pc, #452]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 80059c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ca:	4a70      	ldr	r2, [pc, #448]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 80059cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d0:	6593      	str	r3, [r2, #88]	; 0x58
 80059d2:	4b6e      	ldr	r3, [pc, #440]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 80059d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059da:	60bb      	str	r3, [r7, #8]
 80059dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059de:	2301      	movs	r3, #1
 80059e0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059e2:	4b6c      	ldr	r3, [pc, #432]	; (8005b94 <HAL_RCC_OscConfig+0x7cc>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d118      	bne.n	8005a20 <HAL_RCC_OscConfig+0x658>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059ee:	4b69      	ldr	r3, [pc, #420]	; (8005b94 <HAL_RCC_OscConfig+0x7cc>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a68      	ldr	r2, [pc, #416]	; (8005b94 <HAL_RCC_OscConfig+0x7cc>)
 80059f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059fa:	f7fb fedd 	bl	80017b8 <HAL_GetTick>
 80059fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a00:	e008      	b.n	8005a14 <HAL_RCC_OscConfig+0x64c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a02:	f7fb fed9 	bl	80017b8 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e24e      	b.n	8005eb2 <HAL_RCC_OscConfig+0xaea>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a14:	4b5f      	ldr	r3, [pc, #380]	; (8005b94 <HAL_RCC_OscConfig+0x7cc>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0f0      	beq.n	8005a02 <HAL_RCC_OscConfig+0x63a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d108      	bne.n	8005a3a <HAL_RCC_OscConfig+0x672>
 8005a28:	4b58      	ldr	r3, [pc, #352]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 8005a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2e:	4a57      	ldr	r2, [pc, #348]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 8005a30:	f043 0301 	orr.w	r3, r3, #1
 8005a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a38:	e024      	b.n	8005a84 <HAL_RCC_OscConfig+0x6bc>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	2b05      	cmp	r3, #5
 8005a40:	d110      	bne.n	8005a64 <HAL_RCC_OscConfig+0x69c>
 8005a42:	4b52      	ldr	r3, [pc, #328]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 8005a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a48:	4a50      	ldr	r2, [pc, #320]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 8005a4a:	f043 0304 	orr.w	r3, r3, #4
 8005a4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a52:	4b4e      	ldr	r3, [pc, #312]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 8005a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a58:	4a4c      	ldr	r2, [pc, #304]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 8005a5a:	f043 0301 	orr.w	r3, r3, #1
 8005a5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a62:	e00f      	b.n	8005a84 <HAL_RCC_OscConfig+0x6bc>
 8005a64:	4b49      	ldr	r3, [pc, #292]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 8005a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6a:	4a48      	ldr	r2, [pc, #288]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 8005a6c:	f023 0301 	bic.w	r3, r3, #1
 8005a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a74:	4b45      	ldr	r3, [pc, #276]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 8005a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7a:	4a44      	ldr	r2, [pc, #272]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 8005a7c:	f023 0304 	bic.w	r3, r3, #4
 8005a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d016      	beq.n	8005aba <HAL_RCC_OscConfig+0x6f2>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a8c:	f7fb fe94 	bl	80017b8 <HAL_GetTick>
 8005a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a92:	e00a      	b.n	8005aaa <HAL_RCC_OscConfig+0x6e2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a94:	f7fb fe90 	bl	80017b8 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d901      	bls.n	8005aaa <HAL_RCC_OscConfig+0x6e2>
        {
          return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e203      	b.n	8005eb2 <HAL_RCC_OscConfig+0xaea>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005aaa:	4b38      	ldr	r3, [pc, #224]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 8005aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0ed      	beq.n	8005a94 <HAL_RCC_OscConfig+0x6cc>
 8005ab8:	e015      	b.n	8005ae6 <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aba:	f7fb fe7d 	bl	80017b8 <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ac0:	e00a      	b.n	8005ad8 <HAL_RCC_OscConfig+0x710>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ac2:	f7fb fe79 	bl	80017b8 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x710>
        {
          return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e1ec      	b.n	8005eb2 <HAL_RCC_OscConfig+0xaea>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ad8:	4b2c      	ldr	r3, [pc, #176]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 8005ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1ed      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x6fa>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ae6:	7ffb      	ldrb	r3, [r7, #31]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d105      	bne.n	8005af8 <HAL_RCC_OscConfig+0x730>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aec:	4b27      	ldr	r3, [pc, #156]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 8005aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af0:	4a26      	ldr	r2, [pc, #152]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 8005af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005af6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0320 	and.w	r3, r3, #32
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d050      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d008      	beq.n	8005b1e <HAL_RCC_OscConfig+0x756>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d004      	beq.n	8005b1e <HAL_RCC_OscConfig+0x756>
 8005b14:	f240 3145 	movw	r1, #837	; 0x345
 8005b18:	481d      	ldr	r0, [pc, #116]	; (8005b90 <HAL_RCC_OscConfig+0x7c8>)
 8005b1a:	f7fb fa93 	bl	8001044 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d01c      	beq.n	8005b60 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b26:	4b19      	ldr	r3, [pc, #100]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 8005b28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b2c:	4a17      	ldr	r2, [pc, #92]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 8005b2e:	f043 0301 	orr.w	r3, r3, #1
 8005b32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b36:	f7fb fe3f 	bl	80017b8 <HAL_GetTick>
 8005b3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b3c:	e008      	b.n	8005b50 <HAL_RCC_OscConfig+0x788>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b3e:	f7fb fe3b 	bl	80017b8 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCC_OscConfig+0x788>
        {
          return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e1b0      	b.n	8005eb2 <HAL_RCC_OscConfig+0xaea>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b50:	4b0e      	ldr	r3, [pc, #56]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 8005b52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0ef      	beq.n	8005b3e <HAL_RCC_OscConfig+0x776>
 8005b5e:	e022      	b.n	8005ba6 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b60:	4b0a      	ldr	r3, [pc, #40]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 8005b62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b66:	4a09      	ldr	r2, [pc, #36]	; (8005b8c <HAL_RCC_OscConfig+0x7c4>)
 8005b68:	f023 0301 	bic.w	r3, r3, #1
 8005b6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b70:	f7fb fe22 	bl	80017b8 <HAL_GetTick>
 8005b74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b76:	e00f      	b.n	8005b98 <HAL_RCC_OscConfig+0x7d0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b78:	f7fb fe1e 	bl	80017b8 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d908      	bls.n	8005b98 <HAL_RCC_OscConfig+0x7d0>
        {
          return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e193      	b.n	8005eb2 <HAL_RCC_OscConfig+0xaea>
 8005b8a:	bf00      	nop
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	0800e5c8 	.word	0x0800e5c8
 8005b94:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b98:	4ba5      	ldr	r3, [pc, #660]	; (8005e30 <HAL_RCC_OscConfig+0xa68>)
 8005b9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1e8      	bne.n	8005b78 <HAL_RCC_OscConfig+0x7b0>
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00c      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x800>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d008      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x800>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d004      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x800>
 8005bbe:	f240 316e 	movw	r1, #878	; 0x36e
 8005bc2:	489c      	ldr	r0, [pc, #624]	; (8005e34 <HAL_RCC_OscConfig+0xa6c>)
 8005bc4:	f7fb fa3e 	bl	8001044 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 816f 	beq.w	8005eb0 <HAL_RCC_OscConfig+0xae8>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	f040 8137 	bne.w	8005e4a <HAL_RCC_OscConfig+0xa82>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d010      	beq.n	8005c06 <HAL_RCC_OscConfig+0x83e>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d00c      	beq.n	8005c06 <HAL_RCC_OscConfig+0x83e>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d008      	beq.n	8005c06 <HAL_RCC_OscConfig+0x83e>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d004      	beq.n	8005c06 <HAL_RCC_OscConfig+0x83e>
 8005bfc:	f240 3176 	movw	r1, #886	; 0x376
 8005c00:	488c      	ldr	r0, [pc, #560]	; (8005e34 <HAL_RCC_OscConfig+0xa6c>)
 8005c02:	f7fb fa1f 	bl	8001044 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_RCC_OscConfig+0x84e>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c12:	2b10      	cmp	r3, #16
 8005c14:	d904      	bls.n	8005c20 <HAL_RCC_OscConfig+0x858>
 8005c16:	f240 3177 	movw	r1, #887	; 0x377
 8005c1a:	4886      	ldr	r0, [pc, #536]	; (8005e34 <HAL_RCC_OscConfig+0xa6c>)
 8005c1c:	f7fb fa12 	bl	8001044 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c24:	2b07      	cmp	r3, #7
 8005c26:	d903      	bls.n	8005c30 <HAL_RCC_OscConfig+0x868>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2c:	2b56      	cmp	r3, #86	; 0x56
 8005c2e:	d904      	bls.n	8005c3a <HAL_RCC_OscConfig+0x872>
 8005c30:	f44f 715e 	mov.w	r1, #888	; 0x378
 8005c34:	487f      	ldr	r0, [pc, #508]	; (8005e34 <HAL_RCC_OscConfig+0xa6c>)
 8005c36:	f7fb fa05 	bl	8001044 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d903      	bls.n	8005c4a <HAL_RCC_OscConfig+0x882>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c46:	2b1f      	cmp	r3, #31
 8005c48:	d904      	bls.n	8005c54 <HAL_RCC_OscConfig+0x88c>
 8005c4a:	f240 317a 	movw	r1, #890	; 0x37a
 8005c4e:	4879      	ldr	r0, [pc, #484]	; (8005e34 <HAL_RCC_OscConfig+0xa6c>)
 8005c50:	f7fb f9f8 	bl	8001044 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d010      	beq.n	8005c7e <HAL_RCC_OscConfig+0x8b6>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d00c      	beq.n	8005c7e <HAL_RCC_OscConfig+0x8b6>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c68:	2b06      	cmp	r3, #6
 8005c6a:	d008      	beq.n	8005c7e <HAL_RCC_OscConfig+0x8b6>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d004      	beq.n	8005c7e <HAL_RCC_OscConfig+0x8b6>
 8005c74:	f44f 715f 	mov.w	r1, #892	; 0x37c
 8005c78:	486e      	ldr	r0, [pc, #440]	; (8005e34 <HAL_RCC_OscConfig+0xa6c>)
 8005c7a:	f7fb f9e3 	bl	8001044 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d010      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x8e0>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d00c      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x8e0>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c92:	2b06      	cmp	r3, #6
 8005c94:	d008      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x8e0>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	2b08      	cmp	r3, #8
 8005c9c:	d004      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x8e0>
 8005c9e:	f240 317d 	movw	r1, #893	; 0x37d
 8005ca2:	4864      	ldr	r0, [pc, #400]	; (8005e34 <HAL_RCC_OscConfig+0xa6c>)
 8005ca4:	f7fb f9ce 	bl	8001044 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005ca8:	4b61      	ldr	r3, [pc, #388]	; (8005e30 <HAL_RCC_OscConfig+0xa68>)
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f003 0203 	and.w	r2, r3, #3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d12c      	bne.n	8005d16 <HAL_RCC_OscConfig+0x94e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d123      	bne.n	8005d16 <HAL_RCC_OscConfig+0x94e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d11b      	bne.n	8005d16 <HAL_RCC_OscConfig+0x94e>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce8:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d113      	bne.n	8005d16 <HAL_RCC_OscConfig+0x94e>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf8:	085b      	lsrs	r3, r3, #1
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d109      	bne.n	8005d16 <HAL_RCC_OscConfig+0x94e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0c:	085b      	lsrs	r3, r3, #1
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d06d      	beq.n	8005df2 <HAL_RCC_OscConfig+0xa2a>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	2b0c      	cmp	r3, #12
 8005d1a:	d068      	beq.n	8005dee <HAL_RCC_OscConfig+0xa26>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005d1c:	4b44      	ldr	r3, [pc, #272]	; (8005e30 <HAL_RCC_OscConfig+0xa68>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d105      	bne.n	8005d34 <HAL_RCC_OscConfig+0x96c>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005d28:	4b41      	ldr	r3, [pc, #260]	; (8005e30 <HAL_RCC_OscConfig+0xa68>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <HAL_RCC_OscConfig+0x970>
#endif
            )
          {
            return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e0bc      	b.n	8005eb2 <HAL_RCC_OscConfig+0xaea>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005d38:	4b3d      	ldr	r3, [pc, #244]	; (8005e30 <HAL_RCC_OscConfig+0xa68>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a3c      	ldr	r2, [pc, #240]	; (8005e30 <HAL_RCC_OscConfig+0xa68>)
 8005d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d44:	f7fb fd38 	bl	80017b8 <HAL_GetTick>
 8005d48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_OscConfig+0x996>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d4c:	f7fb fd34 	bl	80017b8 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x996>
              {
                return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e0a9      	b.n	8005eb2 <HAL_RCC_OscConfig+0xaea>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d5e:	4b34      	ldr	r3, [pc, #208]	; (8005e30 <HAL_RCC_OscConfig+0xa68>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1f0      	bne.n	8005d4c <HAL_RCC_OscConfig+0x984>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d6a:	4b31      	ldr	r3, [pc, #196]	; (8005e30 <HAL_RCC_OscConfig+0xa68>)
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	4b32      	ldr	r3, [pc, #200]	; (8005e38 <HAL_RCC_OscConfig+0xa70>)
 8005d70:	4013      	ands	r3, r2
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d7a:	3a01      	subs	r2, #1
 8005d7c:	0112      	lsls	r2, r2, #4
 8005d7e:	4311      	orrs	r1, r2
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d84:	0212      	lsls	r2, r2, #8
 8005d86:	4311      	orrs	r1, r2
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d8c:	0852      	lsrs	r2, r2, #1
 8005d8e:	3a01      	subs	r2, #1
 8005d90:	0552      	lsls	r2, r2, #21
 8005d92:	4311      	orrs	r1, r2
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005d98:	0852      	lsrs	r2, r2, #1
 8005d9a:	3a01      	subs	r2, #1
 8005d9c:	0652      	lsls	r2, r2, #25
 8005d9e:	4311      	orrs	r1, r2
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005da4:	06d2      	lsls	r2, r2, #27
 8005da6:	430a      	orrs	r2, r1
 8005da8:	4921      	ldr	r1, [pc, #132]	; (8005e30 <HAL_RCC_OscConfig+0xa68>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005dae:	4b20      	ldr	r3, [pc, #128]	; (8005e30 <HAL_RCC_OscConfig+0xa68>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a1f      	ldr	r2, [pc, #124]	; (8005e30 <HAL_RCC_OscConfig+0xa68>)
 8005db4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005db8:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005dba:	4b1d      	ldr	r3, [pc, #116]	; (8005e30 <HAL_RCC_OscConfig+0xa68>)
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	4a1c      	ldr	r2, [pc, #112]	; (8005e30 <HAL_RCC_OscConfig+0xa68>)
 8005dc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dc4:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005dc6:	f7fb fcf7 	bl	80017b8 <HAL_GetTick>
 8005dca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dcc:	e008      	b.n	8005de0 <HAL_RCC_OscConfig+0xa18>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dce:	f7fb fcf3 	bl	80017b8 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d901      	bls.n	8005de0 <HAL_RCC_OscConfig+0xa18>
              {
                return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e068      	b.n	8005eb2 <HAL_RCC_OscConfig+0xaea>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005de0:	4b13      	ldr	r3, [pc, #76]	; (8005e30 <HAL_RCC_OscConfig+0xa68>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d0f0      	beq.n	8005dce <HAL_RCC_OscConfig+0xa06>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005dec:	e060      	b.n	8005eb0 <HAL_RCC_OscConfig+0xae8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e05f      	b.n	8005eb2 <HAL_RCC_OscConfig+0xaea>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005df2:	4b0f      	ldr	r3, [pc, #60]	; (8005e30 <HAL_RCC_OscConfig+0xa68>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d158      	bne.n	8005eb0 <HAL_RCC_OscConfig+0xae8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005dfe:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <HAL_RCC_OscConfig+0xa68>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a0b      	ldr	r2, [pc, #44]	; (8005e30 <HAL_RCC_OscConfig+0xa68>)
 8005e04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e08:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e0a:	4b09      	ldr	r3, [pc, #36]	; (8005e30 <HAL_RCC_OscConfig+0xa68>)
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	4a08      	ldr	r2, [pc, #32]	; (8005e30 <HAL_RCC_OscConfig+0xa68>)
 8005e10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e14:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e16:	f7fb fccf 	bl	80017b8 <HAL_GetTick>
 8005e1a:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e1c:	e00e      	b.n	8005e3c <HAL_RCC_OscConfig+0xa74>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e1e:	f7fb fccb 	bl	80017b8 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d907      	bls.n	8005e3c <HAL_RCC_OscConfig+0xa74>
            {
              return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e040      	b.n	8005eb2 <HAL_RCC_OscConfig+0xaea>
 8005e30:	40021000 	.word	0x40021000
 8005e34:	0800e5c8 	.word	0x0800e5c8
 8005e38:	019d800c 	.word	0x019d800c
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e3c:	4b1f      	ldr	r3, [pc, #124]	; (8005ebc <HAL_RCC_OscConfig+0xaf4>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d0ea      	beq.n	8005e1e <HAL_RCC_OscConfig+0xa56>
 8005e48:	e032      	b.n	8005eb0 <HAL_RCC_OscConfig+0xae8>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	2b0c      	cmp	r3, #12
 8005e4e:	d02d      	beq.n	8005eac <HAL_RCC_OscConfig+0xae4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e50:	4b1a      	ldr	r3, [pc, #104]	; (8005ebc <HAL_RCC_OscConfig+0xaf4>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a19      	ldr	r2, [pc, #100]	; (8005ebc <HAL_RCC_OscConfig+0xaf4>)
 8005e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e5a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005e5c:	4b17      	ldr	r3, [pc, #92]	; (8005ebc <HAL_RCC_OscConfig+0xaf4>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d105      	bne.n	8005e74 <HAL_RCC_OscConfig+0xaac>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005e68:	4b14      	ldr	r3, [pc, #80]	; (8005ebc <HAL_RCC_OscConfig+0xaf4>)
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	4a13      	ldr	r2, [pc, #76]	; (8005ebc <HAL_RCC_OscConfig+0xaf4>)
 8005e6e:	f023 0303 	bic.w	r3, r3, #3
 8005e72:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005e74:	4b11      	ldr	r3, [pc, #68]	; (8005ebc <HAL_RCC_OscConfig+0xaf4>)
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	4a10      	ldr	r2, [pc, #64]	; (8005ebc <HAL_RCC_OscConfig+0xaf4>)
 8005e7a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e82:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e84:	f7fb fc98 	bl	80017b8 <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e8c:	f7fb fc94 	bl	80017b8 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e009      	b.n	8005eb2 <HAL_RCC_OscConfig+0xaea>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e9e:	4b07      	ldr	r3, [pc, #28]	; (8005ebc <HAL_RCC_OscConfig+0xaf4>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1f0      	bne.n	8005e8c <HAL_RCC_OscConfig+0xac4>
 8005eaa:	e001      	b.n	8005eb0 <HAL_RCC_OscConfig+0xae8>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e000      	b.n	8005eb2 <HAL_RCC_OscConfig+0xaea>
      }
    }
  }
  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3720      	adds	r7, #32
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	40021000 	.word	0x40021000

08005ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e1d1      	b.n	800627c <HAL_RCC_ClockConfig+0x3bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <HAL_RCC_ClockConfig+0x28>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b0f      	cmp	r3, #15
 8005ee6:	d904      	bls.n	8005ef2 <HAL_RCC_ClockConfig+0x32>
 8005ee8:	f240 4162 	movw	r1, #1122	; 0x462
 8005eec:	4896      	ldr	r0, [pc, #600]	; (8006148 <HAL_RCC_ClockConfig+0x288>)
 8005eee:	f7fb f8a9 	bl	8001044 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d031      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x9c>
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d02e      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x9c>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d02b      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x9c>
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d028      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x9c>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d025      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x9c>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	2b05      	cmp	r3, #5
 8005f14:	d022      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x9c>
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b06      	cmp	r3, #6
 8005f1a:	d01f      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x9c>
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	2b07      	cmp	r3, #7
 8005f20:	d01c      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x9c>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d019      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x9c>
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2b09      	cmp	r3, #9
 8005f2c:	d016      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x9c>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b0a      	cmp	r3, #10
 8005f32:	d013      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x9c>
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	2b0b      	cmp	r3, #11
 8005f38:	d010      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x9c>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b0c      	cmp	r3, #12
 8005f3e:	d00d      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x9c>
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2b0d      	cmp	r3, #13
 8005f44:	d00a      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x9c>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b0e      	cmp	r3, #14
 8005f4a:	d007      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x9c>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2b0f      	cmp	r3, #15
 8005f50:	d004      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x9c>
 8005f52:	f240 4163 	movw	r1, #1123	; 0x463
 8005f56:	487c      	ldr	r0, [pc, #496]	; (8006148 <HAL_RCC_ClockConfig+0x288>)
 8005f58:	f7fb f874 	bl	8001044 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f5c:	4b7b      	ldr	r3, [pc, #492]	; (800614c <HAL_RCC_ClockConfig+0x28c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 030f 	and.w	r3, r3, #15
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d910      	bls.n	8005f8c <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f6a:	4b78      	ldr	r3, [pc, #480]	; (800614c <HAL_RCC_ClockConfig+0x28c>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f023 020f 	bic.w	r2, r3, #15
 8005f72:	4976      	ldr	r1, [pc, #472]	; (800614c <HAL_RCC_ClockConfig+0x28c>)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f7a:	4b74      	ldr	r3, [pc, #464]	; (800614c <HAL_RCC_ClockConfig+0x28c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 030f 	and.w	r3, r3, #15
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d001      	beq.n	8005f8c <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e177      	b.n	800627c <HAL_RCC_ClockConfig+0x3bc>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 809e 	beq.w	80060d6 <HAL_RCC_ClockConfig+0x216>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d010      	beq.n	8005fc4 <HAL_RCC_ClockConfig+0x104>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d00c      	beq.n	8005fc4 <HAL_RCC_ClockConfig+0x104>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d008      	beq.n	8005fc4 <HAL_RCC_ClockConfig+0x104>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	d004      	beq.n	8005fc4 <HAL_RCC_ClockConfig+0x104>
 8005fba:	f240 417a 	movw	r1, #1146	; 0x47a
 8005fbe:	4862      	ldr	r0, [pc, #392]	; (8006148 <HAL_RCC_ClockConfig+0x288>)
 8005fc0:	f7fb f840 	bl	8001044 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d133      	bne.n	8006034 <HAL_RCC_ClockConfig+0x174>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fcc:	4b60      	ldr	r3, [pc, #384]	; (8006150 <HAL_RCC_ClockConfig+0x290>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <HAL_RCC_ClockConfig+0x11c>
      {
        return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e14f      	b.n	800627c <HAL_RCC_ClockConfig+0x3bc>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005fdc:	f000 fabc 	bl	8006558 <RCC_GetSysClockFreqFromPLLSource>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	4b5c      	ldr	r3, [pc, #368]	; (8006154 <HAL_RCC_ClockConfig+0x294>)
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d955      	bls.n	8006094 <HAL_RCC_ClockConfig+0x1d4>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005fe8:	4b59      	ldr	r3, [pc, #356]	; (8006150 <HAL_RCC_ClockConfig+0x290>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10a      	bne.n	800600a <HAL_RCC_ClockConfig+0x14a>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ff4:	4b56      	ldr	r3, [pc, #344]	; (8006150 <HAL_RCC_ClockConfig+0x290>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ffc:	4a54      	ldr	r2, [pc, #336]	; (8006150 <HAL_RCC_ClockConfig+0x290>)
 8005ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006002:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006004:	2380      	movs	r3, #128	; 0x80
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	e044      	b.n	8006094 <HAL_RCC_ClockConfig+0x1d4>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d03e      	beq.n	8006094 <HAL_RCC_ClockConfig+0x1d4>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d13a      	bne.n	8006094 <HAL_RCC_ClockConfig+0x1d4>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800601e:	4b4c      	ldr	r3, [pc, #304]	; (8006150 <HAL_RCC_ClockConfig+0x290>)
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006026:	4a4a      	ldr	r2, [pc, #296]	; (8006150 <HAL_RCC_ClockConfig+0x290>)
 8006028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800602c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800602e:	2380      	movs	r3, #128	; 0x80
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	e02f      	b.n	8006094 <HAL_RCC_ClockConfig+0x1d4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2b02      	cmp	r3, #2
 800603a:	d107      	bne.n	800604c <HAL_RCC_ClockConfig+0x18c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800603c:	4b44      	ldr	r3, [pc, #272]	; (8006150 <HAL_RCC_ClockConfig+0x290>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d115      	bne.n	8006074 <HAL_RCC_ClockConfig+0x1b4>
        {
          return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e117      	b.n	800627c <HAL_RCC_ClockConfig+0x3bc>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d107      	bne.n	8006064 <HAL_RCC_ClockConfig+0x1a4>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006054:	4b3e      	ldr	r3, [pc, #248]	; (8006150 <HAL_RCC_ClockConfig+0x290>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d109      	bne.n	8006074 <HAL_RCC_ClockConfig+0x1b4>
        {
          return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e10b      	b.n	800627c <HAL_RCC_ClockConfig+0x3bc>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006064:	4b3a      	ldr	r3, [pc, #232]	; (8006150 <HAL_RCC_ClockConfig+0x290>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <HAL_RCC_ClockConfig+0x1b4>
        {
          return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e103      	b.n	800627c <HAL_RCC_ClockConfig+0x3bc>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006074:	f000 f912 	bl	800629c <HAL_RCC_GetSysClockFreq>
 8006078:	4602      	mov	r2, r0
 800607a:	4b36      	ldr	r3, [pc, #216]	; (8006154 <HAL_RCC_ClockConfig+0x294>)
 800607c:	429a      	cmp	r2, r3
 800607e:	d909      	bls.n	8006094 <HAL_RCC_ClockConfig+0x1d4>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006080:	4b33      	ldr	r3, [pc, #204]	; (8006150 <HAL_RCC_ClockConfig+0x290>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006088:	4a31      	ldr	r2, [pc, #196]	; (8006150 <HAL_RCC_ClockConfig+0x290>)
 800608a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608e:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006090:	2380      	movs	r3, #128	; 0x80
 8006092:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006094:	4b2e      	ldr	r3, [pc, #184]	; (8006150 <HAL_RCC_ClockConfig+0x290>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f023 0203 	bic.w	r2, r3, #3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	492b      	ldr	r1, [pc, #172]	; (8006150 <HAL_RCC_ClockConfig+0x290>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060a6:	f7fb fb87 	bl	80017b8 <HAL_GetTick>
 80060aa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ac:	e00a      	b.n	80060c4 <HAL_RCC_ClockConfig+0x204>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060ae:	f7fb fb83 	bl	80017b8 <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060bc:	4293      	cmp	r3, r2
 80060be:	d901      	bls.n	80060c4 <HAL_RCC_ClockConfig+0x204>
      {
        return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e0db      	b.n	800627c <HAL_RCC_ClockConfig+0x3bc>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060c4:	4b22      	ldr	r3, [pc, #136]	; (8006150 <HAL_RCC_ClockConfig+0x290>)
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f003 020c 	and.w	r2, r3, #12
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d1eb      	bne.n	80060ae <HAL_RCC_ClockConfig+0x1ee>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d03a      	beq.n	8006158 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d024      	beq.n	8006134 <HAL_RCC_ClockConfig+0x274>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	2b80      	cmp	r3, #128	; 0x80
 80060f0:	d020      	beq.n	8006134 <HAL_RCC_ClockConfig+0x274>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	2b90      	cmp	r3, #144	; 0x90
 80060f8:	d01c      	beq.n	8006134 <HAL_RCC_ClockConfig+0x274>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	2ba0      	cmp	r3, #160	; 0xa0
 8006100:	d018      	beq.n	8006134 <HAL_RCC_ClockConfig+0x274>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	2bb0      	cmp	r3, #176	; 0xb0
 8006108:	d014      	beq.n	8006134 <HAL_RCC_ClockConfig+0x274>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	2bc0      	cmp	r3, #192	; 0xc0
 8006110:	d010      	beq.n	8006134 <HAL_RCC_ClockConfig+0x274>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2bd0      	cmp	r3, #208	; 0xd0
 8006118:	d00c      	beq.n	8006134 <HAL_RCC_ClockConfig+0x274>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	2be0      	cmp	r3, #224	; 0xe0
 8006120:	d008      	beq.n	8006134 <HAL_RCC_ClockConfig+0x274>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	2bf0      	cmp	r3, #240	; 0xf0
 8006128:	d004      	beq.n	8006134 <HAL_RCC_ClockConfig+0x274>
 800612a:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 800612e:	4806      	ldr	r0, [pc, #24]	; (8006148 <HAL_RCC_ClockConfig+0x288>)
 8006130:	f7fa ff88 	bl	8001044 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006134:	4b06      	ldr	r3, [pc, #24]	; (8006150 <HAL_RCC_ClockConfig+0x290>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	4903      	ldr	r1, [pc, #12]	; (8006150 <HAL_RCC_ClockConfig+0x290>)
 8006142:	4313      	orrs	r3, r2
 8006144:	608b      	str	r3, [r1, #8]
 8006146:	e010      	b.n	800616a <HAL_RCC_ClockConfig+0x2aa>
 8006148:	0800e5c8 	.word	0x0800e5c8
 800614c:	40022000 	.word	0x40022000
 8006150:	40021000 	.word	0x40021000
 8006154:	04c4b400 	.word	0x04c4b400
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2b80      	cmp	r3, #128	; 0x80
 800615c:	d105      	bne.n	800616a <HAL_RCC_ClockConfig+0x2aa>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800615e:	4b49      	ldr	r3, [pc, #292]	; (8006284 <HAL_RCC_ClockConfig+0x3c4>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	4a48      	ldr	r2, [pc, #288]	; (8006284 <HAL_RCC_ClockConfig+0x3c4>)
 8006164:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006168:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800616a:	4b47      	ldr	r3, [pc, #284]	; (8006288 <HAL_RCC_ClockConfig+0x3c8>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	d210      	bcs.n	800619a <HAL_RCC_ClockConfig+0x2da>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006178:	4b43      	ldr	r3, [pc, #268]	; (8006288 <HAL_RCC_ClockConfig+0x3c8>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f023 020f 	bic.w	r2, r3, #15
 8006180:	4941      	ldr	r1, [pc, #260]	; (8006288 <HAL_RCC_ClockConfig+0x3c8>)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	4313      	orrs	r3, r2
 8006186:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006188:	4b3f      	ldr	r3, [pc, #252]	; (8006288 <HAL_RCC_ClockConfig+0x3c8>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 030f 	and.w	r3, r3, #15
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	429a      	cmp	r2, r3
 8006194:	d001      	beq.n	800619a <HAL_RCC_ClockConfig+0x2da>
    {
      return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e070      	b.n	800627c <HAL_RCC_ClockConfig+0x3bc>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0304 	and.w	r3, r3, #4
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d025      	beq.n	80061f2 <HAL_RCC_ClockConfig+0x332>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d018      	beq.n	80061e0 <HAL_RCC_ClockConfig+0x320>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b6:	d013      	beq.n	80061e0 <HAL_RCC_ClockConfig+0x320>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80061c0:	d00e      	beq.n	80061e0 <HAL_RCC_ClockConfig+0x320>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80061ca:	d009      	beq.n	80061e0 <HAL_RCC_ClockConfig+0x320>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061d4:	d004      	beq.n	80061e0 <HAL_RCC_ClockConfig+0x320>
 80061d6:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 80061da:	482c      	ldr	r0, [pc, #176]	; (800628c <HAL_RCC_ClockConfig+0x3cc>)
 80061dc:	f7fa ff32 	bl	8001044 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061e0:	4b28      	ldr	r3, [pc, #160]	; (8006284 <HAL_RCC_ClockConfig+0x3c4>)
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	4925      	ldr	r1, [pc, #148]	; (8006284 <HAL_RCC_ClockConfig+0x3c4>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0308 	and.w	r3, r3, #8
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d026      	beq.n	800624c <HAL_RCC_ClockConfig+0x38c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d018      	beq.n	8006238 <HAL_RCC_ClockConfig+0x378>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800620e:	d013      	beq.n	8006238 <HAL_RCC_ClockConfig+0x378>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006218:	d00e      	beq.n	8006238 <HAL_RCC_ClockConfig+0x378>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006222:	d009      	beq.n	8006238 <HAL_RCC_ClockConfig+0x378>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800622c:	d004      	beq.n	8006238 <HAL_RCC_ClockConfig+0x378>
 800622e:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8006232:	4816      	ldr	r0, [pc, #88]	; (800628c <HAL_RCC_ClockConfig+0x3cc>)
 8006234:	f7fa ff06 	bl	8001044 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006238:	4b12      	ldr	r3, [pc, #72]	; (8006284 <HAL_RCC_ClockConfig+0x3c4>)
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	490f      	ldr	r1, [pc, #60]	; (8006284 <HAL_RCC_ClockConfig+0x3c4>)
 8006248:	4313      	orrs	r3, r2
 800624a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800624c:	f000 f826 	bl	800629c <HAL_RCC_GetSysClockFreq>
 8006250:	4601      	mov	r1, r0
 8006252:	4b0c      	ldr	r3, [pc, #48]	; (8006284 <HAL_RCC_ClockConfig+0x3c4>)
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	091b      	lsrs	r3, r3, #4
 8006258:	f003 030f 	and.w	r3, r3, #15
 800625c:	4a0c      	ldr	r2, [pc, #48]	; (8006290 <HAL_RCC_ClockConfig+0x3d0>)
 800625e:	5cd3      	ldrb	r3, [r2, r3]
 8006260:	f003 031f 	and.w	r3, r3, #31
 8006264:	fa21 f303 	lsr.w	r3, r1, r3
 8006268:	4a0a      	ldr	r2, [pc, #40]	; (8006294 <HAL_RCC_ClockConfig+0x3d4>)
 800626a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800626c:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <HAL_RCC_ClockConfig+0x3d8>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4618      	mov	r0, r3
 8006272:	f7fa ffd9 	bl	8001228 <HAL_InitTick>
 8006276:	4603      	mov	r3, r0
 8006278:	73fb      	strb	r3, [r7, #15]

  return status;
 800627a:	7bfb      	ldrb	r3, [r7, #15]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	40021000 	.word	0x40021000
 8006288:	40022000 	.word	0x40022000
 800628c:	0800e5c8 	.word	0x0800e5c8
 8006290:	0800e8d0 	.word	0x0800e8d0
 8006294:	200000b4 	.word	0x200000b4
 8006298:	200000b8 	.word	0x200000b8

0800629c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800629c:	b480      	push	{r7}
 800629e:	b089      	sub	sp, #36	; 0x24
 80062a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	61fb      	str	r3, [r7, #28]
 80062a6:	2300      	movs	r3, #0
 80062a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062aa:	4b3d      	ldr	r3, [pc, #244]	; (80063a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f003 030c 	and.w	r3, r3, #12
 80062b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062b4:	4b3a      	ldr	r3, [pc, #232]	; (80063a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f003 0303 	and.w	r3, r3, #3
 80062bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d005      	beq.n	80062d0 <HAL_RCC_GetSysClockFreq+0x34>
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	2b0c      	cmp	r3, #12
 80062c8:	d121      	bne.n	800630e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d11e      	bne.n	800630e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80062d0:	4b33      	ldr	r3, [pc, #204]	; (80063a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0308 	and.w	r3, r3, #8
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d107      	bne.n	80062ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80062dc:	4b30      	ldr	r3, [pc, #192]	; (80063a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80062de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062e2:	0a1b      	lsrs	r3, r3, #8
 80062e4:	f003 030f 	and.w	r3, r3, #15
 80062e8:	61fb      	str	r3, [r7, #28]
 80062ea:	e005      	b.n	80062f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80062ec:	4b2c      	ldr	r3, [pc, #176]	; (80063a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	091b      	lsrs	r3, r3, #4
 80062f2:	f003 030f 	and.w	r3, r3, #15
 80062f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80062f8:	4a2a      	ldr	r2, [pc, #168]	; (80063a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006300:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10d      	bne.n	8006324 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800630c:	e00a      	b.n	8006324 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	2b04      	cmp	r3, #4
 8006312:	d102      	bne.n	800631a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006314:	4b24      	ldr	r3, [pc, #144]	; (80063a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006316:	61bb      	str	r3, [r7, #24]
 8006318:	e004      	b.n	8006324 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	2b08      	cmp	r3, #8
 800631e:	d101      	bne.n	8006324 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006320:	4b22      	ldr	r3, [pc, #136]	; (80063ac <HAL_RCC_GetSysClockFreq+0x110>)
 8006322:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	2b0c      	cmp	r3, #12
 8006328:	d133      	bne.n	8006392 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800632a:	4b1d      	ldr	r3, [pc, #116]	; (80063a0 <HAL_RCC_GetSysClockFreq+0x104>)
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f003 0303 	and.w	r3, r3, #3
 8006332:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2b02      	cmp	r3, #2
 8006338:	d002      	beq.n	8006340 <HAL_RCC_GetSysClockFreq+0xa4>
 800633a:	2b03      	cmp	r3, #3
 800633c:	d003      	beq.n	8006346 <HAL_RCC_GetSysClockFreq+0xaa>
 800633e:	e005      	b.n	800634c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006340:	4b19      	ldr	r3, [pc, #100]	; (80063a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006342:	617b      	str	r3, [r7, #20]
      break;
 8006344:	e005      	b.n	8006352 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006346:	4b19      	ldr	r3, [pc, #100]	; (80063ac <HAL_RCC_GetSysClockFreq+0x110>)
 8006348:	617b      	str	r3, [r7, #20]
      break;
 800634a:	e002      	b.n	8006352 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	617b      	str	r3, [r7, #20]
      break;
 8006350:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006352:	4b13      	ldr	r3, [pc, #76]	; (80063a0 <HAL_RCC_GetSysClockFreq+0x104>)
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	091b      	lsrs	r3, r3, #4
 8006358:	f003 030f 	and.w	r3, r3, #15
 800635c:	3301      	adds	r3, #1
 800635e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006360:	4b0f      	ldr	r3, [pc, #60]	; (80063a0 <HAL_RCC_GetSysClockFreq+0x104>)
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	0a1b      	lsrs	r3, r3, #8
 8006366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	fb02 f203 	mul.w	r2, r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	fbb2 f3f3 	udiv	r3, r2, r3
 8006376:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006378:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <HAL_RCC_GetSysClockFreq+0x104>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	0e5b      	lsrs	r3, r3, #25
 800637e:	f003 0303 	and.w	r3, r3, #3
 8006382:	3301      	adds	r3, #1
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006390:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006392:	69bb      	ldr	r3, [r7, #24]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3724      	adds	r7, #36	; 0x24
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	40021000 	.word	0x40021000
 80063a4:	0800e8e8 	.word	0x0800e8e8
 80063a8:	00f42400 	.word	0x00f42400
 80063ac:	007a1200 	.word	0x007a1200

080063b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063b0:	b480      	push	{r7}
 80063b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063b4:	4b03      	ldr	r3, [pc, #12]	; (80063c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80063b6:	681b      	ldr	r3, [r3, #0]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	200000b4 	.word	0x200000b4

080063c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80063cc:	f7ff fff0 	bl	80063b0 <HAL_RCC_GetHCLKFreq>
 80063d0:	4601      	mov	r1, r0
 80063d2:	4b06      	ldr	r3, [pc, #24]	; (80063ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	0a1b      	lsrs	r3, r3, #8
 80063d8:	f003 0307 	and.w	r3, r3, #7
 80063dc:	4a04      	ldr	r2, [pc, #16]	; (80063f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80063de:	5cd3      	ldrb	r3, [r2, r3]
 80063e0:	f003 031f 	and.w	r3, r3, #31
 80063e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	40021000 	.word	0x40021000
 80063f0:	0800e8e0 	.word	0x0800e8e0

080063f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80063f8:	f7ff ffda 	bl	80063b0 <HAL_RCC_GetHCLKFreq>
 80063fc:	4601      	mov	r1, r0
 80063fe:	4b06      	ldr	r3, [pc, #24]	; (8006418 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	0adb      	lsrs	r3, r3, #11
 8006404:	f003 0307 	and.w	r3, r3, #7
 8006408:	4a04      	ldr	r2, [pc, #16]	; (800641c <HAL_RCC_GetPCLK2Freq+0x28>)
 800640a:	5cd3      	ldrb	r3, [r2, r3]
 800640c:	f003 031f 	and.w	r3, r3, #31
 8006410:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006414:	4618      	mov	r0, r3
 8006416:	bd80      	pop	{r7, pc}
 8006418:	40021000 	.word	0x40021000
 800641c:	0800e8e0 	.word	0x0800e8e0

08006420 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d104      	bne.n	800643a <HAL_RCC_GetClockConfig+0x1a>
 8006430:	f240 6197 	movw	r1, #1687	; 0x697
 8006434:	4818      	ldr	r0, [pc, #96]	; (8006498 <HAL_RCC_GetClockConfig+0x78>)
 8006436:	f7fa fe05 	bl	8001044 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d104      	bne.n	800644a <HAL_RCC_GetClockConfig+0x2a>
 8006440:	f44f 61d3 	mov.w	r1, #1688	; 0x698
 8006444:	4814      	ldr	r0, [pc, #80]	; (8006498 <HAL_RCC_GetClockConfig+0x78>)
 8006446:	f7fa fdfd 	bl	8001044 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	220f      	movs	r2, #15
 800644e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006450:	4b12      	ldr	r3, [pc, #72]	; (800649c <HAL_RCC_GetClockConfig+0x7c>)
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f003 0203 	and.w	r2, r3, #3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800645c:	4b0f      	ldr	r3, [pc, #60]	; (800649c <HAL_RCC_GetClockConfig+0x7c>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006468:	4b0c      	ldr	r3, [pc, #48]	; (800649c <HAL_RCC_GetClockConfig+0x7c>)
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006474:	4b09      	ldr	r3, [pc, #36]	; (800649c <HAL_RCC_GetClockConfig+0x7c>)
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	08db      	lsrs	r3, r3, #3
 800647a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006482:	4b07      	ldr	r3, [pc, #28]	; (80064a0 <HAL_RCC_GetClockConfig+0x80>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 020f 	and.w	r2, r3, #15
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	601a      	str	r2, [r3, #0]
}
 800648e:	bf00      	nop
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	0800e5c8 	.word	0x0800e5c8
 800649c:	40021000 	.word	0x40021000
 80064a0:	40022000 	.word	0x40022000

080064a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80064ac:	2300      	movs	r3, #0
 80064ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80064b0:	4b27      	ldr	r3, [pc, #156]	; (8006550 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80064b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80064bc:	f7fe feb0 	bl	8005220 <HAL_PWREx_GetVoltageRange>
 80064c0:	6178      	str	r0, [r7, #20]
 80064c2:	e014      	b.n	80064ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80064c4:	4b22      	ldr	r3, [pc, #136]	; (8006550 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80064c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c8:	4a21      	ldr	r2, [pc, #132]	; (8006550 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80064ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ce:	6593      	str	r3, [r2, #88]	; 0x58
 80064d0:	4b1f      	ldr	r3, [pc, #124]	; (8006550 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80064d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064d8:	60fb      	str	r3, [r7, #12]
 80064da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80064dc:	f7fe fea0 	bl	8005220 <HAL_PWREx_GetVoltageRange>
 80064e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80064e2:	4b1b      	ldr	r3, [pc, #108]	; (8006550 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80064e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e6:	4a1a      	ldr	r2, [pc, #104]	; (8006550 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80064e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064f4:	d10b      	bne.n	800650e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b80      	cmp	r3, #128	; 0x80
 80064fa:	d913      	bls.n	8006524 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2ba0      	cmp	r3, #160	; 0xa0
 8006500:	d902      	bls.n	8006508 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006502:	2302      	movs	r3, #2
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	e00d      	b.n	8006524 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006508:	2301      	movs	r3, #1
 800650a:	613b      	str	r3, [r7, #16]
 800650c:	e00a      	b.n	8006524 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b7f      	cmp	r3, #127	; 0x7f
 8006512:	d902      	bls.n	800651a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006514:	2302      	movs	r3, #2
 8006516:	613b      	str	r3, [r7, #16]
 8006518:	e004      	b.n	8006524 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b70      	cmp	r3, #112	; 0x70
 800651e:	d101      	bne.n	8006524 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006520:	2301      	movs	r3, #1
 8006522:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006524:	4b0b      	ldr	r3, [pc, #44]	; (8006554 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f023 020f 	bic.w	r2, r3, #15
 800652c:	4909      	ldr	r1, [pc, #36]	; (8006554 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	4313      	orrs	r3, r2
 8006532:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006534:	4b07      	ldr	r3, [pc, #28]	; (8006554 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 030f 	and.w	r3, r3, #15
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	429a      	cmp	r2, r3
 8006540:	d001      	beq.n	8006546 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e000      	b.n	8006548 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	40021000 	.word	0x40021000
 8006554:	40022000 	.word	0x40022000

08006558 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800655e:	2300      	movs	r3, #0
 8006560:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8006562:	4b2d      	ldr	r3, [pc, #180]	; (8006618 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f003 0303 	and.w	r3, r3, #3
 800656a:	2b01      	cmp	r3, #1
 800656c:	d118      	bne.n	80065a0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800656e:	4b2a      	ldr	r3, [pc, #168]	; (8006618 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0308 	and.w	r3, r3, #8
 8006576:	2b00      	cmp	r3, #0
 8006578:	d107      	bne.n	800658a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800657a:	4b27      	ldr	r3, [pc, #156]	; (8006618 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800657c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006580:	0a1b      	lsrs	r3, r3, #8
 8006582:	f003 030f 	and.w	r3, r3, #15
 8006586:	617b      	str	r3, [r7, #20]
 8006588:	e005      	b.n	8006596 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800658a:	4b23      	ldr	r3, [pc, #140]	; (8006618 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	091b      	lsrs	r3, r3, #4
 8006590:	f003 030f 	and.w	r3, r3, #15
 8006594:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006596:	4a21      	ldr	r2, [pc, #132]	; (800661c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800659e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065a0:	4b1d      	ldr	r3, [pc, #116]	; (8006618 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f003 0303 	and.w	r3, r3, #3
 80065a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d002      	beq.n	80065b6 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80065b0:	2b03      	cmp	r3, #3
 80065b2:	d003      	beq.n	80065bc <RCC_GetSysClockFreqFromPLLSource+0x64>
 80065b4:	e005      	b.n	80065c2 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80065b6:	4b1a      	ldr	r3, [pc, #104]	; (8006620 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80065b8:	613b      	str	r3, [r7, #16]
    break;
 80065ba:	e005      	b.n	80065c8 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80065bc:	4b19      	ldr	r3, [pc, #100]	; (8006624 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80065be:	613b      	str	r3, [r7, #16]
    break;
 80065c0:	e002      	b.n	80065c8 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	613b      	str	r3, [r7, #16]
    break;
 80065c6:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065c8:	4b13      	ldr	r3, [pc, #76]	; (8006618 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	091b      	lsrs	r3, r3, #4
 80065ce:	f003 030f 	and.w	r3, r3, #15
 80065d2:	3301      	adds	r3, #1
 80065d4:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80065d6:	4b10      	ldr	r3, [pc, #64]	; (8006618 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	0a1b      	lsrs	r3, r3, #8
 80065dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	fb02 f203 	mul.w	r2, r2, r3
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ec:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80065ee:	4b0a      	ldr	r3, [pc, #40]	; (8006618 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	0e5b      	lsrs	r3, r3, #25
 80065f4:	f003 0303 	and.w	r3, r3, #3
 80065f8:	3301      	adds	r3, #1
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	fbb2 f3f3 	udiv	r3, r2, r3
 8006606:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006608:	683b      	ldr	r3, [r7, #0]
}
 800660a:	4618      	mov	r0, r3
 800660c:	371c      	adds	r7, #28
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	40021000 	.word	0x40021000
 800661c:	0800e8e8 	.word	0x0800e8e8
 8006620:	00f42400 	.word	0x00f42400
 8006624:	007a1200 	.word	0x007a1200

08006628 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006630:	2300      	movs	r3, #0
 8006632:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006634:	2300      	movs	r3, #0
 8006636:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	f040 8090 	bne.w	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	f040 8089 	bne.w	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	2b00      	cmp	r3, #0
 800665e:	f040 8082 	bne.w	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0308 	and.w	r3, r3, #8
 800666a:	2b00      	cmp	r3, #0
 800666c:	d17b      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0310 	and.w	r3, r3, #16
 8006676:	2b00      	cmp	r3, #0
 8006678:	d175      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0320 	and.w	r3, r3, #32
 8006682:	2b00      	cmp	r3, #0
 8006684:	d16f      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668e:	2b00      	cmp	r3, #0
 8006690:	d169      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669a:	2b00      	cmp	r3, #0
 800669c:	d163      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d15d      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d157      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d151      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d14b      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d145      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d13f      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d139      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d133      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d12d      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d127      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d121      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d11b      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d115      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10f      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d109      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d103      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800675e:	21cb      	movs	r1, #203	; 0xcb
 8006760:	48ae      	ldr	r0, [pc, #696]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006762:	f7fa fc6f 	bl	8001044 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800676e:	2b00      	cmp	r3, #0
 8006770:	d055      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006776:	2b00      	cmp	r3, #0
 8006778:	d013      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800677e:	2b20      	cmp	r3, #32
 8006780:	d00f      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006786:	2b40      	cmp	r3, #64	; 0x40
 8006788:	d00b      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800678e:	2b60      	cmp	r3, #96	; 0x60
 8006790:	d007      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006796:	2b80      	cmp	r3, #128	; 0x80
 8006798:	d003      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800679a:	21d3      	movs	r1, #211	; 0xd3
 800679c:	489f      	ldr	r0, [pc, #636]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800679e:	f7fa fc51 	bl	8001044 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067a6:	2b40      	cmp	r3, #64	; 0x40
 80067a8:	d00b      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 80067aa:	2b40      	cmp	r3, #64	; 0x40
 80067ac:	d804      	bhi.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00e      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80067b2:	2b20      	cmp	r3, #32
 80067b4:	d015      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 80067b6:	e01d      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80067b8:	2b60      	cmp	r3, #96	; 0x60
 80067ba:	d01e      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80067bc:	2b80      	cmp	r3, #128	; 0x80
 80067be:	d01c      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80067c0:	e018      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80067c2:	4b97      	ldr	r3, [pc, #604]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	4a96      	ldr	r2, [pc, #600]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 80067c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067cc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80067ce:	e015      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	3304      	adds	r3, #4
 80067d4:	2100      	movs	r1, #0
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 fd6a 	bl	80072b0 <RCCEx_PLLSAI1_Config>
 80067dc:	4603      	mov	r3, r0
 80067de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80067e0:	e00c      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	3320      	adds	r3, #32
 80067e6:	2100      	movs	r1, #0
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fedd 	bl	80075a8 <RCCEx_PLLSAI2_Config>
 80067ee:	4603      	mov	r3, r0
 80067f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80067f2:	e003      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	74fb      	strb	r3, [r7, #19]
      break;
 80067f8:	e000      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      break;
 80067fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067fc:	7cfb      	ldrb	r3, [r7, #19]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10b      	bne.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006802:	4b87      	ldr	r3, [pc, #540]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8006804:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006808:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006810:	4983      	ldr	r1, [pc, #524]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8006812:	4313      	orrs	r3, r2
 8006814:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006818:	e001      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681a:	7cfb      	ldrb	r3, [r7, #19]
 800681c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d05f      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682e:	2b00      	cmp	r3, #0
 8006830:	d018      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800683a:	d013      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006844:	d00e      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800684e:	d009      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006858:	d004      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800685a:	f240 1111 	movw	r1, #273	; 0x111
 800685e:	486f      	ldr	r0, [pc, #444]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006860:	f7fa fbf0 	bl	8001044 <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800686c:	d00f      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x266>
 800686e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006872:	d805      	bhi.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8006874:	2b00      	cmp	r3, #0
 8006876:	d011      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800687c:	d017      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x286>
 800687e:	e01f      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006880:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006884:	d01f      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8006886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800688a:	d01c      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 800688c:	e018      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800688e:	4b64      	ldr	r3, [pc, #400]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	4a63      	ldr	r2, [pc, #396]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8006894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006898:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800689a:	e015      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	3304      	adds	r3, #4
 80068a0:	2100      	movs	r1, #0
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fd04 	bl	80072b0 <RCCEx_PLLSAI1_Config>
 80068a8:	4603      	mov	r3, r0
 80068aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80068ac:	e00c      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	3320      	adds	r3, #32
 80068b2:	2100      	movs	r1, #0
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 fe77 	bl	80075a8 <RCCEx_PLLSAI2_Config>
 80068ba:	4603      	mov	r3, r0
 80068bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80068be:	e003      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	74fb      	strb	r3, [r7, #19]
      break;
 80068c4:	e000      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
      break;
 80068c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068c8:	7cfb      	ldrb	r3, [r7, #19]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10b      	bne.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80068ce:	4b54      	ldr	r3, [pc, #336]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 80068d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068dc:	4950      	ldr	r1, [pc, #320]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80068e4:	e001      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e6:	7cfb      	ldrb	r3, [r7, #19]
 80068e8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 80bf 	beq.w	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068f8:	2300      	movs	r3, #0
 80068fa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006902:	2b00      	cmp	r3, #0
 8006904:	d016      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800690c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006910:	d010      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800691c:	d00a      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006924:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006928:	d004      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800692a:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800692e:	483b      	ldr	r0, [pc, #236]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006930:	f7fa fb88 	bl	8001044 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006934:	4b3a      	ldr	r3, [pc, #232]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8006936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d101      	bne.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006940:	2301      	movs	r3, #1
 8006942:	e000      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8006944:	2300      	movs	r3, #0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00d      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800694a:	4b35      	ldr	r3, [pc, #212]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 800694c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800694e:	4a34      	ldr	r2, [pc, #208]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8006950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006954:	6593      	str	r3, [r2, #88]	; 0x58
 8006956:	4b32      	ldr	r3, [pc, #200]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8006958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800695a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800695e:	60bb      	str	r3, [r7, #8]
 8006960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006962:	2301      	movs	r3, #1
 8006964:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006966:	4b2f      	ldr	r3, [pc, #188]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a2e      	ldr	r2, [pc, #184]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800696c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006970:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006972:	f7fa ff21 	bl	80017b8 <HAL_GetTick>
 8006976:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006978:	e009      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x366>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800697a:	f7fa ff1d 	bl	80017b8 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b02      	cmp	r3, #2
 8006986:	d902      	bls.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x366>
      {
        ret = HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	74fb      	strb	r3, [r7, #19]
        break;
 800698c:	e005      	b.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x372>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800698e:	4b25      	ldr	r3, [pc, #148]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006996:	2b00      	cmp	r3, #0
 8006998:	d0ef      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x352>
      }
    }

    if(ret == HAL_OK)
 800699a:	7cfb      	ldrb	r3, [r7, #19]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d15f      	bne.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80069a0:	4b1f      	ldr	r3, [pc, #124]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 80069a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069aa:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d01f      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d019      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80069be:	4b18      	ldr	r3, [pc, #96]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 80069c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069c8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80069ca:	4b15      	ldr	r3, [pc, #84]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 80069cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d0:	4a13      	ldr	r2, [pc, #76]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 80069d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069da:	4b11      	ldr	r3, [pc, #68]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 80069dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e0:	4a0f      	ldr	r2, [pc, #60]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 80069e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80069ea:	4a0d      	ldr	r2, [pc, #52]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d01c      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069fc:	f7fa fedc 	bl	80017b8 <HAL_GetTick>
 8006a00:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a02:	e011      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x400>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a04:	f7fa fed8 	bl	80017b8 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d908      	bls.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x400>
          {
            ret = HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	74fb      	strb	r3, [r7, #19]
            break;
 8006a1a:	e00c      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006a1c:	0800e600 	.word	0x0800e600
 8006a20:	40021000 	.word	0x40021000
 8006a24:	40007000 	.word	0x40007000
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a28:	4b0c      	ldr	r3, [pc, #48]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0e6      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }

      if(ret == HAL_OK)
 8006a36:	7cfb      	ldrb	r3, [r7, #19]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10c      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a3c:	4b07      	ldr	r3, [pc, #28]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a4c:	4903      	ldr	r1, [pc, #12]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006a54:	e006      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x43c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a56:	7cfb      	ldrb	r3, [r7, #19]
 8006a58:	74bb      	strb	r3, [r7, #18]
 8006a5a:	e003      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8006a5c:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a60:	7cfb      	ldrb	r3, [r7, #19]
 8006a62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a64:	7c7b      	ldrb	r3, [r7, #17]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d105      	bne.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a6a:	4ba1      	ldr	r3, [pc, #644]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a6e:	4aa0      	ldr	r2, [pc, #640]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d01f      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d010      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d00c      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d008      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d004      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006aa2:	f240 119b 	movw	r1, #411	; 0x19b
 8006aa6:	4893      	ldr	r0, [pc, #588]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006aa8:	f7fa facc 	bl	8001044 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006aac:	4b90      	ldr	r3, [pc, #576]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab2:	f023 0203 	bic.w	r2, r3, #3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aba:	498d      	ldr	r1, [pc, #564]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d01f      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d010      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	d00c      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	2b0c      	cmp	r3, #12
 8006ae4:	d008      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aea:	2b08      	cmp	r3, #8
 8006aec:	d004      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006aee:	f240 11a5 	movw	r1, #421	; 0x1a5
 8006af2:	4880      	ldr	r0, [pc, #512]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006af4:	f7fa faa6 	bl	8001044 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006af8:	4b7d      	ldr	r3, [pc, #500]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006afe:	f023 020c 	bic.w	r2, r3, #12
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	497a      	ldr	r1, [pc, #488]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0304 	and.w	r3, r3, #4
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d01f      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d010      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b26:	2b10      	cmp	r3, #16
 8006b28:	d00c      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2e:	2b30      	cmp	r3, #48	; 0x30
 8006b30:	d008      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	d004      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8006b3a:	f240 11b1 	movw	r1, #433	; 0x1b1
 8006b3e:	486d      	ldr	r0, [pc, #436]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006b40:	f7fa fa80 	bl	8001044 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b44:	4b6a      	ldr	r3, [pc, #424]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b52:	4967      	ldr	r1, [pc, #412]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0308 	and.w	r3, r3, #8
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d01f      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d010      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x568>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b72:	2b40      	cmp	r3, #64	; 0x40
 8006b74:	d00c      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x568>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b7a:	2bc0      	cmp	r3, #192	; 0xc0
 8006b7c:	d008      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x568>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b82:	2b80      	cmp	r3, #128	; 0x80
 8006b84:	d004      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x568>
 8006b86:	f240 11bf 	movw	r1, #447	; 0x1bf
 8006b8a:	485a      	ldr	r0, [pc, #360]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006b8c:	f7fa fa5a 	bl	8001044 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b90:	4b57      	ldr	r3, [pc, #348]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b9e:	4954      	ldr	r1, [pc, #336]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0310 	and.w	r3, r3, #16
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d022      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d013      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bc2:	d00e      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bcc:	d009      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bd6:	d004      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8006bd8:	f240 11cd 	movw	r1, #461	; 0x1cd
 8006bdc:	4845      	ldr	r0, [pc, #276]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006bde:	f7fa fa31 	bl	8001044 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006be2:	4b43      	ldr	r3, [pc, #268]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bf0:	493f      	ldr	r1, [pc, #252]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0320 	and.w	r3, r3, #32
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d022      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d013      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c14:	d00e      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c1e:	d009      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c28:	d004      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006c2a:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006c2e:	4831      	ldr	r0, [pc, #196]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006c30:	f7fa fa08 	bl	8001044 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c34:	4b2e      	ldr	r3, [pc, #184]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c42:	492b      	ldr	r1, [pc, #172]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d022      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x674>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d013      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c66:	d00e      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c70:	d009      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c76:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006c7a:	d004      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8006c7c:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8006c80:	481c      	ldr	r0, [pc, #112]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006c82:	f7fa f9df 	bl	8001044 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c86:	4b1a      	ldr	r3, [pc, #104]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c94:	4916      	ldr	r1, [pc, #88]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d027      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d013      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cb8:	d00e      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cc2:	d009      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ccc:	d004      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8006cce:	f240 11e9 	movw	r1, #489	; 0x1e9
 8006cd2:	4808      	ldr	r0, [pc, #32]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006cd4:	f7fa f9b6 	bl	8001044 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cd8:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ce6:	4902      	ldr	r1, [pc, #8]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006cee:	e003      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8006cf0:	40021000 	.word	0x40021000
 8006cf4:	0800e600 	.word	0x0800e600
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d01d      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x718>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00e      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x702>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d14:	d009      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x702>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d1e:	d004      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x702>
 8006d20:	f240 11f1 	movw	r1, #497	; 0x1f1
 8006d24:	488d      	ldr	r0, [pc, #564]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8006d26:	f7fa f98d 	bl	8001044 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d2a:	4b8d      	ldr	r3, [pc, #564]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8006d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d38:	4989      	ldr	r1, [pc, #548]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d01d      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x760>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00e      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d5c:	d009      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d66:	d004      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8006d68:	f240 11fd 	movw	r1, #509	; 0x1fd
 8006d6c:	487b      	ldr	r0, [pc, #492]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8006d6e:	f7fa f969 	bl	8001044 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d72:	4b7b      	ldr	r3, [pc, #492]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8006d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d80:	4977      	ldr	r1, [pc, #476]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d01d      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00e      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x792>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006da4:	d009      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x792>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006daa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dae:	d004      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x792>
 8006db0:	f240 2109 	movw	r1, #521	; 0x209
 8006db4:	4869      	ldr	r0, [pc, #420]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8006db6:	f7fa f945 	bl	8001044 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006dba:	4b69      	ldr	r3, [pc, #420]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8006dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc8:	4965      	ldr	r1, [pc, #404]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d01b      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00c      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x7d6>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d008      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x7d6>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d004      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x7d6>
 8006df4:	f240 2115 	movw	r1, #533	; 0x215
 8006df8:	4858      	ldr	r0, [pc, #352]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8006dfa:	f7fa f923 	bl	8001044 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006dfe:	4b58      	ldr	r3, [pc, #352]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8006e00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e04:	f023 0203 	bic.w	r2, r3, #3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e0c:	4954      	ldr	r1, [pc, #336]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d040      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d013      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x828>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e30:	d00e      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x828>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e3a:	d009      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x828>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e40:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006e44:	d004      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x828>
 8006e46:	f240 2122 	movw	r1, #546	; 0x222
 8006e4a:	4844      	ldr	r0, [pc, #272]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8006e4c:	f7fa f8fa 	bl	8001044 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e50:	4b43      	ldr	r3, [pc, #268]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8006e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e5e:	4940      	ldr	r1, [pc, #256]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e6e:	d106      	bne.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x856>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e70:	4b3b      	ldr	r3, [pc, #236]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	4a3a      	ldr	r2, [pc, #232]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8006e76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e7a:	60d3      	str	r3, [r2, #12]
 8006e7c:	e011      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e86:	d10c      	bne.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	3304      	adds	r3, #4
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 fa0e 	bl	80072b0 <RCCEx_PLLSAI1_Config>
 8006e94:	4603      	mov	r3, r0
 8006e96:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006e98:	7cfb      	ldrb	r3, [r7, #19]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
        {
          /* set overall return value */
          status = ret;
 8006e9e:	7cfb      	ldrb	r3, [r7, #19]
 8006ea0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d06c      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eb6:	d017      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d013      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ec4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ec8:	d00e      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ece:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ed2:	d009      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ed8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006edc:	d004      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006ede:	f240 2143 	movw	r1, #579	; 0x243
 8006ee2:	481e      	ldr	r0, [pc, #120]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8006ee4:	f7fa f8ae 	bl	8001044 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ef0:	d108      	bne.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006ef2:	4b1b      	ldr	r3, [pc, #108]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8006ef4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ef8:	4a19      	ldr	r2, [pc, #100]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8006efa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006efe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006f02:	e012      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x902>
 8006f04:	4b16      	ldr	r3, [pc, #88]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8006f06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f0a:	4a15      	ldr	r2, [pc, #84]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8006f0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f10:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006f14:	4b12      	ldr	r3, [pc, #72]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8006f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f22:	490f      	ldr	r1, [pc, #60]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f32:	d106      	bne.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x91a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f34:	4b0a      	ldr	r3, [pc, #40]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	4a09      	ldr	r2, [pc, #36]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8006f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f3e:	60d3      	str	r3, [r2, #12]
 8006f40:	e022      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f4a:	d10b      	bne.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x93c>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006f4c:	4b04      	ldr	r3, [pc, #16]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	4a03      	ldr	r2, [pc, #12]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8006f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f56:	60d3      	str	r3, [r2, #12]
 8006f58:	e016      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006f5a:	bf00      	nop
 8006f5c:	0800e600 	.word	0x0800e600
 8006f60:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f6c:	d10c      	bne.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x960>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	3304      	adds	r3, #4
 8006f72:	2101      	movs	r1, #1
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 f99b 	bl	80072b0 <RCCEx_PLLSAI1_Config>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f7e:	7cfb      	ldrb	r3, [r7, #19]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d001      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x960>
      {
        /* set overall return value */
        status = ret;
 8006f84:	7cfb      	ldrb	r3, [r7, #19]
 8006f86:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d040      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d013      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x99c>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fa4:	d00e      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x99c>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006faa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fae:	d009      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x99c>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fb4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006fb8:	d004      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x99c>
 8006fba:	f44f 711a 	mov.w	r1, #616	; 0x268
 8006fbe:	48ba      	ldr	r0, [pc, #744]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0xc80>)
 8006fc0:	f7fa f840 	bl	8001044 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fc4:	4bb9      	ldr	r3, [pc, #740]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 8006fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fd2:	49b6      	ldr	r1, [pc, #728]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fe2:	d106      	bne.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fe4:	4bb1      	ldr	r3, [pc, #708]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	4ab0      	ldr	r2, [pc, #704]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 8006fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fee:	60d3      	str	r3, [r2, #12]
 8006ff0:	e011      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ff6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ffa:	d10c      	bne.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3304      	adds	r3, #4
 8007000:	2101      	movs	r1, #1
 8007002:	4618      	mov	r0, r3
 8007004:	f000 f954 	bl	80072b0 <RCCEx_PLLSAI1_Config>
 8007008:	4603      	mov	r3, r0
 800700a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800700c:	7cfb      	ldrb	r3, [r7, #19]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
      {
        /* set overall return value */
        status = ret;
 8007012:	7cfb      	ldrb	r3, [r7, #19]
 8007014:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d034      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0xa64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007028:	2b00      	cmp	r3, #0
 800702a:	d010      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xa26>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007032:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007036:	d00a      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800703e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007042:	d004      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8007044:	f44f 7122 	mov.w	r1, #648	; 0x288
 8007048:	4897      	ldr	r0, [pc, #604]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0xc80>)
 800704a:	f7f9 fffb 	bl	8001044 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800704e:	4b97      	ldr	r3, [pc, #604]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 8007050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007054:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800705e:	4993      	ldr	r1, [pc, #588]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 8007060:	4313      	orrs	r3, r2
 8007062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800706c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007070:	d10c      	bne.n	800708c <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	3304      	adds	r3, #4
 8007076:	2102      	movs	r1, #2
 8007078:	4618      	mov	r0, r3
 800707a:	f000 f919 	bl	80072b0 <RCCEx_PLLSAI1_Config>
 800707e:	4603      	mov	r3, r0
 8007080:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007082:	7cfb      	ldrb	r3, [r7, #19]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0xa64>
      {
        /* set overall return value */
        status = ret;
 8007088:	7cfb      	ldrb	r3, [r7, #19]
 800708a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d01a      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d009      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	d004      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 80070ac:	f240 21c2 	movw	r1, #706	; 0x2c2
 80070b0:	487d      	ldr	r0, [pc, #500]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0xc80>)
 80070b2:	f7f9 ffc7 	bl	8001044 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80070b6:	4b7d      	ldr	r3, [pc, #500]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 80070b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070bc:	f023 0204 	bic.w	r2, r3, #4
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070c6:	4979      	ldr	r1, [pc, #484]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d01f      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00e      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xada>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ea:	2b08      	cmp	r3, #8
 80070ec:	d009      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xada>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f4:	2b10      	cmp	r3, #16
 80070f6:	d004      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xada>
 80070f8:	f240 21cd 	movw	r1, #717	; 0x2cd
 80070fc:	486a      	ldr	r0, [pc, #424]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0xc80>)
 80070fe:	f7f9 ffa1 	bl	8001044 <assert_failed>

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007102:	4b6a      	ldr	r3, [pc, #424]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 8007104:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007108:	f023 0218 	bic.w	r2, r3, #24
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007112:	4966      	ldr	r1, [pc, #408]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 8007114:	4313      	orrs	r3, r2
 8007116:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d051      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0xba2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800712c:	2b00      	cmp	r3, #0
 800712e:	d016      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xb36>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800713a:	d010      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xb36>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007142:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007146:	d00a      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xb36>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800714e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007152:	d004      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xb36>
 8007154:	f240 21dd 	movw	r1, #733	; 0x2dd
 8007158:	4853      	ldr	r0, [pc, #332]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0xc80>)
 800715a:	f7f9 ff73 	bl	8001044 <assert_failed>

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800715e:	4b53      	ldr	r3, [pc, #332]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a52      	ldr	r2, [pc, #328]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 8007164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800716a:	f7fa fb25 	bl	80017b8 <HAL_GetTick>
 800716e:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007170:	e009      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007172:	f7fa fb21 	bl	80017b8 <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d902      	bls.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        ret = HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	74fb      	strb	r3, [r7, #19]
        break;
 8007184:	e005      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007186:	4b49      	ldr	r3, [pc, #292]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1ef      	bne.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
      }
    }

    if(ret == HAL_OK)
 8007192:	7cfb      	ldrb	r3, [r7, #19]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d113      	bne.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8007198:	4b44      	ldr	r3, [pc, #272]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 800719a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800719e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071a8:	4940      	ldr	r1, [pc, #256]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3320      	adds	r3, #32
 80071b4:	2102      	movs	r1, #2
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 f9f6 	bl	80075a8 <RCCEx_PLLSAI2_Config>
 80071bc:	4603      	mov	r3, r0
 80071be:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80071c0:	7cfb      	ldrb	r3, [r7, #19]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0xba2>
    {
      /* set overall return value */
      status = ret;
 80071c6:	7cfb      	ldrb	r3, [r7, #19]
 80071c8:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d02e      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00a      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ea:	d004      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
 80071ec:	f240 3107 	movw	r1, #775	; 0x307
 80071f0:	482d      	ldr	r0, [pc, #180]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0xc80>)
 80071f2:	f7f9 ff27 	bl	8001044 <assert_failed>

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80071f6:	4b2d      	ldr	r3, [pc, #180]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 80071f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007206:	4929      	ldr	r1, [pc, #164]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 8007208:	4313      	orrs	r3, r2
 800720a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007218:	d10c      	bne.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	3320      	adds	r3, #32
 800721e:	2101      	movs	r1, #1
 8007220:	4618      	mov	r0, r3
 8007222:	f000 f9c1 	bl	80075a8 <RCCEx_PLLSAI2_Config>
 8007226:	4603      	mov	r3, r0
 8007228:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800722a:	7cfb      	ldrb	r3, [r7, #19]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
      {
        /* set overall return value */
        status = ret;
 8007230:	7cfb      	ldrb	r3, [r7, #19]
 8007232:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d02d      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0xc74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007246:	2b00      	cmp	r3, #0
 8007248:	d010      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007250:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007254:	d00a      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800725c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007260:	d004      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007262:	f240 3121 	movw	r1, #801	; 0x321
 8007266:	4810      	ldr	r0, [pc, #64]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0xc80>)
 8007268:	f7f9 feec 	bl	8001044 <assert_failed>

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800726c:	4b0f      	ldr	r3, [pc, #60]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 800726e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007272:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800727c:	490b      	ldr	r1, [pc, #44]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 800727e:	4313      	orrs	r3, r2
 8007280:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800728a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800728e:	d105      	bne.n	800729c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007290:	4b06      	ldr	r3, [pc, #24]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	4a05      	ldr	r2, [pc, #20]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 8007296:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800729a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800729c:	7cbb      	ldrb	r3, [r7, #18]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3718      	adds	r7, #24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	0800e600 	.word	0x0800e600
 80072ac:	40021000 	.word	0x40021000

080072b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d010      	beq.n	80072e8 <RCCEx_PLLSAI1_Config+0x38>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d00c      	beq.n	80072e8 <RCCEx_PLLSAI1_Config+0x38>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d008      	beq.n	80072e8 <RCCEx_PLLSAI1_Config+0x38>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d004      	beq.n	80072e8 <RCCEx_PLLSAI1_Config+0x38>
 80072de:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 80072e2:	48a0      	ldr	r0, [pc, #640]	; (8007564 <RCCEx_PLLSAI1_Config+0x2b4>)
 80072e4:	f7f9 feae 	bl	8001044 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <RCCEx_PLLSAI1_Config+0x48>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	2b10      	cmp	r3, #16
 80072f6:	d904      	bls.n	8007302 <RCCEx_PLLSAI1_Config+0x52>
 80072f8:	f640 3161 	movw	r1, #2913	; 0xb61
 80072fc:	4899      	ldr	r0, [pc, #612]	; (8007564 <RCCEx_PLLSAI1_Config+0x2b4>)
 80072fe:	f7f9 fea1 	bl	8001044 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	2b07      	cmp	r3, #7
 8007308:	d903      	bls.n	8007312 <RCCEx_PLLSAI1_Config+0x62>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	2b7f      	cmp	r3, #127	; 0x7f
 8007310:	d904      	bls.n	800731c <RCCEx_PLLSAI1_Config+0x6c>
 8007312:	f640 3162 	movw	r1, #2914	; 0xb62
 8007316:	4893      	ldr	r0, [pc, #588]	; (8007564 <RCCEx_PLLSAI1_Config+0x2b4>)
 8007318:	f7f9 fe94 	bl	8001044 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10b      	bne.n	8007340 <RCCEx_PLLSAI1_Config+0x90>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d105      	bne.n	8007340 <RCCEx_PLLSAI1_Config+0x90>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d007      	beq.n	8007350 <RCCEx_PLLSAI1_Config+0xa0>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d004      	beq.n	800735a <RCCEx_PLLSAI1_Config+0xaa>
 8007350:	f640 3163 	movw	r1, #2915	; 0xb63
 8007354:	4883      	ldr	r0, [pc, #524]	; (8007564 <RCCEx_PLLSAI1_Config+0x2b4>)
 8007356:	f7f9 fe75 	bl	8001044 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800735a:	4b83      	ldr	r3, [pc, #524]	; (8007568 <RCCEx_PLLSAI1_Config+0x2b8>)
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	f003 0303 	and.w	r3, r3, #3
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00e      	beq.n	8007384 <RCCEx_PLLSAI1_Config+0xd4>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007366:	4b80      	ldr	r3, [pc, #512]	; (8007568 <RCCEx_PLLSAI1_Config+0x2b8>)
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	f003 0203 	and.w	r2, r3, #3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	429a      	cmp	r2, r3
 8007374:	d103      	bne.n	800737e <RCCEx_PLLSAI1_Config+0xce>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
       ||
 800737a:	2b00      	cmp	r3, #0
 800737c:	d13f      	bne.n	80073fe <RCCEx_PLLSAI1_Config+0x14e>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	73fb      	strb	r3, [r7, #15]
 8007382:	e03c      	b.n	80073fe <RCCEx_PLLSAI1_Config+0x14e>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b02      	cmp	r3, #2
 800738a:	d00c      	beq.n	80073a6 <RCCEx_PLLSAI1_Config+0xf6>
 800738c:	2b03      	cmp	r3, #3
 800738e:	d013      	beq.n	80073b8 <RCCEx_PLLSAI1_Config+0x108>
 8007390:	2b01      	cmp	r3, #1
 8007392:	d120      	bne.n	80073d6 <RCCEx_PLLSAI1_Config+0x126>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007394:	4b74      	ldr	r3, [pc, #464]	; (8007568 <RCCEx_PLLSAI1_Config+0x2b8>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0302 	and.w	r3, r3, #2
 800739c:	2b00      	cmp	r3, #0
 800739e:	d11d      	bne.n	80073dc <RCCEx_PLLSAI1_Config+0x12c>
      {
        status = HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073a4:	e01a      	b.n	80073dc <RCCEx_PLLSAI1_Config+0x12c>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80073a6:	4b70      	ldr	r3, [pc, #448]	; (8007568 <RCCEx_PLLSAI1_Config+0x2b8>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d116      	bne.n	80073e0 <RCCEx_PLLSAI1_Config+0x130>
      {
        status = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073b6:	e013      	b.n	80073e0 <RCCEx_PLLSAI1_Config+0x130>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80073b8:	4b6b      	ldr	r3, [pc, #428]	; (8007568 <RCCEx_PLLSAI1_Config+0x2b8>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10f      	bne.n	80073e4 <RCCEx_PLLSAI1_Config+0x134>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80073c4:	4b68      	ldr	r3, [pc, #416]	; (8007568 <RCCEx_PLLSAI1_Config+0x2b8>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d109      	bne.n	80073e4 <RCCEx_PLLSAI1_Config+0x134>
        {
          status = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80073d4:	e006      	b.n	80073e4 <RCCEx_PLLSAI1_Config+0x134>
    default:
      status = HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	73fb      	strb	r3, [r7, #15]
      break;
 80073da:	e004      	b.n	80073e6 <RCCEx_PLLSAI1_Config+0x136>
      break;
 80073dc:	bf00      	nop
 80073de:	e002      	b.n	80073e6 <RCCEx_PLLSAI1_Config+0x136>
      break;
 80073e0:	bf00      	nop
 80073e2:	e000      	b.n	80073e6 <RCCEx_PLLSAI1_Config+0x136>
      break;
 80073e4:	bf00      	nop
    }

    if(status == HAL_OK)
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d108      	bne.n	80073fe <RCCEx_PLLSAI1_Config+0x14e>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80073ec:	4b5e      	ldr	r3, [pc, #376]	; (8007568 <RCCEx_PLLSAI1_Config+0x2b8>)
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f023 0203 	bic.w	r2, r3, #3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	495b      	ldr	r1, [pc, #364]	; (8007568 <RCCEx_PLLSAI1_Config+0x2b8>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80073fe:	7bfb      	ldrb	r3, [r7, #15]
 8007400:	2b00      	cmp	r3, #0
 8007402:	f040 80c9 	bne.w	8007598 <RCCEx_PLLSAI1_Config+0x2e8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007406:	4b58      	ldr	r3, [pc, #352]	; (8007568 <RCCEx_PLLSAI1_Config+0x2b8>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a57      	ldr	r2, [pc, #348]	; (8007568 <RCCEx_PLLSAI1_Config+0x2b8>)
 800740c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007410:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007412:	f7fa f9d1 	bl	80017b8 <HAL_GetTick>
 8007416:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007418:	e009      	b.n	800742e <RCCEx_PLLSAI1_Config+0x17e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800741a:	f7fa f9cd 	bl	80017b8 <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	2b02      	cmp	r3, #2
 8007426:	d902      	bls.n	800742e <RCCEx_PLLSAI1_Config+0x17e>
      {
        status = HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	73fb      	strb	r3, [r7, #15]
        break;
 800742c:	e005      	b.n	800743a <RCCEx_PLLSAI1_Config+0x18a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800742e:	4b4e      	ldr	r3, [pc, #312]	; (8007568 <RCCEx_PLLSAI1_Config+0x2b8>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1ef      	bne.n	800741a <RCCEx_PLLSAI1_Config+0x16a>
      }
    }

    if(status == HAL_OK)
 800743a:	7bfb      	ldrb	r3, [r7, #15]
 800743c:	2b00      	cmp	r3, #0
 800743e:	f040 80ab 	bne.w	8007598 <RCCEx_PLLSAI1_Config+0x2e8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d120      	bne.n	800748a <RCCEx_PLLSAI1_Config+0x1da>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d903      	bls.n	8007458 <RCCEx_PLLSAI1_Config+0x1a8>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	2b1f      	cmp	r3, #31
 8007456:	d904      	bls.n	8007462 <RCCEx_PLLSAI1_Config+0x1b2>
 8007458:	f640 31b6 	movw	r1, #2998	; 0xbb6
 800745c:	4841      	ldr	r0, [pc, #260]	; (8007564 <RCCEx_PLLSAI1_Config+0x2b4>)
 800745e:	f7f9 fdf1 	bl	8001044 <assert_failed>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007462:	4b41      	ldr	r3, [pc, #260]	; (8007568 <RCCEx_PLLSAI1_Config+0x2b8>)
 8007464:	691a      	ldr	r2, [r3, #16]
 8007466:	4b41      	ldr	r3, [pc, #260]	; (800756c <RCCEx_PLLSAI1_Config+0x2bc>)
 8007468:	4013      	ands	r3, r2
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	6892      	ldr	r2, [r2, #8]
 800746e:	0211      	lsls	r1, r2, #8
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	68d2      	ldr	r2, [r2, #12]
 8007474:	06d2      	lsls	r2, r2, #27
 8007476:	4311      	orrs	r1, r2
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	6852      	ldr	r2, [r2, #4]
 800747c:	3a01      	subs	r2, #1
 800747e:	0112      	lsls	r2, r2, #4
 8007480:	430a      	orrs	r2, r1
 8007482:	4939      	ldr	r1, [pc, #228]	; (8007568 <RCCEx_PLLSAI1_Config+0x2b8>)
 8007484:	4313      	orrs	r3, r2
 8007486:	610b      	str	r3, [r1, #16]
 8007488:	e057      	b.n	800753a <RCCEx_PLLSAI1_Config+0x28a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d12a      	bne.n	80074e6 <RCCEx_PLLSAI1_Config+0x236>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	2b02      	cmp	r3, #2
 8007496:	d010      	beq.n	80074ba <RCCEx_PLLSAI1_Config+0x20a>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	2b04      	cmp	r3, #4
 800749e:	d00c      	beq.n	80074ba <RCCEx_PLLSAI1_Config+0x20a>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	2b06      	cmp	r3, #6
 80074a6:	d008      	beq.n	80074ba <RCCEx_PLLSAI1_Config+0x20a>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	2b08      	cmp	r3, #8
 80074ae:	d004      	beq.n	80074ba <RCCEx_PLLSAI1_Config+0x20a>
 80074b0:	f640 31da 	movw	r1, #3034	; 0xbda
 80074b4:	482b      	ldr	r0, [pc, #172]	; (8007564 <RCCEx_PLLSAI1_Config+0x2b4>)
 80074b6:	f7f9 fdc5 	bl	8001044 <assert_failed>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80074ba:	4b2b      	ldr	r3, [pc, #172]	; (8007568 <RCCEx_PLLSAI1_Config+0x2b8>)
 80074bc:	691a      	ldr	r2, [r3, #16]
 80074be:	4b2c      	ldr	r3, [pc, #176]	; (8007570 <RCCEx_PLLSAI1_Config+0x2c0>)
 80074c0:	4013      	ands	r3, r2
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	6892      	ldr	r2, [r2, #8]
 80074c6:	0211      	lsls	r1, r2, #8
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	6912      	ldr	r2, [r2, #16]
 80074cc:	0852      	lsrs	r2, r2, #1
 80074ce:	3a01      	subs	r2, #1
 80074d0:	0552      	lsls	r2, r2, #21
 80074d2:	4311      	orrs	r1, r2
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	6852      	ldr	r2, [r2, #4]
 80074d8:	3a01      	subs	r2, #1
 80074da:	0112      	lsls	r2, r2, #4
 80074dc:	430a      	orrs	r2, r1
 80074de:	4922      	ldr	r1, [pc, #136]	; (8007568 <RCCEx_PLLSAI1_Config+0x2b8>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	610b      	str	r3, [r1, #16]
 80074e4:	e029      	b.n	800753a <RCCEx_PLLSAI1_Config+0x28a>
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d010      	beq.n	8007510 <RCCEx_PLLSAI1_Config+0x260>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	2b04      	cmp	r3, #4
 80074f4:	d00c      	beq.n	8007510 <RCCEx_PLLSAI1_Config+0x260>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	2b06      	cmp	r3, #6
 80074fc:	d008      	beq.n	8007510 <RCCEx_PLLSAI1_Config+0x260>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	2b08      	cmp	r3, #8
 8007504:	d004      	beq.n	8007510 <RCCEx_PLLSAI1_Config+0x260>
 8007506:	f640 31ec 	movw	r1, #3052	; 0xbec
 800750a:	4816      	ldr	r0, [pc, #88]	; (8007564 <RCCEx_PLLSAI1_Config+0x2b4>)
 800750c:	f7f9 fd9a 	bl	8001044 <assert_failed>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007510:	4b15      	ldr	r3, [pc, #84]	; (8007568 <RCCEx_PLLSAI1_Config+0x2b8>)
 8007512:	691a      	ldr	r2, [r3, #16]
 8007514:	4b17      	ldr	r3, [pc, #92]	; (8007574 <RCCEx_PLLSAI1_Config+0x2c4>)
 8007516:	4013      	ands	r3, r2
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	6892      	ldr	r2, [r2, #8]
 800751c:	0211      	lsls	r1, r2, #8
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	6952      	ldr	r2, [r2, #20]
 8007522:	0852      	lsrs	r2, r2, #1
 8007524:	3a01      	subs	r2, #1
 8007526:	0652      	lsls	r2, r2, #25
 8007528:	4311      	orrs	r1, r2
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	6852      	ldr	r2, [r2, #4]
 800752e:	3a01      	subs	r2, #1
 8007530:	0112      	lsls	r2, r2, #4
 8007532:	430a      	orrs	r2, r1
 8007534:	490c      	ldr	r1, [pc, #48]	; (8007568 <RCCEx_PLLSAI1_Config+0x2b8>)
 8007536:	4313      	orrs	r3, r2
 8007538:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800753a:	4b0b      	ldr	r3, [pc, #44]	; (8007568 <RCCEx_PLLSAI1_Config+0x2b8>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a0a      	ldr	r2, [pc, #40]	; (8007568 <RCCEx_PLLSAI1_Config+0x2b8>)
 8007540:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007544:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007546:	f7fa f937 	bl	80017b8 <HAL_GetTick>
 800754a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800754c:	e014      	b.n	8007578 <RCCEx_PLLSAI1_Config+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800754e:	f7fa f933 	bl	80017b8 <HAL_GetTick>
 8007552:	4602      	mov	r2, r0
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	2b02      	cmp	r3, #2
 800755a:	d90d      	bls.n	8007578 <RCCEx_PLLSAI1_Config+0x2c8>
        {
          status = HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	73fb      	strb	r3, [r7, #15]
          break;
 8007560:	e010      	b.n	8007584 <RCCEx_PLLSAI1_Config+0x2d4>
 8007562:	bf00      	nop
 8007564:	0800e600 	.word	0x0800e600
 8007568:	40021000 	.word	0x40021000
 800756c:	07ff800f 	.word	0x07ff800f
 8007570:	ff9f800f 	.word	0xff9f800f
 8007574:	f9ff800f 	.word	0xf9ff800f
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007578:	4b0a      	ldr	r3, [pc, #40]	; (80075a4 <RCCEx_PLLSAI1_Config+0x2f4>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d0e4      	beq.n	800754e <RCCEx_PLLSAI1_Config+0x29e>
        }
      }

      if(status == HAL_OK)
 8007584:	7bfb      	ldrb	r3, [r7, #15]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d106      	bne.n	8007598 <RCCEx_PLLSAI1_Config+0x2e8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800758a:	4b06      	ldr	r3, [pc, #24]	; (80075a4 <RCCEx_PLLSAI1_Config+0x2f4>)
 800758c:	691a      	ldr	r2, [r3, #16]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	4904      	ldr	r1, [pc, #16]	; (80075a4 <RCCEx_PLLSAI1_Config+0x2f4>)
 8007594:	4313      	orrs	r3, r2
 8007596:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007598:	7bfb      	ldrb	r3, [r7, #15]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	40021000 	.word	0x40021000

080075a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d010      	beq.n	80075e0 <RCCEx_PLLSAI2_Config+0x38>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d00c      	beq.n	80075e0 <RCCEx_PLLSAI2_Config+0x38>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d008      	beq.n	80075e0 <RCCEx_PLLSAI2_Config+0x38>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d004      	beq.n	80075e0 <RCCEx_PLLSAI2_Config+0x38>
 80075d6:	f640 412d 	movw	r1, #3117	; 0xc2d
 80075da:	48a0      	ldr	r0, [pc, #640]	; (800785c <RCCEx_PLLSAI2_Config+0x2b4>)
 80075dc:	f7f9 fd32 	bl	8001044 <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d003      	beq.n	80075f0 <RCCEx_PLLSAI2_Config+0x48>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	2b10      	cmp	r3, #16
 80075ee:	d904      	bls.n	80075fa <RCCEx_PLLSAI2_Config+0x52>
 80075f0:	f640 412e 	movw	r1, #3118	; 0xc2e
 80075f4:	4899      	ldr	r0, [pc, #612]	; (800785c <RCCEx_PLLSAI2_Config+0x2b4>)
 80075f6:	f7f9 fd25 	bl	8001044 <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	2b07      	cmp	r3, #7
 8007600:	d903      	bls.n	800760a <RCCEx_PLLSAI2_Config+0x62>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	2b7f      	cmp	r3, #127	; 0x7f
 8007608:	d904      	bls.n	8007614 <RCCEx_PLLSAI2_Config+0x6c>
 800760a:	f640 412f 	movw	r1, #3119	; 0xc2f
 800760e:	4893      	ldr	r0, [pc, #588]	; (800785c <RCCEx_PLLSAI2_Config+0x2b4>)
 8007610:	f7f9 fd18 	bl	8001044 <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10b      	bne.n	8007638 <RCCEx_PLLSAI2_Config+0x90>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d105      	bne.n	8007638 <RCCEx_PLLSAI2_Config+0x90>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d007      	beq.n	8007648 <RCCEx_PLLSAI2_Config+0xa0>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d004      	beq.n	8007652 <RCCEx_PLLSAI2_Config+0xaa>
 8007648:	f44f 6143 	mov.w	r1, #3120	; 0xc30
 800764c:	4883      	ldr	r0, [pc, #524]	; (800785c <RCCEx_PLLSAI2_Config+0x2b4>)
 800764e:	f7f9 fcf9 	bl	8001044 <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007652:	4b83      	ldr	r3, [pc, #524]	; (8007860 <RCCEx_PLLSAI2_Config+0x2b8>)
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	f003 0303 	and.w	r3, r3, #3
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00e      	beq.n	800767c <RCCEx_PLLSAI2_Config+0xd4>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800765e:	4b80      	ldr	r3, [pc, #512]	; (8007860 <RCCEx_PLLSAI2_Config+0x2b8>)
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	f003 0203 	and.w	r2, r3, #3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	429a      	cmp	r2, r3
 800766c:	d103      	bne.n	8007676 <RCCEx_PLLSAI2_Config+0xce>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
       ||
 8007672:	2b00      	cmp	r3, #0
 8007674:	d13f      	bne.n	80076f6 <RCCEx_PLLSAI2_Config+0x14e>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	73fb      	strb	r3, [r7, #15]
 800767a:	e03c      	b.n	80076f6 <RCCEx_PLLSAI2_Config+0x14e>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b02      	cmp	r3, #2
 8007682:	d00c      	beq.n	800769e <RCCEx_PLLSAI2_Config+0xf6>
 8007684:	2b03      	cmp	r3, #3
 8007686:	d013      	beq.n	80076b0 <RCCEx_PLLSAI2_Config+0x108>
 8007688:	2b01      	cmp	r3, #1
 800768a:	d120      	bne.n	80076ce <RCCEx_PLLSAI2_Config+0x126>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800768c:	4b74      	ldr	r3, [pc, #464]	; (8007860 <RCCEx_PLLSAI2_Config+0x2b8>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 0302 	and.w	r3, r3, #2
 8007694:	2b00      	cmp	r3, #0
 8007696:	d11d      	bne.n	80076d4 <RCCEx_PLLSAI2_Config+0x12c>
      {
        status = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800769c:	e01a      	b.n	80076d4 <RCCEx_PLLSAI2_Config+0x12c>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800769e:	4b70      	ldr	r3, [pc, #448]	; (8007860 <RCCEx_PLLSAI2_Config+0x2b8>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d116      	bne.n	80076d8 <RCCEx_PLLSAI2_Config+0x130>
      {
        status = HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076ae:	e013      	b.n	80076d8 <RCCEx_PLLSAI2_Config+0x130>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80076b0:	4b6b      	ldr	r3, [pc, #428]	; (8007860 <RCCEx_PLLSAI2_Config+0x2b8>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10f      	bne.n	80076dc <RCCEx_PLLSAI2_Config+0x134>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80076bc:	4b68      	ldr	r3, [pc, #416]	; (8007860 <RCCEx_PLLSAI2_Config+0x2b8>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d109      	bne.n	80076dc <RCCEx_PLLSAI2_Config+0x134>
        {
          status = HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076cc:	e006      	b.n	80076dc <RCCEx_PLLSAI2_Config+0x134>
    default:
      status = HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	73fb      	strb	r3, [r7, #15]
      break;
 80076d2:	e004      	b.n	80076de <RCCEx_PLLSAI2_Config+0x136>
      break;
 80076d4:	bf00      	nop
 80076d6:	e002      	b.n	80076de <RCCEx_PLLSAI2_Config+0x136>
      break;
 80076d8:	bf00      	nop
 80076da:	e000      	b.n	80076de <RCCEx_PLLSAI2_Config+0x136>
      break;
 80076dc:	bf00      	nop
    }

    if(status == HAL_OK)
 80076de:	7bfb      	ldrb	r3, [r7, #15]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d108      	bne.n	80076f6 <RCCEx_PLLSAI2_Config+0x14e>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80076e4:	4b5e      	ldr	r3, [pc, #376]	; (8007860 <RCCEx_PLLSAI2_Config+0x2b8>)
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f023 0203 	bic.w	r2, r3, #3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	495b      	ldr	r1, [pc, #364]	; (8007860 <RCCEx_PLLSAI2_Config+0x2b8>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f040 80c9 	bne.w	8007890 <RCCEx_PLLSAI2_Config+0x2e8>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80076fe:	4b58      	ldr	r3, [pc, #352]	; (8007860 <RCCEx_PLLSAI2_Config+0x2b8>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a57      	ldr	r2, [pc, #348]	; (8007860 <RCCEx_PLLSAI2_Config+0x2b8>)
 8007704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800770a:	f7fa f855 	bl	80017b8 <HAL_GetTick>
 800770e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007710:	e009      	b.n	8007726 <RCCEx_PLLSAI2_Config+0x17e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007712:	f7fa f851 	bl	80017b8 <HAL_GetTick>
 8007716:	4602      	mov	r2, r0
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	2b02      	cmp	r3, #2
 800771e:	d902      	bls.n	8007726 <RCCEx_PLLSAI2_Config+0x17e>
      {
        status = HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	73fb      	strb	r3, [r7, #15]
        break;
 8007724:	e005      	b.n	8007732 <RCCEx_PLLSAI2_Config+0x18a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007726:	4b4e      	ldr	r3, [pc, #312]	; (8007860 <RCCEx_PLLSAI2_Config+0x2b8>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1ef      	bne.n	8007712 <RCCEx_PLLSAI2_Config+0x16a>
      }
    }

    if(status == HAL_OK)
 8007732:	7bfb      	ldrb	r3, [r7, #15]
 8007734:	2b00      	cmp	r3, #0
 8007736:	f040 80ab 	bne.w	8007890 <RCCEx_PLLSAI2_Config+0x2e8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d120      	bne.n	8007782 <RCCEx_PLLSAI2_Config+0x1da>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d903      	bls.n	8007750 <RCCEx_PLLSAI2_Config+0x1a8>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	2b1f      	cmp	r3, #31
 800774e:	d904      	bls.n	800775a <RCCEx_PLLSAI2_Config+0x1b2>
 8007750:	f640 4183 	movw	r1, #3203	; 0xc83
 8007754:	4841      	ldr	r0, [pc, #260]	; (800785c <RCCEx_PLLSAI2_Config+0x2b4>)
 8007756:	f7f9 fc75 	bl	8001044 <assert_failed>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800775a:	4b41      	ldr	r3, [pc, #260]	; (8007860 <RCCEx_PLLSAI2_Config+0x2b8>)
 800775c:	695a      	ldr	r2, [r3, #20]
 800775e:	4b41      	ldr	r3, [pc, #260]	; (8007864 <RCCEx_PLLSAI2_Config+0x2bc>)
 8007760:	4013      	ands	r3, r2
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	6892      	ldr	r2, [r2, #8]
 8007766:	0211      	lsls	r1, r2, #8
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	68d2      	ldr	r2, [r2, #12]
 800776c:	06d2      	lsls	r2, r2, #27
 800776e:	4311      	orrs	r1, r2
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	6852      	ldr	r2, [r2, #4]
 8007774:	3a01      	subs	r2, #1
 8007776:	0112      	lsls	r2, r2, #4
 8007778:	430a      	orrs	r2, r1
 800777a:	4939      	ldr	r1, [pc, #228]	; (8007860 <RCCEx_PLLSAI2_Config+0x2b8>)
 800777c:	4313      	orrs	r3, r2
 800777e:	614b      	str	r3, [r1, #20]
 8007780:	e057      	b.n	8007832 <RCCEx_PLLSAI2_Config+0x28a>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d12a      	bne.n	80077de <RCCEx_PLLSAI2_Config+0x236>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	2b02      	cmp	r3, #2
 800778e:	d010      	beq.n	80077b2 <RCCEx_PLLSAI2_Config+0x20a>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	2b04      	cmp	r3, #4
 8007796:	d00c      	beq.n	80077b2 <RCCEx_PLLSAI2_Config+0x20a>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	2b06      	cmp	r3, #6
 800779e:	d008      	beq.n	80077b2 <RCCEx_PLLSAI2_Config+0x20a>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	2b08      	cmp	r3, #8
 80077a6:	d004      	beq.n	80077b2 <RCCEx_PLLSAI2_Config+0x20a>
 80077a8:	f640 41a8 	movw	r1, #3240	; 0xca8
 80077ac:	482b      	ldr	r0, [pc, #172]	; (800785c <RCCEx_PLLSAI2_Config+0x2b4>)
 80077ae:	f7f9 fc49 	bl	8001044 <assert_failed>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80077b2:	4b2b      	ldr	r3, [pc, #172]	; (8007860 <RCCEx_PLLSAI2_Config+0x2b8>)
 80077b4:	695a      	ldr	r2, [r3, #20]
 80077b6:	4b2c      	ldr	r3, [pc, #176]	; (8007868 <RCCEx_PLLSAI2_Config+0x2c0>)
 80077b8:	4013      	ands	r3, r2
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	6892      	ldr	r2, [r2, #8]
 80077be:	0211      	lsls	r1, r2, #8
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	6912      	ldr	r2, [r2, #16]
 80077c4:	0852      	lsrs	r2, r2, #1
 80077c6:	3a01      	subs	r2, #1
 80077c8:	0552      	lsls	r2, r2, #21
 80077ca:	4311      	orrs	r1, r2
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	6852      	ldr	r2, [r2, #4]
 80077d0:	3a01      	subs	r2, #1
 80077d2:	0112      	lsls	r2, r2, #4
 80077d4:	430a      	orrs	r2, r1
 80077d6:	4922      	ldr	r1, [pc, #136]	; (8007860 <RCCEx_PLLSAI2_Config+0x2b8>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	614b      	str	r3, [r1, #20]
 80077dc:	e029      	b.n	8007832 <RCCEx_PLLSAI2_Config+0x28a>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d010      	beq.n	8007808 <RCCEx_PLLSAI2_Config+0x260>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	d00c      	beq.n	8007808 <RCCEx_PLLSAI2_Config+0x260>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	2b06      	cmp	r3, #6
 80077f4:	d008      	beq.n	8007808 <RCCEx_PLLSAI2_Config+0x260>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	2b08      	cmp	r3, #8
 80077fc:	d004      	beq.n	8007808 <RCCEx_PLLSAI2_Config+0x260>
 80077fe:	f640 41bb 	movw	r1, #3259	; 0xcbb
 8007802:	4816      	ldr	r0, [pc, #88]	; (800785c <RCCEx_PLLSAI2_Config+0x2b4>)
 8007804:	f7f9 fc1e 	bl	8001044 <assert_failed>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007808:	4b15      	ldr	r3, [pc, #84]	; (8007860 <RCCEx_PLLSAI2_Config+0x2b8>)
 800780a:	695a      	ldr	r2, [r3, #20]
 800780c:	4b17      	ldr	r3, [pc, #92]	; (800786c <RCCEx_PLLSAI2_Config+0x2c4>)
 800780e:	4013      	ands	r3, r2
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	6892      	ldr	r2, [r2, #8]
 8007814:	0211      	lsls	r1, r2, #8
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	6952      	ldr	r2, [r2, #20]
 800781a:	0852      	lsrs	r2, r2, #1
 800781c:	3a01      	subs	r2, #1
 800781e:	0652      	lsls	r2, r2, #25
 8007820:	4311      	orrs	r1, r2
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	6852      	ldr	r2, [r2, #4]
 8007826:	3a01      	subs	r2, #1
 8007828:	0112      	lsls	r2, r2, #4
 800782a:	430a      	orrs	r2, r1
 800782c:	490c      	ldr	r1, [pc, #48]	; (8007860 <RCCEx_PLLSAI2_Config+0x2b8>)
 800782e:	4313      	orrs	r3, r2
 8007830:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007832:	4b0b      	ldr	r3, [pc, #44]	; (8007860 <RCCEx_PLLSAI2_Config+0x2b8>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a0a      	ldr	r2, [pc, #40]	; (8007860 <RCCEx_PLLSAI2_Config+0x2b8>)
 8007838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800783c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800783e:	f7f9 ffbb 	bl	80017b8 <HAL_GetTick>
 8007842:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007844:	e014      	b.n	8007870 <RCCEx_PLLSAI2_Config+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007846:	f7f9 ffb7 	bl	80017b8 <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	2b02      	cmp	r3, #2
 8007852:	d90d      	bls.n	8007870 <RCCEx_PLLSAI2_Config+0x2c8>
        {
          status = HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	73fb      	strb	r3, [r7, #15]
          break;
 8007858:	e010      	b.n	800787c <RCCEx_PLLSAI2_Config+0x2d4>
 800785a:	bf00      	nop
 800785c:	0800e600 	.word	0x0800e600
 8007860:	40021000 	.word	0x40021000
 8007864:	07ff800f 	.word	0x07ff800f
 8007868:	ff9f800f 	.word	0xff9f800f
 800786c:	f9ff800f 	.word	0xf9ff800f
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007870:	4b0a      	ldr	r3, [pc, #40]	; (800789c <RCCEx_PLLSAI2_Config+0x2f4>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d0e4      	beq.n	8007846 <RCCEx_PLLSAI2_Config+0x29e>
        }
      }

      if(status == HAL_OK)
 800787c:	7bfb      	ldrb	r3, [r7, #15]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d106      	bne.n	8007890 <RCCEx_PLLSAI2_Config+0x2e8>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007882:	4b06      	ldr	r3, [pc, #24]	; (800789c <RCCEx_PLLSAI2_Config+0x2f4>)
 8007884:	695a      	ldr	r2, [r3, #20]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	4904      	ldr	r1, [pc, #16]	; (800789c <RCCEx_PLLSAI2_Config+0x2f4>)
 800788c:	4313      	orrs	r3, r2
 800788e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007890:	7bfb      	ldrb	r3, [r7, #15]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	40021000 	.word	0x40021000

080078a0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e070      	b.n	8007994 <HAL_RNG_Init+0xf4>
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a39      	ldr	r2, [pc, #228]	; (800799c <HAL_RNG_Init+0xfc>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d003      	beq.n	80078c4 <HAL_RNG_Init+0x24>
 80078bc:	21a4      	movs	r1, #164	; 0xa4
 80078be:	4838      	ldr	r0, [pc, #224]	; (80079a0 <HAL_RNG_Init+0x100>)
 80078c0:	f7f9 fbc0 	bl	8001044 <assert_failed>
#if defined(RNG_CR_CED)
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d007      	beq.n	80078dc <HAL_RNG_Init+0x3c>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	2b20      	cmp	r3, #32
 80078d2:	d003      	beq.n	80078dc <HAL_RNG_Init+0x3c>
 80078d4:	21a6      	movs	r1, #166	; 0xa6
 80078d6:	4832      	ldr	r0, [pc, #200]	; (80079a0 <HAL_RNG_Init+0x100>)
 80078d8:	f7f9 fbb4 	bl	8001044 <assert_failed>
#endif /* defined(RNG_CR_CED) */

#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
  if (hrng->State == HAL_RNG_STATE_RESET)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	7a5b      	ldrb	r3, [r3, #9]
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d113      	bne.n	800790e <HAL_RNG_Init+0x6e>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	721a      	strb	r2, [r3, #8]

    hrng->ReadyDataCallback  = HAL_RNG_ReadyDataCallback;  /* Legacy weak ReadyDataCallback  */
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a2d      	ldr	r2, [pc, #180]	; (80079a4 <HAL_RNG_Init+0x104>)
 80078f0:	615a      	str	r2, [r3, #20]
    hrng->ErrorCallback      = HAL_RNG_ErrorCallback;      /* Legacy weak ErrorCallback      */
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a2c      	ldr	r2, [pc, #176]	; (80079a8 <HAL_RNG_Init+0x108>)
 80078f6:	619a      	str	r2, [r3, #24]

    if (hrng->MspInitCallback == NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	69db      	ldr	r3, [r3, #28]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d102      	bne.n	8007906 <HAL_RNG_Init+0x66>
    {
      hrng->MspInitCallback = HAL_RNG_MspInit; /* Legacy weak MspInit  */
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a2a      	ldr	r2, [pc, #168]	; (80079ac <HAL_RNG_Init+0x10c>)
 8007904:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	4798      	blx	r3
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2202      	movs	r2, #2
 8007912:	725a      	strb	r2, [r3, #9]
    }
  }
#else
#if defined(RNG_CR_CED)
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f023 0120 	bic.w	r1, r3, #32
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685a      	ldr	r2, [r3, #4]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	430a      	orrs	r2, r1
 8007928:	601a      	str	r2, [r3, #0]
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f042 0204 	orr.w	r2, r2, #4
 8007938:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007944:	2b40      	cmp	r3, #64	; 0x40
 8007946:	d104      	bne.n	8007952 <HAL_RNG_Init+0xb2>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2204      	movs	r2, #4
 800794c:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e020      	b.n	8007994 <HAL_RNG_Init+0xf4>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8007952:	f7f9 ff31 	bl	80017b8 <HAL_GetTick>
 8007956:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8007958:	e00e      	b.n	8007978 <HAL_RNG_Init+0xd8>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800795a:	f7f9 ff2d 	bl	80017b8 <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	2b02      	cmp	r3, #2
 8007966:	d907      	bls.n	8007978 <HAL_RNG_Init+0xd8>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2204      	movs	r2, #4
 800796c:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2202      	movs	r2, #2
 8007972:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e00d      	b.n	8007994 <HAL_RNG_Init+0xf4>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f003 0304 	and.w	r3, r3, #4
 8007982:	2b04      	cmp	r3, #4
 8007984:	d0e9      	beq.n	800795a <HAL_RNG_Init+0xba>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	50060800 	.word	0x50060800
 80079a0:	0800e63c 	.word	0x0800e63c
 80079a4:	080079b1 	.word	0x080079b1
 80079a8:	080079c7 	.word	0x080079c7
 80079ac:	08001089 	.word	0x08001089

080079b0 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 80079ba:	bf00      	nop
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b083      	sub	sp, #12
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 80079ce:	bf00      	nop
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
	...

080079dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e200      	b.n	8007df0 <HAL_SPI_Init+0x414>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a92      	ldr	r2, [pc, #584]	; (8007c3c <HAL_SPI_Init+0x260>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d00e      	beq.n	8007a16 <HAL_SPI_Init+0x3a>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a90      	ldr	r2, [pc, #576]	; (8007c40 <HAL_SPI_Init+0x264>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d009      	beq.n	8007a16 <HAL_SPI_Init+0x3a>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a8f      	ldr	r2, [pc, #572]	; (8007c44 <HAL_SPI_Init+0x268>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d004      	beq.n	8007a16 <HAL_SPI_Init+0x3a>
 8007a0c:	f240 1147 	movw	r1, #327	; 0x147
 8007a10:	488d      	ldr	r0, [pc, #564]	; (8007c48 <HAL_SPI_Init+0x26c>)
 8007a12:	f7f9 fb17 	bl	8001044 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d009      	beq.n	8007a32 <HAL_SPI_Init+0x56>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a26:	d004      	beq.n	8007a32 <HAL_SPI_Init+0x56>
 8007a28:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007a2c:	4886      	ldr	r0, [pc, #536]	; (8007c48 <HAL_SPI_Init+0x26c>)
 8007a2e:	f7f9 fb09 	bl	8001044 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00e      	beq.n	8007a58 <HAL_SPI_Init+0x7c>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a42:	d009      	beq.n	8007a58 <HAL_SPI_Init+0x7c>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a4c:	d004      	beq.n	8007a58 <HAL_SPI_Init+0x7c>
 8007a4e:	f240 1149 	movw	r1, #329	; 0x149
 8007a52:	487d      	ldr	r0, [pc, #500]	; (8007c48 <HAL_SPI_Init+0x26c>)
 8007a54:	f7f9 faf6 	bl	8001044 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007a60:	d040      	beq.n	8007ae4 <HAL_SPI_Init+0x108>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8007a6a:	d03b      	beq.n	8007ae4 <HAL_SPI_Init+0x108>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8007a74:	d036      	beq.n	8007ae4 <HAL_SPI_Init+0x108>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a7e:	d031      	beq.n	8007ae4 <HAL_SPI_Init+0x108>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8007a88:	d02c      	beq.n	8007ae4 <HAL_SPI_Init+0x108>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007a92:	d027      	beq.n	8007ae4 <HAL_SPI_Init+0x108>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8007a9c:	d022      	beq.n	8007ae4 <HAL_SPI_Init+0x108>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aa6:	d01d      	beq.n	8007ae4 <HAL_SPI_Init+0x108>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ab0:	d018      	beq.n	8007ae4 <HAL_SPI_Init+0x108>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007aba:	d013      	beq.n	8007ae4 <HAL_SPI_Init+0x108>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007ac4:	d00e      	beq.n	8007ae4 <HAL_SPI_Init+0x108>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ace:	d009      	beq.n	8007ae4 <HAL_SPI_Init+0x108>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ad8:	d004      	beq.n	8007ae4 <HAL_SPI_Init+0x108>
 8007ada:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8007ade:	485a      	ldr	r0, [pc, #360]	; (8007c48 <HAL_SPI_Init+0x26c>)
 8007ae0:	f7f9 fab0 	bl	8001044 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aec:	d00d      	beq.n	8007b0a <HAL_SPI_Init+0x12e>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d009      	beq.n	8007b0a <HAL_SPI_Init+0x12e>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007afe:	d004      	beq.n	8007b0a <HAL_SPI_Init+0x12e>
 8007b00:	f240 114b 	movw	r1, #331	; 0x14b
 8007b04:	4850      	ldr	r0, [pc, #320]	; (8007c48 <HAL_SPI_Init+0x26c>)
 8007b06:	f7f9 fa9d 	bl	8001044 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b0e:	2b08      	cmp	r3, #8
 8007b10:	d008      	beq.n	8007b24 <HAL_SPI_Init+0x148>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d004      	beq.n	8007b24 <HAL_SPI_Init+0x148>
 8007b1a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8007b1e:	484a      	ldr	r0, [pc, #296]	; (8007c48 <HAL_SPI_Init+0x26c>)
 8007b20:	f7f9 fa90 	bl	8001044 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	69db      	ldr	r3, [r3, #28]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d020      	beq.n	8007b6e <HAL_SPI_Init+0x192>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	2b08      	cmp	r3, #8
 8007b32:	d01c      	beq.n	8007b6e <HAL_SPI_Init+0x192>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	69db      	ldr	r3, [r3, #28]
 8007b38:	2b10      	cmp	r3, #16
 8007b3a:	d018      	beq.n	8007b6e <HAL_SPI_Init+0x192>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	69db      	ldr	r3, [r3, #28]
 8007b40:	2b18      	cmp	r3, #24
 8007b42:	d014      	beq.n	8007b6e <HAL_SPI_Init+0x192>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	2b20      	cmp	r3, #32
 8007b4a:	d010      	beq.n	8007b6e <HAL_SPI_Init+0x192>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	69db      	ldr	r3, [r3, #28]
 8007b50:	2b28      	cmp	r3, #40	; 0x28
 8007b52:	d00c      	beq.n	8007b6e <HAL_SPI_Init+0x192>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	69db      	ldr	r3, [r3, #28]
 8007b58:	2b30      	cmp	r3, #48	; 0x30
 8007b5a:	d008      	beq.n	8007b6e <HAL_SPI_Init+0x192>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	69db      	ldr	r3, [r3, #28]
 8007b60:	2b38      	cmp	r3, #56	; 0x38
 8007b62:	d004      	beq.n	8007b6e <HAL_SPI_Init+0x192>
 8007b64:	f240 114d 	movw	r1, #333	; 0x14d
 8007b68:	4837      	ldr	r0, [pc, #220]	; (8007c48 <HAL_SPI_Init+0x26c>)
 8007b6a:	f7f9 fa6b 	bl	8001044 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d008      	beq.n	8007b88 <HAL_SPI_Init+0x1ac>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	2b80      	cmp	r3, #128	; 0x80
 8007b7c:	d004      	beq.n	8007b88 <HAL_SPI_Init+0x1ac>
 8007b7e:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8007b82:	4831      	ldr	r0, [pc, #196]	; (8007c48 <HAL_SPI_Init+0x26c>)
 8007b84:	f7f9 fa5e 	bl	8001044 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d008      	beq.n	8007ba2 <HAL_SPI_Init+0x1c6>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	2b10      	cmp	r3, #16
 8007b96:	d004      	beq.n	8007ba2 <HAL_SPI_Init+0x1c6>
 8007b98:	f240 114f 	movw	r1, #335	; 0x14f
 8007b9c:	482a      	ldr	r0, [pc, #168]	; (8007c48 <HAL_SPI_Init+0x26c>)
 8007b9e:	f7f9 fa51 	bl	8001044 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d150      	bne.n	8007c4c <HAL_SPI_Init+0x270>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d008      	beq.n	8007bc4 <HAL_SPI_Init+0x1e8>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d004      	beq.n	8007bc4 <HAL_SPI_Init+0x1e8>
 8007bba:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8007bbe:	4822      	ldr	r0, [pc, #136]	; (8007c48 <HAL_SPI_Init+0x26c>)
 8007bc0:	f7f9 fa40 	bl	8001044 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d008      	beq.n	8007bde <HAL_SPI_Init+0x202>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d004      	beq.n	8007bde <HAL_SPI_Init+0x202>
 8007bd4:	f240 1153 	movw	r1, #339	; 0x153
 8007bd8:	481b      	ldr	r0, [pc, #108]	; (8007c48 <HAL_SPI_Init+0x26c>)
 8007bda:	f7f9 fa33 	bl	8001044 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007be6:	d125      	bne.n	8007c34 <HAL_SPI_Init+0x258>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	69db      	ldr	r3, [r3, #28]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d058      	beq.n	8007ca2 <HAL_SPI_Init+0x2c6>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	2b08      	cmp	r3, #8
 8007bf6:	d054      	beq.n	8007ca2 <HAL_SPI_Init+0x2c6>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	69db      	ldr	r3, [r3, #28]
 8007bfc:	2b10      	cmp	r3, #16
 8007bfe:	d050      	beq.n	8007ca2 <HAL_SPI_Init+0x2c6>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	69db      	ldr	r3, [r3, #28]
 8007c04:	2b18      	cmp	r3, #24
 8007c06:	d04c      	beq.n	8007ca2 <HAL_SPI_Init+0x2c6>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	69db      	ldr	r3, [r3, #28]
 8007c0c:	2b20      	cmp	r3, #32
 8007c0e:	d048      	beq.n	8007ca2 <HAL_SPI_Init+0x2c6>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	69db      	ldr	r3, [r3, #28]
 8007c14:	2b28      	cmp	r3, #40	; 0x28
 8007c16:	d044      	beq.n	8007ca2 <HAL_SPI_Init+0x2c6>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	2b30      	cmp	r3, #48	; 0x30
 8007c1e:	d040      	beq.n	8007ca2 <HAL_SPI_Init+0x2c6>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	69db      	ldr	r3, [r3, #28]
 8007c24:	2b38      	cmp	r3, #56	; 0x38
 8007c26:	d03c      	beq.n	8007ca2 <HAL_SPI_Init+0x2c6>
 8007c28:	f240 1157 	movw	r1, #343	; 0x157
 8007c2c:	4806      	ldr	r0, [pc, #24]	; (8007c48 <HAL_SPI_Init+0x26c>)
 8007c2e:	f7f9 fa09 	bl	8001044 <assert_failed>
 8007c32:	e036      	b.n	8007ca2 <HAL_SPI_Init+0x2c6>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	61da      	str	r2, [r3, #28]
 8007c3a:	e032      	b.n	8007ca2 <HAL_SPI_Init+0x2c6>
 8007c3c:	40013000 	.word	0x40013000
 8007c40:	40003800 	.word	0x40003800
 8007c44:	40003c00 	.word	0x40003c00
 8007c48:	0800e674 	.word	0x0800e674
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	69db      	ldr	r3, [r3, #28]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d020      	beq.n	8007c96 <HAL_SPI_Init+0x2ba>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	69db      	ldr	r3, [r3, #28]
 8007c58:	2b08      	cmp	r3, #8
 8007c5a:	d01c      	beq.n	8007c96 <HAL_SPI_Init+0x2ba>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	69db      	ldr	r3, [r3, #28]
 8007c60:	2b10      	cmp	r3, #16
 8007c62:	d018      	beq.n	8007c96 <HAL_SPI_Init+0x2ba>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	69db      	ldr	r3, [r3, #28]
 8007c68:	2b18      	cmp	r3, #24
 8007c6a:	d014      	beq.n	8007c96 <HAL_SPI_Init+0x2ba>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	69db      	ldr	r3, [r3, #28]
 8007c70:	2b20      	cmp	r3, #32
 8007c72:	d010      	beq.n	8007c96 <HAL_SPI_Init+0x2ba>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	69db      	ldr	r3, [r3, #28]
 8007c78:	2b28      	cmp	r3, #40	; 0x28
 8007c7a:	d00c      	beq.n	8007c96 <HAL_SPI_Init+0x2ba>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	2b30      	cmp	r3, #48	; 0x30
 8007c82:	d008      	beq.n	8007c96 <HAL_SPI_Init+0x2ba>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	69db      	ldr	r3, [r3, #28]
 8007c88:	2b38      	cmp	r3, #56	; 0x38
 8007c8a:	d004      	beq.n	8007c96 <HAL_SPI_Init+0x2ba>
 8007c8c:	f240 1161 	movw	r1, #353	; 0x161
 8007c90:	4859      	ldr	r0, [pc, #356]	; (8007df8 <HAL_SPI_Init+0x41c>)
 8007c92:	f7f9 f9d7 	bl	8001044 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d12a      	bne.n	8007d0a <HAL_SPI_Init+0x32e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a4f      	ldr	r2, [pc, #316]	; (8007dfc <HAL_SPI_Init+0x420>)
 8007cc0:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a4e      	ldr	r2, [pc, #312]	; (8007e00 <HAL_SPI_Init+0x424>)
 8007cc6:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a4e      	ldr	r2, [pc, #312]	; (8007e04 <HAL_SPI_Init+0x428>)
 8007ccc:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a4d      	ldr	r2, [pc, #308]	; (8007e08 <HAL_SPI_Init+0x42c>)
 8007cd2:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a4d      	ldr	r2, [pc, #308]	; (8007e0c <HAL_SPI_Init+0x430>)
 8007cd8:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a4c      	ldr	r2, [pc, #304]	; (8007e10 <HAL_SPI_Init+0x434>)
 8007cde:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a4c      	ldr	r2, [pc, #304]	; (8007e14 <HAL_SPI_Init+0x438>)
 8007ce4:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a4b      	ldr	r2, [pc, #300]	; (8007e18 <HAL_SPI_Init+0x43c>)
 8007cea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d103      	bne.n	8007d00 <HAL_SPI_Init+0x324>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a48      	ldr	r2, [pc, #288]	; (8007e1c <HAL_SPI_Init+0x440>)
 8007cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d20:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d2a:	d902      	bls.n	8007d32 <HAL_SPI_Init+0x356>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	60fb      	str	r3, [r7, #12]
 8007d30:	e002      	b.n	8007d38 <HAL_SPI_Init+0x35c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d36:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007d40:	d007      	beq.n	8007d52 <HAL_SPI_Init+0x376>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d4a:	d002      	beq.n	8007d52 <HAL_SPI_Init+0x376>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007d62:	431a      	orrs	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	f003 0302 	and.w	r3, r3, #2
 8007d6c:	431a      	orrs	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	431a      	orrs	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d80:	431a      	orrs	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d8a:	431a      	orrs	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a1b      	ldr	r3, [r3, #32]
 8007d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d94:	ea42 0103 	orr.w	r1, r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	430a      	orrs	r2, r1
 8007da6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	0c1b      	lsrs	r3, r3, #16
 8007dae:	f003 0204 	and.w	r2, r3, #4
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db6:	f003 0310 	and.w	r3, r3, #16
 8007dba:	431a      	orrs	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc0:	f003 0308 	and.w	r3, r3, #8
 8007dc4:	431a      	orrs	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007dce:	ea42 0103 	orr.w	r1, r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	0800e674 	.word	0x0800e674
 8007dfc:	08008025 	.word	0x08008025
 8007e00:	08008039 	.word	0x08008039
 8007e04:	0800804d 	.word	0x0800804d
 8007e08:	08008061 	.word	0x08008061
 8007e0c:	08008075 	.word	0x08008075
 8007e10:	08008089 	.word	0x08008089
 8007e14:	0800809d 	.word	0x0800809d
 8007e18:	080080b1 	.word	0x080080b1
 8007e1c:	08001145 	.word	0x08001145

08007e20 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b088      	sub	sp, #32
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	099b      	lsrs	r3, r3, #6
 8007e3c:	f003 0301 	and.w	r3, r3, #1
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10f      	bne.n	8007e64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00a      	beq.n	8007e64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	099b      	lsrs	r3, r3, #6
 8007e52:	f003 0301 	and.w	r3, r3, #1
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d004      	beq.n	8007e64 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	4798      	blx	r3
    return;
 8007e62:	e0d9      	b.n	8008018 <HAL_SPI_IRQHandler+0x1f8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	085b      	lsrs	r3, r3, #1
 8007e68:	f003 0301 	and.w	r3, r3, #1
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00a      	beq.n	8007e86 <HAL_SPI_IRQHandler+0x66>
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	09db      	lsrs	r3, r3, #7
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d004      	beq.n	8007e86 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	4798      	blx	r3
    return;
 8007e84:	e0c8      	b.n	8008018 <HAL_SPI_IRQHandler+0x1f8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	095b      	lsrs	r3, r3, #5
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10c      	bne.n	8007eac <HAL_SPI_IRQHandler+0x8c>
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	099b      	lsrs	r3, r3, #6
 8007e96:	f003 0301 	and.w	r3, r3, #1
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d106      	bne.n	8007eac <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	0a1b      	lsrs	r3, r3, #8
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 80b6 	beq.w	8008018 <HAL_SPI_IRQHandler+0x1f8>
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	095b      	lsrs	r3, r3, #5
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 80af 	beq.w	8008018 <HAL_SPI_IRQHandler+0x1f8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	099b      	lsrs	r3, r3, #6
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d023      	beq.n	8007f0e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	d011      	beq.n	8007ef6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ed6:	f043 0204 	orr.w	r2, r3, #4
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ede:	2300      	movs	r3, #0
 8007ee0:	617b      	str	r3, [r7, #20]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	617b      	str	r3, [r7, #20]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	617b      	str	r3, [r7, #20]
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	e00b      	b.n	8007f0e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	613b      	str	r3, [r7, #16]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	613b      	str	r3, [r7, #16]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	613b      	str	r3, [r7, #16]
 8007f0a:	693b      	ldr	r3, [r7, #16]
        return;
 8007f0c:	e084      	b.n	8008018 <HAL_SPI_IRQHandler+0x1f8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	095b      	lsrs	r3, r3, #5
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d014      	beq.n	8007f44 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f1e:	f043 0201 	orr.w	r2, r3, #1
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f26:	2300      	movs	r3, #0
 8007f28:	60fb      	str	r3, [r7, #12]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	60fb      	str	r3, [r7, #12]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f40:	601a      	str	r2, [r3, #0]
 8007f42:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	0a1b      	lsrs	r3, r3, #8
 8007f48:	f003 0301 	and.w	r3, r3, #1
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00c      	beq.n	8007f6a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f54:	f043 0208 	orr.w	r2, r3, #8
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	60bb      	str	r3, [r7, #8]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	60bb      	str	r3, [r7, #8]
 8007f68:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d051      	beq.n	8008016 <HAL_SPI_IRQHandler+0x1f6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	685a      	ldr	r2, [r3, #4]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f80:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2201      	movs	r2, #1
 8007f86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	f003 0302 	and.w	r3, r3, #2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d104      	bne.n	8007f9e <HAL_SPI_IRQHandler+0x17e>
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d034      	beq.n	8008008 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 0203 	bic.w	r2, r2, #3
 8007fac:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d011      	beq.n	8007fda <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fba:	4a19      	ldr	r2, [pc, #100]	; (8008020 <HAL_SPI_IRQHandler+0x200>)
 8007fbc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fc fa10 	bl	80043e8 <HAL_DMA_Abort_IT>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d005      	beq.n	8007fda <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d017      	beq.n	8008012 <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe6:	4a0e      	ldr	r2, [pc, #56]	; (8008020 <HAL_SPI_IRQHandler+0x200>)
 8007fe8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fc f9fa 	bl	80043e8 <HAL_DMA_Abort_IT>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00b      	beq.n	8008012 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ffe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8008006:	e004      	b.n	8008012 <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008010:	e000      	b.n	8008014 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8008012:	bf00      	nop
    return;
 8008014:	bf00      	nop
 8008016:	bf00      	nop
  }
}
 8008018:	3720      	adds	r7, #32
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	080080c5 	.word	0x080080c5

08008024 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80080e8:	bf00      	nop
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e0c9      	b.n	8008296 <HAL_TIM_Base_Init+0x1a6>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a66      	ldr	r2, [pc, #408]	; (80082a0 <HAL_TIM_Base_Init+0x1b0>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d036      	beq.n	800817a <HAL_TIM_Base_Init+0x8a>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008114:	d031      	beq.n	800817a <HAL_TIM_Base_Init+0x8a>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a62      	ldr	r2, [pc, #392]	; (80082a4 <HAL_TIM_Base_Init+0x1b4>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d02c      	beq.n	800817a <HAL_TIM_Base_Init+0x8a>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a60      	ldr	r2, [pc, #384]	; (80082a8 <HAL_TIM_Base_Init+0x1b8>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d027      	beq.n	800817a <HAL_TIM_Base_Init+0x8a>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a5f      	ldr	r2, [pc, #380]	; (80082ac <HAL_TIM_Base_Init+0x1bc>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d022      	beq.n	800817a <HAL_TIM_Base_Init+0x8a>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a5d      	ldr	r2, [pc, #372]	; (80082b0 <HAL_TIM_Base_Init+0x1c0>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d01d      	beq.n	800817a <HAL_TIM_Base_Init+0x8a>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a5c      	ldr	r2, [pc, #368]	; (80082b4 <HAL_TIM_Base_Init+0x1c4>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d018      	beq.n	800817a <HAL_TIM_Base_Init+0x8a>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a5a      	ldr	r2, [pc, #360]	; (80082b8 <HAL_TIM_Base_Init+0x1c8>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d013      	beq.n	800817a <HAL_TIM_Base_Init+0x8a>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a59      	ldr	r2, [pc, #356]	; (80082bc <HAL_TIM_Base_Init+0x1cc>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d00e      	beq.n	800817a <HAL_TIM_Base_Init+0x8a>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a57      	ldr	r2, [pc, #348]	; (80082c0 <HAL_TIM_Base_Init+0x1d0>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d009      	beq.n	800817a <HAL_TIM_Base_Init+0x8a>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a56      	ldr	r2, [pc, #344]	; (80082c4 <HAL_TIM_Base_Init+0x1d4>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d004      	beq.n	800817a <HAL_TIM_Base_Init+0x8a>
 8008170:	f44f 718b 	mov.w	r1, #278	; 0x116
 8008174:	4854      	ldr	r0, [pc, #336]	; (80082c8 <HAL_TIM_Base_Init+0x1d8>)
 8008176:	f7f8 ff65 	bl	8001044 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d014      	beq.n	80081ac <HAL_TIM_Base_Init+0xbc>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	2b10      	cmp	r3, #16
 8008188:	d010      	beq.n	80081ac <HAL_TIM_Base_Init+0xbc>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	2b20      	cmp	r3, #32
 8008190:	d00c      	beq.n	80081ac <HAL_TIM_Base_Init+0xbc>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	2b40      	cmp	r3, #64	; 0x40
 8008198:	d008      	beq.n	80081ac <HAL_TIM_Base_Init+0xbc>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	2b60      	cmp	r3, #96	; 0x60
 80081a0:	d004      	beq.n	80081ac <HAL_TIM_Base_Init+0xbc>
 80081a2:	f240 1117 	movw	r1, #279	; 0x117
 80081a6:	4848      	ldr	r0, [pc, #288]	; (80082c8 <HAL_TIM_Base_Init+0x1d8>)
 80081a8:	f7f8 ff4c 	bl	8001044 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00e      	beq.n	80081d2 <HAL_TIM_Base_Init+0xe2>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081bc:	d009      	beq.n	80081d2 <HAL_TIM_Base_Init+0xe2>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081c6:	d004      	beq.n	80081d2 <HAL_TIM_Base_Init+0xe2>
 80081c8:	f44f 718c 	mov.w	r1, #280	; 0x118
 80081cc:	483e      	ldr	r0, [pc, #248]	; (80082c8 <HAL_TIM_Base_Init+0x1d8>)
 80081ce:	f7f8 ff39 	bl	8001044 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d008      	beq.n	80081ec <HAL_TIM_Base_Init+0xfc>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	2b80      	cmp	r3, #128	; 0x80
 80081e0:	d004      	beq.n	80081ec <HAL_TIM_Base_Init+0xfc>
 80081e2:	f240 1119 	movw	r1, #281	; 0x119
 80081e6:	4838      	ldr	r0, [pc, #224]	; (80082c8 <HAL_TIM_Base_Init+0x1d8>)
 80081e8:	f7f8 ff2c 	bl	8001044 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d111      	bne.n	800821c <HAL_TIM_Base_Init+0x12c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 feff 	bl	8009004 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800820a:	2b00      	cmp	r3, #0
 800820c:	d102      	bne.n	8008214 <HAL_TIM_Base_Init+0x124>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a2e      	ldr	r2, [pc, #184]	; (80082cc <HAL_TIM_Base_Init+0x1dc>)
 8008212:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2202      	movs	r2, #2
 8008220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	3304      	adds	r3, #4
 800822c:	4619      	mov	r1, r3
 800822e:	4610      	mov	r0, r2
 8008230:	f000 fd2a 	bl	8008c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	40012c00 	.word	0x40012c00
 80082a4:	40000400 	.word	0x40000400
 80082a8:	40000800 	.word	0x40000800
 80082ac:	40000c00 	.word	0x40000c00
 80082b0:	40001000 	.word	0x40001000
 80082b4:	40001400 	.word	0x40001400
 80082b8:	40013400 	.word	0x40013400
 80082bc:	40014000 	.word	0x40014000
 80082c0:	40014400 	.word	0x40014400
 80082c4:	40014800 	.word	0x40014800
 80082c8:	0800e6ac 	.word	0x0800e6ac
 80082cc:	080082d1 	.word	0x080082d1

080082d0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80082d8:	bf00      	nop
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a4a      	ldr	r2, [pc, #296]	; (800841c <HAL_TIM_Base_Start_IT+0x138>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d036      	beq.n	8008364 <HAL_TIM_Base_Start_IT+0x80>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082fe:	d031      	beq.n	8008364 <HAL_TIM_Base_Start_IT+0x80>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a46      	ldr	r2, [pc, #280]	; (8008420 <HAL_TIM_Base_Start_IT+0x13c>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d02c      	beq.n	8008364 <HAL_TIM_Base_Start_IT+0x80>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a45      	ldr	r2, [pc, #276]	; (8008424 <HAL_TIM_Base_Start_IT+0x140>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d027      	beq.n	8008364 <HAL_TIM_Base_Start_IT+0x80>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a43      	ldr	r2, [pc, #268]	; (8008428 <HAL_TIM_Base_Start_IT+0x144>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d022      	beq.n	8008364 <HAL_TIM_Base_Start_IT+0x80>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a42      	ldr	r2, [pc, #264]	; (800842c <HAL_TIM_Base_Start_IT+0x148>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d01d      	beq.n	8008364 <HAL_TIM_Base_Start_IT+0x80>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a40      	ldr	r2, [pc, #256]	; (8008430 <HAL_TIM_Base_Start_IT+0x14c>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d018      	beq.n	8008364 <HAL_TIM_Base_Start_IT+0x80>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a3f      	ldr	r2, [pc, #252]	; (8008434 <HAL_TIM_Base_Start_IT+0x150>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d013      	beq.n	8008364 <HAL_TIM_Base_Start_IT+0x80>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a3d      	ldr	r2, [pc, #244]	; (8008438 <HAL_TIM_Base_Start_IT+0x154>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d00e      	beq.n	8008364 <HAL_TIM_Base_Start_IT+0x80>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a3c      	ldr	r2, [pc, #240]	; (800843c <HAL_TIM_Base_Start_IT+0x158>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d009      	beq.n	8008364 <HAL_TIM_Base_Start_IT+0x80>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a3a      	ldr	r2, [pc, #232]	; (8008440 <HAL_TIM_Base_Start_IT+0x15c>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d004      	beq.n	8008364 <HAL_TIM_Base_Start_IT+0x80>
 800835a:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800835e:	4839      	ldr	r0, [pc, #228]	; (8008444 <HAL_TIM_Base_Start_IT+0x160>)
 8008360:	f7f8 fe70 	bl	8001044 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b01      	cmp	r3, #1
 800836e:	d001      	beq.n	8008374 <HAL_TIM_Base_Start_IT+0x90>
  {
    return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e04f      	b.n	8008414 <HAL_TIM_Base_Start_IT+0x130>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2202      	movs	r2, #2
 8008378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68da      	ldr	r2, [r3, #12]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f042 0201 	orr.w	r2, r2, #1
 800838a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a22      	ldr	r2, [pc, #136]	; (800841c <HAL_TIM_Base_Start_IT+0x138>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d01d      	beq.n	80083d2 <HAL_TIM_Base_Start_IT+0xee>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800839e:	d018      	beq.n	80083d2 <HAL_TIM_Base_Start_IT+0xee>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a1e      	ldr	r2, [pc, #120]	; (8008420 <HAL_TIM_Base_Start_IT+0x13c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d013      	beq.n	80083d2 <HAL_TIM_Base_Start_IT+0xee>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a1d      	ldr	r2, [pc, #116]	; (8008424 <HAL_TIM_Base_Start_IT+0x140>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d00e      	beq.n	80083d2 <HAL_TIM_Base_Start_IT+0xee>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a1b      	ldr	r2, [pc, #108]	; (8008428 <HAL_TIM_Base_Start_IT+0x144>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d009      	beq.n	80083d2 <HAL_TIM_Base_Start_IT+0xee>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a1c      	ldr	r2, [pc, #112]	; (8008434 <HAL_TIM_Base_Start_IT+0x150>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d004      	beq.n	80083d2 <HAL_TIM_Base_Start_IT+0xee>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a1a      	ldr	r2, [pc, #104]	; (8008438 <HAL_TIM_Base_Start_IT+0x154>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d115      	bne.n	80083fe <HAL_TIM_Base_Start_IT+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	689a      	ldr	r2, [r3, #8]
 80083d8:	4b1b      	ldr	r3, [pc, #108]	; (8008448 <HAL_TIM_Base_Start_IT+0x164>)
 80083da:	4013      	ands	r3, r2
 80083dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2b06      	cmp	r3, #6
 80083e2:	d015      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x12c>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083ea:	d011      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f042 0201 	orr.w	r2, r2, #1
 80083fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083fc:	e008      	b.n	8008410 <HAL_TIM_Base_Start_IT+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f042 0201 	orr.w	r2, r2, #1
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	e000      	b.n	8008412 <HAL_TIM_Base_Start_IT+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008410:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	40012c00 	.word	0x40012c00
 8008420:	40000400 	.word	0x40000400
 8008424:	40000800 	.word	0x40000800
 8008428:	40000c00 	.word	0x40000c00
 800842c:	40001000 	.word	0x40001000
 8008430:	40001400 	.word	0x40001400
 8008434:	40013400 	.word	0x40013400
 8008438:	40014000 	.word	0x40014000
 800843c:	40014400 	.word	0x40014400
 8008440:	40014800 	.word	0x40014800
 8008444:	0800e6ac 	.word	0x0800e6ac
 8008448:	00010007 	.word	0x00010007

0800844c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d101      	bne.n	800845e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e0c9      	b.n	80085f2 <HAL_TIM_IC_Init+0x1a6>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a66      	ldr	r2, [pc, #408]	; (80085fc <HAL_TIM_IC_Init+0x1b0>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d036      	beq.n	80084d6 <HAL_TIM_IC_Init+0x8a>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008470:	d031      	beq.n	80084d6 <HAL_TIM_IC_Init+0x8a>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a62      	ldr	r2, [pc, #392]	; (8008600 <HAL_TIM_IC_Init+0x1b4>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d02c      	beq.n	80084d6 <HAL_TIM_IC_Init+0x8a>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a60      	ldr	r2, [pc, #384]	; (8008604 <HAL_TIM_IC_Init+0x1b8>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d027      	beq.n	80084d6 <HAL_TIM_IC_Init+0x8a>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a5f      	ldr	r2, [pc, #380]	; (8008608 <HAL_TIM_IC_Init+0x1bc>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d022      	beq.n	80084d6 <HAL_TIM_IC_Init+0x8a>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a5d      	ldr	r2, [pc, #372]	; (800860c <HAL_TIM_IC_Init+0x1c0>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d01d      	beq.n	80084d6 <HAL_TIM_IC_Init+0x8a>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a5c      	ldr	r2, [pc, #368]	; (8008610 <HAL_TIM_IC_Init+0x1c4>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d018      	beq.n	80084d6 <HAL_TIM_IC_Init+0x8a>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a5a      	ldr	r2, [pc, #360]	; (8008614 <HAL_TIM_IC_Init+0x1c8>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d013      	beq.n	80084d6 <HAL_TIM_IC_Init+0x8a>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a59      	ldr	r2, [pc, #356]	; (8008618 <HAL_TIM_IC_Init+0x1cc>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d00e      	beq.n	80084d6 <HAL_TIM_IC_Init+0x8a>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a57      	ldr	r2, [pc, #348]	; (800861c <HAL_TIM_IC_Init+0x1d0>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d009      	beq.n	80084d6 <HAL_TIM_IC_Init+0x8a>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a56      	ldr	r2, [pc, #344]	; (8008620 <HAL_TIM_IC_Init+0x1d4>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d004      	beq.n	80084d6 <HAL_TIM_IC_Init+0x8a>
 80084cc:	f240 718b 	movw	r1, #1931	; 0x78b
 80084d0:	4854      	ldr	r0, [pc, #336]	; (8008624 <HAL_TIM_IC_Init+0x1d8>)
 80084d2:	f7f8 fdb7 	bl	8001044 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d014      	beq.n	8008508 <HAL_TIM_IC_Init+0xbc>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	2b10      	cmp	r3, #16
 80084e4:	d010      	beq.n	8008508 <HAL_TIM_IC_Init+0xbc>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	2b20      	cmp	r3, #32
 80084ec:	d00c      	beq.n	8008508 <HAL_TIM_IC_Init+0xbc>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	2b40      	cmp	r3, #64	; 0x40
 80084f4:	d008      	beq.n	8008508 <HAL_TIM_IC_Init+0xbc>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	2b60      	cmp	r3, #96	; 0x60
 80084fc:	d004      	beq.n	8008508 <HAL_TIM_IC_Init+0xbc>
 80084fe:	f240 718c 	movw	r1, #1932	; 0x78c
 8008502:	4848      	ldr	r0, [pc, #288]	; (8008624 <HAL_TIM_IC_Init+0x1d8>)
 8008504:	f7f8 fd9e 	bl	8001044 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00e      	beq.n	800852e <HAL_TIM_IC_Init+0xe2>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008518:	d009      	beq.n	800852e <HAL_TIM_IC_Init+0xe2>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008522:	d004      	beq.n	800852e <HAL_TIM_IC_Init+0xe2>
 8008524:	f240 718d 	movw	r1, #1933	; 0x78d
 8008528:	483e      	ldr	r0, [pc, #248]	; (8008624 <HAL_TIM_IC_Init+0x1d8>)
 800852a:	f7f8 fd8b 	bl	8001044 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d008      	beq.n	8008548 <HAL_TIM_IC_Init+0xfc>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	2b80      	cmp	r3, #128	; 0x80
 800853c:	d004      	beq.n	8008548 <HAL_TIM_IC_Init+0xfc>
 800853e:	f240 718e 	movw	r1, #1934	; 0x78e
 8008542:	4838      	ldr	r0, [pc, #224]	; (8008624 <HAL_TIM_IC_Init+0x1d8>)
 8008544:	f7f8 fd7e 	bl	8001044 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b00      	cmp	r3, #0
 8008552:	d111      	bne.n	8008578 <HAL_TIM_IC_Init+0x12c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fd51 	bl	8009004 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008566:	2b00      	cmp	r3, #0
 8008568:	d102      	bne.n	8008570 <HAL_TIM_IC_Init+0x124>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a2e      	ldr	r2, [pc, #184]	; (8008628 <HAL_TIM_IC_Init+0x1dc>)
 800856e:	655a      	str	r2, [r3, #84]	; 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2202      	movs	r2, #2
 800857c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	3304      	adds	r3, #4
 8008588:	4619      	mov	r1, r3
 800858a:	4610      	mov	r0, r2
 800858c:	f000 fb7c 	bl	8008c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3708      	adds	r7, #8
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	40012c00 	.word	0x40012c00
 8008600:	40000400 	.word	0x40000400
 8008604:	40000800 	.word	0x40000800
 8008608:	40000c00 	.word	0x40000c00
 800860c:	40001000 	.word	0x40001000
 8008610:	40001400 	.word	0x40001400
 8008614:	40013400 	.word	0x40013400
 8008618:	40014000 	.word	0x40014000
 800861c:	40014400 	.word	0x40014400
 8008620:	40014800 	.word	0x40014800
 8008624:	0800e6ac 	.word	0x0800e6ac
 8008628:	08001545 	.word	0x08001545

0800862c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	f003 0302 	and.w	r3, r3, #2
 800863e:	2b02      	cmp	r3, #2
 8008640:	d128      	bne.n	8008694 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	f003 0302 	and.w	r3, r3, #2
 800864c:	2b02      	cmp	r3, #2
 800864e:	d121      	bne.n	8008694 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f06f 0202 	mvn.w	r2, #2
 8008658:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	f003 0303 	and.w	r3, r3, #3
 800866a:	2b00      	cmp	r3, #0
 800866c:	d005      	beq.n	800867a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	4798      	blx	r3
 8008678:	e009      	b.n	800868e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	f003 0304 	and.w	r3, r3, #4
 800869e:	2b04      	cmp	r3, #4
 80086a0:	d128      	bne.n	80086f4 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	f003 0304 	and.w	r3, r3, #4
 80086ac:	2b04      	cmp	r3, #4
 80086ae:	d121      	bne.n	80086f4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f06f 0204 	mvn.w	r2, #4
 80086b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2202      	movs	r2, #2
 80086be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d005      	beq.n	80086da <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	4798      	blx	r3
 80086d8:	e009      	b.n	80086ee <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	f003 0308 	and.w	r3, r3, #8
 80086fe:	2b08      	cmp	r3, #8
 8008700:	d128      	bne.n	8008754 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	f003 0308 	and.w	r3, r3, #8
 800870c:	2b08      	cmp	r3, #8
 800870e:	d121      	bne.n	8008754 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f06f 0208 	mvn.w	r2, #8
 8008718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2204      	movs	r2, #4
 800871e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	69db      	ldr	r3, [r3, #28]
 8008726:	f003 0303 	and.w	r3, r3, #3
 800872a:	2b00      	cmp	r3, #0
 800872c:	d005      	beq.n	800873a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	4798      	blx	r3
 8008738:	e009      	b.n	800874e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	f003 0310 	and.w	r3, r3, #16
 800875e:	2b10      	cmp	r3, #16
 8008760:	d128      	bne.n	80087b4 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	f003 0310 	and.w	r3, r3, #16
 800876c:	2b10      	cmp	r3, #16
 800876e:	d121      	bne.n	80087b4 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f06f 0210 	mvn.w	r2, #16
 8008778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2208      	movs	r2, #8
 800877e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	69db      	ldr	r3, [r3, #28]
 8008786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800878a:	2b00      	cmp	r3, #0
 800878c:	d005      	beq.n	800879a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	4798      	blx	r3
 8008798:	e009      	b.n	80087ae <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d110      	bne.n	80087e4 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	f003 0301 	and.w	r3, r3, #1
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d109      	bne.n	80087e4 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f06f 0201 	mvn.w	r2, #1
 80087d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ee:	2b80      	cmp	r3, #128	; 0x80
 80087f0:	d110      	bne.n	8008814 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087fc:	2b80      	cmp	r3, #128	; 0x80
 80087fe:	d109      	bne.n	8008814 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800881e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008822:	d110      	bne.n	8008846 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800882e:	2b80      	cmp	r3, #128	; 0x80
 8008830:	d109      	bne.n	8008846 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800883a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008850:	2b40      	cmp	r3, #64	; 0x40
 8008852:	d110      	bne.n	8008876 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800885e:	2b40      	cmp	r3, #64	; 0x40
 8008860:	d109      	bne.n	8008876 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800886a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	f003 0320 	and.w	r3, r3, #32
 8008880:	2b20      	cmp	r3, #32
 8008882:	d110      	bne.n	80088a6 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	f003 0320 	and.w	r3, r3, #32
 800888e:	2b20      	cmp	r3, #32
 8008890:	d109      	bne.n	80088a6 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f06f 0220 	mvn.w	r2, #32
 800889a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088a6:	bf00      	nop
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
	...

080088b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a91      	ldr	r2, [pc, #580]	; (8008b08 <HAL_TIM_IC_ConfigChannel+0x258>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d02c      	beq.n	8008920 <HAL_TIM_IC_ConfigChannel+0x70>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ce:	d027      	beq.n	8008920 <HAL_TIM_IC_ConfigChannel+0x70>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a8d      	ldr	r2, [pc, #564]	; (8008b0c <HAL_TIM_IC_ConfigChannel+0x25c>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d022      	beq.n	8008920 <HAL_TIM_IC_ConfigChannel+0x70>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a8c      	ldr	r2, [pc, #560]	; (8008b10 <HAL_TIM_IC_ConfigChannel+0x260>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d01d      	beq.n	8008920 <HAL_TIM_IC_ConfigChannel+0x70>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a8a      	ldr	r2, [pc, #552]	; (8008b14 <HAL_TIM_IC_ConfigChannel+0x264>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d018      	beq.n	8008920 <HAL_TIM_IC_ConfigChannel+0x70>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a89      	ldr	r2, [pc, #548]	; (8008b18 <HAL_TIM_IC_ConfigChannel+0x268>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d013      	beq.n	8008920 <HAL_TIM_IC_ConfigChannel+0x70>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a87      	ldr	r2, [pc, #540]	; (8008b1c <HAL_TIM_IC_ConfigChannel+0x26c>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d00e      	beq.n	8008920 <HAL_TIM_IC_ConfigChannel+0x70>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a86      	ldr	r2, [pc, #536]	; (8008b20 <HAL_TIM_IC_ConfigChannel+0x270>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d009      	beq.n	8008920 <HAL_TIM_IC_ConfigChannel+0x70>
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a84      	ldr	r2, [pc, #528]	; (8008b24 <HAL_TIM_IC_ConfigChannel+0x274>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d004      	beq.n	8008920 <HAL_TIM_IC_ConfigChannel+0x70>
 8008916:	f640 71d1 	movw	r1, #4049	; 0xfd1
 800891a:	4883      	ldr	r0, [pc, #524]	; (8008b28 <HAL_TIM_IC_ConfigChannel+0x278>)
 800891c:	f7f8 fb92 	bl	8001044 <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d00c      	beq.n	8008942 <HAL_TIM_IC_ConfigChannel+0x92>
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b02      	cmp	r3, #2
 800892e:	d008      	beq.n	8008942 <HAL_TIM_IC_ConfigChannel+0x92>
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b0a      	cmp	r3, #10
 8008936:	d004      	beq.n	8008942 <HAL_TIM_IC_ConfigChannel+0x92>
 8008938:	f640 71d2 	movw	r1, #4050	; 0xfd2
 800893c:	487a      	ldr	r0, [pc, #488]	; (8008b28 <HAL_TIM_IC_ConfigChannel+0x278>)
 800893e:	f7f8 fb81 	bl	8001044 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d00c      	beq.n	8008964 <HAL_TIM_IC_ConfigChannel+0xb4>
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	2b02      	cmp	r3, #2
 8008950:	d008      	beq.n	8008964 <HAL_TIM_IC_ConfigChannel+0xb4>
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	2b03      	cmp	r3, #3
 8008958:	d004      	beq.n	8008964 <HAL_TIM_IC_ConfigChannel+0xb4>
 800895a:	f640 71d3 	movw	r1, #4051	; 0xfd3
 800895e:	4872      	ldr	r0, [pc, #456]	; (8008b28 <HAL_TIM_IC_ConfigChannel+0x278>)
 8008960:	f7f8 fb70 	bl	8001044 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d010      	beq.n	800898e <HAL_TIM_IC_ConfigChannel+0xde>
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	2b04      	cmp	r3, #4
 8008972:	d00c      	beq.n	800898e <HAL_TIM_IC_ConfigChannel+0xde>
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	2b08      	cmp	r3, #8
 800897a:	d008      	beq.n	800898e <HAL_TIM_IC_ConfigChannel+0xde>
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	2b0c      	cmp	r3, #12
 8008982:	d004      	beq.n	800898e <HAL_TIM_IC_ConfigChannel+0xde>
 8008984:	f640 71d4 	movw	r1, #4052	; 0xfd4
 8008988:	4867      	ldr	r0, [pc, #412]	; (8008b28 <HAL_TIM_IC_ConfigChannel+0x278>)
 800898a:	f7f8 fb5b 	bl	8001044 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	2b0f      	cmp	r3, #15
 8008994:	d904      	bls.n	80089a0 <HAL_TIM_IC_ConfigChannel+0xf0>
 8008996:	f640 71d5 	movw	r1, #4053	; 0xfd5
 800899a:	4863      	ldr	r0, [pc, #396]	; (8008b28 <HAL_TIM_IC_ConfigChannel+0x278>)
 800899c:	f7f8 fb52 	bl	8001044 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d101      	bne.n	80089ae <HAL_TIM_IC_ConfigChannel+0xfe>
 80089aa:	2302      	movs	r3, #2
 80089ac:	e102      	b.n	8008bb4 <HAL_TIM_IC_ConfigChannel+0x304>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d11b      	bne.n	80089f4 <HAL_TIM_IC_ConfigChannel+0x144>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6818      	ldr	r0, [r3, #0]
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	6819      	ldr	r1, [r3, #0]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	685a      	ldr	r2, [r3, #4]
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f000 f9f6 	bl	8008dbc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	699a      	ldr	r2, [r3, #24]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f022 020c 	bic.w	r2, r2, #12
 80089de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6999      	ldr	r1, [r3, #24]
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	689a      	ldr	r2, [r3, #8]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	430a      	orrs	r2, r1
 80089f0:	619a      	str	r2, [r3, #24]
 80089f2:	e0da      	b.n	8008baa <HAL_TIM_IC_ConfigChannel+0x2fa>
  }
  else if (Channel == TIM_CHANNEL_2)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b04      	cmp	r3, #4
 80089f8:	d144      	bne.n	8008a84 <HAL_TIM_IC_ConfigChannel+0x1d4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a42      	ldr	r2, [pc, #264]	; (8008b08 <HAL_TIM_IC_ConfigChannel+0x258>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d022      	beq.n	8008a4a <HAL_TIM_IC_ConfigChannel+0x19a>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a0c:	d01d      	beq.n	8008a4a <HAL_TIM_IC_ConfigChannel+0x19a>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a3e      	ldr	r2, [pc, #248]	; (8008b0c <HAL_TIM_IC_ConfigChannel+0x25c>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d018      	beq.n	8008a4a <HAL_TIM_IC_ConfigChannel+0x19a>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a3c      	ldr	r2, [pc, #240]	; (8008b10 <HAL_TIM_IC_ConfigChannel+0x260>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d013      	beq.n	8008a4a <HAL_TIM_IC_ConfigChannel+0x19a>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a3b      	ldr	r2, [pc, #236]	; (8008b14 <HAL_TIM_IC_ConfigChannel+0x264>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d00e      	beq.n	8008a4a <HAL_TIM_IC_ConfigChannel+0x19a>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a39      	ldr	r2, [pc, #228]	; (8008b18 <HAL_TIM_IC_ConfigChannel+0x268>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d009      	beq.n	8008a4a <HAL_TIM_IC_ConfigChannel+0x19a>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a38      	ldr	r2, [pc, #224]	; (8008b1c <HAL_TIM_IC_ConfigChannel+0x26c>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d004      	beq.n	8008a4a <HAL_TIM_IC_ConfigChannel+0x19a>
 8008a40:	f640 71eb 	movw	r1, #4075	; 0xfeb
 8008a44:	4838      	ldr	r0, [pc, #224]	; (8008b28 <HAL_TIM_IC_ConfigChannel+0x278>)
 8008a46:	f7f8 fafd 	bl	8001044 <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6818      	ldr	r0, [r3, #0]
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	6819      	ldr	r1, [r3, #0]
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	f000 fa1d 	bl	8008e98 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	699a      	ldr	r2, [r3, #24]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008a6c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	6999      	ldr	r1, [r3, #24]
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	021a      	lsls	r2, r3, #8
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	430a      	orrs	r2, r1
 8008a80:	619a      	str	r2, [r3, #24]
 8008a82:	e092      	b.n	8008baa <HAL_TIM_IC_ConfigChannel+0x2fa>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b08      	cmp	r3, #8
 8008a88:	d150      	bne.n	8008b2c <HAL_TIM_IC_ConfigChannel+0x27c>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a1e      	ldr	r2, [pc, #120]	; (8008b08 <HAL_TIM_IC_ConfigChannel+0x258>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d01d      	beq.n	8008ad0 <HAL_TIM_IC_ConfigChannel+0x220>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a9c:	d018      	beq.n	8008ad0 <HAL_TIM_IC_ConfigChannel+0x220>
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a1a      	ldr	r2, [pc, #104]	; (8008b0c <HAL_TIM_IC_ConfigChannel+0x25c>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d013      	beq.n	8008ad0 <HAL_TIM_IC_ConfigChannel+0x220>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a18      	ldr	r2, [pc, #96]	; (8008b10 <HAL_TIM_IC_ConfigChannel+0x260>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d00e      	beq.n	8008ad0 <HAL_TIM_IC_ConfigChannel+0x220>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a17      	ldr	r2, [pc, #92]	; (8008b14 <HAL_TIM_IC_ConfigChannel+0x264>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d009      	beq.n	8008ad0 <HAL_TIM_IC_ConfigChannel+0x220>
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a15      	ldr	r2, [pc, #84]	; (8008b18 <HAL_TIM_IC_ConfigChannel+0x268>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d004      	beq.n	8008ad0 <HAL_TIM_IC_ConfigChannel+0x220>
 8008ac6:	f640 71fb 	movw	r1, #4091	; 0xffb
 8008aca:	4817      	ldr	r0, [pc, #92]	; (8008b28 <HAL_TIM_IC_ConfigChannel+0x278>)
 8008acc:	f7f8 faba 	bl	8001044 <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6818      	ldr	r0, [r3, #0]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	6819      	ldr	r1, [r3, #0]
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f000 fa17 	bl	8008f12 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	69da      	ldr	r2, [r3, #28]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f022 020c 	bic.w	r2, r2, #12
 8008af2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	69d9      	ldr	r1, [r3, #28]
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	689a      	ldr	r2, [r3, #8]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	430a      	orrs	r2, r1
 8008b04:	61da      	str	r2, [r3, #28]
 8008b06:	e050      	b.n	8008baa <HAL_TIM_IC_ConfigChannel+0x2fa>
 8008b08:	40012c00 	.word	0x40012c00
 8008b0c:	40000400 	.word	0x40000400
 8008b10:	40000800 	.word	0x40000800
 8008b14:	40000c00 	.word	0x40000c00
 8008b18:	40013400 	.word	0x40013400
 8008b1c:	40014000 	.word	0x40014000
 8008b20:	40014400 	.word	0x40014400
 8008b24:	40014800 	.word	0x40014800
 8008b28:	0800e6ac 	.word	0x0800e6ac
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a22      	ldr	r2, [pc, #136]	; (8008bbc <HAL_TIM_IC_ConfigChannel+0x30c>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d01d      	beq.n	8008b72 <HAL_TIM_IC_ConfigChannel+0x2c2>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b3e:	d018      	beq.n	8008b72 <HAL_TIM_IC_ConfigChannel+0x2c2>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a1e      	ldr	r2, [pc, #120]	; (8008bc0 <HAL_TIM_IC_ConfigChannel+0x310>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d013      	beq.n	8008b72 <HAL_TIM_IC_ConfigChannel+0x2c2>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a1d      	ldr	r2, [pc, #116]	; (8008bc4 <HAL_TIM_IC_ConfigChannel+0x314>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d00e      	beq.n	8008b72 <HAL_TIM_IC_ConfigChannel+0x2c2>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a1b      	ldr	r2, [pc, #108]	; (8008bc8 <HAL_TIM_IC_ConfigChannel+0x318>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d009      	beq.n	8008b72 <HAL_TIM_IC_ConfigChannel+0x2c2>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a1a      	ldr	r2, [pc, #104]	; (8008bcc <HAL_TIM_IC_ConfigChannel+0x31c>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d004      	beq.n	8008b72 <HAL_TIM_IC_ConfigChannel+0x2c2>
 8008b68:	f241 010b 	movw	r1, #4107	; 0x100b
 8008b6c:	4818      	ldr	r0, [pc, #96]	; (8008bd0 <HAL_TIM_IC_ConfigChannel+0x320>)
 8008b6e:	f7f8 fa69 	bl	8001044 <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6818      	ldr	r0, [r3, #0]
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	6819      	ldr	r1, [r3, #0]
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	685a      	ldr	r2, [r3, #4]
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	f000 fa02 	bl	8008f8a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	69da      	ldr	r2, [r3, #28]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008b94:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	69d9      	ldr	r1, [r3, #28]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	021a      	lsls	r2, r3, #8
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	40012c00 	.word	0x40012c00
 8008bc0:	40000400 	.word	0x40000400
 8008bc4:	40000800 	.word	0x40000800
 8008bc8:	40000c00 	.word	0x40000c00
 8008bcc:	40013400 	.word	0x40013400
 8008bd0:	0800e6ac 	.word	0x0800e6ac

08008bd4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008c40:	bf00      	nop
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c54:	bf00      	nop
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a40      	ldr	r2, [pc, #256]	; (8008d9c <TIM_Base_SetConfig+0x114>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d013      	beq.n	8008cc8 <TIM_Base_SetConfig+0x40>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ca6:	d00f      	beq.n	8008cc8 <TIM_Base_SetConfig+0x40>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a3d      	ldr	r2, [pc, #244]	; (8008da0 <TIM_Base_SetConfig+0x118>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d00b      	beq.n	8008cc8 <TIM_Base_SetConfig+0x40>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a3c      	ldr	r2, [pc, #240]	; (8008da4 <TIM_Base_SetConfig+0x11c>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d007      	beq.n	8008cc8 <TIM_Base_SetConfig+0x40>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a3b      	ldr	r2, [pc, #236]	; (8008da8 <TIM_Base_SetConfig+0x120>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d003      	beq.n	8008cc8 <TIM_Base_SetConfig+0x40>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a3a      	ldr	r2, [pc, #232]	; (8008dac <TIM_Base_SetConfig+0x124>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d108      	bne.n	8008cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a2f      	ldr	r2, [pc, #188]	; (8008d9c <TIM_Base_SetConfig+0x114>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d01f      	beq.n	8008d22 <TIM_Base_SetConfig+0x9a>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ce8:	d01b      	beq.n	8008d22 <TIM_Base_SetConfig+0x9a>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a2c      	ldr	r2, [pc, #176]	; (8008da0 <TIM_Base_SetConfig+0x118>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d017      	beq.n	8008d22 <TIM_Base_SetConfig+0x9a>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a2b      	ldr	r2, [pc, #172]	; (8008da4 <TIM_Base_SetConfig+0x11c>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d013      	beq.n	8008d22 <TIM_Base_SetConfig+0x9a>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a2a      	ldr	r2, [pc, #168]	; (8008da8 <TIM_Base_SetConfig+0x120>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d00f      	beq.n	8008d22 <TIM_Base_SetConfig+0x9a>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a29      	ldr	r2, [pc, #164]	; (8008dac <TIM_Base_SetConfig+0x124>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d00b      	beq.n	8008d22 <TIM_Base_SetConfig+0x9a>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a28      	ldr	r2, [pc, #160]	; (8008db0 <TIM_Base_SetConfig+0x128>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d007      	beq.n	8008d22 <TIM_Base_SetConfig+0x9a>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a27      	ldr	r2, [pc, #156]	; (8008db4 <TIM_Base_SetConfig+0x12c>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d003      	beq.n	8008d22 <TIM_Base_SetConfig+0x9a>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a26      	ldr	r2, [pc, #152]	; (8008db8 <TIM_Base_SetConfig+0x130>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d108      	bne.n	8008d34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	695b      	ldr	r3, [r3, #20]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	689a      	ldr	r2, [r3, #8]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a10      	ldr	r2, [pc, #64]	; (8008d9c <TIM_Base_SetConfig+0x114>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d00f      	beq.n	8008d80 <TIM_Base_SetConfig+0xf8>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a12      	ldr	r2, [pc, #72]	; (8008dac <TIM_Base_SetConfig+0x124>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d00b      	beq.n	8008d80 <TIM_Base_SetConfig+0xf8>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a11      	ldr	r2, [pc, #68]	; (8008db0 <TIM_Base_SetConfig+0x128>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d007      	beq.n	8008d80 <TIM_Base_SetConfig+0xf8>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a10      	ldr	r2, [pc, #64]	; (8008db4 <TIM_Base_SetConfig+0x12c>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d003      	beq.n	8008d80 <TIM_Base_SetConfig+0xf8>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a0f      	ldr	r2, [pc, #60]	; (8008db8 <TIM_Base_SetConfig+0x130>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d103      	bne.n	8008d88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	691a      	ldr	r2, [r3, #16]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	615a      	str	r2, [r3, #20]
}
 8008d8e:	bf00      	nop
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	40012c00 	.word	0x40012c00
 8008da0:	40000400 	.word	0x40000400
 8008da4:	40000800 	.word	0x40000800
 8008da8:	40000c00 	.word	0x40000c00
 8008dac:	40013400 	.word	0x40013400
 8008db0:	40014000 	.word	0x40014000
 8008db4:	40014400 	.word	0x40014400
 8008db8:	40014800 	.word	0x40014800

08008dbc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b087      	sub	sp, #28
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
 8008dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	f023 0201 	bic.w	r2, r3, #1
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6a1b      	ldr	r3, [r3, #32]
 8008de0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	4a26      	ldr	r2, [pc, #152]	; (8008e80 <TIM_TI1_SetConfig+0xc4>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d017      	beq.n	8008e1a <TIM_TI1_SetConfig+0x5e>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008df0:	d013      	beq.n	8008e1a <TIM_TI1_SetConfig+0x5e>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	4a23      	ldr	r2, [pc, #140]	; (8008e84 <TIM_TI1_SetConfig+0xc8>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d00f      	beq.n	8008e1a <TIM_TI1_SetConfig+0x5e>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	4a22      	ldr	r2, [pc, #136]	; (8008e88 <TIM_TI1_SetConfig+0xcc>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d00b      	beq.n	8008e1a <TIM_TI1_SetConfig+0x5e>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	4a21      	ldr	r2, [pc, #132]	; (8008e8c <TIM_TI1_SetConfig+0xd0>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d007      	beq.n	8008e1a <TIM_TI1_SetConfig+0x5e>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	4a20      	ldr	r2, [pc, #128]	; (8008e90 <TIM_TI1_SetConfig+0xd4>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d003      	beq.n	8008e1a <TIM_TI1_SetConfig+0x5e>
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	4a1f      	ldr	r2, [pc, #124]	; (8008e94 <TIM_TI1_SetConfig+0xd8>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d101      	bne.n	8008e1e <TIM_TI1_SetConfig+0x62>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e000      	b.n	8008e20 <TIM_TI1_SetConfig+0x64>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d008      	beq.n	8008e36 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	f023 0303 	bic.w	r3, r3, #3
 8008e2a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008e2c:	697a      	ldr	r2, [r7, #20]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	617b      	str	r3, [r7, #20]
 8008e34:	e003      	b.n	8008e3e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	f043 0301 	orr.w	r3, r3, #1
 8008e3c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	011b      	lsls	r3, r3, #4
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	697a      	ldr	r2, [r7, #20]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	f023 030a 	bic.w	r3, r3, #10
 8008e58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	f003 030a 	and.w	r3, r3, #10
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	697a      	ldr	r2, [r7, #20]
 8008e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	621a      	str	r2, [r3, #32]
}
 8008e72:	bf00      	nop
 8008e74:	371c      	adds	r7, #28
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	40012c00 	.word	0x40012c00
 8008e84:	40000400 	.word	0x40000400
 8008e88:	40000800 	.word	0x40000800
 8008e8c:	40000c00 	.word	0x40000c00
 8008e90:	40013400 	.word	0x40013400
 8008e94:	40014000 	.word	0x40014000

08008e98 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b087      	sub	sp, #28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
 8008ea4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6a1b      	ldr	r3, [r3, #32]
 8008eaa:	f023 0210 	bic.w	r2, r3, #16
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	699b      	ldr	r3, [r3, #24]
 8008eb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6a1b      	ldr	r3, [r3, #32]
 8008ebc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ec4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	021b      	lsls	r3, r3, #8
 8008eca:	697a      	ldr	r2, [r7, #20]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ed6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	031b      	lsls	r3, r3, #12
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008eea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	011b      	lsls	r3, r3, #4
 8008ef0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008ef4:	693a      	ldr	r2, [r7, #16]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	697a      	ldr	r2, [r7, #20]
 8008efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	693a      	ldr	r2, [r7, #16]
 8008f04:	621a      	str	r2, [r3, #32]
}
 8008f06:	bf00      	nop
 8008f08:	371c      	adds	r7, #28
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr

08008f12 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f12:	b480      	push	{r7}
 8008f14:	b087      	sub	sp, #28
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	60f8      	str	r0, [r7, #12]
 8008f1a:	60b9      	str	r1, [r7, #8]
 8008f1c:	607a      	str	r2, [r7, #4]
 8008f1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6a1b      	ldr	r3, [r3, #32]
 8008f24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	69db      	ldr	r3, [r3, #28]
 8008f30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	f023 0303 	bic.w	r3, r3, #3
 8008f3e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f4e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	011b      	lsls	r3, r3, #4
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008f62:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	021b      	lsls	r3, r3, #8
 8008f68:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	693a      	ldr	r2, [r7, #16]
 8008f7c:	621a      	str	r2, [r3, #32]
}
 8008f7e:	bf00      	nop
 8008f80:	371c      	adds	r7, #28
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b087      	sub	sp, #28
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	60f8      	str	r0, [r7, #12]
 8008f92:	60b9      	str	r1, [r7, #8]
 8008f94:	607a      	str	r2, [r7, #4]
 8008f96:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6a1b      	ldr	r3, [r3, #32]
 8008f9c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	69db      	ldr	r3, [r3, #28]
 8008fa8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6a1b      	ldr	r3, [r3, #32]
 8008fae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fb6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	021b      	lsls	r3, r3, #8
 8008fbc:	697a      	ldr	r2, [r7, #20]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008fc8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	031b      	lsls	r3, r3, #12
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	697a      	ldr	r2, [r7, #20]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008fdc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	031b      	lsls	r3, r3, #12
 8008fe2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008fe6:	693a      	ldr	r2, [r7, #16]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	693a      	ldr	r2, [r7, #16]
 8008ff6:	621a      	str	r2, [r3, #32]
}
 8008ff8:	bf00      	nop
 8008ffa:	371c      	adds	r7, #28
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;             /* Legacy weak PeriodElapsedCallback             */
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a1e      	ldr	r2, [pc, #120]	; (8009088 <TIM_ResetCallback+0x84>)
 8009010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;     /* Legacy weak PeriodElapsedHalfCpltCallback     */
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a1d      	ldr	r2, [pc, #116]	; (800908c <TIM_ResetCallback+0x88>)
 8009018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;                   /* Legacy weak TriggerCallback                   */
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a1c      	ldr	r2, [pc, #112]	; (8009090 <TIM_ResetCallback+0x8c>)
 8009020:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;           /* Legacy weak TriggerHalfCpltCallback           */
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a1b      	ldr	r2, [pc, #108]	; (8009094 <TIM_ResetCallback+0x90>)
 8009028:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;                /* Legacy weak IC_CaptureCallback                */
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a1a      	ldr	r2, [pc, #104]	; (8009098 <TIM_ResetCallback+0x94>)
 8009030:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;        /* Legacy weak IC_CaptureHalfCpltCallback        */
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a19      	ldr	r2, [pc, #100]	; (800909c <TIM_ResetCallback+0x98>)
 8009038:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;           /* Legacy weak OC_DelayElapsedCallback           */
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a18      	ldr	r2, [pc, #96]	; (80090a0 <TIM_ResetCallback+0x9c>)
 8009040:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;         /* Legacy weak PWM_PulseFinishedCallback         */
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a17      	ldr	r2, [pc, #92]	; (80090a4 <TIM_ResetCallback+0xa0>)
 8009048:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback; /* Legacy weak PWM_PulseFinishedHalfCpltCallback */
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a16      	ldr	r2, [pc, #88]	; (80090a8 <TIM_ResetCallback+0xa4>)
 8009050:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;                     /* Legacy weak ErrorCallback                     */
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a15      	ldr	r2, [pc, #84]	; (80090ac <TIM_ResetCallback+0xa8>)
 8009058:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;                  /* Legacy weak CommutationCallback               */
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a14      	ldr	r2, [pc, #80]	; (80090b0 <TIM_ResetCallback+0xac>)
 8009060:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;          /* Legacy weak CommutationHalfCpltCallback       */
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a13      	ldr	r2, [pc, #76]	; (80090b4 <TIM_ResetCallback+0xb0>)
 8009068:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;                   /* Legacy weak BreakCallback                     */
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a12      	ldr	r2, [pc, #72]	; (80090b8 <TIM_ResetCallback+0xb4>)
 8009070:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;                  /* Legacy weak Break2Callback                    */
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a11      	ldr	r2, [pc, #68]	; (80090bc <TIM_ResetCallback+0xb8>)
 8009078:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	08001019 	.word	0x08001019
 800908c:	08008bd5 	.word	0x08008bd5
 8009090:	08008c4d 	.word	0x08008c4d
 8009094:	08008c61 	.word	0x08008c61
 8009098:	08008bfd 	.word	0x08008bfd
 800909c:	08008c11 	.word	0x08008c11
 80090a0:	08008be9 	.word	0x08008be9
 80090a4:	08008c25 	.word	0x08008c25
 80090a8:	08008c39 	.word	0x08008c39
 80090ac:	08008c75 	.word	0x08008c75
 80090b0:	08009351 	.word	0x08009351
 80090b4:	08009365 	.word	0x08009365
 80090b8:	08009379 	.word	0x08009379
 80090bc:	0800938d 	.word	0x0800938d

080090c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a97      	ldr	r2, [pc, #604]	; (800932c <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d02c      	beq.n	800912e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090dc:	d027      	beq.n	800912e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a93      	ldr	r2, [pc, #588]	; (8009330 <HAL_TIMEx_MasterConfigSynchronization+0x270>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d022      	beq.n	800912e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a91      	ldr	r2, [pc, #580]	; (8009334 <HAL_TIMEx_MasterConfigSynchronization+0x274>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d01d      	beq.n	800912e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a90      	ldr	r2, [pc, #576]	; (8009338 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d018      	beq.n	800912e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a8e      	ldr	r2, [pc, #568]	; (800933c <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d013      	beq.n	800912e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a8d      	ldr	r2, [pc, #564]	; (8009340 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d00e      	beq.n	800912e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a8b      	ldr	r2, [pc, #556]	; (8009344 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d009      	beq.n	800912e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a8a      	ldr	r2, [pc, #552]	; (8009348 <HAL_TIMEx_MasterConfigSynchronization+0x288>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d004      	beq.n	800912e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009124:	f240 715b 	movw	r1, #1883	; 0x75b
 8009128:	4888      	ldr	r0, [pc, #544]	; (800934c <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 800912a:	f7f7 ff8b 	bl	8001044 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d020      	beq.n	8009178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2b10      	cmp	r3, #16
 800913c:	d01c      	beq.n	8009178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2b20      	cmp	r3, #32
 8009144:	d018      	beq.n	8009178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b30      	cmp	r3, #48	; 0x30
 800914c:	d014      	beq.n	8009178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b40      	cmp	r3, #64	; 0x40
 8009154:	d010      	beq.n	8009178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2b50      	cmp	r3, #80	; 0x50
 800915c:	d00c      	beq.n	8009178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2b60      	cmp	r3, #96	; 0x60
 8009164:	d008      	beq.n	8009178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2b70      	cmp	r3, #112	; 0x70
 800916c:	d004      	beq.n	8009178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800916e:	f240 715c 	movw	r1, #1884	; 0x75c
 8009172:	4876      	ldr	r0, [pc, #472]	; (800934c <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 8009174:	f7f7 ff66 	bl	8001044 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	2b80      	cmp	r3, #128	; 0x80
 800917e:	d008      	beq.n	8009192 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d004      	beq.n	8009192 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8009188:	f240 715d 	movw	r1, #1885	; 0x75d
 800918c:	486f      	ldr	r0, [pc, #444]	; (800934c <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 800918e:	f7f7 ff59 	bl	8001044 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009198:	2b01      	cmp	r3, #1
 800919a:	d101      	bne.n	80091a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800919c:	2302      	movs	r3, #2
 800919e:	e0c1      	b.n	8009324 <HAL_TIMEx_MasterConfigSynchronization+0x264>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2202      	movs	r2, #2
 80091ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a59      	ldr	r2, [pc, #356]	; (800932c <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d004      	beq.n	80091d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a5d      	ldr	r2, [pc, #372]	; (8009344 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d161      	bne.n	8009298 <HAL_TIMEx_MasterConfigSynchronization+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d054      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091e4:	d04f      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091ee:	d04a      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091f8:	d045      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009202:	d040      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800920c:	d03b      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009216:	d036      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009220:	d031      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 800922a:	d02c      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009234:	d027      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 800923e:	d022      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009248:	d01d      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8009252:	d018      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800925c:	d013      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8009266:	d00e      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8009270:	d009      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 800927a:	d004      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800927c:	f240 716f 	movw	r1, #1903	; 0x76f
 8009280:	4832      	ldr	r0, [pc, #200]	; (800934c <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 8009282:	f7f7 fedf 	bl	8001044 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800928c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	4313      	orrs	r3, r2
 8009296:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800929e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a1d      	ldr	r2, [pc, #116]	; (800932c <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d01d      	beq.n	80092f8 <HAL_TIMEx_MasterConfigSynchronization+0x238>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092c4:	d018      	beq.n	80092f8 <HAL_TIMEx_MasterConfigSynchronization+0x238>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a19      	ldr	r2, [pc, #100]	; (8009330 <HAL_TIMEx_MasterConfigSynchronization+0x270>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d013      	beq.n	80092f8 <HAL_TIMEx_MasterConfigSynchronization+0x238>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a17      	ldr	r2, [pc, #92]	; (8009334 <HAL_TIMEx_MasterConfigSynchronization+0x274>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d00e      	beq.n	80092f8 <HAL_TIMEx_MasterConfigSynchronization+0x238>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a16      	ldr	r2, [pc, #88]	; (8009338 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d009      	beq.n	80092f8 <HAL_TIMEx_MasterConfigSynchronization+0x238>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a16      	ldr	r2, [pc, #88]	; (8009344 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d004      	beq.n	80092f8 <HAL_TIMEx_MasterConfigSynchronization+0x238>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a15      	ldr	r2, [pc, #84]	; (8009348 <HAL_TIMEx_MasterConfigSynchronization+0x288>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d10c      	bne.n	8009312 <HAL_TIMEx_MasterConfigSynchronization+0x252>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	68ba      	ldr	r2, [r7, #8]
 8009306:	4313      	orrs	r3, r2
 8009308:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	40012c00 	.word	0x40012c00
 8009330:	40000400 	.word	0x40000400
 8009334:	40000800 	.word	0x40000800
 8009338:	40000c00 	.word	0x40000c00
 800933c:	40001000 	.word	0x40001000
 8009340:	40001400 	.word	0x40001400
 8009344:	40013400 	.word	0x40013400
 8009348:	40014000 	.word	0x40014000
 800934c:	0800e6e4 	.word	0x0800e6e4

08009350 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800936c:	bf00      	nop
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009394:	bf00      	nop
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d101      	bne.n	80093b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093ae:	2301      	movs	r3, #1
 80093b0:	e09b      	b.n	80094ea <HAL_UART_Init+0x14a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d023      	beq.n	8009402 <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a4d      	ldr	r2, [pc, #308]	; (80094f4 <HAL_UART_Init+0x154>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d041      	beq.n	8009448 <HAL_UART_Init+0xa8>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a4b      	ldr	r2, [pc, #300]	; (80094f8 <HAL_UART_Init+0x158>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d03c      	beq.n	8009448 <HAL_UART_Init+0xa8>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a4a      	ldr	r2, [pc, #296]	; (80094fc <HAL_UART_Init+0x15c>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d037      	beq.n	8009448 <HAL_UART_Init+0xa8>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a48      	ldr	r2, [pc, #288]	; (8009500 <HAL_UART_Init+0x160>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d032      	beq.n	8009448 <HAL_UART_Init+0xa8>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a47      	ldr	r2, [pc, #284]	; (8009504 <HAL_UART_Init+0x164>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d02d      	beq.n	8009448 <HAL_UART_Init+0xa8>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a45      	ldr	r2, [pc, #276]	; (8009508 <HAL_UART_Init+0x168>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d028      	beq.n	8009448 <HAL_UART_Init+0xa8>
 80093f6:	f240 1143 	movw	r1, #323	; 0x143
 80093fa:	4844      	ldr	r0, [pc, #272]	; (800950c <HAL_UART_Init+0x16c>)
 80093fc:	f7f7 fe22 	bl	8001044 <assert_failed>
 8009400:	e022      	b.n	8009448 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a3b      	ldr	r2, [pc, #236]	; (80094f4 <HAL_UART_Init+0x154>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d01d      	beq.n	8009448 <HAL_UART_Init+0xa8>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a39      	ldr	r2, [pc, #228]	; (80094f8 <HAL_UART_Init+0x158>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d018      	beq.n	8009448 <HAL_UART_Init+0xa8>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a38      	ldr	r2, [pc, #224]	; (80094fc <HAL_UART_Init+0x15c>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d013      	beq.n	8009448 <HAL_UART_Init+0xa8>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a36      	ldr	r2, [pc, #216]	; (8009500 <HAL_UART_Init+0x160>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d00e      	beq.n	8009448 <HAL_UART_Init+0xa8>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a35      	ldr	r2, [pc, #212]	; (8009504 <HAL_UART_Init+0x164>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d009      	beq.n	8009448 <HAL_UART_Init+0xa8>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a33      	ldr	r2, [pc, #204]	; (8009508 <HAL_UART_Init+0x168>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d004      	beq.n	8009448 <HAL_UART_Init+0xa8>
 800943e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009442:	4832      	ldr	r0, [pc, #200]	; (800950c <HAL_UART_Init+0x16c>)
 8009444:	f7f7 fdfe 	bl	8001044 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800944e:	2b00      	cmp	r3, #0
 8009450:	d114      	bne.n	800947c <HAL_UART_Init+0xdc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fa36 	bl	80098cc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009466:	2b00      	cmp	r3, #0
 8009468:	d103      	bne.n	8009472 <HAL_UART_Init+0xd2>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a28      	ldr	r2, [pc, #160]	; (8009510 <HAL_UART_Init+0x170>)
 800946e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2224      	movs	r2, #36	; 0x24
 8009480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f022 0201 	bic.w	r2, r2, #1
 8009492:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fa65 	bl	8009964 <UART_SetConfig>
 800949a:	4603      	mov	r3, r0
 800949c:	2b01      	cmp	r3, #1
 800949e:	d101      	bne.n	80094a4 <HAL_UART_Init+0x104>
  {
    return HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	e022      	b.n	80094ea <HAL_UART_Init+0x14a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d002      	beq.n	80094b2 <HAL_UART_Init+0x112>
  {
    UART_AdvFeatureConfig(huart);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 fe09 	bl	800a0c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	685a      	ldr	r2, [r3, #4]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	689a      	ldr	r2, [r3, #8]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f042 0201 	orr.w	r2, r2, #1
 80094e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 ff4c 	bl	800a380 <UART_CheckIdleState>
 80094e8:	4603      	mov	r3, r0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	40013800 	.word	0x40013800
 80094f8:	40004400 	.word	0x40004400
 80094fc:	40004800 	.word	0x40004800
 8009500:	40004c00 	.word	0x40004c00
 8009504:	40005000 	.word	0x40005000
 8009508:	40008000 	.word	0x40008000
 800950c:	0800e720 	.word	0x0800e720
 8009510:	08001675 	.word	0x08001675

08009514 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b088      	sub	sp, #32
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	69db      	ldr	r3, [r3, #28]
 8009522:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009534:	69fa      	ldr	r2, [r7, #28]
 8009536:	f640 030f 	movw	r3, #2063	; 0x80f
 800953a:	4013      	ands	r3, r2
 800953c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d118      	bne.n	8009576 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	f003 0320 	and.w	r3, r3, #32
 800954a:	2b00      	cmp	r3, #0
 800954c:	d013      	beq.n	8009576 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	f003 0320 	and.w	r3, r3, #32
 8009554:	2b00      	cmp	r3, #0
 8009556:	d104      	bne.n	8009562 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d009      	beq.n	8009576 <HAL_UART_IRQHandler+0x62>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009566:	2b00      	cmp	r3, #0
 8009568:	f000 8151 	beq.w	800980e <HAL_UART_IRQHandler+0x2fa>
      {
        huart->RxISR(huart);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	4798      	blx	r3
      }
      return;
 8009574:	e14b      	b.n	800980e <HAL_UART_IRQHandler+0x2fa>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	2b00      	cmp	r3, #0
 800957a:	f000 80ee 	beq.w	800975a <HAL_UART_IRQHandler+0x246>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	4ba7      	ldr	r3, [pc, #668]	; (8009820 <HAL_UART_IRQHandler+0x30c>)
 8009582:	4013      	ands	r3, r2
 8009584:	2b00      	cmp	r3, #0
 8009586:	d105      	bne.n	8009594 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009588:	69ba      	ldr	r2, [r7, #24]
 800958a:	4ba6      	ldr	r3, [pc, #664]	; (8009824 <HAL_UART_IRQHandler+0x310>)
 800958c:	4013      	ands	r3, r2
 800958e:	2b00      	cmp	r3, #0
 8009590:	f000 80e3 	beq.w	800975a <HAL_UART_IRQHandler+0x246>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	d010      	beq.n	80095c0 <HAL_UART_IRQHandler+0xac>
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00b      	beq.n	80095c0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2201      	movs	r2, #1
 80095ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095b6:	f043 0201 	orr.w	r2, r3, #1
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	f003 0302 	and.w	r3, r3, #2
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d010      	beq.n	80095ec <HAL_UART_IRQHandler+0xd8>
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	f003 0301 	and.w	r3, r3, #1
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00b      	beq.n	80095ec <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2202      	movs	r2, #2
 80095da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095e2:	f043 0204 	orr.w	r2, r3, #4
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	f003 0304 	and.w	r3, r3, #4
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d010      	beq.n	8009618 <HAL_UART_IRQHandler+0x104>
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	f003 0301 	and.w	r3, r3, #1
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00b      	beq.n	8009618 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2204      	movs	r2, #4
 8009606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800960e:	f043 0202 	orr.w	r2, r3, #2
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	f003 0308 	and.w	r3, r3, #8
 800961e:	2b00      	cmp	r3, #0
 8009620:	d015      	beq.n	800964e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	f003 0320 	and.w	r3, r3, #32
 8009628:	2b00      	cmp	r3, #0
 800962a:	d104      	bne.n	8009636 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800962c:	697a      	ldr	r2, [r7, #20]
 800962e:	4b7c      	ldr	r3, [pc, #496]	; (8009820 <HAL_UART_IRQHandler+0x30c>)
 8009630:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00b      	beq.n	800964e <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2208      	movs	r2, #8
 800963c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009644:	f043 0208 	orr.w	r2, r3, #8
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009654:	2b00      	cmp	r3, #0
 8009656:	d011      	beq.n	800967c <HAL_UART_IRQHandler+0x168>
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00c      	beq.n	800967c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800966a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009672:	f043 0220 	orr.w	r2, r3, #32
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009682:	2b00      	cmp	r3, #0
 8009684:	f000 80c5 	beq.w	8009812 <HAL_UART_IRQHandler+0x2fe>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	f003 0320 	and.w	r3, r3, #32
 800968e:	2b00      	cmp	r3, #0
 8009690:	d011      	beq.n	80096b6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	f003 0320 	and.w	r3, r3, #32
 8009698:	2b00      	cmp	r3, #0
 800969a:	d104      	bne.n	80096a6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d007      	beq.n	80096b6 <HAL_UART_IRQHandler+0x1a2>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d003      	beq.n	80096b6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096bc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c8:	2b40      	cmp	r3, #64	; 0x40
 80096ca:	d004      	beq.n	80096d6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d035      	beq.n	8009742 <HAL_UART_IRQHandler+0x22e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 ff1a 	bl	800a510 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e6:	2b40      	cmp	r3, #64	; 0x40
 80096e8:	d125      	bne.n	8009736 <HAL_UART_IRQHandler+0x222>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	689a      	ldr	r2, [r3, #8]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096f8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d013      	beq.n	800972a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009706:	4a48      	ldr	r2, [pc, #288]	; (8009828 <HAL_UART_IRQHandler+0x314>)
 8009708:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800970e:	4618      	mov	r0, r3
 8009710:	f7fa fe6a 	bl	80043e8 <HAL_DMA_Abort_IT>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d01d      	beq.n	8009756 <HAL_UART_IRQHandler+0x242>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800971e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009724:	4610      	mov	r0, r2
 8009726:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009728:	e015      	b.n	8009756 <HAL_UART_IRQHandler+0x242>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009734:	e00f      	b.n	8009756 <HAL_UART_IRQHandler+0x242>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009740:	e009      	b.n	8009756 <HAL_UART_IRQHandler+0x242>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009754:	e05d      	b.n	8009812 <HAL_UART_IRQHandler+0x2fe>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009756:	bf00      	nop
    return;
 8009758:	e05b      	b.n	8009812 <HAL_UART_IRQHandler+0x2fe>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00f      	beq.n	8009784 <HAL_UART_IRQHandler+0x270>
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00a      	beq.n	8009784 <HAL_UART_IRQHandler+0x270>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009776:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009782:	e049      	b.n	8009818 <HAL_UART_IRQHandler+0x304>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800978a:	2b00      	cmp	r3, #0
 800978c:	d012      	beq.n	80097b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009794:	2b00      	cmp	r3, #0
 8009796:	d104      	bne.n	80097a2 <HAL_UART_IRQHandler+0x28e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d008      	beq.n	80097b4 <HAL_UART_IRQHandler+0x2a0>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d035      	beq.n	8009816 <HAL_UART_IRQHandler+0x302>
    {
      huart->TxISR(huart);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	4798      	blx	r3
    }
    return;
 80097b2:	e030      	b.n	8009816 <HAL_UART_IRQHandler+0x302>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d008      	beq.n	80097d0 <HAL_UART_IRQHandler+0x2bc>
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d003      	beq.n	80097d0 <HAL_UART_IRQHandler+0x2bc>
  {
    UART_EndTransmit_IT(huart);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fedc 	bl	800a586 <UART_EndTransmit_IT>
    return;
 80097ce:	e023      	b.n	8009818 <HAL_UART_IRQHandler+0x304>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00a      	beq.n	80097f0 <HAL_UART_IRQHandler+0x2dc>
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d005      	beq.n	80097f0 <HAL_UART_IRQHandler+0x2dc>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097ee:	e013      	b.n	8009818 <HAL_UART_IRQHandler+0x304>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00e      	beq.n	8009818 <HAL_UART_IRQHandler+0x304>
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	da0b      	bge.n	8009818 <HAL_UART_IRQHandler+0x304>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800980a:	bf00      	nop
 800980c:	e004      	b.n	8009818 <HAL_UART_IRQHandler+0x304>
      return;
 800980e:	bf00      	nop
 8009810:	e002      	b.n	8009818 <HAL_UART_IRQHandler+0x304>
    return;
 8009812:	bf00      	nop
 8009814:	e000      	b.n	8009818 <HAL_UART_IRQHandler+0x304>
    return;
 8009816:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8009818:	3720      	adds	r7, #32
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	10000001 	.word	0x10000001
 8009824:	04000120 	.word	0x04000120
 8009828:	0800a557 	.word	0x0800a557

0800982c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009848:	bf00      	nop
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80098c0:	bf00      	nop
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a18      	ldr	r2, [pc, #96]	; (8009938 <UART_InitCallbacksToDefault+0x6c>)
 80098d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4a17      	ldr	r2, [pc, #92]	; (800993c <UART_InitCallbacksToDefault+0x70>)
 80098e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4a16      	ldr	r2, [pc, #88]	; (8009940 <UART_InitCallbacksToDefault+0x74>)
 80098e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4a15      	ldr	r2, [pc, #84]	; (8009944 <UART_InitCallbacksToDefault+0x78>)
 80098f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a14      	ldr	r2, [pc, #80]	; (8009948 <UART_InitCallbacksToDefault+0x7c>)
 80098f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4a13      	ldr	r2, [pc, #76]	; (800994c <UART_InitCallbacksToDefault+0x80>)
 8009900:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	4a12      	ldr	r2, [pc, #72]	; (8009950 <UART_InitCallbacksToDefault+0x84>)
 8009908:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a11      	ldr	r2, [pc, #68]	; (8009954 <UART_InitCallbacksToDefault+0x88>)
 8009910:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a10      	ldr	r2, [pc, #64]	; (8009958 <UART_InitCallbacksToDefault+0x8c>)
 8009918:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#if defined(USART_CR1_FIFOEN)
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a0f      	ldr	r2, [pc, #60]	; (800995c <UART_InitCallbacksToDefault+0x90>)
 8009920:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a0e      	ldr	r2, [pc, #56]	; (8009960 <UART_InitCallbacksToDefault+0x94>)
 8009928:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
#endif /* USART_CR1_FIFOEN */

}
 800992c:	bf00      	nop
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr
 8009938:	08009841 	.word	0x08009841
 800993c:	0800982d 	.word	0x0800982d
 8009940:	08009869 	.word	0x08009869
 8009944:	08009855 	.word	0x08009855
 8009948:	0800987d 	.word	0x0800987d
 800994c:	08009891 	.word	0x08009891
 8009950:	080098a5 	.word	0x080098a5
 8009954:	080098b9 	.word	0x080098b9
 8009958:	0800a5bf 	.word	0x0800a5bf
 800995c:	0800a5d3 	.word	0x0800a5d3
 8009960:	0800a5e7 	.word	0x0800a5e7

08009964 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009964:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009968:	b088      	sub	sp, #32
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	76bb      	strb	r3, [r7, #26]
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	4a9f      	ldr	r2, [pc, #636]	; (8009bf4 <UART_SetConfig+0x290>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d904      	bls.n	8009986 <UART_SetConfig+0x22>
 800997c:	f640 31b1 	movw	r1, #2993	; 0xbb1
 8009980:	489d      	ldr	r0, [pc, #628]	; (8009bf8 <UART_SetConfig+0x294>)
 8009982:	f7f7 fb5f 	bl	8001044 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800998e:	d00d      	beq.n	80099ac <UART_SetConfig+0x48>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d009      	beq.n	80099ac <UART_SetConfig+0x48>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099a0:	d004      	beq.n	80099ac <UART_SetConfig+0x48>
 80099a2:	f640 31b2 	movw	r1, #2994	; 0xbb2
 80099a6:	4894      	ldr	r0, [pc, #592]	; (8009bf8 <UART_SetConfig+0x294>)
 80099a8:	f7f7 fb4c 	bl	8001044 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a92      	ldr	r2, [pc, #584]	; (8009bfc <UART_SetConfig+0x298>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d10e      	bne.n	80099d4 <UART_SetConfig+0x70>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d030      	beq.n	8009a20 <UART_SetConfig+0xbc>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099c6:	d02b      	beq.n	8009a20 <UART_SetConfig+0xbc>
 80099c8:	f640 31b5 	movw	r1, #2997	; 0xbb5
 80099cc:	488a      	ldr	r0, [pc, #552]	; (8009bf8 <UART_SetConfig+0x294>)
 80099ce:	f7f7 fb39 	bl	8001044 <assert_failed>
 80099d2:	e025      	b.n	8009a20 <UART_SetConfig+0xbc>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099dc:	d012      	beq.n	8009a04 <UART_SetConfig+0xa0>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00e      	beq.n	8009a04 <UART_SetConfig+0xa0>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80099ee:	d009      	beq.n	8009a04 <UART_SetConfig+0xa0>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099f8:	d004      	beq.n	8009a04 <UART_SetConfig+0xa0>
 80099fa:	f640 31b9 	movw	r1, #3001	; 0xbb9
 80099fe:	487e      	ldr	r0, [pc, #504]	; (8009bf8 <UART_SetConfig+0x294>)
 8009a00:	f7f7 fb20 	bl	8001044 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a1b      	ldr	r3, [r3, #32]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d009      	beq.n	8009a20 <UART_SetConfig+0xbc>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6a1b      	ldr	r3, [r3, #32]
 8009a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a14:	d004      	beq.n	8009a20 <UART_SetConfig+0xbc>
 8009a16:	f640 31ba 	movw	r1, #3002	; 0xbba
 8009a1a:	4877      	ldr	r0, [pc, #476]	; (8009bf8 <UART_SetConfig+0x294>)
 8009a1c:	f7f7 fb12 	bl	8001044 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00e      	beq.n	8009a46 <UART_SetConfig+0xe2>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a30:	d009      	beq.n	8009a46 <UART_SetConfig+0xe2>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009a3a:	d004      	beq.n	8009a46 <UART_SetConfig+0xe2>
 8009a3c:	f640 31bd 	movw	r1, #3005	; 0xbbd
 8009a40:	486d      	ldr	r0, [pc, #436]	; (8009bf8 <UART_SetConfig+0x294>)
 8009a42:	f7f7 faff 	bl	8001044 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	695b      	ldr	r3, [r3, #20]
 8009a4a:	f023 030c 	bic.w	r3, r3, #12
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d103      	bne.n	8009a5a <UART_SetConfig+0xf6>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	695b      	ldr	r3, [r3, #20]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d104      	bne.n	8009a64 <UART_SetConfig+0x100>
 8009a5a:	f640 31be 	movw	r1, #3006	; 0xbbe
 8009a5e:	4866      	ldr	r0, [pc, #408]	; (8009bf8 <UART_SetConfig+0x294>)
 8009a60:	f7f7 faf0 	bl	8001044 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d013      	beq.n	8009a94 <UART_SetConfig+0x130>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	699b      	ldr	r3, [r3, #24]
 8009a70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a74:	d00e      	beq.n	8009a94 <UART_SetConfig+0x130>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a7e:	d009      	beq.n	8009a94 <UART_SetConfig+0x130>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	699b      	ldr	r3, [r3, #24]
 8009a84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a88:	d004      	beq.n	8009a94 <UART_SetConfig+0x130>
 8009a8a:	f640 31bf 	movw	r1, #3007	; 0xbbf
 8009a8e:	485a      	ldr	r0, [pc, #360]	; (8009bf8 <UART_SetConfig+0x294>)
 8009a90:	f7f7 fad8 	bl	8001044 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	69db      	ldr	r3, [r3, #28]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d009      	beq.n	8009ab0 <UART_SetConfig+0x14c>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	69db      	ldr	r3, [r3, #28]
 8009aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009aa4:	d004      	beq.n	8009ab0 <UART_SetConfig+0x14c>
 8009aa6:	f44f 613c 	mov.w	r1, #3008	; 0xbc0
 8009aaa:	4853      	ldr	r0, [pc, #332]	; (8009bf8 <UART_SetConfig+0x294>)
 8009aac:	f7f7 faca 	bl	8001044 <assert_failed>
#if defined(USART_PRESC_PRESCALER)
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d030      	beq.n	8009b1a <UART_SetConfig+0x1b6>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d02c      	beq.n	8009b1a <UART_SetConfig+0x1b6>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	d028      	beq.n	8009b1a <UART_SetConfig+0x1b6>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009acc:	2b03      	cmp	r3, #3
 8009ace:	d024      	beq.n	8009b1a <UART_SetConfig+0x1b6>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad4:	2b04      	cmp	r3, #4
 8009ad6:	d020      	beq.n	8009b1a <UART_SetConfig+0x1b6>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009adc:	2b05      	cmp	r3, #5
 8009ade:	d01c      	beq.n	8009b1a <UART_SetConfig+0x1b6>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae4:	2b06      	cmp	r3, #6
 8009ae6:	d018      	beq.n	8009b1a <UART_SetConfig+0x1b6>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aec:	2b07      	cmp	r3, #7
 8009aee:	d014      	beq.n	8009b1a <UART_SetConfig+0x1b6>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af4:	2b08      	cmp	r3, #8
 8009af6:	d010      	beq.n	8009b1a <UART_SetConfig+0x1b6>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afc:	2b09      	cmp	r3, #9
 8009afe:	d00c      	beq.n	8009b1a <UART_SetConfig+0x1b6>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b04:	2b0a      	cmp	r3, #10
 8009b06:	d008      	beq.n	8009b1a <UART_SetConfig+0x1b6>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0c:	2b0b      	cmp	r3, #11
 8009b0e:	d004      	beq.n	8009b1a <UART_SetConfig+0x1b6>
 8009b10:	f640 31c2 	movw	r1, #3010	; 0xbc2
 8009b14:	4838      	ldr	r0, [pc, #224]	; (8009bf8 <UART_SetConfig+0x294>)
 8009b16:	f7f7 fa95 	bl	8001044 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	689a      	ldr	r2, [r3, #8]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	431a      	orrs	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	695b      	ldr	r3, [r3, #20]
 8009b28:	431a      	orrs	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	69db      	ldr	r3, [r3, #28]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b36:	69fa      	ldr	r2, [r7, #28]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	4b2f      	ldr	r3, [pc, #188]	; (8009c00 <UART_SetConfig+0x29c>)
 8009b44:	4013      	ands	r3, r2
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	6812      	ldr	r2, [r2, #0]
 8009b4a:	69f9      	ldr	r1, [r7, #28]
 8009b4c:	430b      	orrs	r3, r1
 8009b4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	68da      	ldr	r2, [r3, #12]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	430a      	orrs	r2, r1
 8009b64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a22      	ldr	r2, [pc, #136]	; (8009bfc <UART_SetConfig+0x298>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d004      	beq.n	8009b80 <UART_SetConfig+0x21c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	69fa      	ldr	r2, [r7, #28]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009b8a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	6812      	ldr	r2, [r2, #0]
 8009b92:	69f9      	ldr	r1, [r7, #28]
 8009b94:	430b      	orrs	r3, r1
 8009b96:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9e:	f023 010f 	bic.w	r1, r3, #15
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	430a      	orrs	r2, r1
 8009bac:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a14      	ldr	r2, [pc, #80]	; (8009c04 <UART_SetConfig+0x2a0>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d12d      	bne.n	8009c14 <UART_SetConfig+0x2b0>
 8009bb8:	4b13      	ldr	r3, [pc, #76]	; (8009c08 <UART_SetConfig+0x2a4>)
 8009bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bbe:	f003 0303 	and.w	r3, r3, #3
 8009bc2:	2b03      	cmp	r3, #3
 8009bc4:	d822      	bhi.n	8009c0c <UART_SetConfig+0x2a8>
 8009bc6:	a201      	add	r2, pc, #4	; (adr r2, 8009bcc <UART_SetConfig+0x268>)
 8009bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bcc:	08009bdd 	.word	0x08009bdd
 8009bd0:	08009be9 	.word	0x08009be9
 8009bd4:	08009be3 	.word	0x08009be3
 8009bd8:	08009bef 	.word	0x08009bef
 8009bdc:	2301      	movs	r3, #1
 8009bde:	76fb      	strb	r3, [r7, #27]
 8009be0:	e0f4      	b.n	8009dcc <UART_SetConfig+0x468>
 8009be2:	2302      	movs	r3, #2
 8009be4:	76fb      	strb	r3, [r7, #27]
 8009be6:	e0f1      	b.n	8009dcc <UART_SetConfig+0x468>
 8009be8:	2304      	movs	r3, #4
 8009bea:	76fb      	strb	r3, [r7, #27]
 8009bec:	e0ee      	b.n	8009dcc <UART_SetConfig+0x468>
 8009bee:	2308      	movs	r3, #8
 8009bf0:	76fb      	strb	r3, [r7, #27]
 8009bf2:	e0eb      	b.n	8009dcc <UART_SetConfig+0x468>
 8009bf4:	00e4e1c0 	.word	0x00e4e1c0
 8009bf8:	0800e720 	.word	0x0800e720
 8009bfc:	40008000 	.word	0x40008000
 8009c00:	cfff69f3 	.word	0xcfff69f3
 8009c04:	40013800 	.word	0x40013800
 8009c08:	40021000 	.word	0x40021000
 8009c0c:	2310      	movs	r3, #16
 8009c0e:	76fb      	strb	r3, [r7, #27]
 8009c10:	bf00      	nop
 8009c12:	e0db      	b.n	8009dcc <UART_SetConfig+0x468>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4ab6      	ldr	r2, [pc, #728]	; (8009ef4 <UART_SetConfig+0x590>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d134      	bne.n	8009c88 <UART_SetConfig+0x324>
 8009c1e:	4bb6      	ldr	r3, [pc, #728]	; (8009ef8 <UART_SetConfig+0x594>)
 8009c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c24:	f003 030c 	and.w	r3, r3, #12
 8009c28:	2b0c      	cmp	r3, #12
 8009c2a:	d829      	bhi.n	8009c80 <UART_SetConfig+0x31c>
 8009c2c:	a201      	add	r2, pc, #4	; (adr r2, 8009c34 <UART_SetConfig+0x2d0>)
 8009c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c32:	bf00      	nop
 8009c34:	08009c69 	.word	0x08009c69
 8009c38:	08009c81 	.word	0x08009c81
 8009c3c:	08009c81 	.word	0x08009c81
 8009c40:	08009c81 	.word	0x08009c81
 8009c44:	08009c75 	.word	0x08009c75
 8009c48:	08009c81 	.word	0x08009c81
 8009c4c:	08009c81 	.word	0x08009c81
 8009c50:	08009c81 	.word	0x08009c81
 8009c54:	08009c6f 	.word	0x08009c6f
 8009c58:	08009c81 	.word	0x08009c81
 8009c5c:	08009c81 	.word	0x08009c81
 8009c60:	08009c81 	.word	0x08009c81
 8009c64:	08009c7b 	.word	0x08009c7b
 8009c68:	2300      	movs	r3, #0
 8009c6a:	76fb      	strb	r3, [r7, #27]
 8009c6c:	e0ae      	b.n	8009dcc <UART_SetConfig+0x468>
 8009c6e:	2302      	movs	r3, #2
 8009c70:	76fb      	strb	r3, [r7, #27]
 8009c72:	e0ab      	b.n	8009dcc <UART_SetConfig+0x468>
 8009c74:	2304      	movs	r3, #4
 8009c76:	76fb      	strb	r3, [r7, #27]
 8009c78:	e0a8      	b.n	8009dcc <UART_SetConfig+0x468>
 8009c7a:	2308      	movs	r3, #8
 8009c7c:	76fb      	strb	r3, [r7, #27]
 8009c7e:	e0a5      	b.n	8009dcc <UART_SetConfig+0x468>
 8009c80:	2310      	movs	r3, #16
 8009c82:	76fb      	strb	r3, [r7, #27]
 8009c84:	bf00      	nop
 8009c86:	e0a1      	b.n	8009dcc <UART_SetConfig+0x468>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a9b      	ldr	r2, [pc, #620]	; (8009efc <UART_SetConfig+0x598>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d120      	bne.n	8009cd4 <UART_SetConfig+0x370>
 8009c92:	4b99      	ldr	r3, [pc, #612]	; (8009ef8 <UART_SetConfig+0x594>)
 8009c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009c9c:	2b10      	cmp	r3, #16
 8009c9e:	d00f      	beq.n	8009cc0 <UART_SetConfig+0x35c>
 8009ca0:	2b10      	cmp	r3, #16
 8009ca2:	d802      	bhi.n	8009caa <UART_SetConfig+0x346>
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d005      	beq.n	8009cb4 <UART_SetConfig+0x350>
 8009ca8:	e010      	b.n	8009ccc <UART_SetConfig+0x368>
 8009caa:	2b20      	cmp	r3, #32
 8009cac:	d005      	beq.n	8009cba <UART_SetConfig+0x356>
 8009cae:	2b30      	cmp	r3, #48	; 0x30
 8009cb0:	d009      	beq.n	8009cc6 <UART_SetConfig+0x362>
 8009cb2:	e00b      	b.n	8009ccc <UART_SetConfig+0x368>
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	76fb      	strb	r3, [r7, #27]
 8009cb8:	e088      	b.n	8009dcc <UART_SetConfig+0x468>
 8009cba:	2302      	movs	r3, #2
 8009cbc:	76fb      	strb	r3, [r7, #27]
 8009cbe:	e085      	b.n	8009dcc <UART_SetConfig+0x468>
 8009cc0:	2304      	movs	r3, #4
 8009cc2:	76fb      	strb	r3, [r7, #27]
 8009cc4:	e082      	b.n	8009dcc <UART_SetConfig+0x468>
 8009cc6:	2308      	movs	r3, #8
 8009cc8:	76fb      	strb	r3, [r7, #27]
 8009cca:	e07f      	b.n	8009dcc <UART_SetConfig+0x468>
 8009ccc:	2310      	movs	r3, #16
 8009cce:	76fb      	strb	r3, [r7, #27]
 8009cd0:	bf00      	nop
 8009cd2:	e07b      	b.n	8009dcc <UART_SetConfig+0x468>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a89      	ldr	r2, [pc, #548]	; (8009f00 <UART_SetConfig+0x59c>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d120      	bne.n	8009d20 <UART_SetConfig+0x3bc>
 8009cde:	4b86      	ldr	r3, [pc, #536]	; (8009ef8 <UART_SetConfig+0x594>)
 8009ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ce4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009ce8:	2b40      	cmp	r3, #64	; 0x40
 8009cea:	d00f      	beq.n	8009d0c <UART_SetConfig+0x3a8>
 8009cec:	2b40      	cmp	r3, #64	; 0x40
 8009cee:	d802      	bhi.n	8009cf6 <UART_SetConfig+0x392>
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d005      	beq.n	8009d00 <UART_SetConfig+0x39c>
 8009cf4:	e010      	b.n	8009d18 <UART_SetConfig+0x3b4>
 8009cf6:	2b80      	cmp	r3, #128	; 0x80
 8009cf8:	d005      	beq.n	8009d06 <UART_SetConfig+0x3a2>
 8009cfa:	2bc0      	cmp	r3, #192	; 0xc0
 8009cfc:	d009      	beq.n	8009d12 <UART_SetConfig+0x3ae>
 8009cfe:	e00b      	b.n	8009d18 <UART_SetConfig+0x3b4>
 8009d00:	2300      	movs	r3, #0
 8009d02:	76fb      	strb	r3, [r7, #27]
 8009d04:	e062      	b.n	8009dcc <UART_SetConfig+0x468>
 8009d06:	2302      	movs	r3, #2
 8009d08:	76fb      	strb	r3, [r7, #27]
 8009d0a:	e05f      	b.n	8009dcc <UART_SetConfig+0x468>
 8009d0c:	2304      	movs	r3, #4
 8009d0e:	76fb      	strb	r3, [r7, #27]
 8009d10:	e05c      	b.n	8009dcc <UART_SetConfig+0x468>
 8009d12:	2308      	movs	r3, #8
 8009d14:	76fb      	strb	r3, [r7, #27]
 8009d16:	e059      	b.n	8009dcc <UART_SetConfig+0x468>
 8009d18:	2310      	movs	r3, #16
 8009d1a:	76fb      	strb	r3, [r7, #27]
 8009d1c:	bf00      	nop
 8009d1e:	e055      	b.n	8009dcc <UART_SetConfig+0x468>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a77      	ldr	r2, [pc, #476]	; (8009f04 <UART_SetConfig+0x5a0>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d124      	bne.n	8009d74 <UART_SetConfig+0x410>
 8009d2a:	4b73      	ldr	r3, [pc, #460]	; (8009ef8 <UART_SetConfig+0x594>)
 8009d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d38:	d012      	beq.n	8009d60 <UART_SetConfig+0x3fc>
 8009d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d3e:	d802      	bhi.n	8009d46 <UART_SetConfig+0x3e2>
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d007      	beq.n	8009d54 <UART_SetConfig+0x3f0>
 8009d44:	e012      	b.n	8009d6c <UART_SetConfig+0x408>
 8009d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d4a:	d006      	beq.n	8009d5a <UART_SetConfig+0x3f6>
 8009d4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d50:	d009      	beq.n	8009d66 <UART_SetConfig+0x402>
 8009d52:	e00b      	b.n	8009d6c <UART_SetConfig+0x408>
 8009d54:	2300      	movs	r3, #0
 8009d56:	76fb      	strb	r3, [r7, #27]
 8009d58:	e038      	b.n	8009dcc <UART_SetConfig+0x468>
 8009d5a:	2302      	movs	r3, #2
 8009d5c:	76fb      	strb	r3, [r7, #27]
 8009d5e:	e035      	b.n	8009dcc <UART_SetConfig+0x468>
 8009d60:	2304      	movs	r3, #4
 8009d62:	76fb      	strb	r3, [r7, #27]
 8009d64:	e032      	b.n	8009dcc <UART_SetConfig+0x468>
 8009d66:	2308      	movs	r3, #8
 8009d68:	76fb      	strb	r3, [r7, #27]
 8009d6a:	e02f      	b.n	8009dcc <UART_SetConfig+0x468>
 8009d6c:	2310      	movs	r3, #16
 8009d6e:	76fb      	strb	r3, [r7, #27]
 8009d70:	bf00      	nop
 8009d72:	e02b      	b.n	8009dcc <UART_SetConfig+0x468>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a63      	ldr	r2, [pc, #396]	; (8009f08 <UART_SetConfig+0x5a4>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d124      	bne.n	8009dc8 <UART_SetConfig+0x464>
 8009d7e:	4b5e      	ldr	r3, [pc, #376]	; (8009ef8 <UART_SetConfig+0x594>)
 8009d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d8c:	d012      	beq.n	8009db4 <UART_SetConfig+0x450>
 8009d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d92:	d802      	bhi.n	8009d9a <UART_SetConfig+0x436>
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d007      	beq.n	8009da8 <UART_SetConfig+0x444>
 8009d98:	e012      	b.n	8009dc0 <UART_SetConfig+0x45c>
 8009d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d9e:	d006      	beq.n	8009dae <UART_SetConfig+0x44a>
 8009da0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009da4:	d009      	beq.n	8009dba <UART_SetConfig+0x456>
 8009da6:	e00b      	b.n	8009dc0 <UART_SetConfig+0x45c>
 8009da8:	2300      	movs	r3, #0
 8009daa:	76fb      	strb	r3, [r7, #27]
 8009dac:	e00e      	b.n	8009dcc <UART_SetConfig+0x468>
 8009dae:	2302      	movs	r3, #2
 8009db0:	76fb      	strb	r3, [r7, #27]
 8009db2:	e00b      	b.n	8009dcc <UART_SetConfig+0x468>
 8009db4:	2304      	movs	r3, #4
 8009db6:	76fb      	strb	r3, [r7, #27]
 8009db8:	e008      	b.n	8009dcc <UART_SetConfig+0x468>
 8009dba:	2308      	movs	r3, #8
 8009dbc:	76fb      	strb	r3, [r7, #27]
 8009dbe:	e005      	b.n	8009dcc <UART_SetConfig+0x468>
 8009dc0:	2310      	movs	r3, #16
 8009dc2:	76fb      	strb	r3, [r7, #27]
 8009dc4:	bf00      	nop
 8009dc6:	e001      	b.n	8009dcc <UART_SetConfig+0x468>
 8009dc8:	2310      	movs	r3, #16
 8009dca:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a4d      	ldr	r2, [pc, #308]	; (8009f08 <UART_SetConfig+0x5a4>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	f040 809e 	bne.w	8009f14 <UART_SetConfig+0x5b0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009dd8:	7efb      	ldrb	r3, [r7, #27]
 8009dda:	2b08      	cmp	r3, #8
 8009ddc:	d823      	bhi.n	8009e26 <UART_SetConfig+0x4c2>
 8009dde:	a201      	add	r2, pc, #4	; (adr r2, 8009de4 <UART_SetConfig+0x480>)
 8009de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de4:	08009e09 	.word	0x08009e09
 8009de8:	08009e27 	.word	0x08009e27
 8009dec:	08009e11 	.word	0x08009e11
 8009df0:	08009e27 	.word	0x08009e27
 8009df4:	08009e17 	.word	0x08009e17
 8009df8:	08009e27 	.word	0x08009e27
 8009dfc:	08009e27 	.word	0x08009e27
 8009e00:	08009e27 	.word	0x08009e27
 8009e04:	08009e1f 	.word	0x08009e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e08:	f7fc fade 	bl	80063c8 <HAL_RCC_GetPCLK1Freq>
 8009e0c:	6178      	str	r0, [r7, #20]
        break;
 8009e0e:	e00f      	b.n	8009e30 <UART_SetConfig+0x4cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e10:	4b3e      	ldr	r3, [pc, #248]	; (8009f0c <UART_SetConfig+0x5a8>)
 8009e12:	617b      	str	r3, [r7, #20]
        break;
 8009e14:	e00c      	b.n	8009e30 <UART_SetConfig+0x4cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e16:	f7fc fa41 	bl	800629c <HAL_RCC_GetSysClockFreq>
 8009e1a:	6178      	str	r0, [r7, #20]
        break;
 8009e1c:	e008      	b.n	8009e30 <UART_SetConfig+0x4cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e22:	617b      	str	r3, [r7, #20]
        break;
 8009e24:	e004      	b.n	8009e30 <UART_SetConfig+0x4cc>
      default:
        pclk = 0U;
 8009e26:	2300      	movs	r3, #0
 8009e28:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	76bb      	strb	r3, [r7, #26]
        break;
 8009e2e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f000 812e 	beq.w	800a094 <UART_SetConfig+0x730>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3c:	4a34      	ldr	r2, [pc, #208]	; (8009f10 <UART_SetConfig+0x5ac>)
 8009e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e42:	461a      	mov	r2, r3
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e4a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	685a      	ldr	r2, [r3, #4]
 8009e50:	4613      	mov	r3, r2
 8009e52:	005b      	lsls	r3, r3, #1
 8009e54:	4413      	add	r3, r2
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d305      	bcc.n	8009e68 <UART_SetConfig+0x504>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d902      	bls.n	8009e6e <UART_SetConfig+0x50a>
      {
        ret = HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	76bb      	strb	r3, [r7, #26]
 8009e6c:	e112      	b.n	800a094 <UART_SetConfig+0x730>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	4618      	mov	r0, r3
 8009e72:	f04f 0100 	mov.w	r1, #0
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7a:	4a25      	ldr	r2, [pc, #148]	; (8009f10 <UART_SetConfig+0x5ac>)
 8009e7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	f04f 0400 	mov.w	r4, #0
 8009e86:	461a      	mov	r2, r3
 8009e88:	4623      	mov	r3, r4
 8009e8a:	f7f6 f9b9 	bl	8000200 <__aeabi_uldivmod>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	460c      	mov	r4, r1
 8009e92:	4619      	mov	r1, r3
 8009e94:	4622      	mov	r2, r4
 8009e96:	f04f 0300 	mov.w	r3, #0
 8009e9a:	f04f 0400 	mov.w	r4, #0
 8009e9e:	0214      	lsls	r4, r2, #8
 8009ea0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009ea4:	020b      	lsls	r3, r1, #8
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	6852      	ldr	r2, [r2, #4]
 8009eaa:	0852      	lsrs	r2, r2, #1
 8009eac:	4611      	mov	r1, r2
 8009eae:	f04f 0200 	mov.w	r2, #0
 8009eb2:	eb13 0b01 	adds.w	fp, r3, r1
 8009eb6:	eb44 0c02 	adc.w	ip, r4, r2
 8009eba:	4658      	mov	r0, fp
 8009ebc:	4661      	mov	r1, ip
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	f04f 0400 	mov.w	r4, #0
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	4623      	mov	r3, r4
 8009eca:	f7f6 f999 	bl	8000200 <__aeabi_uldivmod>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009eda:	d308      	bcc.n	8009eee <UART_SetConfig+0x58a>
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ee2:	d204      	bcs.n	8009eee <UART_SetConfig+0x58a>
        {
          huart->Instance->BRR = usartdiv;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	693a      	ldr	r2, [r7, #16]
 8009eea:	60da      	str	r2, [r3, #12]
 8009eec:	e0d2      	b.n	800a094 <UART_SetConfig+0x730>
        }
        else
        {
          ret = HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	76bb      	strb	r3, [r7, #26]
 8009ef2:	e0cf      	b.n	800a094 <UART_SetConfig+0x730>
 8009ef4:	40004400 	.word	0x40004400
 8009ef8:	40021000 	.word	0x40021000
 8009efc:	40004800 	.word	0x40004800
 8009f00:	40004c00 	.word	0x40004c00
 8009f04:	40005000 	.word	0x40005000
 8009f08:	40008000 	.word	0x40008000
 8009f0c:	00f42400 	.word	0x00f42400
 8009f10:	0800e918 	.word	0x0800e918
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	69db      	ldr	r3, [r3, #28]
 8009f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f1c:	d165      	bne.n	8009fea <UART_SetConfig+0x686>
  {
    switch (clocksource)
 8009f1e:	7efb      	ldrb	r3, [r7, #27]
 8009f20:	2b08      	cmp	r3, #8
 8009f22:	d828      	bhi.n	8009f76 <UART_SetConfig+0x612>
 8009f24:	a201      	add	r2, pc, #4	; (adr r2, 8009f2c <UART_SetConfig+0x5c8>)
 8009f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f2a:	bf00      	nop
 8009f2c:	08009f51 	.word	0x08009f51
 8009f30:	08009f59 	.word	0x08009f59
 8009f34:	08009f61 	.word	0x08009f61
 8009f38:	08009f77 	.word	0x08009f77
 8009f3c:	08009f67 	.word	0x08009f67
 8009f40:	08009f77 	.word	0x08009f77
 8009f44:	08009f77 	.word	0x08009f77
 8009f48:	08009f77 	.word	0x08009f77
 8009f4c:	08009f6f 	.word	0x08009f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f50:	f7fc fa3a 	bl	80063c8 <HAL_RCC_GetPCLK1Freq>
 8009f54:	6178      	str	r0, [r7, #20]
        break;
 8009f56:	e013      	b.n	8009f80 <UART_SetConfig+0x61c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f58:	f7fc fa4c 	bl	80063f4 <HAL_RCC_GetPCLK2Freq>
 8009f5c:	6178      	str	r0, [r7, #20]
        break;
 8009f5e:	e00f      	b.n	8009f80 <UART_SetConfig+0x61c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f60:	4b56      	ldr	r3, [pc, #344]	; (800a0bc <UART_SetConfig+0x758>)
 8009f62:	617b      	str	r3, [r7, #20]
        break;
 8009f64:	e00c      	b.n	8009f80 <UART_SetConfig+0x61c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f66:	f7fc f999 	bl	800629c <HAL_RCC_GetSysClockFreq>
 8009f6a:	6178      	str	r0, [r7, #20]
        break;
 8009f6c:	e008      	b.n	8009f80 <UART_SetConfig+0x61c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f72:	617b      	str	r3, [r7, #20]
        break;
 8009f74:	e004      	b.n	8009f80 <UART_SetConfig+0x61c>
      default:
        pclk = 0U;
 8009f76:	2300      	movs	r3, #0
 8009f78:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	76bb      	strb	r3, [r7, #26]
        break;
 8009f7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f000 8086 	beq.w	800a094 <UART_SetConfig+0x730>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8c:	4a4c      	ldr	r2, [pc, #304]	; (800a0c0 <UART_SetConfig+0x75c>)
 8009f8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f92:	461a      	mov	r2, r3
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f9a:	005a      	lsls	r2, r3, #1
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	085b      	lsrs	r3, r3, #1
 8009fa2:	441a      	add	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	2b0f      	cmp	r3, #15
 8009fb4:	d916      	bls.n	8009fe4 <UART_SetConfig+0x680>
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fbc:	d212      	bcs.n	8009fe4 <UART_SetConfig+0x680>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	f023 030f 	bic.w	r3, r3, #15
 8009fc6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	085b      	lsrs	r3, r3, #1
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	f003 0307 	and.w	r3, r3, #7
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	89fb      	ldrh	r3, [r7, #14]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	89fa      	ldrh	r2, [r7, #14]
 8009fe0:	60da      	str	r2, [r3, #12]
 8009fe2:	e057      	b.n	800a094 <UART_SetConfig+0x730>
      }
      else
      {
        ret = HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	76bb      	strb	r3, [r7, #26]
 8009fe8:	e054      	b.n	800a094 <UART_SetConfig+0x730>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009fea:	7efb      	ldrb	r3, [r7, #27]
 8009fec:	2b08      	cmp	r3, #8
 8009fee:	d828      	bhi.n	800a042 <UART_SetConfig+0x6de>
 8009ff0:	a201      	add	r2, pc, #4	; (adr r2, 8009ff8 <UART_SetConfig+0x694>)
 8009ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff6:	bf00      	nop
 8009ff8:	0800a01d 	.word	0x0800a01d
 8009ffc:	0800a025 	.word	0x0800a025
 800a000:	0800a02d 	.word	0x0800a02d
 800a004:	0800a043 	.word	0x0800a043
 800a008:	0800a033 	.word	0x0800a033
 800a00c:	0800a043 	.word	0x0800a043
 800a010:	0800a043 	.word	0x0800a043
 800a014:	0800a043 	.word	0x0800a043
 800a018:	0800a03b 	.word	0x0800a03b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a01c:	f7fc f9d4 	bl	80063c8 <HAL_RCC_GetPCLK1Freq>
 800a020:	6178      	str	r0, [r7, #20]
        break;
 800a022:	e013      	b.n	800a04c <UART_SetConfig+0x6e8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a024:	f7fc f9e6 	bl	80063f4 <HAL_RCC_GetPCLK2Freq>
 800a028:	6178      	str	r0, [r7, #20]
        break;
 800a02a:	e00f      	b.n	800a04c <UART_SetConfig+0x6e8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a02c:	4b23      	ldr	r3, [pc, #140]	; (800a0bc <UART_SetConfig+0x758>)
 800a02e:	617b      	str	r3, [r7, #20]
        break;
 800a030:	e00c      	b.n	800a04c <UART_SetConfig+0x6e8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a032:	f7fc f933 	bl	800629c <HAL_RCC_GetSysClockFreq>
 800a036:	6178      	str	r0, [r7, #20]
        break;
 800a038:	e008      	b.n	800a04c <UART_SetConfig+0x6e8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a03a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a03e:	617b      	str	r3, [r7, #20]
        break;
 800a040:	e004      	b.n	800a04c <UART_SetConfig+0x6e8>
      default:
        pclk = 0U;
 800a042:	2300      	movs	r3, #0
 800a044:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	76bb      	strb	r3, [r7, #26]
        break;
 800a04a:	bf00      	nop
    }

    if (pclk != 0U)
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d020      	beq.n	800a094 <UART_SetConfig+0x730>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a056:	4a1a      	ldr	r2, [pc, #104]	; (800a0c0 <UART_SetConfig+0x75c>)
 800a058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a05c:	461a      	mov	r2, r3
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	fbb3 f2f2 	udiv	r2, r3, r2
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	085b      	lsrs	r3, r3, #1
 800a06a:	441a      	add	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	fbb2 f3f3 	udiv	r3, r2, r3
 800a074:	b29b      	uxth	r3, r3
 800a076:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	2b0f      	cmp	r3, #15
 800a07c:	d908      	bls.n	800a090 <UART_SetConfig+0x72c>
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a084:	d204      	bcs.n	800a090 <UART_SetConfig+0x72c>
      {
        huart->Instance->BRR = usartdiv;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	693a      	ldr	r2, [r7, #16]
 800a08c:	60da      	str	r2, [r3, #12]
 800a08e:	e001      	b.n	800a094 <UART_SetConfig+0x730>
      }
      else
      {
        ret = HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a0b0:	7ebb      	ldrb	r3, [r7, #26]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3720      	adds	r7, #32
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a0bc:	00f42400 	.word	0x00f42400
 800a0c0:	0800e918 	.word	0x0800e918

0800a0c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d0:	2bff      	cmp	r3, #255	; 0xff
 800a0d2:	d904      	bls.n	800a0de <UART_AdvFeatureConfig+0x1a>
 800a0d4:	f640 41a8 	movw	r1, #3240	; 0xca8
 800a0d8:	489b      	ldr	r0, [pc, #620]	; (800a348 <UART_AdvFeatureConfig+0x284>)
 800a0da:	f7f6 ffb3 	bl	8001044 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e2:	f003 0301 	and.w	r3, r3, #1
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d018      	beq.n	800a11c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d009      	beq.n	800a106 <UART_AdvFeatureConfig+0x42>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0fa:	d004      	beq.n	800a106 <UART_AdvFeatureConfig+0x42>
 800a0fc:	f640 41ad 	movw	r1, #3245	; 0xcad
 800a100:	4891      	ldr	r0, [pc, #580]	; (800a348 <UART_AdvFeatureConfig+0x284>)
 800a102:	f7f6 ff9f 	bl	8001044 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	430a      	orrs	r2, r1
 800a11a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a120:	f003 0302 	and.w	r3, r3, #2
 800a124:	2b00      	cmp	r3, #0
 800a126:	d018      	beq.n	800a15a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d009      	beq.n	800a144 <UART_AdvFeatureConfig+0x80>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a138:	d004      	beq.n	800a144 <UART_AdvFeatureConfig+0x80>
 800a13a:	f640 41b4 	movw	r1, #3252	; 0xcb4
 800a13e:	4882      	ldr	r0, [pc, #520]	; (800a348 <UART_AdvFeatureConfig+0x284>)
 800a140:	f7f6 ff80 	bl	8001044 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	430a      	orrs	r2, r1
 800a158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a15e:	f003 0304 	and.w	r3, r3, #4
 800a162:	2b00      	cmp	r3, #0
 800a164:	d018      	beq.n	800a198 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d009      	beq.n	800a182 <UART_AdvFeatureConfig+0xbe>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a172:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a176:	d004      	beq.n	800a182 <UART_AdvFeatureConfig+0xbe>
 800a178:	f640 41bb 	movw	r1, #3259	; 0xcbb
 800a17c:	4872      	ldr	r0, [pc, #456]	; (800a348 <UART_AdvFeatureConfig+0x284>)
 800a17e:	f7f6 ff61 	bl	8001044 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	430a      	orrs	r2, r1
 800a196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a19c:	f003 0308 	and.w	r3, r3, #8
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d018      	beq.n	800a1d6 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d009      	beq.n	800a1c0 <UART_AdvFeatureConfig+0xfc>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1b4:	d004      	beq.n	800a1c0 <UART_AdvFeatureConfig+0xfc>
 800a1b6:	f640 41c2 	movw	r1, #3266	; 0xcc2
 800a1ba:	4863      	ldr	r0, [pc, #396]	; (800a348 <UART_AdvFeatureConfig+0x284>)
 800a1bc:	f7f6 ff42 	bl	8001044 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	430a      	orrs	r2, r1
 800a1d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1da:	f003 0310 	and.w	r3, r3, #16
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d018      	beq.n	800a214 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d009      	beq.n	800a1fe <UART_AdvFeatureConfig+0x13a>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1f2:	d004      	beq.n	800a1fe <UART_AdvFeatureConfig+0x13a>
 800a1f4:	f640 41c9 	movw	r1, #3273	; 0xcc9
 800a1f8:	4853      	ldr	r0, [pc, #332]	; (800a348 <UART_AdvFeatureConfig+0x284>)
 800a1fa:	f7f6 ff23 	bl	8001044 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	430a      	orrs	r2, r1
 800a212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a218:	f003 0320 	and.w	r3, r3, #32
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d018      	beq.n	800a252 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a224:	2b00      	cmp	r3, #0
 800a226:	d009      	beq.n	800a23c <UART_AdvFeatureConfig+0x178>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a230:	d004      	beq.n	800a23c <UART_AdvFeatureConfig+0x178>
 800a232:	f44f 614d 	mov.w	r1, #3280	; 0xcd0
 800a236:	4844      	ldr	r0, [pc, #272]	; (800a348 <UART_AdvFeatureConfig+0x284>)
 800a238:	f7f6 ff04 	bl	8001044 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	430a      	orrs	r2, r1
 800a250:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d05e      	beq.n	800a31c <UART_AdvFeatureConfig+0x258>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a3a      	ldr	r2, [pc, #232]	; (800a34c <UART_AdvFeatureConfig+0x288>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d018      	beq.n	800a29a <UART_AdvFeatureConfig+0x1d6>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a38      	ldr	r2, [pc, #224]	; (800a350 <UART_AdvFeatureConfig+0x28c>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d013      	beq.n	800a29a <UART_AdvFeatureConfig+0x1d6>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a37      	ldr	r2, [pc, #220]	; (800a354 <UART_AdvFeatureConfig+0x290>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d00e      	beq.n	800a29a <UART_AdvFeatureConfig+0x1d6>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a35      	ldr	r2, [pc, #212]	; (800a358 <UART_AdvFeatureConfig+0x294>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d009      	beq.n	800a29a <UART_AdvFeatureConfig+0x1d6>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a34      	ldr	r2, [pc, #208]	; (800a35c <UART_AdvFeatureConfig+0x298>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d004      	beq.n	800a29a <UART_AdvFeatureConfig+0x1d6>
 800a290:	f640 41d7 	movw	r1, #3287	; 0xcd7
 800a294:	482c      	ldr	r0, [pc, #176]	; (800a348 <UART_AdvFeatureConfig+0x284>)
 800a296:	f7f6 fed5 	bl	8001044 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d009      	beq.n	800a2b6 <UART_AdvFeatureConfig+0x1f2>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2aa:	d004      	beq.n	800a2b6 <UART_AdvFeatureConfig+0x1f2>
 800a2ac:	f640 41d8 	movw	r1, #3288	; 0xcd8
 800a2b0:	4825      	ldr	r0, [pc, #148]	; (800a348 <UART_AdvFeatureConfig+0x284>)
 800a2b2:	f7f6 fec7 	bl	8001044 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	430a      	orrs	r2, r1
 800a2ca:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2d4:	d122      	bne.n	800a31c <UART_AdvFeatureConfig+0x258>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d013      	beq.n	800a306 <UART_AdvFeatureConfig+0x242>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2e6:	d00e      	beq.n	800a306 <UART_AdvFeatureConfig+0x242>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2f0:	d009      	beq.n	800a306 <UART_AdvFeatureConfig+0x242>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a2fa:	d004      	beq.n	800a306 <UART_AdvFeatureConfig+0x242>
 800a2fc:	f640 41dd 	movw	r1, #3293	; 0xcdd
 800a300:	4811      	ldr	r0, [pc, #68]	; (800a348 <UART_AdvFeatureConfig+0x284>)
 800a302:	f7f6 fe9f 	bl	8001044 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	430a      	orrs	r2, r1
 800a31a:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a324:	2b00      	cmp	r3, #0
 800a326:	d026      	beq.n	800a376 <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d017      	beq.n	800a360 <UART_AdvFeatureConfig+0x29c>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a334:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a338:	d012      	beq.n	800a360 <UART_AdvFeatureConfig+0x29c>
 800a33a:	f640 41e5 	movw	r1, #3301	; 0xce5
 800a33e:	4802      	ldr	r0, [pc, #8]	; (800a348 <UART_AdvFeatureConfig+0x284>)
 800a340:	f7f6 fe80 	bl	8001044 <assert_failed>
 800a344:	e00c      	b.n	800a360 <UART_AdvFeatureConfig+0x29c>
 800a346:	bf00      	nop
 800a348:	0800e720 	.word	0x0800e720
 800a34c:	40013800 	.word	0x40013800
 800a350:	40004400 	.word	0x40004400
 800a354:	40004800 	.word	0x40004800
 800a358:	40004c00 	.word	0x40004c00
 800a35c:	40005000 	.word	0x40005000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	430a      	orrs	r2, r1
 800a374:	605a      	str	r2, [r3, #4]
  }
}
 800a376:	bf00      	nop
 800a378:	3708      	adds	r7, #8
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop

0800a380 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b086      	sub	sp, #24
 800a384:	af02      	add	r7, sp, #8
 800a386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a390:	f7f7 fa12 	bl	80017b8 <HAL_GetTick>
 800a394:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f003 0308 	and.w	r3, r3, #8
 800a3a0:	2b08      	cmp	r3, #8
 800a3a2:	d10e      	bne.n	800a3c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3a8:	9300      	str	r3, [sp, #0]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 f82c 	bl	800a410 <UART_WaitOnFlagUntilTimeout>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3be:	2303      	movs	r3, #3
 800a3c0:	e022      	b.n	800a408 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 0304 	and.w	r3, r3, #4
 800a3cc:	2b04      	cmp	r3, #4
 800a3ce:	d10e      	bne.n	800a3ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3d4:	9300      	str	r3, [sp, #0]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 f816 	bl	800a410 <UART_WaitOnFlagUntilTimeout>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d001      	beq.n	800a3ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	e00c      	b.n	800a408 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2220      	movs	r2, #32
 800a3f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2220      	movs	r2, #32
 800a3fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a406:	2300      	movs	r3, #0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3710      	adds	r7, #16
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	603b      	str	r3, [r7, #0]
 800a41c:	4613      	mov	r3, r2
 800a41e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a420:	e062      	b.n	800a4e8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a422:	69bb      	ldr	r3, [r7, #24]
 800a424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a428:	d05e      	beq.n	800a4e8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a42a:	f7f7 f9c5 	bl	80017b8 <HAL_GetTick>
 800a42e:	4602      	mov	r2, r0
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	69ba      	ldr	r2, [r7, #24]
 800a436:	429a      	cmp	r2, r3
 800a438:	d302      	bcc.n	800a440 <UART_WaitOnFlagUntilTimeout+0x30>
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d11d      	bne.n	800a47c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a44e:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	689a      	ldr	r2, [r3, #8]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f022 0201 	bic.w	r2, r2, #1
 800a45e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2220      	movs	r2, #32
 800a464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2220      	movs	r2, #32
 800a46c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2200      	movs	r2, #0
 800a474:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a478:	2303      	movs	r3, #3
 800a47a:	e045      	b.n	800a508 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 0304 	and.w	r3, r3, #4
 800a486:	2b00      	cmp	r3, #0
 800a488:	d02e      	beq.n	800a4e8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	69db      	ldr	r3, [r3, #28]
 800a490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a498:	d126      	bne.n	800a4e8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a4a2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a4b2:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	689a      	ldr	r2, [r3, #8]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f022 0201 	bic.w	r2, r2, #1
 800a4c2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2220      	movs	r2, #32
 800a4c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2220      	movs	r2, #32
 800a4d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2220      	movs	r2, #32
 800a4d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	e00f      	b.n	800a508 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	69da      	ldr	r2, [r3, #28]
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	68ba      	ldr	r2, [r7, #8]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	bf0c      	ite	eq
 800a4f8:	2301      	moveq	r3, #1
 800a4fa:	2300      	movne	r3, #0
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	461a      	mov	r2, r3
 800a500:	79fb      	ldrb	r3, [r7, #7]
 800a502:	429a      	cmp	r2, r3
 800a504:	d08d      	beq.n	800a422 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a526:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	6812      	ldr	r2, [r2, #0]
 800a532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a536:	f023 0301 	bic.w	r3, r3, #1
 800a53a:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2220      	movs	r2, #32
 800a540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800a54a:	bf00      	nop
 800a54c:	370c      	adds	r7, #12
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr

0800a556 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b084      	sub	sp, #16
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a562:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2200      	movs	r2, #0
 800a568:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2200      	movs	r2, #0
 800a570:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a57a:	68f8      	ldr	r0, [r7, #12]
 800a57c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a57e:	bf00      	nop
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a586:	b580      	push	{r7, lr}
 800a588:	b082      	sub	sp, #8
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a59c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2220      	movs	r2, #32
 800a5a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5b6:	bf00      	nop
 800a5b8:	3708      	adds	r7, #8
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a5be:	b480      	push	{r7}
 800a5c0:	b083      	sub	sp, #12
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a5c6:	bf00      	nop
 800a5c8:	370c      	adds	r7, #12
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr

0800a5d2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a5d2:	b480      	push	{r7}
 800a5d4:	b083      	sub	sp, #12
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a5da:	bf00      	nop
 800a5dc:	370c      	adds	r7, #12
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr

0800a5e6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a5e6:	b480      	push	{r7}
 800a5e8:	b083      	sub	sp, #12
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a5ee:	bf00      	nop
 800a5f0:	370c      	adds	r7, #12
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr
	...

0800a5fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a29      	ldr	r2, [pc, #164]	; (800a6b0 <HAL_UARTEx_DisableFifoMode+0xb4>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d01d      	beq.n	800a64a <HAL_UARTEx_DisableFifoMode+0x4e>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a28      	ldr	r2, [pc, #160]	; (800a6b4 <HAL_UARTEx_DisableFifoMode+0xb8>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d018      	beq.n	800a64a <HAL_UARTEx_DisableFifoMode+0x4e>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a26      	ldr	r2, [pc, #152]	; (800a6b8 <HAL_UARTEx_DisableFifoMode+0xbc>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d013      	beq.n	800a64a <HAL_UARTEx_DisableFifoMode+0x4e>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a25      	ldr	r2, [pc, #148]	; (800a6bc <HAL_UARTEx_DisableFifoMode+0xc0>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d00e      	beq.n	800a64a <HAL_UARTEx_DisableFifoMode+0x4e>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a23      	ldr	r2, [pc, #140]	; (800a6c0 <HAL_UARTEx_DisableFifoMode+0xc4>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d009      	beq.n	800a64a <HAL_UARTEx_DisableFifoMode+0x4e>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a22      	ldr	r2, [pc, #136]	; (800a6c4 <HAL_UARTEx_DisableFifoMode+0xc8>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d004      	beq.n	800a64a <HAL_UARTEx_DisableFifoMode+0x4e>
 800a640:	f240 2146 	movw	r1, #582	; 0x246
 800a644:	4820      	ldr	r0, [pc, #128]	; (800a6c8 <HAL_UARTEx_DisableFifoMode+0xcc>)
 800a646:	f7f6 fcfd 	bl	8001044 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a650:	2b01      	cmp	r3, #1
 800a652:	d101      	bne.n	800a658 <HAL_UARTEx_DisableFifoMode+0x5c>
 800a654:	2302      	movs	r3, #2
 800a656:	e027      	b.n	800a6a8 <HAL_UARTEx_DisableFifoMode+0xac>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2201      	movs	r2, #1
 800a65c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2224      	movs	r2, #36	; 0x24
 800a664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f022 0201 	bic.w	r2, r2, #1
 800a67e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a686:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2220      	movs	r2, #32
 800a69a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	40013800 	.word	0x40013800
 800a6b4:	40004400 	.word	0x40004400
 800a6b8:	40004800 	.word	0x40004800
 800a6bc:	40004c00 	.word	0x40004c00
 800a6c0:	40005000 	.word	0x40005000
 800a6c4:	40008000 	.word	0x40008000
 800a6c8:	0800e75c 	.word	0x0800e75c

0800a6cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a3b      	ldr	r2, [pc, #236]	; (800a7c8 <HAL_UARTEx_SetTxFifoThreshold+0xfc>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d01d      	beq.n	800a71c <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a39      	ldr	r2, [pc, #228]	; (800a7cc <HAL_UARTEx_SetTxFifoThreshold+0x100>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d018      	beq.n	800a71c <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a38      	ldr	r2, [pc, #224]	; (800a7d0 <HAL_UARTEx_SetTxFifoThreshold+0x104>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d013      	beq.n	800a71c <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a36      	ldr	r2, [pc, #216]	; (800a7d4 <HAL_UARTEx_SetTxFifoThreshold+0x108>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d00e      	beq.n	800a71c <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a35      	ldr	r2, [pc, #212]	; (800a7d8 <HAL_UARTEx_SetTxFifoThreshold+0x10c>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d009      	beq.n	800a71c <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a33      	ldr	r2, [pc, #204]	; (800a7dc <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d004      	beq.n	800a71c <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800a712:	f44f 711d 	mov.w	r1, #628	; 0x274
 800a716:	4832      	ldr	r0, [pc, #200]	; (800a7e0 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 800a718:	f7f6 fc94 	bl	8001044 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d018      	beq.n	800a754 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a728:	d014      	beq.n	800a754 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a730:	d010      	beq.n	800a754 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800a738:	d00c      	beq.n	800a754 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a740:	d008      	beq.n	800a754 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 800a748:	d004      	beq.n	800a754 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800a74a:	f240 2175 	movw	r1, #629	; 0x275
 800a74e:	4824      	ldr	r0, [pc, #144]	; (800a7e0 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 800a750:	f7f6 fc78 	bl	8001044 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d101      	bne.n	800a762 <HAL_UARTEx_SetTxFifoThreshold+0x96>
 800a75e:	2302      	movs	r3, #2
 800a760:	e02d      	b.n	800a7be <HAL_UARTEx_SetTxFifoThreshold+0xf2>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2201      	movs	r2, #1
 800a766:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2224      	movs	r2, #36	; 0x24
 800a76e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f022 0201 	bic.w	r2, r2, #1
 800a788:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	683a      	ldr	r2, [r7, #0]
 800a79a:	430a      	orrs	r2, r1
 800a79c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 f8ac 	bl	800a8fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2220      	movs	r2, #32
 800a7b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a7bc:	2300      	movs	r3, #0
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	40013800 	.word	0x40013800
 800a7cc:	40004400 	.word	0x40004400
 800a7d0:	40004800 	.word	0x40004800
 800a7d4:	40004c00 	.word	0x40004c00
 800a7d8:	40005000 	.word	0x40005000
 800a7dc:	40008000 	.word	0x40008000
 800a7e0:	0800e75c 	.word	0x0800e75c

0800a7e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a3b      	ldr	r2, [pc, #236]	; (800a8e0 <HAL_UARTEx_SetRxFifoThreshold+0xfc>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d01d      	beq.n	800a834 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a39      	ldr	r2, [pc, #228]	; (800a8e4 <HAL_UARTEx_SetRxFifoThreshold+0x100>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d018      	beq.n	800a834 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4a38      	ldr	r2, [pc, #224]	; (800a8e8 <HAL_UARTEx_SetRxFifoThreshold+0x104>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d013      	beq.n	800a834 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a36      	ldr	r2, [pc, #216]	; (800a8ec <HAL_UARTEx_SetRxFifoThreshold+0x108>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d00e      	beq.n	800a834 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a35      	ldr	r2, [pc, #212]	; (800a8f0 <HAL_UARTEx_SetRxFifoThreshold+0x10c>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d009      	beq.n	800a834 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a33      	ldr	r2, [pc, #204]	; (800a8f4 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d004      	beq.n	800a834 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800a82a:	f240 21a5 	movw	r1, #677	; 0x2a5
 800a82e:	4832      	ldr	r0, [pc, #200]	; (800a8f8 <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 800a830:	f7f6 fc08 	bl	8001044 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d018      	beq.n	800a86c <HAL_UARTEx_SetRxFifoThreshold+0x88>
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a840:	d014      	beq.n	800a86c <HAL_UARTEx_SetRxFifoThreshold+0x88>
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a848:	d010      	beq.n	800a86c <HAL_UARTEx_SetRxFifoThreshold+0x88>
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800a850:	d00c      	beq.n	800a86c <HAL_UARTEx_SetRxFifoThreshold+0x88>
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a858:	d008      	beq.n	800a86c <HAL_UARTEx_SetRxFifoThreshold+0x88>
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800a860:	d004      	beq.n	800a86c <HAL_UARTEx_SetRxFifoThreshold+0x88>
 800a862:	f240 21a6 	movw	r1, #678	; 0x2a6
 800a866:	4824      	ldr	r0, [pc, #144]	; (800a8f8 <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 800a868:	f7f6 fbec 	bl	8001044 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a872:	2b01      	cmp	r3, #1
 800a874:	d101      	bne.n	800a87a <HAL_UARTEx_SetRxFifoThreshold+0x96>
 800a876:	2302      	movs	r3, #2
 800a878:	e02d      	b.n	800a8d6 <HAL_UARTEx_SetRxFifoThreshold+0xf2>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2224      	movs	r2, #36	; 0x24
 800a886:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f022 0201 	bic.w	r2, r2, #1
 800a8a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	683a      	ldr	r2, [r7, #0]
 800a8b2:	430a      	orrs	r2, r1
 800a8b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 f820 	bl	800a8fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	68fa      	ldr	r2, [r7, #12]
 800a8c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2220      	movs	r2, #32
 800a8c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	40013800 	.word	0x40013800
 800a8e4:	40004400 	.word	0x40004400
 800a8e8:	40004800 	.word	0x40004800
 800a8ec:	40004c00 	.word	0x40004c00
 800a8f0:	40005000 	.word	0x40005000
 800a8f4:	40008000 	.word	0x40008000
 800a8f8:	0800e75c 	.word	0x0800e75c

0800a8fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b089      	sub	sp, #36	; 0x24
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a904:	4a2f      	ldr	r2, [pc, #188]	; (800a9c4 <UARTEx_SetNbDataToProcess+0xc8>)
 800a906:	f107 0314 	add.w	r3, r7, #20
 800a90a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a90e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a912:	4a2d      	ldr	r2, [pc, #180]	; (800a9c8 <UARTEx_SetNbDataToProcess+0xcc>)
 800a914:	f107 030c 	add.w	r3, r7, #12
 800a918:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a91c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a924:	2b00      	cmp	r3, #0
 800a926:	d108      	bne.n	800a93a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a938:	e03d      	b.n	800a9b6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a93a:	2308      	movs	r3, #8
 800a93c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a93e:	2308      	movs	r3, #8
 800a940:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	0e5b      	lsrs	r3, r3, #25
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	f003 0307 	and.w	r3, r3, #7
 800a950:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	0f5b      	lsrs	r3, r3, #29
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	f003 0307 	and.w	r3, r3, #7
 800a960:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a962:	7fbb      	ldrb	r3, [r7, #30]
 800a964:	7f3a      	ldrb	r2, [r7, #28]
 800a966:	f107 0120 	add.w	r1, r7, #32
 800a96a:	440a      	add	r2, r1
 800a96c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a970:	fb02 f303 	mul.w	r3, r2, r3
 800a974:	7f3a      	ldrb	r2, [r7, #28]
 800a976:	f107 0120 	add.w	r1, r7, #32
 800a97a:	440a      	add	r2, r1
 800a97c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a980:	fb93 f3f2 	sdiv	r3, r3, r2
 800a984:	b29a      	uxth	r2, r3
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a98c:	7ffb      	ldrb	r3, [r7, #31]
 800a98e:	7f7a      	ldrb	r2, [r7, #29]
 800a990:	f107 0120 	add.w	r1, r7, #32
 800a994:	440a      	add	r2, r1
 800a996:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a99a:	fb02 f303 	mul.w	r3, r2, r3
 800a99e:	7f7a      	ldrb	r2, [r7, #29]
 800a9a0:	f107 0120 	add.w	r1, r7, #32
 800a9a4:	440a      	add	r2, r1
 800a9a6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a9aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a9b6:	bf00      	nop
 800a9b8:	3724      	adds	r7, #36	; 0x24
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	0800e798 	.word	0x0800e798
 800a9c8:	0800e7a0 	.word	0x0800e7a0

0800a9cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a9cc:	b480      	push	{r7}
 800a9ce:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a9d0:	bf00      	nop
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr
	...

0800a9dc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9e2:	f3ef 8305 	mrs	r3, IPSR
 800a9e6:	60bb      	str	r3, [r7, #8]
  return(result);
 800a9e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d10f      	bne.n	800aa0e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9ee:	f3ef 8310 	mrs	r3, PRIMASK
 800a9f2:	607b      	str	r3, [r7, #4]
  return(result);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d105      	bne.n	800aa06 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a9fa:	f3ef 8311 	mrs	r3, BASEPRI
 800a9fe:	603b      	str	r3, [r7, #0]
  return(result);
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d007      	beq.n	800aa16 <osKernelInitialize+0x3a>
 800aa06:	4b0e      	ldr	r3, [pc, #56]	; (800aa40 <osKernelInitialize+0x64>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2b02      	cmp	r3, #2
 800aa0c:	d103      	bne.n	800aa16 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800aa0e:	f06f 0305 	mvn.w	r3, #5
 800aa12:	60fb      	str	r3, [r7, #12]
 800aa14:	e00f      	b.n	800aa36 <osKernelInitialize+0x5a>
  }
  else {
    if (KernelState == osKernelInactive) {
 800aa16:	4b0a      	ldr	r3, [pc, #40]	; (800aa40 <osKernelInitialize+0x64>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d108      	bne.n	800aa30 <osKernelInitialize+0x54>
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 800aa1e:	4809      	ldr	r0, [pc, #36]	; (800aa44 <osKernelInitialize+0x68>)
 800aa20:	f003 f930 	bl	800dc84 <vPortDefineHeapRegions>
      KernelState = osKernelReady;
 800aa24:	4b06      	ldr	r3, [pc, #24]	; (800aa40 <osKernelInitialize+0x64>)
 800aa26:	2201      	movs	r2, #1
 800aa28:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	60fb      	str	r3, [r7, #12]
 800aa2e:	e002      	b.n	800aa36 <osKernelInitialize+0x5a>
    } else {
      stat = osError;
 800aa30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa34:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800aa36:	68fb      	ldr	r3, [r7, #12]
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3710      	adds	r7, #16
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	2000097c 	.word	0x2000097c
 800aa44:	200000c0 	.word	0x200000c0

0800aa48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa4e:	f3ef 8305 	mrs	r3, IPSR
 800aa52:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d10f      	bne.n	800aa7a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa5a:	f3ef 8310 	mrs	r3, PRIMASK
 800aa5e:	607b      	str	r3, [r7, #4]
  return(result);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d105      	bne.n	800aa72 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aa66:	f3ef 8311 	mrs	r3, BASEPRI
 800aa6a:	603b      	str	r3, [r7, #0]
  return(result);
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d007      	beq.n	800aa82 <osKernelStart+0x3a>
 800aa72:	4b0f      	ldr	r3, [pc, #60]	; (800aab0 <osKernelStart+0x68>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	d103      	bne.n	800aa82 <osKernelStart+0x3a>
    stat = osErrorISR;
 800aa7a:	f06f 0305 	mvn.w	r3, #5
 800aa7e:	60fb      	str	r3, [r7, #12]
 800aa80:	e010      	b.n	800aaa4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800aa82:	4b0b      	ldr	r3, [pc, #44]	; (800aab0 <osKernelStart+0x68>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d109      	bne.n	800aa9e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800aa8a:	f7ff ff9f 	bl	800a9cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800aa8e:	4b08      	ldr	r3, [pc, #32]	; (800aab0 <osKernelStart+0x68>)
 800aa90:	2202      	movs	r2, #2
 800aa92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800aa94:	f001 fbc6 	bl	800c224 <vTaskStartScheduler>
      stat = osOK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	60fb      	str	r3, [r7, #12]
 800aa9c:	e002      	b.n	800aaa4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800aa9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aaa2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	2000097c 	.word	0x2000097c

0800aab4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b090      	sub	sp, #64	; 0x40
 800aab8:	af04      	add	r7, sp, #16
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aac0:	2300      	movs	r3, #0
 800aac2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aac4:	f3ef 8305 	mrs	r3, IPSR
 800aac8:	61fb      	str	r3, [r7, #28]
  return(result);
 800aaca:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800aacc:	2b00      	cmp	r3, #0
 800aace:	f040 8090 	bne.w	800abf2 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aad2:	f3ef 8310 	mrs	r3, PRIMASK
 800aad6:	61bb      	str	r3, [r7, #24]
  return(result);
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d105      	bne.n	800aaea <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aade:	f3ef 8311 	mrs	r3, BASEPRI
 800aae2:	617b      	str	r3, [r7, #20]
  return(result);
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d003      	beq.n	800aaf2 <osThreadNew+0x3e>
 800aaea:	4b44      	ldr	r3, [pc, #272]	; (800abfc <osThreadNew+0x148>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d07f      	beq.n	800abf2 <osThreadNew+0x13e>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d07c      	beq.n	800abf2 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800aaf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aafc:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800aafe:	2318      	movs	r3, #24
 800ab00:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800ab02:	2300      	movs	r3, #0
 800ab04:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800ab06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab0a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d045      	beq.n	800ab9e <osThreadNew+0xea>
      if (attr->name != NULL) {
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d002      	beq.n	800ab20 <osThreadNew+0x6c>
        name = attr->name;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	699b      	ldr	r3, [r3, #24]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d002      	beq.n	800ab2e <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	699b      	ldr	r3, [r3, #24]
 800ab2c:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d008      	beq.n	800ab46 <osThreadNew+0x92>
 800ab34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab36:	2b38      	cmp	r3, #56	; 0x38
 800ab38:	d805      	bhi.n	800ab46 <osThreadNew+0x92>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	f003 0301 	and.w	r3, r3, #1
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d001      	beq.n	800ab4a <osThreadNew+0x96>
        return (NULL);
 800ab46:	2300      	movs	r3, #0
 800ab48:	e054      	b.n	800abf4 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	695b      	ldr	r3, [r3, #20]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d003      	beq.n	800ab5a <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	695b      	ldr	r3, [r3, #20]
 800ab56:	089b      	lsrs	r3, r3, #2
 800ab58:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00e      	beq.n	800ab80 <osThreadNew+0xcc>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	68db      	ldr	r3, [r3, #12]
 800ab66:	2bc7      	cmp	r3, #199	; 0xc7
 800ab68:	d90a      	bls.n	800ab80 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d006      	beq.n	800ab80 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	695b      	ldr	r3, [r3, #20]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d002      	beq.n	800ab80 <osThreadNew+0xcc>
        mem = 1;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	623b      	str	r3, [r7, #32]
 800ab7e:	e010      	b.n	800aba2 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d10c      	bne.n	800aba2 <osThreadNew+0xee>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d108      	bne.n	800aba2 <osThreadNew+0xee>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	691b      	ldr	r3, [r3, #16]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d104      	bne.n	800aba2 <osThreadNew+0xee>
          mem = 0;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	623b      	str	r3, [r7, #32]
 800ab9c:	e001      	b.n	800aba2 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800aba2:	6a3b      	ldr	r3, [r7, #32]
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d110      	bne.n	800abca <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800abb0:	9202      	str	r2, [sp, #8]
 800abb2:	9301      	str	r3, [sp, #4]
 800abb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb6:	9300      	str	r3, [sp, #0]
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f001 f910 	bl	800bde4 <xTaskCreateStatic>
 800abc4:	4603      	mov	r3, r0
 800abc6:	613b      	str	r3, [r7, #16]
 800abc8:	e013      	b.n	800abf2 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800abca:	6a3b      	ldr	r3, [r7, #32]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d110      	bne.n	800abf2 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800abd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	f107 0310 	add.w	r3, r7, #16
 800abd8:	9301      	str	r3, [sp, #4]
 800abda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f001 f95a 	bl	800be9c <xTaskCreate>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b01      	cmp	r3, #1
 800abec:	d001      	beq.n	800abf2 <osThreadNew+0x13e>
          hTask = NULL;
 800abee:	2300      	movs	r3, #0
 800abf0:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800abf2:	693b      	ldr	r3, [r7, #16]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3730      	adds	r7, #48	; 0x30
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	2000097c 	.word	0x2000097c

0800ac00 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b086      	sub	sp, #24
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac08:	f3ef 8305 	mrs	r3, IPSR
 800ac0c:	613b      	str	r3, [r7, #16]
  return(result);
 800ac0e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d10f      	bne.n	800ac34 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac14:	f3ef 8310 	mrs	r3, PRIMASK
 800ac18:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d105      	bne.n	800ac2c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ac20:	f3ef 8311 	mrs	r3, BASEPRI
 800ac24:	60bb      	str	r3, [r7, #8]
  return(result);
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d007      	beq.n	800ac3c <osDelay+0x3c>
 800ac2c:	4b0a      	ldr	r3, [pc, #40]	; (800ac58 <osDelay+0x58>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2b02      	cmp	r3, #2
 800ac32:	d103      	bne.n	800ac3c <osDelay+0x3c>
    stat = osErrorISR;
 800ac34:	f06f 0305 	mvn.w	r3, #5
 800ac38:	617b      	str	r3, [r7, #20]
 800ac3a:	e007      	b.n	800ac4c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d002      	beq.n	800ac4c <osDelay+0x4c>
      vTaskDelay(ticks);
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f001 fab8 	bl	800c1bc <vTaskDelay>
    }
  }

  return (stat);
 800ac4c:	697b      	ldr	r3, [r7, #20]
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3718      	adds	r7, #24
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	2000097c 	.word	0x2000097c

0800ac5c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f002 fc59 	bl	800d51c <pvTimerGetTimerID>
 800ac6a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d005      	beq.n	800ac7e <TimerCallback+0x22>
    callb->func (callb->arg);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	6852      	ldr	r2, [r2, #4]
 800ac7a:	4610      	mov	r0, r2
 800ac7c:	4798      	blx	r3
  }
}
 800ac7e:	bf00      	nop
 800ac80:	3710      	adds	r7, #16
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
	...

0800ac88 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b08e      	sub	sp, #56	; 0x38
 800ac8c:	af02      	add	r7, sp, #8
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	607a      	str	r2, [r7, #4]
 800ac92:	603b      	str	r3, [r7, #0]
 800ac94:	460b      	mov	r3, r1
 800ac96:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac9c:	f3ef 8305 	mrs	r3, IPSR
 800aca0:	61bb      	str	r3, [r7, #24]
  return(result);
 800aca2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d16a      	bne.n	800ad7e <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aca8:	f3ef 8310 	mrs	r3, PRIMASK
 800acac:	617b      	str	r3, [r7, #20]
  return(result);
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d105      	bne.n	800acc0 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800acb4:	f3ef 8311 	mrs	r3, BASEPRI
 800acb8:	613b      	str	r3, [r7, #16]
  return(result);
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d003      	beq.n	800acc8 <osTimerNew+0x40>
 800acc0:	4b31      	ldr	r3, [pc, #196]	; (800ad88 <osTimerNew+0x100>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2b02      	cmp	r3, #2
 800acc6:	d05a      	beq.n	800ad7e <osTimerNew+0xf6>
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d057      	beq.n	800ad7e <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800acce:	2008      	movs	r0, #8
 800acd0:	f002 fe86 	bl	800d9e0 <pvPortMalloc>
 800acd4:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d050      	beq.n	800ad7e <osTimerNew+0xf6>
      callb->func = func;
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800ace2:	69fb      	ldr	r3, [r7, #28]
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800ace8:	7afb      	ldrb	r3, [r7, #11]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d102      	bne.n	800acf4 <osTimerNew+0x6c>
        reload = pdFALSE;
 800acee:	2300      	movs	r3, #0
 800acf0:	627b      	str	r3, [r7, #36]	; 0x24
 800acf2:	e001      	b.n	800acf8 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800acf4:	2301      	movs	r3, #1
 800acf6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800acf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800acfc:	623b      	str	r3, [r7, #32]
      name = NULL;
 800acfe:	2300      	movs	r3, #0
 800ad00:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d01c      	beq.n	800ad42 <osTimerNew+0xba>
        if (attr->name != NULL) {
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d002      	beq.n	800ad16 <osTimerNew+0x8e>
          name = attr->name;
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d006      	beq.n	800ad2c <osTimerNew+0xa4>
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	2b2b      	cmp	r3, #43	; 0x2b
 800ad24:	d902      	bls.n	800ad2c <osTimerNew+0xa4>
          mem = 1;
 800ad26:	2301      	movs	r3, #1
 800ad28:	623b      	str	r3, [r7, #32]
 800ad2a:	e00c      	b.n	800ad46 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d108      	bne.n	800ad46 <osTimerNew+0xbe>
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d104      	bne.n	800ad46 <osTimerNew+0xbe>
            mem = 0;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	623b      	str	r3, [r7, #32]
 800ad40:	e001      	b.n	800ad46 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800ad42:	2300      	movs	r3, #0
 800ad44:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800ad46:	6a3b      	ldr	r3, [r7, #32]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d10c      	bne.n	800ad66 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	9301      	str	r3, [sp, #4]
 800ad52:	4b0e      	ldr	r3, [pc, #56]	; (800ad8c <osTimerNew+0x104>)
 800ad54:	9300      	str	r3, [sp, #0]
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad5a:	2101      	movs	r1, #1
 800ad5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad5e:	f002 f868 	bl	800ce32 <xTimerCreateStatic>
 800ad62:	62b8      	str	r0, [r7, #40]	; 0x28
 800ad64:	e00b      	b.n	800ad7e <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800ad66:	6a3b      	ldr	r3, [r7, #32]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d108      	bne.n	800ad7e <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800ad6c:	4b07      	ldr	r3, [pc, #28]	; (800ad8c <osTimerNew+0x104>)
 800ad6e:	9300      	str	r3, [sp, #0]
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad74:	2101      	movs	r1, #1
 800ad76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad78:	f002 f83a 	bl	800cdf0 <xTimerCreate>
 800ad7c:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800ad7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3730      	adds	r7, #48	; 0x30
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	2000097c 	.word	0x2000097c
 800ad8c:	0800ac5d 	.word	0x0800ac5d

0800ad90 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b088      	sub	sp, #32
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad9c:	f3ef 8305 	mrs	r3, IPSR
 800ada0:	617b      	str	r3, [r7, #20]
  return(result);
 800ada2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d13d      	bne.n	800ae24 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ada8:	f3ef 8310 	mrs	r3, PRIMASK
 800adac:	613b      	str	r3, [r7, #16]
  return(result);
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d105      	bne.n	800adc0 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800adb4:	f3ef 8311 	mrs	r3, BASEPRI
 800adb8:	60fb      	str	r3, [r7, #12]
  return(result);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d003      	beq.n	800adc8 <osEventFlagsNew+0x38>
 800adc0:	4b1b      	ldr	r3, [pc, #108]	; (800ae30 <osEventFlagsNew+0xa0>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d02d      	beq.n	800ae24 <osEventFlagsNew+0x94>
    mem = -1;
 800adc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800adcc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d015      	beq.n	800ae00 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d006      	beq.n	800adea <osEventFlagsNew+0x5a>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	2b1f      	cmp	r3, #31
 800ade2:	d902      	bls.n	800adea <osEventFlagsNew+0x5a>
        mem = 1;
 800ade4:	2301      	movs	r3, #1
 800ade6:	61bb      	str	r3, [r7, #24]
 800ade8:	e00c      	b.n	800ae04 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	689b      	ldr	r3, [r3, #8]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d108      	bne.n	800ae04 <osEventFlagsNew+0x74>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d104      	bne.n	800ae04 <osEventFlagsNew+0x74>
          mem = 0;
 800adfa:	2300      	movs	r3, #0
 800adfc:	61bb      	str	r3, [r7, #24]
 800adfe:	e001      	b.n	800ae04 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 800ae00:	2300      	movs	r3, #0
 800ae02:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d106      	bne.n	800ae18 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f000 f984 	bl	800b11c <xEventGroupCreateStatic>
 800ae14:	61f8      	str	r0, [r7, #28]
 800ae16:	e005      	b.n	800ae24 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 800ae18:	69bb      	ldr	r3, [r7, #24]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d102      	bne.n	800ae24 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 800ae1e:	f000 f9b2 	bl	800b186 <xEventGroupCreate>
 800ae22:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800ae24:	69fb      	ldr	r3, [r7, #28]
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3720      	adds	r7, #32
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	2000097c 	.word	0x2000097c

0800ae34 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b08a      	sub	sp, #40	; 0x28
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae40:	f3ef 8305 	mrs	r3, IPSR
 800ae44:	613b      	str	r3, [r7, #16]
  return(result);
 800ae46:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	f040 8085 	bne.w	800af58 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae4e:	f3ef 8310 	mrs	r3, PRIMASK
 800ae52:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d105      	bne.n	800ae66 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ae5a:	f3ef 8311 	mrs	r3, BASEPRI
 800ae5e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d003      	beq.n	800ae6e <osMutexNew+0x3a>
 800ae66:	4b3f      	ldr	r3, [pc, #252]	; (800af64 <osMutexNew+0x130>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d074      	beq.n	800af58 <osMutexNew+0x124>
    if (attr != NULL) {
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d003      	beq.n	800ae7c <osMutexNew+0x48>
      type = attr->attr_bits;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	623b      	str	r3, [r7, #32]
 800ae7a:	e001      	b.n	800ae80 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ae80:	6a3b      	ldr	r3, [r7, #32]
 800ae82:	f003 0301 	and.w	r3, r3, #1
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d002      	beq.n	800ae90 <osMutexNew+0x5c>
      rmtx = 1U;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	61fb      	str	r3, [r7, #28]
 800ae8e:	e001      	b.n	800ae94 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800ae90:	2300      	movs	r3, #0
 800ae92:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ae94:	6a3b      	ldr	r3, [r7, #32]
 800ae96:	f003 0308 	and.w	r3, r3, #8
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d15c      	bne.n	800af58 <osMutexNew+0x124>
      mem = -1;
 800ae9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aea2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d015      	beq.n	800aed6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d006      	beq.n	800aec0 <osMutexNew+0x8c>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	2b4f      	cmp	r3, #79	; 0x4f
 800aeb8:	d902      	bls.n	800aec0 <osMutexNew+0x8c>
          mem = 1;
 800aeba:	2301      	movs	r3, #1
 800aebc:	61bb      	str	r3, [r7, #24]
 800aebe:	e00c      	b.n	800aeda <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d108      	bne.n	800aeda <osMutexNew+0xa6>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d104      	bne.n	800aeda <osMutexNew+0xa6>
            mem = 0;
 800aed0:	2300      	movs	r3, #0
 800aed2:	61bb      	str	r3, [r7, #24]
 800aed4:	e001      	b.n	800aeda <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800aed6:	2300      	movs	r3, #0
 800aed8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d112      	bne.n	800af06 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d007      	beq.n	800aef6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	4619      	mov	r1, r3
 800aeec:	2004      	movs	r0, #4
 800aeee:	f000 fb88 	bl	800b602 <xQueueCreateMutexStatic>
 800aef2:	6278      	str	r0, [r7, #36]	; 0x24
 800aef4:	e016      	b.n	800af24 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	4619      	mov	r1, r3
 800aefc:	2001      	movs	r0, #1
 800aefe:	f000 fb80 	bl	800b602 <xQueueCreateMutexStatic>
 800af02:	6278      	str	r0, [r7, #36]	; 0x24
 800af04:	e00e      	b.n	800af24 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d10b      	bne.n	800af24 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d004      	beq.n	800af1c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800af12:	2004      	movs	r0, #4
 800af14:	f000 fb5d 	bl	800b5d2 <xQueueCreateMutex>
 800af18:	6278      	str	r0, [r7, #36]	; 0x24
 800af1a:	e003      	b.n	800af24 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800af1c:	2001      	movs	r0, #1
 800af1e:	f000 fb58 	bl	800b5d2 <xQueueCreateMutex>
 800af22:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800af24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00c      	beq.n	800af44 <osMutexNew+0x110>
        if (attr != NULL) {
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d003      	beq.n	800af38 <osMutexNew+0x104>
          name = attr->name;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	617b      	str	r3, [r7, #20]
 800af36:	e001      	b.n	800af3c <osMutexNew+0x108>
        } else {
          name = NULL;
 800af38:	2300      	movs	r3, #0
 800af3a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800af3c:	6979      	ldr	r1, [r7, #20]
 800af3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af40:	f000 fef4 	bl	800bd2c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800af44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af46:	2b00      	cmp	r3, #0
 800af48:	d006      	beq.n	800af58 <osMutexNew+0x124>
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d003      	beq.n	800af58 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800af50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af52:	f043 0301 	orr.w	r3, r3, #1
 800af56:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800af58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3728      	adds	r7, #40	; 0x28
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	2000097c 	.word	0x2000097c

0800af68 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800af68:	b580      	push	{r7, lr}
 800af6a:	b08c      	sub	sp, #48	; 0x30
 800af6c:	af02      	add	r7, sp, #8
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	60b9      	str	r1, [r7, #8]
 800af72:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800af74:	2300      	movs	r3, #0
 800af76:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af78:	f3ef 8305 	mrs	r3, IPSR
 800af7c:	61bb      	str	r3, [r7, #24]
  return(result);
 800af7e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800af80:	2b00      	cmp	r3, #0
 800af82:	d170      	bne.n	800b066 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af84:	f3ef 8310 	mrs	r3, PRIMASK
 800af88:	617b      	str	r3, [r7, #20]
  return(result);
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d105      	bne.n	800af9c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800af90:	f3ef 8311 	mrs	r3, BASEPRI
 800af94:	613b      	str	r3, [r7, #16]
  return(result);
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d003      	beq.n	800afa4 <osMessageQueueNew+0x3c>
 800af9c:	4b34      	ldr	r3, [pc, #208]	; (800b070 <osMessageQueueNew+0x108>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	d060      	beq.n	800b066 <osMessageQueueNew+0xfe>
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d05d      	beq.n	800b066 <osMessageQueueNew+0xfe>
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d05a      	beq.n	800b066 <osMessageQueueNew+0xfe>
    mem = -1;
 800afb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afb4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d029      	beq.n	800b010 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	689b      	ldr	r3, [r3, #8]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d012      	beq.n	800afea <osMessageQueueNew+0x82>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	2b4f      	cmp	r3, #79	; 0x4f
 800afca:	d90e      	bls.n	800afea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00a      	beq.n	800afea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	695a      	ldr	r2, [r3, #20]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	68b9      	ldr	r1, [r7, #8]
 800afdc:	fb01 f303 	mul.w	r3, r1, r3
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d302      	bcc.n	800afea <osMessageQueueNew+0x82>
        mem = 1;
 800afe4:	2301      	movs	r3, #1
 800afe6:	623b      	str	r3, [r7, #32]
 800afe8:	e014      	b.n	800b014 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d110      	bne.n	800b014 <osMessageQueueNew+0xac>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d10c      	bne.n	800b014 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800affe:	2b00      	cmp	r3, #0
 800b000:	d108      	bne.n	800b014 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	695b      	ldr	r3, [r3, #20]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d104      	bne.n	800b014 <osMessageQueueNew+0xac>
          mem = 0;
 800b00a:	2300      	movs	r3, #0
 800b00c:	623b      	str	r3, [r7, #32]
 800b00e:	e001      	b.n	800b014 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800b010:	2300      	movs	r3, #0
 800b012:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b014:	6a3b      	ldr	r3, [r7, #32]
 800b016:	2b01      	cmp	r3, #1
 800b018:	d10c      	bne.n	800b034 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	691a      	ldr	r2, [r3, #16]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6899      	ldr	r1, [r3, #8]
 800b022:	2300      	movs	r3, #0
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	460b      	mov	r3, r1
 800b028:	68b9      	ldr	r1, [r7, #8]
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	f000 f9e2 	bl	800b3f4 <xQueueGenericCreateStatic>
 800b030:	6278      	str	r0, [r7, #36]	; 0x24
 800b032:	e008      	b.n	800b046 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800b034:	6a3b      	ldr	r3, [r7, #32]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d105      	bne.n	800b046 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800b03a:	2200      	movs	r2, #0
 800b03c:	68b9      	ldr	r1, [r7, #8]
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f000 fa4b 	bl	800b4da <xQueueGenericCreate>
 800b044:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d00c      	beq.n	800b066 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d003      	beq.n	800b05a <osMessageQueueNew+0xf2>
        name = attr->name;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	61fb      	str	r3, [r7, #28]
 800b058:	e001      	b.n	800b05e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800b05a:	2300      	movs	r3, #0
 800b05c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800b05e:	69f9      	ldr	r1, [r7, #28]
 800b060:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b062:	f000 fe63 	bl	800bd2c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3728      	adds	r7, #40	; 0x28
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	2000097c 	.word	0x2000097c

0800b074 <vApplicationIdleHook>:

/**
  Dummy implementation of the callback function vApplicationIdleHook().
*/
#if (configUSE_IDLE_HOOK == 1)
__WEAK void vApplicationIdleHook (void){}
 800b074:	b480      	push	{r7}
 800b076:	af00      	add	r7, sp, #0
 800b078:	bf00      	nop
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr

0800b082 <vApplicationTickHook>:

/**
  Dummy implementation of the callback function vApplicationTickHook().
*/
#if (configUSE_TICK_HOOK == 1)
 __WEAK void vApplicationTickHook (void){}
 800b082:	b480      	push	{r7}
 800b084:	af00      	add	r7, sp, #0
 800b086:	bf00      	nop
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <vApplicationMallocFailedHook>:

/**
  Dummy implementation of the callback function vApplicationMallocFailedHook().
*/
#if (configUSE_MALLOC_FAILED_HOOK == 1)
__WEAK void vApplicationMallocFailedHook (void){}
 800b090:	b480      	push	{r7}
 800b092:	af00      	add	r7, sp, #0
 800b094:	bf00      	nop
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr

0800b09e <vApplicationStackOverflowHook>:

/**
  Dummy implementation of the callback function vApplicationStackOverflowHook().
*/
#if (configCHECK_FOR_STACK_OVERFLOW > 0)
__WEAK void vApplicationStackOverflowHook (TaskHandle_t xTask, signed char *pcTaskName) {
 800b09e:	b480      	push	{r7}
 800b0a0:	b083      	sub	sp, #12
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
 800b0a6:	6039      	str	r1, [r7, #0]
  (void)xTask;
  (void)pcTaskName;
}
 800b0a8:	bf00      	nop
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b0b4:	b480      	push	{r7}
 800b0b6:	b085      	sub	sp, #20
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	4a07      	ldr	r2, [pc, #28]	; (800b0e0 <vApplicationGetIdleTaskMemory+0x2c>)
 800b0c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	4a06      	ldr	r2, [pc, #24]	; (800b0e4 <vApplicationGetIdleTaskMemory+0x30>)
 800b0ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0d2:	601a      	str	r2, [r3, #0]
}
 800b0d4:	bf00      	nop
 800b0d6:	3714      	adds	r7, #20
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr
 800b0e0:	200316c0 	.word	0x200316c0
 800b0e4:	20031788 	.word	0x20031788

0800b0e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b0e8:	b480      	push	{r7}
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	4a07      	ldr	r2, [pc, #28]	; (800b114 <vApplicationGetTimerTaskMemory+0x2c>)
 800b0f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	4a06      	ldr	r2, [pc, #24]	; (800b118 <vApplicationGetTimerTaskMemory+0x30>)
 800b0fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b106:	601a      	str	r2, [r3, #0]
}
 800b108:	bf00      	nop
 800b10a:	3714      	adds	r7, #20
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr
 800b114:	20031f88 	.word	0x20031f88
 800b118:	20032050 	.word	0x20032050

0800b11c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b086      	sub	sp, #24
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d109      	bne.n	800b13e <xEventGroupCreateStatic+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12e:	f383 8811 	msr	BASEPRI, r3
 800b132:	f3bf 8f6f 	isb	sy
 800b136:	f3bf 8f4f 	dsb	sy
 800b13a:	613b      	str	r3, [r7, #16]
 800b13c:	e7fe      	b.n	800b13c <xEventGroupCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800b13e:	2320      	movs	r3, #32
 800b140:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	2b20      	cmp	r3, #32
 800b146:	d009      	beq.n	800b15c <xEventGroupCreateStatic+0x40>
 800b148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14c:	f383 8811 	msr	BASEPRI, r3
 800b150:	f3bf 8f6f 	isb	sy
 800b154:	f3bf 8f4f 	dsb	sy
 800b158:	60fb      	str	r3, [r7, #12]
 800b15a:	e7fe      	b.n	800b15a <xEventGroupCreateStatic+0x3e>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d00a      	beq.n	800b17c <xEventGroupCreateStatic+0x60>
		{
			pxEventBits->uxEventBits = 0;
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	2200      	movs	r2, #0
 800b16a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	3304      	adds	r3, #4
 800b170:	4618      	mov	r0, r3
 800b172:	f000 f822 	bl	800b1ba <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	2201      	movs	r2, #1
 800b17a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800b17c:	697b      	ldr	r3, [r7, #20]
	}
 800b17e:	4618      	mov	r0, r3
 800b180:	3718      	adds	r7, #24
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800b186:	b580      	push	{r7, lr}
 800b188:	b082      	sub	sp, #8
 800b18a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800b18c:	2020      	movs	r0, #32
 800b18e:	f002 fc27 	bl	800d9e0 <pvPortMalloc>
 800b192:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d00a      	beq.n	800b1b0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	3304      	adds	r3, #4
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f000 f808 	bl	800b1ba <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800b1b0:	687b      	ldr	r3, [r7, #4]
	}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b1ba:	b480      	push	{r7}
 800b1bc:	b083      	sub	sp, #12
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f103 0208 	add.w	r2, r3, #8
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1d2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f103 0208 	add.w	r2, r3, #8
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f103 0208 	add.w	r2, r3, #8
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b1ee:	bf00      	nop
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr

0800b1fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b1fa:	b480      	push	{r7}
 800b1fc:	b083      	sub	sp, #12
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2200      	movs	r2, #0
 800b206:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b208:	bf00      	nop
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b214:	b480      	push	{r7}
 800b216:	b085      	sub	sp, #20
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	689a      	ldr	r2, [r3, #8]
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	683a      	ldr	r2, [r7, #0]
 800b238:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	683a      	ldr	r2, [r7, #0]
 800b23e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	687a      	ldr	r2, [r7, #4]
 800b244:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	1c5a      	adds	r2, r3, #1
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	601a      	str	r2, [r3, #0]
}
 800b250:	bf00      	nop
 800b252:	3714      	adds	r7, #20
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b25c:	b480      	push	{r7}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b272:	d103      	bne.n	800b27c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	691b      	ldr	r3, [r3, #16]
 800b278:	60fb      	str	r3, [r7, #12]
 800b27a:	e00c      	b.n	800b296 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	3308      	adds	r3, #8
 800b280:	60fb      	str	r3, [r7, #12]
 800b282:	e002      	b.n	800b28a <vListInsert+0x2e>
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	60fb      	str	r3, [r7, #12]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	68ba      	ldr	r2, [r7, #8]
 800b292:	429a      	cmp	r2, r3
 800b294:	d2f6      	bcs.n	800b284 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	685a      	ldr	r2, [r3, #4]
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	683a      	ldr	r2, [r7, #0]
 800b2a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	68fa      	ldr	r2, [r7, #12]
 800b2aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	683a      	ldr	r2, [r7, #0]
 800b2b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	1c5a      	adds	r2, r3, #1
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	601a      	str	r2, [r3, #0]
}
 800b2c2:	bf00      	nop
 800b2c4:	3714      	adds	r7, #20
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr

0800b2ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b2ce:	b480      	push	{r7}
 800b2d0:	b085      	sub	sp, #20
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	691b      	ldr	r3, [r3, #16]
 800b2da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	6892      	ldr	r2, [r2, #8]
 800b2e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	6852      	ldr	r2, [r2, #4]
 800b2ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d103      	bne.n	800b302 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	689a      	ldr	r2, [r3, #8]
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	1e5a      	subs	r2, r3, #1
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
}
 800b316:	4618      	mov	r0, r3
 800b318:	3714      	adds	r7, #20
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr
	...

0800b324 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d109      	bne.n	800b34c <xQueueGenericReset+0x28>
 800b338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b33c:	f383 8811 	msr	BASEPRI, r3
 800b340:	f3bf 8f6f 	isb	sy
 800b344:	f3bf 8f4f 	dsb	sy
 800b348:	60bb      	str	r3, [r7, #8]
 800b34a:	e7fe      	b.n	800b34a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800b34c:	f002 fa2e 	bl	800d7ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b358:	68f9      	ldr	r1, [r7, #12]
 800b35a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b35c:	fb01 f303 	mul.w	r3, r1, r3
 800b360:	441a      	add	r2, r3
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2200      	movs	r2, #0
 800b36a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b37c:	3b01      	subs	r3, #1
 800b37e:	68f9      	ldr	r1, [r7, #12]
 800b380:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b382:	fb01 f303 	mul.w	r3, r1, r3
 800b386:	441a      	add	r2, r3
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	22ff      	movs	r2, #255	; 0xff
 800b390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	22ff      	movs	r2, #255	; 0xff
 800b398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d114      	bne.n	800b3cc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d01a      	beq.n	800b3e0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	3310      	adds	r3, #16
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f001 fa24 	bl	800c7fc <xTaskRemoveFromEventList>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d012      	beq.n	800b3e0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b3ba:	4b0d      	ldr	r3, [pc, #52]	; (800b3f0 <xQueueGenericReset+0xcc>)
 800b3bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3c0:	601a      	str	r2, [r3, #0]
 800b3c2:	f3bf 8f4f 	dsb	sy
 800b3c6:	f3bf 8f6f 	isb	sy
 800b3ca:	e009      	b.n	800b3e0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	3310      	adds	r3, #16
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f7ff fef2 	bl	800b1ba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	3324      	adds	r3, #36	; 0x24
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7ff feed 	bl	800b1ba <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b3e0:	f002 fa12 	bl	800d808 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b3e4:	2301      	movs	r3, #1
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3710      	adds	r7, #16
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	e000ed04 	.word	0xe000ed04

0800b3f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b08e      	sub	sp, #56	; 0x38
 800b3f8:	af02      	add	r7, sp, #8
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	607a      	str	r2, [r7, #4]
 800b400:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d109      	bne.n	800b41c <xQueueGenericCreateStatic+0x28>
 800b408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40c:	f383 8811 	msr	BASEPRI, r3
 800b410:	f3bf 8f6f 	isb	sy
 800b414:	f3bf 8f4f 	dsb	sy
 800b418:	62bb      	str	r3, [r7, #40]	; 0x28
 800b41a:	e7fe      	b.n	800b41a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d109      	bne.n	800b436 <xQueueGenericCreateStatic+0x42>
 800b422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b426:	f383 8811 	msr	BASEPRI, r3
 800b42a:	f3bf 8f6f 	isb	sy
 800b42e:	f3bf 8f4f 	dsb	sy
 800b432:	627b      	str	r3, [r7, #36]	; 0x24
 800b434:	e7fe      	b.n	800b434 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d002      	beq.n	800b442 <xQueueGenericCreateStatic+0x4e>
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d001      	beq.n	800b446 <xQueueGenericCreateStatic+0x52>
 800b442:	2301      	movs	r3, #1
 800b444:	e000      	b.n	800b448 <xQueueGenericCreateStatic+0x54>
 800b446:	2300      	movs	r3, #0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d109      	bne.n	800b460 <xQueueGenericCreateStatic+0x6c>
 800b44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b450:	f383 8811 	msr	BASEPRI, r3
 800b454:	f3bf 8f6f 	isb	sy
 800b458:	f3bf 8f4f 	dsb	sy
 800b45c:	623b      	str	r3, [r7, #32]
 800b45e:	e7fe      	b.n	800b45e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d102      	bne.n	800b46c <xQueueGenericCreateStatic+0x78>
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d101      	bne.n	800b470 <xQueueGenericCreateStatic+0x7c>
 800b46c:	2301      	movs	r3, #1
 800b46e:	e000      	b.n	800b472 <xQueueGenericCreateStatic+0x7e>
 800b470:	2300      	movs	r3, #0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d109      	bne.n	800b48a <xQueueGenericCreateStatic+0x96>
 800b476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47a:	f383 8811 	msr	BASEPRI, r3
 800b47e:	f3bf 8f6f 	isb	sy
 800b482:	f3bf 8f4f 	dsb	sy
 800b486:	61fb      	str	r3, [r7, #28]
 800b488:	e7fe      	b.n	800b488 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b48a:	2350      	movs	r3, #80	; 0x50
 800b48c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	2b50      	cmp	r3, #80	; 0x50
 800b492:	d009      	beq.n	800b4a8 <xQueueGenericCreateStatic+0xb4>
 800b494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b498:	f383 8811 	msr	BASEPRI, r3
 800b49c:	f3bf 8f6f 	isb	sy
 800b4a0:	f3bf 8f4f 	dsb	sy
 800b4a4:	61bb      	str	r3, [r7, #24]
 800b4a6:	e7fe      	b.n	800b4a6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b4a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d00d      	beq.n	800b4d0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b4bc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c2:	9300      	str	r3, [sp, #0]
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	68b9      	ldr	r1, [r7, #8]
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f000 f844 	bl	800b558 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3730      	adds	r7, #48	; 0x30
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}

0800b4da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b08a      	sub	sp, #40	; 0x28
 800b4de:	af02      	add	r7, sp, #8
 800b4e0:	60f8      	str	r0, [r7, #12]
 800b4e2:	60b9      	str	r1, [r7, #8]
 800b4e4:	4613      	mov	r3, r2
 800b4e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d109      	bne.n	800b502 <xQueueGenericCreate+0x28>
 800b4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f2:	f383 8811 	msr	BASEPRI, r3
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	613b      	str	r3, [r7, #16]
 800b500:	e7fe      	b.n	800b500 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d102      	bne.n	800b50e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b508:	2300      	movs	r3, #0
 800b50a:	61fb      	str	r3, [r7, #28]
 800b50c:	e004      	b.n	800b518 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	68ba      	ldr	r2, [r7, #8]
 800b512:	fb02 f303 	mul.w	r3, r2, r3
 800b516:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	3350      	adds	r3, #80	; 0x50
 800b51c:	4618      	mov	r0, r3
 800b51e:	f002 fa5f 	bl	800d9e0 <pvPortMalloc>
 800b522:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d011      	beq.n	800b54e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b52a:	69bb      	ldr	r3, [r7, #24]
 800b52c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	3350      	adds	r3, #80	; 0x50
 800b532:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	2200      	movs	r2, #0
 800b538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b53c:	79fa      	ldrb	r2, [r7, #7]
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	4613      	mov	r3, r2
 800b544:	697a      	ldr	r2, [r7, #20]
 800b546:	68b9      	ldr	r1, [r7, #8]
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	f000 f805 	bl	800b558 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b54e:	69bb      	ldr	r3, [r7, #24]
	}
 800b550:	4618      	mov	r0, r3
 800b552:	3720      	adds	r7, #32
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	60b9      	str	r1, [r7, #8]
 800b562:	607a      	str	r2, [r7, #4]
 800b564:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d103      	bne.n	800b574 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	69ba      	ldr	r2, [r7, #24]
 800b570:	601a      	str	r2, [r3, #0]
 800b572:	e002      	b.n	800b57a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b574:	69bb      	ldr	r3, [r7, #24]
 800b576:	687a      	ldr	r2, [r7, #4]
 800b578:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b57a:	69bb      	ldr	r3, [r7, #24]
 800b57c:	68fa      	ldr	r2, [r7, #12]
 800b57e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	68ba      	ldr	r2, [r7, #8]
 800b584:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b586:	2101      	movs	r1, #1
 800b588:	69b8      	ldr	r0, [r7, #24]
 800b58a:	f7ff fecb 	bl	800b324 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b58e:	69bb      	ldr	r3, [r7, #24]
 800b590:	78fa      	ldrb	r2, [r7, #3]
 800b592:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b596:	bf00      	nop
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b082      	sub	sp, #8
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00e      	beq.n	800b5ca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b5be:	2300      	movs	r3, #0
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	2100      	movs	r1, #0
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 f837 	bl	800b638 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b5ca:	bf00      	nop
 800b5cc:	3708      	adds	r7, #8
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}

0800b5d2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b086      	sub	sp, #24
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	4603      	mov	r3, r0
 800b5da:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	617b      	str	r3, [r7, #20]
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b5e4:	79fb      	ldrb	r3, [r7, #7]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	6939      	ldr	r1, [r7, #16]
 800b5ea:	6978      	ldr	r0, [r7, #20]
 800b5ec:	f7ff ff75 	bl	800b4da <xQueueGenericCreate>
 800b5f0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b5f2:	68f8      	ldr	r0, [r7, #12]
 800b5f4:	f7ff ffd3 	bl	800b59e <prvInitialiseMutex>

		return xNewQueue;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
	}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3718      	adds	r7, #24
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b602:	b580      	push	{r7, lr}
 800b604:	b088      	sub	sp, #32
 800b606:	af02      	add	r7, sp, #8
 800b608:	4603      	mov	r3, r0
 800b60a:	6039      	str	r1, [r7, #0]
 800b60c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b60e:	2301      	movs	r3, #1
 800b610:	617b      	str	r3, [r7, #20]
 800b612:	2300      	movs	r3, #0
 800b614:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b616:	79fb      	ldrb	r3, [r7, #7]
 800b618:	9300      	str	r3, [sp, #0]
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	2200      	movs	r2, #0
 800b61e:	6939      	ldr	r1, [r7, #16]
 800b620:	6978      	ldr	r0, [r7, #20]
 800b622:	f7ff fee7 	bl	800b3f4 <xQueueGenericCreateStatic>
 800b626:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b628:	68f8      	ldr	r0, [r7, #12]
 800b62a:	f7ff ffb8 	bl	800b59e <prvInitialiseMutex>

		return xNewQueue;
 800b62e:	68fb      	ldr	r3, [r7, #12]
	}
 800b630:	4618      	mov	r0, r3
 800b632:	3718      	adds	r7, #24
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b08e      	sub	sp, #56	; 0x38
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
 800b644:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b646:	2300      	movs	r3, #0
 800b648:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b650:	2b00      	cmp	r3, #0
 800b652:	d109      	bne.n	800b668 <xQueueGenericSend+0x30>
 800b654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b658:	f383 8811 	msr	BASEPRI, r3
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	62bb      	str	r3, [r7, #40]	; 0x28
 800b666:	e7fe      	b.n	800b666 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d103      	bne.n	800b676 <xQueueGenericSend+0x3e>
 800b66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b672:	2b00      	cmp	r3, #0
 800b674:	d101      	bne.n	800b67a <xQueueGenericSend+0x42>
 800b676:	2301      	movs	r3, #1
 800b678:	e000      	b.n	800b67c <xQueueGenericSend+0x44>
 800b67a:	2300      	movs	r3, #0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d109      	bne.n	800b694 <xQueueGenericSend+0x5c>
 800b680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b684:	f383 8811 	msr	BASEPRI, r3
 800b688:	f3bf 8f6f 	isb	sy
 800b68c:	f3bf 8f4f 	dsb	sy
 800b690:	627b      	str	r3, [r7, #36]	; 0x24
 800b692:	e7fe      	b.n	800b692 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	2b02      	cmp	r3, #2
 800b698:	d103      	bne.n	800b6a2 <xQueueGenericSend+0x6a>
 800b69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d101      	bne.n	800b6a6 <xQueueGenericSend+0x6e>
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e000      	b.n	800b6a8 <xQueueGenericSend+0x70>
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d109      	bne.n	800b6c0 <xQueueGenericSend+0x88>
 800b6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b0:	f383 8811 	msr	BASEPRI, r3
 800b6b4:	f3bf 8f6f 	isb	sy
 800b6b8:	f3bf 8f4f 	dsb	sy
 800b6bc:	623b      	str	r3, [r7, #32]
 800b6be:	e7fe      	b.n	800b6be <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b6c0:	f001 fa6a 	bl	800cb98 <xTaskGetSchedulerState>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d102      	bne.n	800b6d0 <xQueueGenericSend+0x98>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d101      	bne.n	800b6d4 <xQueueGenericSend+0x9c>
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e000      	b.n	800b6d6 <xQueueGenericSend+0x9e>
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d109      	bne.n	800b6ee <xQueueGenericSend+0xb6>
 800b6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6de:	f383 8811 	msr	BASEPRI, r3
 800b6e2:	f3bf 8f6f 	isb	sy
 800b6e6:	f3bf 8f4f 	dsb	sy
 800b6ea:	61fb      	str	r3, [r7, #28]
 800b6ec:	e7fe      	b.n	800b6ec <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b6ee:	f002 f85d 	bl	800d7ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d302      	bcc.n	800b704 <xQueueGenericSend+0xcc>
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	2b02      	cmp	r3, #2
 800b702:	d129      	bne.n	800b758 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b704:	683a      	ldr	r2, [r7, #0]
 800b706:	68b9      	ldr	r1, [r7, #8]
 800b708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b70a:	f000 f9ff 	bl	800bb0c <prvCopyDataToQueue>
 800b70e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b714:	2b00      	cmp	r3, #0
 800b716:	d010      	beq.n	800b73a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71a:	3324      	adds	r3, #36	; 0x24
 800b71c:	4618      	mov	r0, r3
 800b71e:	f001 f86d 	bl	800c7fc <xTaskRemoveFromEventList>
 800b722:	4603      	mov	r3, r0
 800b724:	2b00      	cmp	r3, #0
 800b726:	d013      	beq.n	800b750 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b728:	4b3f      	ldr	r3, [pc, #252]	; (800b828 <xQueueGenericSend+0x1f0>)
 800b72a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b72e:	601a      	str	r2, [r3, #0]
 800b730:	f3bf 8f4f 	dsb	sy
 800b734:	f3bf 8f6f 	isb	sy
 800b738:	e00a      	b.n	800b750 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d007      	beq.n	800b750 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b740:	4b39      	ldr	r3, [pc, #228]	; (800b828 <xQueueGenericSend+0x1f0>)
 800b742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b746:	601a      	str	r2, [r3, #0]
 800b748:	f3bf 8f4f 	dsb	sy
 800b74c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b750:	f002 f85a 	bl	800d808 <vPortExitCritical>
				return pdPASS;
 800b754:	2301      	movs	r3, #1
 800b756:	e063      	b.n	800b820 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d103      	bne.n	800b766 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b75e:	f002 f853 	bl	800d808 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b762:	2300      	movs	r3, #0
 800b764:	e05c      	b.n	800b820 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d106      	bne.n	800b77a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b76c:	f107 0314 	add.w	r3, r7, #20
 800b770:	4618      	mov	r0, r3
 800b772:	f001 f8a5 	bl	800c8c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b776:	2301      	movs	r3, #1
 800b778:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b77a:	f002 f845 	bl	800d808 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b77e:	f000 fdc1 	bl	800c304 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b782:	f002 f813 	bl	800d7ac <vPortEnterCritical>
 800b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b788:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b78c:	b25b      	sxtb	r3, r3
 800b78e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b792:	d103      	bne.n	800b79c <xQueueGenericSend+0x164>
 800b794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b796:	2200      	movs	r2, #0
 800b798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7a2:	b25b      	sxtb	r3, r3
 800b7a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7a8:	d103      	bne.n	800b7b2 <xQueueGenericSend+0x17a>
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7b2:	f002 f829 	bl	800d808 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b7b6:	1d3a      	adds	r2, r7, #4
 800b7b8:	f107 0314 	add.w	r3, r7, #20
 800b7bc:	4611      	mov	r1, r2
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f001 f894 	bl	800c8ec <xTaskCheckForTimeOut>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d124      	bne.n	800b814 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b7ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7cc:	f000 fa96 	bl	800bcfc <prvIsQueueFull>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d018      	beq.n	800b808 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d8:	3310      	adds	r3, #16
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	4611      	mov	r1, r2
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f000 ffbe 	bl	800c760 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b7e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7e6:	f000 fa21 	bl	800bc2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b7ea:	f000 fd99 	bl	800c320 <xTaskResumeAll>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	f47f af7c 	bne.w	800b6ee <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800b7f6:	4b0c      	ldr	r3, [pc, #48]	; (800b828 <xQueueGenericSend+0x1f0>)
 800b7f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7fc:	601a      	str	r2, [r3, #0]
 800b7fe:	f3bf 8f4f 	dsb	sy
 800b802:	f3bf 8f6f 	isb	sy
 800b806:	e772      	b.n	800b6ee <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b80a:	f000 fa0f 	bl	800bc2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b80e:	f000 fd87 	bl	800c320 <xTaskResumeAll>
 800b812:	e76c      	b.n	800b6ee <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b816:	f000 fa09 	bl	800bc2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b81a:	f000 fd81 	bl	800c320 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b81e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b820:	4618      	mov	r0, r3
 800b822:	3738      	adds	r7, #56	; 0x38
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}
 800b828:	e000ed04 	.word	0xe000ed04

0800b82c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b08e      	sub	sp, #56	; 0x38
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	607a      	str	r2, [r7, #4]
 800b838:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b840:	2b00      	cmp	r3, #0
 800b842:	d109      	bne.n	800b858 <xQueueGenericSendFromISR+0x2c>
 800b844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b848:	f383 8811 	msr	BASEPRI, r3
 800b84c:	f3bf 8f6f 	isb	sy
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	627b      	str	r3, [r7, #36]	; 0x24
 800b856:	e7fe      	b.n	800b856 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d103      	bne.n	800b866 <xQueueGenericSendFromISR+0x3a>
 800b85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b862:	2b00      	cmp	r3, #0
 800b864:	d101      	bne.n	800b86a <xQueueGenericSendFromISR+0x3e>
 800b866:	2301      	movs	r3, #1
 800b868:	e000      	b.n	800b86c <xQueueGenericSendFromISR+0x40>
 800b86a:	2300      	movs	r3, #0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d109      	bne.n	800b884 <xQueueGenericSendFromISR+0x58>
 800b870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b874:	f383 8811 	msr	BASEPRI, r3
 800b878:	f3bf 8f6f 	isb	sy
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	623b      	str	r3, [r7, #32]
 800b882:	e7fe      	b.n	800b882 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	2b02      	cmp	r3, #2
 800b888:	d103      	bne.n	800b892 <xQueueGenericSendFromISR+0x66>
 800b88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d101      	bne.n	800b896 <xQueueGenericSendFromISR+0x6a>
 800b892:	2301      	movs	r3, #1
 800b894:	e000      	b.n	800b898 <xQueueGenericSendFromISR+0x6c>
 800b896:	2300      	movs	r3, #0
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d109      	bne.n	800b8b0 <xQueueGenericSendFromISR+0x84>
 800b89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a0:	f383 8811 	msr	BASEPRI, r3
 800b8a4:	f3bf 8f6f 	isb	sy
 800b8a8:	f3bf 8f4f 	dsb	sy
 800b8ac:	61fb      	str	r3, [r7, #28]
 800b8ae:	e7fe      	b.n	800b8ae <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b8b0:	f002 f858 	bl	800d964 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b8b4:	f3ef 8211 	mrs	r2, BASEPRI
 800b8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8bc:	f383 8811 	msr	BASEPRI, r3
 800b8c0:	f3bf 8f6f 	isb	sy
 800b8c4:	f3bf 8f4f 	dsb	sy
 800b8c8:	61ba      	str	r2, [r7, #24]
 800b8ca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b8cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d302      	bcc.n	800b8e2 <xQueueGenericSendFromISR+0xb6>
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	d12c      	bne.n	800b93c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b8ec:	683a      	ldr	r2, [r7, #0]
 800b8ee:	68b9      	ldr	r1, [r7, #8]
 800b8f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8f2:	f000 f90b 	bl	800bb0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b8f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b8fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8fe:	d112      	bne.n	800b926 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b904:	2b00      	cmp	r3, #0
 800b906:	d016      	beq.n	800b936 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b90a:	3324      	adds	r3, #36	; 0x24
 800b90c:	4618      	mov	r0, r3
 800b90e:	f000 ff75 	bl	800c7fc <xTaskRemoveFromEventList>
 800b912:	4603      	mov	r3, r0
 800b914:	2b00      	cmp	r3, #0
 800b916:	d00e      	beq.n	800b936 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00b      	beq.n	800b936 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2201      	movs	r2, #1
 800b922:	601a      	str	r2, [r3, #0]
 800b924:	e007      	b.n	800b936 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b926:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b92a:	3301      	adds	r3, #1
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	b25a      	sxtb	r2, r3
 800b930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b936:	2301      	movs	r3, #1
 800b938:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b93a:	e001      	b.n	800b940 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b93c:	2300      	movs	r3, #0
 800b93e:	637b      	str	r3, [r7, #52]	; 0x34
 800b940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b942:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b94a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3738      	adds	r7, #56	; 0x38
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b08c      	sub	sp, #48	; 0x30
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b960:	2300      	movs	r3, #0
 800b962:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d109      	bne.n	800b982 <xQueueReceive+0x2e>
	__asm volatile
 800b96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b972:	f383 8811 	msr	BASEPRI, r3
 800b976:	f3bf 8f6f 	isb	sy
 800b97a:	f3bf 8f4f 	dsb	sy
 800b97e:	623b      	str	r3, [r7, #32]
 800b980:	e7fe      	b.n	800b980 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d103      	bne.n	800b990 <xQueueReceive+0x3c>
 800b988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d101      	bne.n	800b994 <xQueueReceive+0x40>
 800b990:	2301      	movs	r3, #1
 800b992:	e000      	b.n	800b996 <xQueueReceive+0x42>
 800b994:	2300      	movs	r3, #0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d109      	bne.n	800b9ae <xQueueReceive+0x5a>
 800b99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99e:	f383 8811 	msr	BASEPRI, r3
 800b9a2:	f3bf 8f6f 	isb	sy
 800b9a6:	f3bf 8f4f 	dsb	sy
 800b9aa:	61fb      	str	r3, [r7, #28]
 800b9ac:	e7fe      	b.n	800b9ac <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b9ae:	f001 f8f3 	bl	800cb98 <xTaskGetSchedulerState>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d102      	bne.n	800b9be <xQueueReceive+0x6a>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d101      	bne.n	800b9c2 <xQueueReceive+0x6e>
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e000      	b.n	800b9c4 <xQueueReceive+0x70>
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d109      	bne.n	800b9dc <xQueueReceive+0x88>
 800b9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9cc:	f383 8811 	msr	BASEPRI, r3
 800b9d0:	f3bf 8f6f 	isb	sy
 800b9d4:	f3bf 8f4f 	dsb	sy
 800b9d8:	61bb      	str	r3, [r7, #24]
 800b9da:	e7fe      	b.n	800b9da <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9dc:	f001 fee6 	bl	800d7ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9e4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d01f      	beq.n	800ba2c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b9ec:	68b9      	ldr	r1, [r7, #8]
 800b9ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9f0:	f000 f8f6 	bl	800bbe0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f6:	1e5a      	subs	r2, r3, #1
 800b9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fe:	691b      	ldr	r3, [r3, #16]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d00f      	beq.n	800ba24 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba06:	3310      	adds	r3, #16
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f000 fef7 	bl	800c7fc <xTaskRemoveFromEventList>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d007      	beq.n	800ba24 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ba14:	4b3c      	ldr	r3, [pc, #240]	; (800bb08 <xQueueReceive+0x1b4>)
 800ba16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba1a:	601a      	str	r2, [r3, #0]
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ba24:	f001 fef0 	bl	800d808 <vPortExitCritical>
				return pdPASS;
 800ba28:	2301      	movs	r3, #1
 800ba2a:	e069      	b.n	800bb00 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d103      	bne.n	800ba3a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba32:	f001 fee9 	bl	800d808 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ba36:	2300      	movs	r3, #0
 800ba38:	e062      	b.n	800bb00 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d106      	bne.n	800ba4e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba40:	f107 0310 	add.w	r3, r7, #16
 800ba44:	4618      	mov	r0, r3
 800ba46:	f000 ff3b 	bl	800c8c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba4e:	f001 fedb 	bl	800d808 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba52:	f000 fc57 	bl	800c304 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba56:	f001 fea9 	bl	800d7ac <vPortEnterCritical>
 800ba5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba60:	b25b      	sxtb	r3, r3
 800ba62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba66:	d103      	bne.n	800ba70 <xQueueReceive+0x11c>
 800ba68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba76:	b25b      	sxtb	r3, r3
 800ba78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba7c:	d103      	bne.n	800ba86 <xQueueReceive+0x132>
 800ba7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba80:	2200      	movs	r2, #0
 800ba82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba86:	f001 febf 	bl	800d808 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba8a:	1d3a      	adds	r2, r7, #4
 800ba8c:	f107 0310 	add.w	r3, r7, #16
 800ba90:	4611      	mov	r1, r2
 800ba92:	4618      	mov	r0, r3
 800ba94:	f000 ff2a 	bl	800c8ec <xTaskCheckForTimeOut>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d123      	bne.n	800bae6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baa0:	f000 f916 	bl	800bcd0 <prvIsQueueEmpty>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d017      	beq.n	800bada <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800baaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baac:	3324      	adds	r3, #36	; 0x24
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	4611      	mov	r1, r2
 800bab2:	4618      	mov	r0, r3
 800bab4:	f000 fe54 	bl	800c760 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baba:	f000 f8b7 	bl	800bc2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800babe:	f000 fc2f 	bl	800c320 <xTaskResumeAll>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d189      	bne.n	800b9dc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800bac8:	4b0f      	ldr	r3, [pc, #60]	; (800bb08 <xQueueReceive+0x1b4>)
 800baca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bace:	601a      	str	r2, [r3, #0]
 800bad0:	f3bf 8f4f 	dsb	sy
 800bad4:	f3bf 8f6f 	isb	sy
 800bad8:	e780      	b.n	800b9dc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800badc:	f000 f8a6 	bl	800bc2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bae0:	f000 fc1e 	bl	800c320 <xTaskResumeAll>
 800bae4:	e77a      	b.n	800b9dc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bae8:	f000 f8a0 	bl	800bc2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800baec:	f000 fc18 	bl	800c320 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800baf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baf2:	f000 f8ed 	bl	800bcd0 <prvIsQueueEmpty>
 800baf6:	4603      	mov	r3, r0
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	f43f af6f 	beq.w	800b9dc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bafe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3730      	adds	r7, #48	; 0x30
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	e000ed04 	.word	0xe000ed04

0800bb0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b086      	sub	sp, #24
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d10d      	bne.n	800bb46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d14d      	bne.n	800bbce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	4618      	mov	r0, r3
 800bb38:	f001 f84c 	bl	800cbd4 <xTaskPriorityDisinherit>
 800bb3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2200      	movs	r2, #0
 800bb42:	609a      	str	r2, [r3, #8]
 800bb44:	e043      	b.n	800bbce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d119      	bne.n	800bb80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6858      	ldr	r0, [r3, #4]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb54:	461a      	mov	r2, r3
 800bb56:	68b9      	ldr	r1, [r7, #8]
 800bb58:	f002 f984 	bl	800de64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	685a      	ldr	r2, [r3, #4]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb64:	441a      	add	r2, r3
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	685a      	ldr	r2, [r3, #4]
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d32b      	bcc.n	800bbce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	605a      	str	r2, [r3, #4]
 800bb7e:	e026      	b.n	800bbce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	68d8      	ldr	r0, [r3, #12]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb88:	461a      	mov	r2, r3
 800bb8a:	68b9      	ldr	r1, [r7, #8]
 800bb8c:	f002 f96a 	bl	800de64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	68da      	ldr	r2, [r3, #12]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb98:	425b      	negs	r3, r3
 800bb9a:	441a      	add	r2, r3
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	68da      	ldr	r2, [r3, #12]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d207      	bcs.n	800bbbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	689a      	ldr	r2, [r3, #8]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb4:	425b      	negs	r3, r3
 800bbb6:	441a      	add	r2, r3
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2b02      	cmp	r3, #2
 800bbc0:	d105      	bne.n	800bbce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d002      	beq.n	800bbce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	3b01      	subs	r3, #1
 800bbcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	1c5a      	adds	r2, r3, #1
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bbd6:	697b      	ldr	r3, [r7, #20]
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3718      	adds	r7, #24
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d018      	beq.n	800bc24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	68da      	ldr	r2, [r3, #12]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbfa:	441a      	add	r2, r3
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	68da      	ldr	r2, [r3, #12]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d303      	bcc.n	800bc14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	68d9      	ldr	r1, [r3, #12]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	6838      	ldr	r0, [r7, #0]
 800bc20:	f002 f920 	bl	800de64 <memcpy>
	}
}
 800bc24:	bf00      	nop
 800bc26:	3708      	adds	r7, #8
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bc34:	f001 fdba 	bl	800d7ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc40:	e011      	b.n	800bc66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d012      	beq.n	800bc70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	3324      	adds	r3, #36	; 0x24
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f000 fdd4 	bl	800c7fc <xTaskRemoveFromEventList>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d001      	beq.n	800bc5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bc5a:	f000 feb7 	bl	800c9cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bc5e:	7bfb      	ldrb	r3, [r7, #15]
 800bc60:	3b01      	subs	r3, #1
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	dce9      	bgt.n	800bc42 <prvUnlockQueue+0x16>
 800bc6e:	e000      	b.n	800bc72 <prvUnlockQueue+0x46>
					break;
 800bc70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	22ff      	movs	r2, #255	; 0xff
 800bc76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bc7a:	f001 fdc5 	bl	800d808 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bc7e:	f001 fd95 	bl	800d7ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc8a:	e011      	b.n	800bcb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	691b      	ldr	r3, [r3, #16]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d012      	beq.n	800bcba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	3310      	adds	r3, #16
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f000 fdaf 	bl	800c7fc <xTaskRemoveFromEventList>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d001      	beq.n	800bca8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bca4:	f000 fe92 	bl	800c9cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bca8:	7bbb      	ldrb	r3, [r7, #14]
 800bcaa:	3b01      	subs	r3, #1
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bcb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	dce9      	bgt.n	800bc8c <prvUnlockQueue+0x60>
 800bcb8:	e000      	b.n	800bcbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bcba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	22ff      	movs	r2, #255	; 0xff
 800bcc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bcc4:	f001 fda0 	bl	800d808 <vPortExitCritical>
}
 800bcc8:	bf00      	nop
 800bcca:	3710      	adds	r7, #16
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bcd8:	f001 fd68 	bl	800d7ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d102      	bne.n	800bcea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bce4:	2301      	movs	r3, #1
 800bce6:	60fb      	str	r3, [r7, #12]
 800bce8:	e001      	b.n	800bcee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bcea:	2300      	movs	r3, #0
 800bcec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bcee:	f001 fd8b 	bl	800d808 <vPortExitCritical>

	return xReturn;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3710      	adds	r7, #16
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b084      	sub	sp, #16
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd04:	f001 fd52 	bl	800d7ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d102      	bne.n	800bd1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bd14:	2301      	movs	r3, #1
 800bd16:	60fb      	str	r3, [r7, #12]
 800bd18:	e001      	b.n	800bd1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd1e:	f001 fd73 	bl	800d808 <vPortExitCritical>

	return xReturn;
 800bd22:	68fb      	ldr	r3, [r7, #12]
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3710      	adds	r7, #16
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b085      	sub	sp, #20
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd36:	2300      	movs	r3, #0
 800bd38:	60fb      	str	r3, [r7, #12]
 800bd3a:	e014      	b.n	800bd66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bd3c:	4a0e      	ldr	r2, [pc, #56]	; (800bd78 <vQueueAddToRegistry+0x4c>)
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d10b      	bne.n	800bd60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bd48:	490b      	ldr	r1, [pc, #44]	; (800bd78 <vQueueAddToRegistry+0x4c>)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	683a      	ldr	r2, [r7, #0]
 800bd4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bd52:	4a09      	ldr	r2, [pc, #36]	; (800bd78 <vQueueAddToRegistry+0x4c>)
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	00db      	lsls	r3, r3, #3
 800bd58:	4413      	add	r3, r2
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bd5e:	e005      	b.n	800bd6c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	3301      	adds	r3, #1
 800bd64:	60fb      	str	r3, [r7, #12]
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2b07      	cmp	r3, #7
 800bd6a:	d9e7      	bls.n	800bd3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bd6c:	bf00      	nop
 800bd6e:	3714      	adds	r7, #20
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr
 800bd78:	20033bb8 	.word	0x20033bb8

0800bd7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b086      	sub	sp, #24
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bd8c:	f001 fd0e 	bl	800d7ac <vPortEnterCritical>
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd96:	b25b      	sxtb	r3, r3
 800bd98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd9c:	d103      	bne.n	800bda6 <vQueueWaitForMessageRestricted+0x2a>
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	2200      	movs	r2, #0
 800bda2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bdac:	b25b      	sxtb	r3, r3
 800bdae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdb2:	d103      	bne.n	800bdbc <vQueueWaitForMessageRestricted+0x40>
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdbc:	f001 fd24 	bl	800d808 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d106      	bne.n	800bdd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	3324      	adds	r3, #36	; 0x24
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	68b9      	ldr	r1, [r7, #8]
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f000 fce9 	bl	800c7a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bdd6:	6978      	ldr	r0, [r7, #20]
 800bdd8:	f7ff ff28 	bl	800bc2c <prvUnlockQueue>
	}
 800bddc:	bf00      	nop
 800bdde:	3718      	adds	r7, #24
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b08e      	sub	sp, #56	; 0x38
 800bde8:	af04      	add	r7, sp, #16
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	607a      	str	r2, [r7, #4]
 800bdf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bdf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d109      	bne.n	800be0c <xTaskCreateStatic+0x28>
 800bdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfc:	f383 8811 	msr	BASEPRI, r3
 800be00:	f3bf 8f6f 	isb	sy
 800be04:	f3bf 8f4f 	dsb	sy
 800be08:	623b      	str	r3, [r7, #32]
 800be0a:	e7fe      	b.n	800be0a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800be0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d109      	bne.n	800be26 <xTaskCreateStatic+0x42>
 800be12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be16:	f383 8811 	msr	BASEPRI, r3
 800be1a:	f3bf 8f6f 	isb	sy
 800be1e:	f3bf 8f4f 	dsb	sy
 800be22:	61fb      	str	r3, [r7, #28]
 800be24:	e7fe      	b.n	800be24 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800be26:	f44f 6393 	mov.w	r3, #1176	; 0x498
 800be2a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	f5b3 6f93 	cmp.w	r3, #1176	; 0x498
 800be32:	d009      	beq.n	800be48 <xTaskCreateStatic+0x64>
 800be34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be38:	f383 8811 	msr	BASEPRI, r3
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	61bb      	str	r3, [r7, #24]
 800be46:	e7fe      	b.n	800be46 <xTaskCreateStatic+0x62>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800be48:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800be4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d01e      	beq.n	800be8e <xTaskCreateStatic+0xaa>
 800be50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be52:	2b00      	cmp	r3, #0
 800be54:	d01b      	beq.n	800be8e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be58:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800be5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be5e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800be60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be62:	2202      	movs	r2, #2
 800be64:	f883 248d 	strb.w	r2, [r3, #1165]	; 0x48d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800be68:	2300      	movs	r3, #0
 800be6a:	9303      	str	r3, [sp, #12]
 800be6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6e:	9302      	str	r3, [sp, #8]
 800be70:	f107 0314 	add.w	r3, r7, #20
 800be74:	9301      	str	r3, [sp, #4]
 800be76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be78:	9300      	str	r3, [sp, #0]
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	68b9      	ldr	r1, [r7, #8]
 800be80:	68f8      	ldr	r0, [r7, #12]
 800be82:	f000 f851 	bl	800bf28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be88:	f000 f928 	bl	800c0dc <prvAddNewTaskToReadyList>
 800be8c:	e001      	b.n	800be92 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800be8e:	2300      	movs	r3, #0
 800be90:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800be92:	697b      	ldr	r3, [r7, #20]
	}
 800be94:	4618      	mov	r0, r3
 800be96:	3728      	adds	r7, #40	; 0x28
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b08c      	sub	sp, #48	; 0x30
 800bea0:	af04      	add	r7, sp, #16
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	603b      	str	r3, [r7, #0]
 800bea8:	4613      	mov	r3, r2
 800beaa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800beac:	88fb      	ldrh	r3, [r7, #6]
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	4618      	mov	r0, r3
 800beb2:	f001 fd95 	bl	800d9e0 <pvPortMalloc>
 800beb6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d00f      	beq.n	800bede <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bebe:	f44f 6093 	mov.w	r0, #1176	; 0x498
 800bec2:	f001 fd8d 	bl	800d9e0 <pvPortMalloc>
 800bec6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bec8:	69fb      	ldr	r3, [r7, #28]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d003      	beq.n	800bed6 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bece:	69fb      	ldr	r3, [r7, #28]
 800bed0:	697a      	ldr	r2, [r7, #20]
 800bed2:	631a      	str	r2, [r3, #48]	; 0x30
 800bed4:	e005      	b.n	800bee2 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bed6:	6978      	ldr	r0, [r7, #20]
 800bed8:	f001 fe22 	bl	800db20 <vPortFree>
 800bedc:	e001      	b.n	800bee2 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bede:	2300      	movs	r3, #0
 800bee0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bee2:	69fb      	ldr	r3, [r7, #28]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d017      	beq.n	800bf18 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bee8:	69fb      	ldr	r3, [r7, #28]
 800beea:	2200      	movs	r2, #0
 800beec:	f883 248d 	strb.w	r2, [r3, #1165]	; 0x48d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bef0:	88fa      	ldrh	r2, [r7, #6]
 800bef2:	2300      	movs	r3, #0
 800bef4:	9303      	str	r3, [sp, #12]
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	9302      	str	r3, [sp, #8]
 800befa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befc:	9301      	str	r3, [sp, #4]
 800befe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf00:	9300      	str	r3, [sp, #0]
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	68b9      	ldr	r1, [r7, #8]
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	f000 f80e 	bl	800bf28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf0c:	69f8      	ldr	r0, [r7, #28]
 800bf0e:	f000 f8e5 	bl	800c0dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bf12:	2301      	movs	r3, #1
 800bf14:	61bb      	str	r3, [r7, #24]
 800bf16:	e002      	b.n	800bf1e <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bf18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bf1e:	69bb      	ldr	r3, [r7, #24]
	}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3720      	adds	r7, #32
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bf28:	b590      	push	{r4, r7, lr}
 800bf2a:	b089      	sub	sp, #36	; 0x24
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	60b9      	str	r1, [r7, #8]
 800bf32:	607a      	str	r2, [r7, #4]
 800bf34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bf36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	009b      	lsls	r3, r3, #2
 800bf3e:	461a      	mov	r2, r3
 800bf40:	21a5      	movs	r1, #165	; 0xa5
 800bf42:	f001 ff9a 	bl	800de7a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bf46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bf50:	3b01      	subs	r3, #1
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	4413      	add	r3, r2
 800bf56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	f023 0307 	bic.w	r3, r3, #7
 800bf5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bf60:	69bb      	ldr	r3, [r7, #24]
 800bf62:	f003 0307 	and.w	r3, r3, #7
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d009      	beq.n	800bf7e <prvInitialiseNewTask+0x56>
 800bf6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6e:	f383 8811 	msr	BASEPRI, r3
 800bf72:	f3bf 8f6f 	isb	sy
 800bf76:	f3bf 8f4f 	dsb	sy
 800bf7a:	617b      	str	r3, [r7, #20]
 800bf7c:	e7fe      	b.n	800bf7c <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800bf7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf80:	69ba      	ldr	r2, [r7, #24]
 800bf82:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d01f      	beq.n	800bfca <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	61fb      	str	r3, [r7, #28]
 800bf8e:	e012      	b.n	800bfb6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bf90:	68ba      	ldr	r2, [r7, #8]
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	4413      	add	r3, r2
 800bf96:	7819      	ldrb	r1, [r3, #0]
 800bf98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf9a:	69fb      	ldr	r3, [r7, #28]
 800bf9c:	4413      	add	r3, r2
 800bf9e:	3334      	adds	r3, #52	; 0x34
 800bfa0:	460a      	mov	r2, r1
 800bfa2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bfa4:	68ba      	ldr	r2, [r7, #8]
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d006      	beq.n	800bfbe <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	61fb      	str	r3, [r7, #28]
 800bfb6:	69fb      	ldr	r3, [r7, #28]
 800bfb8:	2b0f      	cmp	r3, #15
 800bfba:	d9e9      	bls.n	800bf90 <prvInitialiseNewTask+0x68>
 800bfbc:	e000      	b.n	800bfc0 <prvInitialiseNewTask+0x98>
			{
				break;
 800bfbe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bfc8:	e003      	b.n	800bfd2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bfca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd4:	2b37      	cmp	r3, #55	; 0x37
 800bfd6:	d901      	bls.n	800bfdc <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bfd8:	2337      	movs	r3, #55	; 0x37
 800bfda:	633b      	str	r3, [r7, #48]	; 0x30
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfe0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfe6:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800bfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfea:	2200      	movs	r2, #0
 800bfec:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bfee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff0:	3304      	adds	r3, #4
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7ff f901 	bl	800b1fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffa:	3318      	adds	r3, #24
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7ff f8fc 	bl	800b1fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c006:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c010:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c016:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800c018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01a:	2200      	movs	r2, #0
 800c01c:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c020:	2200      	movs	r2, #0
 800c022:	f8c3 2488 	str.w	r2, [r3, #1160]	; 0x488
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c028:	2200      	movs	r2, #0
 800c02a:	f883 248c 	strb.w	r2, [r3, #1164]	; 0x48c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c030:	3360      	adds	r3, #96	; 0x60
 800c032:	f44f 6285 	mov.w	r2, #1064	; 0x428
 800c036:	2100      	movs	r1, #0
 800c038:	4618      	mov	r0, r3
 800c03a:	f001 ff1e 	bl	800de7a <memset>
 800c03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c040:	f503 7253 	add.w	r2, r3, #844	; 0x34c
 800c044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c046:	665a      	str	r2, [r3, #100]	; 0x64
 800c048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04a:	f503 726d 	add.w	r2, r3, #948	; 0x3b4
 800c04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c050:	669a      	str	r2, [r3, #104]	; 0x68
 800c052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c054:	f203 421c 	addw	r2, r3, #1052	; 0x41c
 800c058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c05a:	66da      	str	r2, [r3, #108]	; 0x6c
 800c05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c05e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800c062:	f04f 0301 	mov.w	r3, #1
 800c066:	f04f 0400 	mov.w	r4, #0
 800c06a:	e9c2 3400 	strd	r3, r4, [r2]
 800c06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c070:	f243 320e 	movw	r2, #13070	; 0x330e
 800c074:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 800c078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07a:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 800c07e:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
 800c082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c084:	f241 2234 	movw	r2, #4660	; 0x1234
 800c088:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 800c08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08e:	f24e 626d 	movw	r2, #58989	; 0xe66d
 800c092:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
 800c096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c098:	f64d 62ec 	movw	r2, #57068	; 0xdeec
 800c09c:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 800c0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a2:	2205      	movs	r2, #5
 800c0a4:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 800c0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0aa:	220b      	movs	r2, #11
 800c0ac:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800c0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f883 248e 	strb.w	r2, [r3, #1166]	; 0x48e
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c0b8:	683a      	ldr	r2, [r7, #0]
 800c0ba:	68f9      	ldr	r1, [r7, #12]
 800c0bc:	69b8      	ldr	r0, [r7, #24]
 800c0be:	f001 fa4d 	bl	800d55c <pxPortInitialiseStack>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d002      	beq.n	800c0d4 <prvInitialiseNewTask+0x1ac>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c0ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c0d4:	bf00      	nop
 800c0d6:	3724      	adds	r7, #36	; 0x24
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd90      	pop	{r4, r7, pc}

0800c0dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c0e4:	f001 fb62 	bl	800d7ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c0e8:	4b2d      	ldr	r3, [pc, #180]	; (800c1a0 <prvAddNewTaskToReadyList+0xc4>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	4a2c      	ldr	r2, [pc, #176]	; (800c1a0 <prvAddNewTaskToReadyList+0xc4>)
 800c0f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c0f2:	4b2c      	ldr	r3, [pc, #176]	; (800c1a4 <prvAddNewTaskToReadyList+0xc8>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d109      	bne.n	800c10e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c0fa:	4a2a      	ldr	r2, [pc, #168]	; (800c1a4 <prvAddNewTaskToReadyList+0xc8>)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c100:	4b27      	ldr	r3, [pc, #156]	; (800c1a0 <prvAddNewTaskToReadyList+0xc4>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	2b01      	cmp	r3, #1
 800c106:	d110      	bne.n	800c12a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c108:	f000 fc86 	bl	800ca18 <prvInitialiseTaskLists>
 800c10c:	e00d      	b.n	800c12a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c10e:	4b26      	ldr	r3, [pc, #152]	; (800c1a8 <prvAddNewTaskToReadyList+0xcc>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d109      	bne.n	800c12a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c116:	4b23      	ldr	r3, [pc, #140]	; (800c1a4 <prvAddNewTaskToReadyList+0xc8>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c120:	429a      	cmp	r2, r3
 800c122:	d802      	bhi.n	800c12a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c124:	4a1f      	ldr	r2, [pc, #124]	; (800c1a4 <prvAddNewTaskToReadyList+0xc8>)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c12a:	4b20      	ldr	r3, [pc, #128]	; (800c1ac <prvAddNewTaskToReadyList+0xd0>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	3301      	adds	r3, #1
 800c130:	4a1e      	ldr	r2, [pc, #120]	; (800c1ac <prvAddNewTaskToReadyList+0xd0>)
 800c132:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c134:	4b1d      	ldr	r3, [pc, #116]	; (800c1ac <prvAddNewTaskToReadyList+0xd0>)
 800c136:	681a      	ldr	r2, [r3, #0]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c140:	4b1b      	ldr	r3, [pc, #108]	; (800c1b0 <prvAddNewTaskToReadyList+0xd4>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	429a      	cmp	r2, r3
 800c146:	d903      	bls.n	800c150 <prvAddNewTaskToReadyList+0x74>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c14c:	4a18      	ldr	r2, [pc, #96]	; (800c1b0 <prvAddNewTaskToReadyList+0xd4>)
 800c14e:	6013      	str	r3, [r2, #0]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c154:	4613      	mov	r3, r2
 800c156:	009b      	lsls	r3, r3, #2
 800c158:	4413      	add	r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4a15      	ldr	r2, [pc, #84]	; (800c1b4 <prvAddNewTaskToReadyList+0xd8>)
 800c15e:	441a      	add	r2, r3
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	3304      	adds	r3, #4
 800c164:	4619      	mov	r1, r3
 800c166:	4610      	mov	r0, r2
 800c168:	f7ff f854 	bl	800b214 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c16c:	f001 fb4c 	bl	800d808 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c170:	4b0d      	ldr	r3, [pc, #52]	; (800c1a8 <prvAddNewTaskToReadyList+0xcc>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d00e      	beq.n	800c196 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c178:	4b0a      	ldr	r3, [pc, #40]	; (800c1a4 <prvAddNewTaskToReadyList+0xc8>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c182:	429a      	cmp	r2, r3
 800c184:	d207      	bcs.n	800c196 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c186:	4b0c      	ldr	r3, [pc, #48]	; (800c1b8 <prvAddNewTaskToReadyList+0xdc>)
 800c188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c18c:	601a      	str	r2, [r3, #0]
 800c18e:	f3bf 8f4f 	dsb	sy
 800c192:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c196:	bf00      	nop
 800c198:	3708      	adds	r7, #8
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	20033528 	.word	0x20033528
 800c1a4:	20033050 	.word	0x20033050
 800c1a8:	20033534 	.word	0x20033534
 800c1ac:	20033544 	.word	0x20033544
 800c1b0:	20033530 	.word	0x20033530
 800c1b4:	20033054 	.word	0x20033054
 800c1b8:	e000ed04 	.word	0xe000ed04

0800c1bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d016      	beq.n	800c1fc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c1ce:	4b13      	ldr	r3, [pc, #76]	; (800c21c <vTaskDelay+0x60>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d009      	beq.n	800c1ea <vTaskDelay+0x2e>
 800c1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1da:	f383 8811 	msr	BASEPRI, r3
 800c1de:	f3bf 8f6f 	isb	sy
 800c1e2:	f3bf 8f4f 	dsb	sy
 800c1e6:	60bb      	str	r3, [r7, #8]
 800c1e8:	e7fe      	b.n	800c1e8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800c1ea:	f000 f88b 	bl	800c304 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c1ee:	2100      	movs	r1, #0
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 fd5b 	bl	800ccac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c1f6:	f000 f893 	bl	800c320 <xTaskResumeAll>
 800c1fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d107      	bne.n	800c212 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800c202:	4b07      	ldr	r3, [pc, #28]	; (800c220 <vTaskDelay+0x64>)
 800c204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c208:	601a      	str	r2, [r3, #0]
 800c20a:	f3bf 8f4f 	dsb	sy
 800c20e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c212:	bf00      	nop
 800c214:	3710      	adds	r7, #16
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
 800c21a:	bf00      	nop
 800c21c:	20033550 	.word	0x20033550
 800c220:	e000ed04 	.word	0xe000ed04

0800c224 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b08a      	sub	sp, #40	; 0x28
 800c228:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c22a:	2300      	movs	r3, #0
 800c22c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c22e:	2300      	movs	r3, #0
 800c230:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c232:	463a      	mov	r2, r7
 800c234:	1d39      	adds	r1, r7, #4
 800c236:	f107 0308 	add.w	r3, r7, #8
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7fe ff3a 	bl	800b0b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c240:	6839      	ldr	r1, [r7, #0]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	68ba      	ldr	r2, [r7, #8]
 800c246:	9202      	str	r2, [sp, #8]
 800c248:	9301      	str	r3, [sp, #4]
 800c24a:	2300      	movs	r3, #0
 800c24c:	9300      	str	r3, [sp, #0]
 800c24e:	2300      	movs	r3, #0
 800c250:	460a      	mov	r2, r1
 800c252:	4924      	ldr	r1, [pc, #144]	; (800c2e4 <vTaskStartScheduler+0xc0>)
 800c254:	4824      	ldr	r0, [pc, #144]	; (800c2e8 <vTaskStartScheduler+0xc4>)
 800c256:	f7ff fdc5 	bl	800bde4 <xTaskCreateStatic>
 800c25a:	4602      	mov	r2, r0
 800c25c:	4b23      	ldr	r3, [pc, #140]	; (800c2ec <vTaskStartScheduler+0xc8>)
 800c25e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c260:	4b22      	ldr	r3, [pc, #136]	; (800c2ec <vTaskStartScheduler+0xc8>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d002      	beq.n	800c26e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c268:	2301      	movs	r3, #1
 800c26a:	617b      	str	r3, [r7, #20]
 800c26c:	e001      	b.n	800c272 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c26e:	2300      	movs	r3, #0
 800c270:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	2b01      	cmp	r3, #1
 800c276:	d102      	bne.n	800c27e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c278:	f000 fd72 	bl	800cd60 <xTimerCreateTimerTask>
 800c27c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	2b01      	cmp	r3, #1
 800c282:	d11c      	bne.n	800c2be <vTaskStartScheduler+0x9a>
 800c284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c288:	f383 8811 	msr	BASEPRI, r3
 800c28c:	f3bf 8f6f 	isb	sy
 800c290:	f3bf 8f4f 	dsb	sy
 800c294:	613b      	str	r3, [r7, #16]

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c296:	4b16      	ldr	r3, [pc, #88]	; (800c2f0 <vTaskStartScheduler+0xcc>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	3360      	adds	r3, #96	; 0x60
 800c29c:	4a15      	ldr	r2, [pc, #84]	; (800c2f4 <vTaskStartScheduler+0xd0>)
 800c29e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c2a0:	4b15      	ldr	r3, [pc, #84]	; (800c2f8 <vTaskStartScheduler+0xd4>)
 800c2a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c2a8:	4b14      	ldr	r3, [pc, #80]	; (800c2fc <vTaskStartScheduler+0xd8>)
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c2ae:	4b14      	ldr	r3, [pc, #80]	; (800c300 <vTaskStartScheduler+0xdc>)
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800c2b4:	f7f4 fb28 	bl	8000908 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c2b8:	f001 f9da 	bl	800d670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c2bc:	e00d      	b.n	800c2da <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2c4:	d109      	bne.n	800c2da <vTaskStartScheduler+0xb6>
 800c2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ca:	f383 8811 	msr	BASEPRI, r3
 800c2ce:	f3bf 8f6f 	isb	sy
 800c2d2:	f3bf 8f4f 	dsb	sy
 800c2d6:	60fb      	str	r3, [r7, #12]
 800c2d8:	e7fe      	b.n	800c2d8 <vTaskStartScheduler+0xb4>
}
 800c2da:	bf00      	nop
 800c2dc:	3718      	adds	r7, #24
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	0800e7a8 	.word	0x0800e7a8
 800c2e8:	0800c9e5 	.word	0x0800c9e5
 800c2ec:	2003354c 	.word	0x2003354c
 800c2f0:	20033050 	.word	0x20033050
 800c2f4:	200000d4 	.word	0x200000d4
 800c2f8:	20033548 	.word	0x20033548
 800c2fc:	20033534 	.word	0x20033534
 800c300:	2003352c 	.word	0x2003352c

0800c304 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c304:	b480      	push	{r7}
 800c306:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c308:	4b04      	ldr	r3, [pc, #16]	; (800c31c <vTaskSuspendAll+0x18>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	3301      	adds	r3, #1
 800c30e:	4a03      	ldr	r2, [pc, #12]	; (800c31c <vTaskSuspendAll+0x18>)
 800c310:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c312:	bf00      	nop
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr
 800c31c:	20033550 	.word	0x20033550

0800c320 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b084      	sub	sp, #16
 800c324:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c326:	2300      	movs	r3, #0
 800c328:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c32a:	2300      	movs	r3, #0
 800c32c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c32e:	4b41      	ldr	r3, [pc, #260]	; (800c434 <xTaskResumeAll+0x114>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d109      	bne.n	800c34a <xTaskResumeAll+0x2a>
 800c336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c33a:	f383 8811 	msr	BASEPRI, r3
 800c33e:	f3bf 8f6f 	isb	sy
 800c342:	f3bf 8f4f 	dsb	sy
 800c346:	603b      	str	r3, [r7, #0]
 800c348:	e7fe      	b.n	800c348 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c34a:	f001 fa2f 	bl	800d7ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c34e:	4b39      	ldr	r3, [pc, #228]	; (800c434 <xTaskResumeAll+0x114>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	3b01      	subs	r3, #1
 800c354:	4a37      	ldr	r2, [pc, #220]	; (800c434 <xTaskResumeAll+0x114>)
 800c356:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c358:	4b36      	ldr	r3, [pc, #216]	; (800c434 <xTaskResumeAll+0x114>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d162      	bne.n	800c426 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c360:	4b35      	ldr	r3, [pc, #212]	; (800c438 <xTaskResumeAll+0x118>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d05e      	beq.n	800c426 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c368:	e02f      	b.n	800c3ca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c36a:	4b34      	ldr	r3, [pc, #208]	; (800c43c <xTaskResumeAll+0x11c>)
 800c36c:	68db      	ldr	r3, [r3, #12]
 800c36e:	68db      	ldr	r3, [r3, #12]
 800c370:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	3318      	adds	r3, #24
 800c376:	4618      	mov	r0, r3
 800c378:	f7fe ffa9 	bl	800b2ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	3304      	adds	r3, #4
 800c380:	4618      	mov	r0, r3
 800c382:	f7fe ffa4 	bl	800b2ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c38a:	4b2d      	ldr	r3, [pc, #180]	; (800c440 <xTaskResumeAll+0x120>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d903      	bls.n	800c39a <xTaskResumeAll+0x7a>
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c396:	4a2a      	ldr	r2, [pc, #168]	; (800c440 <xTaskResumeAll+0x120>)
 800c398:	6013      	str	r3, [r2, #0]
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c39e:	4613      	mov	r3, r2
 800c3a0:	009b      	lsls	r3, r3, #2
 800c3a2:	4413      	add	r3, r2
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	4a27      	ldr	r2, [pc, #156]	; (800c444 <xTaskResumeAll+0x124>)
 800c3a8:	441a      	add	r2, r3
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	3304      	adds	r3, #4
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	4610      	mov	r0, r2
 800c3b2:	f7fe ff2f 	bl	800b214 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ba:	4b23      	ldr	r3, [pc, #140]	; (800c448 <xTaskResumeAll+0x128>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d302      	bcc.n	800c3ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c3c4:	4b21      	ldr	r3, [pc, #132]	; (800c44c <xTaskResumeAll+0x12c>)
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c3ca:	4b1c      	ldr	r3, [pc, #112]	; (800c43c <xTaskResumeAll+0x11c>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d1cb      	bne.n	800c36a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d001      	beq.n	800c3dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c3d8:	f000 fbbe 	bl	800cb58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c3dc:	4b1c      	ldr	r3, [pc, #112]	; (800c450 <xTaskResumeAll+0x130>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d010      	beq.n	800c40a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c3e8:	f000 f846 	bl	800c478 <xTaskIncrementTick>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d002      	beq.n	800c3f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c3f2:	4b16      	ldr	r3, [pc, #88]	; (800c44c <xTaskResumeAll+0x12c>)
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	3b01      	subs	r3, #1
 800c3fc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d1f1      	bne.n	800c3e8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800c404:	4b12      	ldr	r3, [pc, #72]	; (800c450 <xTaskResumeAll+0x130>)
 800c406:	2200      	movs	r2, #0
 800c408:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c40a:	4b10      	ldr	r3, [pc, #64]	; (800c44c <xTaskResumeAll+0x12c>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d009      	beq.n	800c426 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c412:	2301      	movs	r3, #1
 800c414:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c416:	4b0f      	ldr	r3, [pc, #60]	; (800c454 <xTaskResumeAll+0x134>)
 800c418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c41c:	601a      	str	r2, [r3, #0]
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c426:	f001 f9ef 	bl	800d808 <vPortExitCritical>

	return xAlreadyYielded;
 800c42a:	68bb      	ldr	r3, [r7, #8]
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3710      	adds	r7, #16
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}
 800c434:	20033550 	.word	0x20033550
 800c438:	20033528 	.word	0x20033528
 800c43c:	200334e4 	.word	0x200334e4
 800c440:	20033530 	.word	0x20033530
 800c444:	20033054 	.word	0x20033054
 800c448:	20033050 	.word	0x20033050
 800c44c:	2003353c 	.word	0x2003353c
 800c450:	20033538 	.word	0x20033538
 800c454:	e000ed04 	.word	0xe000ed04

0800c458 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c458:	b480      	push	{r7}
 800c45a:	b083      	sub	sp, #12
 800c45c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c45e:	4b05      	ldr	r3, [pc, #20]	; (800c474 <xTaskGetTickCount+0x1c>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c464:	687b      	ldr	r3, [r7, #4]
}
 800c466:	4618      	mov	r0, r3
 800c468:	370c      	adds	r7, #12
 800c46a:	46bd      	mov	sp, r7
 800c46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c470:	4770      	bx	lr
 800c472:	bf00      	nop
 800c474:	2003352c 	.word	0x2003352c

0800c478 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c47e:	2300      	movs	r3, #0
 800c480:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c482:	4b52      	ldr	r3, [pc, #328]	; (800c5cc <xTaskIncrementTick+0x154>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	f040 808e 	bne.w	800c5a8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c48c:	4b50      	ldr	r3, [pc, #320]	; (800c5d0 <xTaskIncrementTick+0x158>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	3301      	adds	r3, #1
 800c492:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c494:	4a4e      	ldr	r2, [pc, #312]	; (800c5d0 <xTaskIncrementTick+0x158>)
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d11f      	bne.n	800c4e0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800c4a0:	4b4c      	ldr	r3, [pc, #304]	; (800c5d4 <xTaskIncrementTick+0x15c>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d009      	beq.n	800c4be <xTaskIncrementTick+0x46>
 800c4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ae:	f383 8811 	msr	BASEPRI, r3
 800c4b2:	f3bf 8f6f 	isb	sy
 800c4b6:	f3bf 8f4f 	dsb	sy
 800c4ba:	603b      	str	r3, [r7, #0]
 800c4bc:	e7fe      	b.n	800c4bc <xTaskIncrementTick+0x44>
 800c4be:	4b45      	ldr	r3, [pc, #276]	; (800c5d4 <xTaskIncrementTick+0x15c>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	60fb      	str	r3, [r7, #12]
 800c4c4:	4b44      	ldr	r3, [pc, #272]	; (800c5d8 <xTaskIncrementTick+0x160>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a42      	ldr	r2, [pc, #264]	; (800c5d4 <xTaskIncrementTick+0x15c>)
 800c4ca:	6013      	str	r3, [r2, #0]
 800c4cc:	4a42      	ldr	r2, [pc, #264]	; (800c5d8 <xTaskIncrementTick+0x160>)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	6013      	str	r3, [r2, #0]
 800c4d2:	4b42      	ldr	r3, [pc, #264]	; (800c5dc <xTaskIncrementTick+0x164>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	4a40      	ldr	r2, [pc, #256]	; (800c5dc <xTaskIncrementTick+0x164>)
 800c4da:	6013      	str	r3, [r2, #0]
 800c4dc:	f000 fb3c 	bl	800cb58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c4e0:	4b3f      	ldr	r3, [pc, #252]	; (800c5e0 <xTaskIncrementTick+0x168>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	693a      	ldr	r2, [r7, #16]
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d349      	bcc.n	800c57e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4ea:	4b3a      	ldr	r3, [pc, #232]	; (800c5d4 <xTaskIncrementTick+0x15c>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d104      	bne.n	800c4fe <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4f4:	4b3a      	ldr	r3, [pc, #232]	; (800c5e0 <xTaskIncrementTick+0x168>)
 800c4f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4fa:	601a      	str	r2, [r3, #0]
					break;
 800c4fc:	e03f      	b.n	800c57e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4fe:	4b35      	ldr	r3, [pc, #212]	; (800c5d4 <xTaskIncrementTick+0x15c>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	68db      	ldr	r3, [r3, #12]
 800c504:	68db      	ldr	r3, [r3, #12]
 800c506:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c50e:	693a      	ldr	r2, [r7, #16]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	429a      	cmp	r2, r3
 800c514:	d203      	bcs.n	800c51e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c516:	4a32      	ldr	r2, [pc, #200]	; (800c5e0 <xTaskIncrementTick+0x168>)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c51c:	e02f      	b.n	800c57e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	3304      	adds	r3, #4
 800c522:	4618      	mov	r0, r3
 800c524:	f7fe fed3 	bl	800b2ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d004      	beq.n	800c53a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	3318      	adds	r3, #24
 800c534:	4618      	mov	r0, r3
 800c536:	f7fe feca 	bl	800b2ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c53e:	4b29      	ldr	r3, [pc, #164]	; (800c5e4 <xTaskIncrementTick+0x16c>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	429a      	cmp	r2, r3
 800c544:	d903      	bls.n	800c54e <xTaskIncrementTick+0xd6>
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c54a:	4a26      	ldr	r2, [pc, #152]	; (800c5e4 <xTaskIncrementTick+0x16c>)
 800c54c:	6013      	str	r3, [r2, #0]
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c552:	4613      	mov	r3, r2
 800c554:	009b      	lsls	r3, r3, #2
 800c556:	4413      	add	r3, r2
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	4a23      	ldr	r2, [pc, #140]	; (800c5e8 <xTaskIncrementTick+0x170>)
 800c55c:	441a      	add	r2, r3
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	3304      	adds	r3, #4
 800c562:	4619      	mov	r1, r3
 800c564:	4610      	mov	r0, r2
 800c566:	f7fe fe55 	bl	800b214 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c56e:	4b1f      	ldr	r3, [pc, #124]	; (800c5ec <xTaskIncrementTick+0x174>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c574:	429a      	cmp	r2, r3
 800c576:	d3b8      	bcc.n	800c4ea <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800c578:	2301      	movs	r3, #1
 800c57a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c57c:	e7b5      	b.n	800c4ea <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c57e:	4b1b      	ldr	r3, [pc, #108]	; (800c5ec <xTaskIncrementTick+0x174>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c584:	4918      	ldr	r1, [pc, #96]	; (800c5e8 <xTaskIncrementTick+0x170>)
 800c586:	4613      	mov	r3, r2
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	4413      	add	r3, r2
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	440b      	add	r3, r1
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	2b01      	cmp	r3, #1
 800c594:	d901      	bls.n	800c59a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c596:	2301      	movs	r3, #1
 800c598:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 800c59a:	4b15      	ldr	r3, [pc, #84]	; (800c5f0 <xTaskIncrementTick+0x178>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d109      	bne.n	800c5b6 <xTaskIncrementTick+0x13e>
			{
				vApplicationTickHook();
 800c5a2:	f7fe fd6e 	bl	800b082 <vApplicationTickHook>
 800c5a6:	e006      	b.n	800c5b6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c5a8:	4b11      	ldr	r3, [pc, #68]	; (800c5f0 <xTaskIncrementTick+0x178>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	4a10      	ldr	r2, [pc, #64]	; (800c5f0 <xTaskIncrementTick+0x178>)
 800c5b0:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800c5b2:	f7fe fd66 	bl	800b082 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c5b6:	4b0f      	ldr	r3, [pc, #60]	; (800c5f4 <xTaskIncrementTick+0x17c>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d001      	beq.n	800c5c2 <xTaskIncrementTick+0x14a>
		{
			xSwitchRequired = pdTRUE;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c5c2:	697b      	ldr	r3, [r7, #20]
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3718      	adds	r7, #24
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	20033550 	.word	0x20033550
 800c5d0:	2003352c 	.word	0x2003352c
 800c5d4:	200334dc 	.word	0x200334dc
 800c5d8:	200334e0 	.word	0x200334e0
 800c5dc:	20033540 	.word	0x20033540
 800c5e0:	20033548 	.word	0x20033548
 800c5e4:	20033530 	.word	0x20033530
 800c5e8:	20033054 	.word	0x20033054
 800c5ec:	20033050 	.word	0x20033050
 800c5f0:	20033538 	.word	0x20033538
 800c5f4:	2003353c 	.word	0x2003353c

0800c5f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b086      	sub	sp, #24
 800c5fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c5fe:	4b4f      	ldr	r3, [pc, #316]	; (800c73c <vTaskSwitchContext+0x144>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d003      	beq.n	800c60e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c606:	4b4e      	ldr	r3, [pc, #312]	; (800c740 <vTaskSwitchContext+0x148>)
 800c608:	2201      	movs	r2, #1
 800c60a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c60c:	e091      	b.n	800c732 <vTaskSwitchContext+0x13a>
		xYieldPending = pdFALSE;
 800c60e:	4b4c      	ldr	r3, [pc, #304]	; (800c740 <vTaskSwitchContext+0x148>)
 800c610:	2200      	movs	r2, #0
 800c612:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800c614:	f7f4 f97f 	bl	8000916 <getRunTimeCounterValue>
 800c618:	4602      	mov	r2, r0
 800c61a:	4b4a      	ldr	r3, [pc, #296]	; (800c744 <vTaskSwitchContext+0x14c>)
 800c61c:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800c61e:	4b49      	ldr	r3, [pc, #292]	; (800c744 <vTaskSwitchContext+0x14c>)
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	4b49      	ldr	r3, [pc, #292]	; (800c748 <vTaskSwitchContext+0x150>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	429a      	cmp	r2, r3
 800c628:	d909      	bls.n	800c63e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800c62a:	4b48      	ldr	r3, [pc, #288]	; (800c74c <vTaskSwitchContext+0x154>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800c630:	4a44      	ldr	r2, [pc, #272]	; (800c744 <vTaskSwitchContext+0x14c>)
 800c632:	6810      	ldr	r0, [r2, #0]
 800c634:	4a44      	ldr	r2, [pc, #272]	; (800c748 <vTaskSwitchContext+0x150>)
 800c636:	6812      	ldr	r2, [r2, #0]
 800c638:	1a82      	subs	r2, r0, r2
 800c63a:	440a      	add	r2, r1
 800c63c:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800c63e:	4b41      	ldr	r3, [pc, #260]	; (800c744 <vTaskSwitchContext+0x14c>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4a41      	ldr	r2, [pc, #260]	; (800c748 <vTaskSwitchContext+0x150>)
 800c644:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c646:	4b41      	ldr	r3, [pc, #260]	; (800c74c <vTaskSwitchContext+0x154>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c64c:	613b      	str	r3, [r7, #16]
 800c64e:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800c652:	60fb      	str	r3, [r7, #12]
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	68fa      	ldr	r2, [r7, #12]
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d111      	bne.n	800c682 <vTaskSwitchContext+0x8a>
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	3304      	adds	r3, #4
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	68fa      	ldr	r2, [r7, #12]
 800c666:	429a      	cmp	r2, r3
 800c668:	d10b      	bne.n	800c682 <vTaskSwitchContext+0x8a>
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	3308      	adds	r3, #8
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	68fa      	ldr	r2, [r7, #12]
 800c672:	429a      	cmp	r2, r3
 800c674:	d105      	bne.n	800c682 <vTaskSwitchContext+0x8a>
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	330c      	adds	r3, #12
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	68fa      	ldr	r2, [r7, #12]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d008      	beq.n	800c694 <vTaskSwitchContext+0x9c>
 800c682:	4b32      	ldr	r3, [pc, #200]	; (800c74c <vTaskSwitchContext+0x154>)
 800c684:	681a      	ldr	r2, [r3, #0]
 800c686:	4b31      	ldr	r3, [pc, #196]	; (800c74c <vTaskSwitchContext+0x154>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	3334      	adds	r3, #52	; 0x34
 800c68c:	4619      	mov	r1, r3
 800c68e:	4610      	mov	r0, r2
 800c690:	f7fe fd05 	bl	800b09e <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 800c694:	4b2d      	ldr	r3, [pc, #180]	; (800c74c <vTaskSwitchContext+0x154>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a2d      	ldr	r2, [pc, #180]	; (800c750 <vTaskSwitchContext+0x158>)
 800c69a:	6812      	ldr	r2, [r2, #0]
 800c69c:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6a0:	4b2c      	ldr	r3, [pc, #176]	; (800c754 <vTaskSwitchContext+0x15c>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	617b      	str	r3, [r7, #20]
 800c6a6:	e00f      	b.n	800c6c8 <vTaskSwitchContext+0xd0>
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d109      	bne.n	800c6c2 <vTaskSwitchContext+0xca>
 800c6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b2:	f383 8811 	msr	BASEPRI, r3
 800c6b6:	f3bf 8f6f 	isb	sy
 800c6ba:	f3bf 8f4f 	dsb	sy
 800c6be:	607b      	str	r3, [r7, #4]
 800c6c0:	e7fe      	b.n	800c6c0 <vTaskSwitchContext+0xc8>
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	3b01      	subs	r3, #1
 800c6c6:	617b      	str	r3, [r7, #20]
 800c6c8:	4923      	ldr	r1, [pc, #140]	; (800c758 <vTaskSwitchContext+0x160>)
 800c6ca:	697a      	ldr	r2, [r7, #20]
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	009b      	lsls	r3, r3, #2
 800c6d0:	4413      	add	r3, r2
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	440b      	add	r3, r1
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d0e5      	beq.n	800c6a8 <vTaskSwitchContext+0xb0>
 800c6dc:	697a      	ldr	r2, [r7, #20]
 800c6de:	4613      	mov	r3, r2
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	4413      	add	r3, r2
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4a1c      	ldr	r2, [pc, #112]	; (800c758 <vTaskSwitchContext+0x160>)
 800c6e8:	4413      	add	r3, r2
 800c6ea:	60bb      	str	r3, [r7, #8]
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	685a      	ldr	r2, [r3, #4]
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	605a      	str	r2, [r3, #4]
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	685a      	ldr	r2, [r3, #4]
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	3308      	adds	r3, #8
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d104      	bne.n	800c70c <vTaskSwitchContext+0x114>
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	685a      	ldr	r2, [r3, #4]
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	605a      	str	r2, [r3, #4]
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	4a0e      	ldr	r2, [pc, #56]	; (800c74c <vTaskSwitchContext+0x154>)
 800c714:	6013      	str	r3, [r2, #0]
 800c716:	4a0f      	ldr	r2, [pc, #60]	; (800c754 <vTaskSwitchContext+0x15c>)
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800c71c:	4b0b      	ldr	r3, [pc, #44]	; (800c74c <vTaskSwitchContext+0x154>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800c724:	4a0a      	ldr	r2, [pc, #40]	; (800c750 <vTaskSwitchContext+0x158>)
 800c726:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c728:	4b08      	ldr	r3, [pc, #32]	; (800c74c <vTaskSwitchContext+0x154>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	3360      	adds	r3, #96	; 0x60
 800c72e:	4a0b      	ldr	r2, [pc, #44]	; (800c75c <vTaskSwitchContext+0x164>)
 800c730:	6013      	str	r3, [r2, #0]
}
 800c732:	bf00      	nop
 800c734:	3718      	adds	r7, #24
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	bf00      	nop
 800c73c:	20033550 	.word	0x20033550
 800c740:	2003353c 	.word	0x2003353c
 800c744:	20033558 	.word	0x20033558
 800c748:	20033554 	.word	0x20033554
 800c74c:	20033050 	.word	0x20033050
 800c750:	20033524 	.word	0x20033524
 800c754:	20033530 	.word	0x20033530
 800c758:	20033054 	.word	0x20033054
 800c75c:	200000d4 	.word	0x200000d4

0800c760 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d109      	bne.n	800c784 <vTaskPlaceOnEventList+0x24>
 800c770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c774:	f383 8811 	msr	BASEPRI, r3
 800c778:	f3bf 8f6f 	isb	sy
 800c77c:	f3bf 8f4f 	dsb	sy
 800c780:	60fb      	str	r3, [r7, #12]
 800c782:	e7fe      	b.n	800c782 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c784:	4b07      	ldr	r3, [pc, #28]	; (800c7a4 <vTaskPlaceOnEventList+0x44>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	3318      	adds	r3, #24
 800c78a:	4619      	mov	r1, r3
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f7fe fd65 	bl	800b25c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c792:	2101      	movs	r1, #1
 800c794:	6838      	ldr	r0, [r7, #0]
 800c796:	f000 fa89 	bl	800ccac <prvAddCurrentTaskToDelayedList>
}
 800c79a:	bf00      	nop
 800c79c:	3710      	adds	r7, #16
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	20033050 	.word	0x20033050

0800c7a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b086      	sub	sp, #24
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d109      	bne.n	800c7ce <vTaskPlaceOnEventListRestricted+0x26>
 800c7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7be:	f383 8811 	msr	BASEPRI, r3
 800c7c2:	f3bf 8f6f 	isb	sy
 800c7c6:	f3bf 8f4f 	dsb	sy
 800c7ca:	617b      	str	r3, [r7, #20]
 800c7cc:	e7fe      	b.n	800c7cc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c7ce:	4b0a      	ldr	r3, [pc, #40]	; (800c7f8 <vTaskPlaceOnEventListRestricted+0x50>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	3318      	adds	r3, #24
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	68f8      	ldr	r0, [r7, #12]
 800c7d8:	f7fe fd1c 	bl	800b214 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d002      	beq.n	800c7e8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800c7e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c7e8:	6879      	ldr	r1, [r7, #4]
 800c7ea:	68b8      	ldr	r0, [r7, #8]
 800c7ec:	f000 fa5e 	bl	800ccac <prvAddCurrentTaskToDelayedList>
	}
 800c7f0:	bf00      	nop
 800c7f2:	3718      	adds	r7, #24
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	20033050 	.word	0x20033050

0800c7fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b086      	sub	sp, #24
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d109      	bne.n	800c826 <xTaskRemoveFromEventList+0x2a>
 800c812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c816:	f383 8811 	msr	BASEPRI, r3
 800c81a:	f3bf 8f6f 	isb	sy
 800c81e:	f3bf 8f4f 	dsb	sy
 800c822:	60fb      	str	r3, [r7, #12]
 800c824:	e7fe      	b.n	800c824 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	3318      	adds	r3, #24
 800c82a:	4618      	mov	r0, r3
 800c82c:	f7fe fd4f 	bl	800b2ce <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c830:	4b1d      	ldr	r3, [pc, #116]	; (800c8a8 <xTaskRemoveFromEventList+0xac>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d11d      	bne.n	800c874 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	3304      	adds	r3, #4
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7fe fd46 	bl	800b2ce <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c846:	4b19      	ldr	r3, [pc, #100]	; (800c8ac <xTaskRemoveFromEventList+0xb0>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d903      	bls.n	800c856 <xTaskRemoveFromEventList+0x5a>
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c852:	4a16      	ldr	r2, [pc, #88]	; (800c8ac <xTaskRemoveFromEventList+0xb0>)
 800c854:	6013      	str	r3, [r2, #0]
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c85a:	4613      	mov	r3, r2
 800c85c:	009b      	lsls	r3, r3, #2
 800c85e:	4413      	add	r3, r2
 800c860:	009b      	lsls	r3, r3, #2
 800c862:	4a13      	ldr	r2, [pc, #76]	; (800c8b0 <xTaskRemoveFromEventList+0xb4>)
 800c864:	441a      	add	r2, r3
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	3304      	adds	r3, #4
 800c86a:	4619      	mov	r1, r3
 800c86c:	4610      	mov	r0, r2
 800c86e:	f7fe fcd1 	bl	800b214 <vListInsertEnd>
 800c872:	e005      	b.n	800c880 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	3318      	adds	r3, #24
 800c878:	4619      	mov	r1, r3
 800c87a:	480e      	ldr	r0, [pc, #56]	; (800c8b4 <xTaskRemoveFromEventList+0xb8>)
 800c87c:	f7fe fcca 	bl	800b214 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c884:	4b0c      	ldr	r3, [pc, #48]	; (800c8b8 <xTaskRemoveFromEventList+0xbc>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d905      	bls.n	800c89a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c88e:	2301      	movs	r3, #1
 800c890:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c892:	4b0a      	ldr	r3, [pc, #40]	; (800c8bc <xTaskRemoveFromEventList+0xc0>)
 800c894:	2201      	movs	r2, #1
 800c896:	601a      	str	r2, [r3, #0]
 800c898:	e001      	b.n	800c89e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c89a:	2300      	movs	r3, #0
 800c89c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c89e:	697b      	ldr	r3, [r7, #20]
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3718      	adds	r7, #24
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	20033550 	.word	0x20033550
 800c8ac:	20033530 	.word	0x20033530
 800c8b0:	20033054 	.word	0x20033054
 800c8b4:	200334e4 	.word	0x200334e4
 800c8b8:	20033050 	.word	0x20033050
 800c8bc:	2003353c 	.word	0x2003353c

0800c8c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b083      	sub	sp, #12
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c8c8:	4b06      	ldr	r3, [pc, #24]	; (800c8e4 <vTaskInternalSetTimeOutState+0x24>)
 800c8ca:	681a      	ldr	r2, [r3, #0]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c8d0:	4b05      	ldr	r3, [pc, #20]	; (800c8e8 <vTaskInternalSetTimeOutState+0x28>)
 800c8d2:	681a      	ldr	r2, [r3, #0]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	605a      	str	r2, [r3, #4]
}
 800c8d8:	bf00      	nop
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr
 800c8e4:	20033540 	.word	0x20033540
 800c8e8:	2003352c 	.word	0x2003352c

0800c8ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b088      	sub	sp, #32
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d109      	bne.n	800c910 <xTaskCheckForTimeOut+0x24>
 800c8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c900:	f383 8811 	msr	BASEPRI, r3
 800c904:	f3bf 8f6f 	isb	sy
 800c908:	f3bf 8f4f 	dsb	sy
 800c90c:	613b      	str	r3, [r7, #16]
 800c90e:	e7fe      	b.n	800c90e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d109      	bne.n	800c92a <xTaskCheckForTimeOut+0x3e>
 800c916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c91a:	f383 8811 	msr	BASEPRI, r3
 800c91e:	f3bf 8f6f 	isb	sy
 800c922:	f3bf 8f4f 	dsb	sy
 800c926:	60fb      	str	r3, [r7, #12]
 800c928:	e7fe      	b.n	800c928 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800c92a:	f000 ff3f 	bl	800d7ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c92e:	4b24      	ldr	r3, [pc, #144]	; (800c9c0 <xTaskCheckForTimeOut+0xd4>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	69ba      	ldr	r2, [r7, #24]
 800c93a:	1ad3      	subs	r3, r2, r3
 800c93c:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800c93e:	4b21      	ldr	r3, [pc, #132]	; (800c9c4 <xTaskCheckForTimeOut+0xd8>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f893 348e 	ldrb.w	r3, [r3, #1166]	; 0x48e
 800c946:	2b00      	cmp	r3, #0
 800c948:	d007      	beq.n	800c95a <xTaskCheckForTimeOut+0x6e>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800c94a:	4b1e      	ldr	r3, [pc, #120]	; (800c9c4 <xTaskCheckForTimeOut+0xd8>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2200      	movs	r2, #0
 800c950:	f883 248e 	strb.w	r2, [r3, #1166]	; 0x48e
				xReturn = pdTRUE;
 800c954:	2301      	movs	r3, #1
 800c956:	61fb      	str	r3, [r7, #28]
 800c958:	e02b      	b.n	800c9b2 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c962:	d102      	bne.n	800c96a <xTaskCheckForTimeOut+0x7e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c964:	2300      	movs	r3, #0
 800c966:	61fb      	str	r3, [r7, #28]
 800c968:	e023      	b.n	800c9b2 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	4b16      	ldr	r3, [pc, #88]	; (800c9c8 <xTaskCheckForTimeOut+0xdc>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	429a      	cmp	r2, r3
 800c974:	d007      	beq.n	800c986 <xTaskCheckForTimeOut+0x9a>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	685b      	ldr	r3, [r3, #4]
 800c97a:	69ba      	ldr	r2, [r7, #24]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d302      	bcc.n	800c986 <xTaskCheckForTimeOut+0x9a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c980:	2301      	movs	r3, #1
 800c982:	61fb      	str	r3, [r7, #28]
 800c984:	e015      	b.n	800c9b2 <xTaskCheckForTimeOut+0xc6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	697a      	ldr	r2, [r7, #20]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d20b      	bcs.n	800c9a8 <xTaskCheckForTimeOut+0xbc>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	1ad2      	subs	r2, r2, r3
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f7ff ff8f 	bl	800c8c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	61fb      	str	r3, [r7, #28]
 800c9a6:	e004      	b.n	800c9b2 <xTaskCheckForTimeOut+0xc6>
		}
		else
		{
			*pxTicksToWait = 0;
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c9b2:	f000 ff29 	bl	800d808 <vPortExitCritical>

	return xReturn;
 800c9b6:	69fb      	ldr	r3, [r7, #28]
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3720      	adds	r7, #32
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	2003352c 	.word	0x2003352c
 800c9c4:	20033050 	.word	0x20033050
 800c9c8:	20033540 	.word	0x20033540

0800c9cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c9d0:	4b03      	ldr	r3, [pc, #12]	; (800c9e0 <vTaskMissedYield+0x14>)
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	601a      	str	r2, [r3, #0]
}
 800c9d6:	bf00      	nop
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr
 800c9e0:	2003353c 	.word	0x2003353c

0800c9e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c9ec:	f000 f854 	bl	800ca98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c9f0:	4b07      	ldr	r3, [pc, #28]	; (800ca10 <prvIdleTask+0x2c>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d907      	bls.n	800ca08 <prvIdleTask+0x24>
			{
				taskYIELD();
 800c9f8:	4b06      	ldr	r3, [pc, #24]	; (800ca14 <prvIdleTask+0x30>)
 800c9fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9fe:	601a      	str	r2, [r3, #0]
 800ca00:	f3bf 8f4f 	dsb	sy
 800ca04:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ca08:	f7fe fb34 	bl	800b074 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800ca0c:	e7ee      	b.n	800c9ec <prvIdleTask+0x8>
 800ca0e:	bf00      	nop
 800ca10:	20033054 	.word	0x20033054
 800ca14:	e000ed04 	.word	0xe000ed04

0800ca18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca1e:	2300      	movs	r3, #0
 800ca20:	607b      	str	r3, [r7, #4]
 800ca22:	e00c      	b.n	800ca3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	4613      	mov	r3, r2
 800ca28:	009b      	lsls	r3, r3, #2
 800ca2a:	4413      	add	r3, r2
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	4a12      	ldr	r2, [pc, #72]	; (800ca78 <prvInitialiseTaskLists+0x60>)
 800ca30:	4413      	add	r3, r2
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7fe fbc1 	bl	800b1ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	607b      	str	r3, [r7, #4]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2b37      	cmp	r3, #55	; 0x37
 800ca42:	d9ef      	bls.n	800ca24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ca44:	480d      	ldr	r0, [pc, #52]	; (800ca7c <prvInitialiseTaskLists+0x64>)
 800ca46:	f7fe fbb8 	bl	800b1ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ca4a:	480d      	ldr	r0, [pc, #52]	; (800ca80 <prvInitialiseTaskLists+0x68>)
 800ca4c:	f7fe fbb5 	bl	800b1ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ca50:	480c      	ldr	r0, [pc, #48]	; (800ca84 <prvInitialiseTaskLists+0x6c>)
 800ca52:	f7fe fbb2 	bl	800b1ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ca56:	480c      	ldr	r0, [pc, #48]	; (800ca88 <prvInitialiseTaskLists+0x70>)
 800ca58:	f7fe fbaf 	bl	800b1ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ca5c:	480b      	ldr	r0, [pc, #44]	; (800ca8c <prvInitialiseTaskLists+0x74>)
 800ca5e:	f7fe fbac 	bl	800b1ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ca62:	4b0b      	ldr	r3, [pc, #44]	; (800ca90 <prvInitialiseTaskLists+0x78>)
 800ca64:	4a05      	ldr	r2, [pc, #20]	; (800ca7c <prvInitialiseTaskLists+0x64>)
 800ca66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ca68:	4b0a      	ldr	r3, [pc, #40]	; (800ca94 <prvInitialiseTaskLists+0x7c>)
 800ca6a:	4a05      	ldr	r2, [pc, #20]	; (800ca80 <prvInitialiseTaskLists+0x68>)
 800ca6c:	601a      	str	r2, [r3, #0]
}
 800ca6e:	bf00      	nop
 800ca70:	3708      	adds	r7, #8
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	20033054 	.word	0x20033054
 800ca7c:	200334b4 	.word	0x200334b4
 800ca80:	200334c8 	.word	0x200334c8
 800ca84:	200334e4 	.word	0x200334e4
 800ca88:	200334f8 	.word	0x200334f8
 800ca8c:	20033510 	.word	0x20033510
 800ca90:	200334dc 	.word	0x200334dc
 800ca94:	200334e0 	.word	0x200334e0

0800ca98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca9e:	e019      	b.n	800cad4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800caa0:	f000 fe84 	bl	800d7ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caa4:	4b0f      	ldr	r3, [pc, #60]	; (800cae4 <prvCheckTasksWaitingTermination+0x4c>)
 800caa6:	68db      	ldr	r3, [r3, #12]
 800caa8:	68db      	ldr	r3, [r3, #12]
 800caaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	3304      	adds	r3, #4
 800cab0:	4618      	mov	r0, r3
 800cab2:	f7fe fc0c 	bl	800b2ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cab6:	4b0c      	ldr	r3, [pc, #48]	; (800cae8 <prvCheckTasksWaitingTermination+0x50>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	3b01      	subs	r3, #1
 800cabc:	4a0a      	ldr	r2, [pc, #40]	; (800cae8 <prvCheckTasksWaitingTermination+0x50>)
 800cabe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cac0:	4b0a      	ldr	r3, [pc, #40]	; (800caec <prvCheckTasksWaitingTermination+0x54>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	3b01      	subs	r3, #1
 800cac6:	4a09      	ldr	r2, [pc, #36]	; (800caec <prvCheckTasksWaitingTermination+0x54>)
 800cac8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800caca:	f000 fe9d 	bl	800d808 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 f80e 	bl	800caf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cad4:	4b05      	ldr	r3, [pc, #20]	; (800caec <prvCheckTasksWaitingTermination+0x54>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d1e1      	bne.n	800caa0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cadc:	bf00      	nop
 800cade:	3708      	adds	r7, #8
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}
 800cae4:	200334f8 	.word	0x200334f8
 800cae8:	20033528 	.word	0x20033528
 800caec:	2003350c 	.word	0x2003350c

0800caf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	3360      	adds	r3, #96	; 0x60
 800cafc:	4618      	mov	r0, r3
 800cafe:	f001 f9d1 	bl	800dea4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f893 348d 	ldrb.w	r3, [r3, #1165]	; 0x48d
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d108      	bne.n	800cb1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb10:	4618      	mov	r0, r3
 800cb12:	f001 f805 	bl	800db20 <vPortFree>
				vPortFree( pxTCB );
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f001 f802 	bl	800db20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cb1c:	e017      	b.n	800cb4e <prvDeleteTCB+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f893 348d 	ldrb.w	r3, [r3, #1165]	; 0x48d
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d103      	bne.n	800cb30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 fff9 	bl	800db20 <vPortFree>
	}
 800cb2e:	e00e      	b.n	800cb4e <prvDeleteTCB+0x5e>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f893 348d 	ldrb.w	r3, [r3, #1165]	; 0x48d
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	d009      	beq.n	800cb4e <prvDeleteTCB+0x5e>
 800cb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb3e:	f383 8811 	msr	BASEPRI, r3
 800cb42:	f3bf 8f6f 	isb	sy
 800cb46:	f3bf 8f4f 	dsb	sy
 800cb4a:	60fb      	str	r3, [r7, #12]
 800cb4c:	e7fe      	b.n	800cb4c <prvDeleteTCB+0x5c>
	}
 800cb4e:	bf00      	nop
 800cb50:	3710      	adds	r7, #16
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
	...

0800cb58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b083      	sub	sp, #12
 800cb5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb5e:	4b0c      	ldr	r3, [pc, #48]	; (800cb90 <prvResetNextTaskUnblockTime+0x38>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d104      	bne.n	800cb72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cb68:	4b0a      	ldr	r3, [pc, #40]	; (800cb94 <prvResetNextTaskUnblockTime+0x3c>)
 800cb6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cb70:	e008      	b.n	800cb84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb72:	4b07      	ldr	r3, [pc, #28]	; (800cb90 <prvResetNextTaskUnblockTime+0x38>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	68db      	ldr	r3, [r3, #12]
 800cb7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	4a04      	ldr	r2, [pc, #16]	; (800cb94 <prvResetNextTaskUnblockTime+0x3c>)
 800cb82:	6013      	str	r3, [r2, #0]
}
 800cb84:	bf00      	nop
 800cb86:	370c      	adds	r7, #12
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr
 800cb90:	200334dc 	.word	0x200334dc
 800cb94:	20033548 	.word	0x20033548

0800cb98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cb98:	b480      	push	{r7}
 800cb9a:	b083      	sub	sp, #12
 800cb9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cb9e:	4b0b      	ldr	r3, [pc, #44]	; (800cbcc <xTaskGetSchedulerState+0x34>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d102      	bne.n	800cbac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cba6:	2301      	movs	r3, #1
 800cba8:	607b      	str	r3, [r7, #4]
 800cbaa:	e008      	b.n	800cbbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbac:	4b08      	ldr	r3, [pc, #32]	; (800cbd0 <xTaskGetSchedulerState+0x38>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d102      	bne.n	800cbba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cbb4:	2302      	movs	r3, #2
 800cbb6:	607b      	str	r3, [r7, #4]
 800cbb8:	e001      	b.n	800cbbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cbbe:	687b      	ldr	r3, [r7, #4]
	}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	370c      	adds	r7, #12
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr
 800cbcc:	20033534 	.word	0x20033534
 800cbd0:	20033550 	.word	0x20033550

0800cbd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b086      	sub	sp, #24
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d054      	beq.n	800cc94 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cbea:	4b2d      	ldr	r3, [pc, #180]	; (800cca0 <xTaskPriorityDisinherit+0xcc>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	693a      	ldr	r2, [r7, #16]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d009      	beq.n	800cc08 <xTaskPriorityDisinherit+0x34>
 800cbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf8:	f383 8811 	msr	BASEPRI, r3
 800cbfc:	f3bf 8f6f 	isb	sy
 800cc00:	f3bf 8f4f 	dsb	sy
 800cc04:	60fb      	str	r3, [r7, #12]
 800cc06:	e7fe      	b.n	800cc06 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d109      	bne.n	800cc24 <xTaskPriorityDisinherit+0x50>
 800cc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	60bb      	str	r3, [r7, #8]
 800cc22:	e7fe      	b.n	800cc22 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc28:	1e5a      	subs	r2, r3, #1
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d02c      	beq.n	800cc94 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d128      	bne.n	800cc94 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	3304      	adds	r3, #4
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7fe fb41 	bl	800b2ce <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc64:	4b0f      	ldr	r3, [pc, #60]	; (800cca4 <xTaskPriorityDisinherit+0xd0>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d903      	bls.n	800cc74 <xTaskPriorityDisinherit+0xa0>
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc70:	4a0c      	ldr	r2, [pc, #48]	; (800cca4 <xTaskPriorityDisinherit+0xd0>)
 800cc72:	6013      	str	r3, [r2, #0]
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc78:	4613      	mov	r3, r2
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	4413      	add	r3, r2
 800cc7e:	009b      	lsls	r3, r3, #2
 800cc80:	4a09      	ldr	r2, [pc, #36]	; (800cca8 <xTaskPriorityDisinherit+0xd4>)
 800cc82:	441a      	add	r2, r3
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	3304      	adds	r3, #4
 800cc88:	4619      	mov	r1, r3
 800cc8a:	4610      	mov	r0, r2
 800cc8c:	f7fe fac2 	bl	800b214 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cc90:	2301      	movs	r3, #1
 800cc92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc94:	697b      	ldr	r3, [r7, #20]
	}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3718      	adds	r7, #24
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	20033050 	.word	0x20033050
 800cca4:	20033530 	.word	0x20033530
 800cca8:	20033054 	.word	0x20033054

0800ccac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ccb6:	4b24      	ldr	r3, [pc, #144]	; (800cd48 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800ccbc:	4b23      	ldr	r3, [pc, #140]	; (800cd4c <prvAddCurrentTaskToDelayedList+0xa0>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f883 248e 	strb.w	r2, [r3, #1166]	; 0x48e
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ccc6:	4b21      	ldr	r3, [pc, #132]	; (800cd4c <prvAddCurrentTaskToDelayedList+0xa0>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	3304      	adds	r3, #4
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7fe fafe 	bl	800b2ce <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccd8:	d10a      	bne.n	800ccf0 <prvAddCurrentTaskToDelayedList+0x44>
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d007      	beq.n	800ccf0 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cce0:	4b1a      	ldr	r3, [pc, #104]	; (800cd4c <prvAddCurrentTaskToDelayedList+0xa0>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	3304      	adds	r3, #4
 800cce6:	4619      	mov	r1, r3
 800cce8:	4819      	ldr	r0, [pc, #100]	; (800cd50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ccea:	f7fe fa93 	bl	800b214 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ccee:	e026      	b.n	800cd3e <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ccf8:	4b14      	ldr	r3, [pc, #80]	; (800cd4c <prvAddCurrentTaskToDelayedList+0xa0>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	68ba      	ldr	r2, [r7, #8]
 800ccfe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cd00:	68ba      	ldr	r2, [r7, #8]
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d209      	bcs.n	800cd1c <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd08:	4b12      	ldr	r3, [pc, #72]	; (800cd54 <prvAddCurrentTaskToDelayedList+0xa8>)
 800cd0a:	681a      	ldr	r2, [r3, #0]
 800cd0c:	4b0f      	ldr	r3, [pc, #60]	; (800cd4c <prvAddCurrentTaskToDelayedList+0xa0>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	3304      	adds	r3, #4
 800cd12:	4619      	mov	r1, r3
 800cd14:	4610      	mov	r0, r2
 800cd16:	f7fe faa1 	bl	800b25c <vListInsert>
}
 800cd1a:	e010      	b.n	800cd3e <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd1c:	4b0e      	ldr	r3, [pc, #56]	; (800cd58 <prvAddCurrentTaskToDelayedList+0xac>)
 800cd1e:	681a      	ldr	r2, [r3, #0]
 800cd20:	4b0a      	ldr	r3, [pc, #40]	; (800cd4c <prvAddCurrentTaskToDelayedList+0xa0>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	3304      	adds	r3, #4
 800cd26:	4619      	mov	r1, r3
 800cd28:	4610      	mov	r0, r2
 800cd2a:	f7fe fa97 	bl	800b25c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cd2e:	4b0b      	ldr	r3, [pc, #44]	; (800cd5c <prvAddCurrentTaskToDelayedList+0xb0>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	68ba      	ldr	r2, [r7, #8]
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d202      	bcs.n	800cd3e <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800cd38:	4a08      	ldr	r2, [pc, #32]	; (800cd5c <prvAddCurrentTaskToDelayedList+0xb0>)
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	6013      	str	r3, [r2, #0]
}
 800cd3e:	bf00      	nop
 800cd40:	3710      	adds	r7, #16
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	2003352c 	.word	0x2003352c
 800cd4c:	20033050 	.word	0x20033050
 800cd50:	20033510 	.word	0x20033510
 800cd54:	200334e0 	.word	0x200334e0
 800cd58:	200334dc 	.word	0x200334dc
 800cd5c:	20033548 	.word	0x20033548

0800cd60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b08a      	sub	sp, #40	; 0x28
 800cd64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cd66:	2300      	movs	r3, #0
 800cd68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cd6a:	f000 fb97 	bl	800d49c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cd6e:	4b1c      	ldr	r3, [pc, #112]	; (800cde0 <xTimerCreateTimerTask+0x80>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d021      	beq.n	800cdba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cd76:	2300      	movs	r3, #0
 800cd78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cd7e:	1d3a      	adds	r2, r7, #4
 800cd80:	f107 0108 	add.w	r1, r7, #8
 800cd84:	f107 030c 	add.w	r3, r7, #12
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7fe f9ad 	bl	800b0e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cd8e:	6879      	ldr	r1, [r7, #4]
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	68fa      	ldr	r2, [r7, #12]
 800cd94:	9202      	str	r2, [sp, #8]
 800cd96:	9301      	str	r3, [sp, #4]
 800cd98:	2302      	movs	r3, #2
 800cd9a:	9300      	str	r3, [sp, #0]
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	460a      	mov	r2, r1
 800cda0:	4910      	ldr	r1, [pc, #64]	; (800cde4 <xTimerCreateTimerTask+0x84>)
 800cda2:	4811      	ldr	r0, [pc, #68]	; (800cde8 <xTimerCreateTimerTask+0x88>)
 800cda4:	f7ff f81e 	bl	800bde4 <xTaskCreateStatic>
 800cda8:	4602      	mov	r2, r0
 800cdaa:	4b10      	ldr	r3, [pc, #64]	; (800cdec <xTimerCreateTimerTask+0x8c>)
 800cdac:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cdae:	4b0f      	ldr	r3, [pc, #60]	; (800cdec <xTimerCreateTimerTask+0x8c>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d001      	beq.n	800cdba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d109      	bne.n	800cdd4 <xTimerCreateTimerTask+0x74>
 800cdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc4:	f383 8811 	msr	BASEPRI, r3
 800cdc8:	f3bf 8f6f 	isb	sy
 800cdcc:	f3bf 8f4f 	dsb	sy
 800cdd0:	613b      	str	r3, [r7, #16]
 800cdd2:	e7fe      	b.n	800cdd2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800cdd4:	697b      	ldr	r3, [r7, #20]
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3718      	adds	r7, #24
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
 800cdde:	bf00      	nop
 800cde0:	2003358c 	.word	0x2003358c
 800cde4:	0800e7d8 	.word	0x0800e7d8
 800cde8:	0800d051 	.word	0x0800d051
 800cdec:	20033590 	.word	0x20033590

0800cdf0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b088      	sub	sp, #32
 800cdf4:	af02      	add	r7, sp, #8
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	607a      	str	r2, [r7, #4]
 800cdfc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800cdfe:	202c      	movs	r0, #44	; 0x2c
 800ce00:	f000 fdee 	bl	800d9e0 <pvPortMalloc>
 800ce04:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d00d      	beq.n	800ce28 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	9301      	str	r3, [sp, #4]
 800ce18:	6a3b      	ldr	r3, [r7, #32]
 800ce1a:	9300      	str	r3, [sp, #0]
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	68b9      	ldr	r1, [r7, #8]
 800ce22:	68f8      	ldr	r0, [r7, #12]
 800ce24:	f000 f841 	bl	800ceaa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ce28:	697b      	ldr	r3, [r7, #20]
	}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3718      	adds	r7, #24
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}

0800ce32 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800ce32:	b580      	push	{r7, lr}
 800ce34:	b08a      	sub	sp, #40	; 0x28
 800ce36:	af02      	add	r7, sp, #8
 800ce38:	60f8      	str	r0, [r7, #12]
 800ce3a:	60b9      	str	r1, [r7, #8]
 800ce3c:	607a      	str	r2, [r7, #4]
 800ce3e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800ce40:	232c      	movs	r3, #44	; 0x2c
 800ce42:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	2b2c      	cmp	r3, #44	; 0x2c
 800ce48:	d009      	beq.n	800ce5e <xTimerCreateStatic+0x2c>
 800ce4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce4e:	f383 8811 	msr	BASEPRI, r3
 800ce52:	f3bf 8f6f 	isb	sy
 800ce56:	f3bf 8f4f 	dsb	sy
 800ce5a:	61bb      	str	r3, [r7, #24]
 800ce5c:	e7fe      	b.n	800ce5c <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ce5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800ce60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d109      	bne.n	800ce7a <xTimerCreateStatic+0x48>
 800ce66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6a:	f383 8811 	msr	BASEPRI, r3
 800ce6e:	f3bf 8f6f 	isb	sy
 800ce72:	f3bf 8f4f 	dsb	sy
 800ce76:	617b      	str	r3, [r7, #20]
 800ce78:	e7fe      	b.n	800ce78 <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800ce7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce7c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d00d      	beq.n	800cea0 <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800ce84:	69fb      	ldr	r3, [r7, #28]
 800ce86:	2202      	movs	r2, #2
 800ce88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ce8c:	69fb      	ldr	r3, [r7, #28]
 800ce8e:	9301      	str	r3, [sp, #4]
 800ce90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce92:	9300      	str	r3, [sp, #0]
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	68b9      	ldr	r1, [r7, #8]
 800ce9a:	68f8      	ldr	r0, [r7, #12]
 800ce9c:	f000 f805 	bl	800ceaa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800cea0:	69fb      	ldr	r3, [r7, #28]
	}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3720      	adds	r7, #32
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ceaa:	b580      	push	{r7, lr}
 800ceac:	b086      	sub	sp, #24
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	60f8      	str	r0, [r7, #12]
 800ceb2:	60b9      	str	r1, [r7, #8]
 800ceb4:	607a      	str	r2, [r7, #4]
 800ceb6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d109      	bne.n	800ced2 <prvInitialiseNewTimer+0x28>
 800cebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec2:	f383 8811 	msr	BASEPRI, r3
 800cec6:	f3bf 8f6f 	isb	sy
 800ceca:	f3bf 8f4f 	dsb	sy
 800cece:	617b      	str	r3, [r7, #20]
 800ced0:	e7fe      	b.n	800ced0 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800ced2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d01e      	beq.n	800cf16 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ced8:	f000 fae0 	bl	800d49c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800cedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cede:	68fa      	ldr	r2, [r7, #12]
 800cee0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800cee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee4:	68ba      	ldr	r2, [r7, #8]
 800cee6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800cee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceea:	683a      	ldr	r2, [r7, #0]
 800ceec:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ceee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef0:	6a3a      	ldr	r2, [r7, #32]
 800cef2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800cef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef6:	3304      	adds	r3, #4
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7fe f97e 	bl	800b1fa <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d008      	beq.n	800cf16 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800cf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf0a:	f043 0304 	orr.w	r3, r3, #4
 800cf0e:	b2da      	uxtb	r2, r3
 800cf10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800cf16:	bf00      	nop
 800cf18:	3718      	adds	r7, #24
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
	...

0800cf20 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b08a      	sub	sp, #40	; 0x28
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	60f8      	str	r0, [r7, #12]
 800cf28:	60b9      	str	r1, [r7, #8]
 800cf2a:	607a      	str	r2, [r7, #4]
 800cf2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d109      	bne.n	800cf4c <xTimerGenericCommand+0x2c>
 800cf38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf3c:	f383 8811 	msr	BASEPRI, r3
 800cf40:	f3bf 8f6f 	isb	sy
 800cf44:	f3bf 8f4f 	dsb	sy
 800cf48:	623b      	str	r3, [r7, #32]
 800cf4a:	e7fe      	b.n	800cf4a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cf4c:	4b19      	ldr	r3, [pc, #100]	; (800cfb4 <xTimerGenericCommand+0x94>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d02a      	beq.n	800cfaa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	2b05      	cmp	r3, #5
 800cf64:	dc18      	bgt.n	800cf98 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cf66:	f7ff fe17 	bl	800cb98 <xTaskGetSchedulerState>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	2b02      	cmp	r3, #2
 800cf6e:	d109      	bne.n	800cf84 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cf70:	4b10      	ldr	r3, [pc, #64]	; (800cfb4 <xTimerGenericCommand+0x94>)
 800cf72:	6818      	ldr	r0, [r3, #0]
 800cf74:	f107 0110 	add.w	r1, r7, #16
 800cf78:	2300      	movs	r3, #0
 800cf7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf7c:	f7fe fb5c 	bl	800b638 <xQueueGenericSend>
 800cf80:	6278      	str	r0, [r7, #36]	; 0x24
 800cf82:	e012      	b.n	800cfaa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cf84:	4b0b      	ldr	r3, [pc, #44]	; (800cfb4 <xTimerGenericCommand+0x94>)
 800cf86:	6818      	ldr	r0, [r3, #0]
 800cf88:	f107 0110 	add.w	r1, r7, #16
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	2200      	movs	r2, #0
 800cf90:	f7fe fb52 	bl	800b638 <xQueueGenericSend>
 800cf94:	6278      	str	r0, [r7, #36]	; 0x24
 800cf96:	e008      	b.n	800cfaa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cf98:	4b06      	ldr	r3, [pc, #24]	; (800cfb4 <xTimerGenericCommand+0x94>)
 800cf9a:	6818      	ldr	r0, [r3, #0]
 800cf9c:	f107 0110 	add.w	r1, r7, #16
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	683a      	ldr	r2, [r7, #0]
 800cfa4:	f7fe fc42 	bl	800b82c <xQueueGenericSendFromISR>
 800cfa8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3728      	adds	r7, #40	; 0x28
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	2003358c 	.word	0x2003358c

0800cfb8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b088      	sub	sp, #32
 800cfbc:	af02      	add	r7, sp, #8
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfc2:	4b22      	ldr	r3, [pc, #136]	; (800d04c <prvProcessExpiredTimer+0x94>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	3304      	adds	r3, #4
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7fe f97c 	bl	800b2ce <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfdc:	f003 0304 	and.w	r3, r3, #4
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d021      	beq.n	800d028 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	699a      	ldr	r2, [r3, #24]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	18d1      	adds	r1, r2, r3
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	683a      	ldr	r2, [r7, #0]
 800cff0:	6978      	ldr	r0, [r7, #20]
 800cff2:	f000 f8d1 	bl	800d198 <prvInsertTimerInActiveList>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d01e      	beq.n	800d03a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cffc:	2300      	movs	r3, #0
 800cffe:	9300      	str	r3, [sp, #0]
 800d000:	2300      	movs	r3, #0
 800d002:	687a      	ldr	r2, [r7, #4]
 800d004:	2100      	movs	r1, #0
 800d006:	6978      	ldr	r0, [r7, #20]
 800d008:	f7ff ff8a 	bl	800cf20 <xTimerGenericCommand>
 800d00c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d112      	bne.n	800d03a <prvProcessExpiredTimer+0x82>
 800d014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d018:	f383 8811 	msr	BASEPRI, r3
 800d01c:	f3bf 8f6f 	isb	sy
 800d020:	f3bf 8f4f 	dsb	sy
 800d024:	60fb      	str	r3, [r7, #12]
 800d026:	e7fe      	b.n	800d026 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d02e:	f023 0301 	bic.w	r3, r3, #1
 800d032:	b2da      	uxtb	r2, r3
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	6a1b      	ldr	r3, [r3, #32]
 800d03e:	6978      	ldr	r0, [r7, #20]
 800d040:	4798      	blx	r3
}
 800d042:	bf00      	nop
 800d044:	3718      	adds	r7, #24
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	20033584 	.word	0x20033584

0800d050 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b084      	sub	sp, #16
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d058:	f107 0308 	add.w	r3, r7, #8
 800d05c:	4618      	mov	r0, r3
 800d05e:	f000 f857 	bl	800d110 <prvGetNextExpireTime>
 800d062:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	4619      	mov	r1, r3
 800d068:	68f8      	ldr	r0, [r7, #12]
 800d06a:	f000 f803 	bl	800d074 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d06e:	f000 f8d5 	bl	800d21c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d072:	e7f1      	b.n	800d058 <prvTimerTask+0x8>

0800d074 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b084      	sub	sp, #16
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d07e:	f7ff f941 	bl	800c304 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d082:	f107 0308 	add.w	r3, r7, #8
 800d086:	4618      	mov	r0, r3
 800d088:	f000 f866 	bl	800d158 <prvSampleTimeNow>
 800d08c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d130      	bne.n	800d0f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d10a      	bne.n	800d0b0 <prvProcessTimerOrBlockTask+0x3c>
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d806      	bhi.n	800d0b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d0a2:	f7ff f93d 	bl	800c320 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d0a6:	68f9      	ldr	r1, [r7, #12]
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f7ff ff85 	bl	800cfb8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d0ae:	e024      	b.n	800d0fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d008      	beq.n	800d0c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d0b6:	4b13      	ldr	r3, [pc, #76]	; (800d104 <prvProcessTimerOrBlockTask+0x90>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d101      	bne.n	800d0c4 <prvProcessTimerOrBlockTask+0x50>
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	e000      	b.n	800d0c6 <prvProcessTimerOrBlockTask+0x52>
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d0c8:	4b0f      	ldr	r3, [pc, #60]	; (800d108 <prvProcessTimerOrBlockTask+0x94>)
 800d0ca:	6818      	ldr	r0, [r3, #0]
 800d0cc:	687a      	ldr	r2, [r7, #4]
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	1ad3      	subs	r3, r2, r3
 800d0d2:	683a      	ldr	r2, [r7, #0]
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	f7fe fe51 	bl	800bd7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d0da:	f7ff f921 	bl	800c320 <xTaskResumeAll>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d10a      	bne.n	800d0fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d0e4:	4b09      	ldr	r3, [pc, #36]	; (800d10c <prvProcessTimerOrBlockTask+0x98>)
 800d0e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0ea:	601a      	str	r2, [r3, #0]
 800d0ec:	f3bf 8f4f 	dsb	sy
 800d0f0:	f3bf 8f6f 	isb	sy
}
 800d0f4:	e001      	b.n	800d0fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d0f6:	f7ff f913 	bl	800c320 <xTaskResumeAll>
}
 800d0fa:	bf00      	nop
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	20033588 	.word	0x20033588
 800d108:	2003358c 	.word	0x2003358c
 800d10c:	e000ed04 	.word	0xe000ed04

0800d110 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d110:	b480      	push	{r7}
 800d112:	b085      	sub	sp, #20
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d118:	4b0e      	ldr	r3, [pc, #56]	; (800d154 <prvGetNextExpireTime+0x44>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d101      	bne.n	800d126 <prvGetNextExpireTime+0x16>
 800d122:	2201      	movs	r2, #1
 800d124:	e000      	b.n	800d128 <prvGetNextExpireTime+0x18>
 800d126:	2200      	movs	r2, #0
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d105      	bne.n	800d140 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d134:	4b07      	ldr	r3, [pc, #28]	; (800d154 <prvGetNextExpireTime+0x44>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	60fb      	str	r3, [r7, #12]
 800d13e:	e001      	b.n	800d144 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d140:	2300      	movs	r3, #0
 800d142:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d144:	68fb      	ldr	r3, [r7, #12]
}
 800d146:	4618      	mov	r0, r3
 800d148:	3714      	adds	r7, #20
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr
 800d152:	bf00      	nop
 800d154:	20033584 	.word	0x20033584

0800d158 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b084      	sub	sp, #16
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d160:	f7ff f97a 	bl	800c458 <xTaskGetTickCount>
 800d164:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d166:	4b0b      	ldr	r3, [pc, #44]	; (800d194 <prvSampleTimeNow+0x3c>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	68fa      	ldr	r2, [r7, #12]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d205      	bcs.n	800d17c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d170:	f000 f930 	bl	800d3d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2201      	movs	r2, #1
 800d178:	601a      	str	r2, [r3, #0]
 800d17a:	e002      	b.n	800d182 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2200      	movs	r2, #0
 800d180:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d182:	4a04      	ldr	r2, [pc, #16]	; (800d194 <prvSampleTimeNow+0x3c>)
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d188:	68fb      	ldr	r3, [r7, #12]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3710      	adds	r7, #16
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
 800d192:	bf00      	nop
 800d194:	20033594 	.word	0x20033594

0800d198 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b086      	sub	sp, #24
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	607a      	str	r2, [r7, #4]
 800d1a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	68ba      	ldr	r2, [r7, #8]
 800d1ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	68fa      	ldr	r2, [r7, #12]
 800d1b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d1b6:	68ba      	ldr	r2, [r7, #8]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d812      	bhi.n	800d1e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	1ad2      	subs	r2, r2, r3
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	699b      	ldr	r3, [r3, #24]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d302      	bcc.n	800d1d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	617b      	str	r3, [r7, #20]
 800d1d0:	e01b      	b.n	800d20a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d1d2:	4b10      	ldr	r3, [pc, #64]	; (800d214 <prvInsertTimerInActiveList+0x7c>)
 800d1d4:	681a      	ldr	r2, [r3, #0]
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	3304      	adds	r3, #4
 800d1da:	4619      	mov	r1, r3
 800d1dc:	4610      	mov	r0, r2
 800d1de:	f7fe f83d 	bl	800b25c <vListInsert>
 800d1e2:	e012      	b.n	800d20a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d206      	bcs.n	800d1fa <prvInsertTimerInActiveList+0x62>
 800d1ec:	68ba      	ldr	r2, [r7, #8]
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d302      	bcc.n	800d1fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	617b      	str	r3, [r7, #20]
 800d1f8:	e007      	b.n	800d20a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d1fa:	4b07      	ldr	r3, [pc, #28]	; (800d218 <prvInsertTimerInActiveList+0x80>)
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	3304      	adds	r3, #4
 800d202:	4619      	mov	r1, r3
 800d204:	4610      	mov	r0, r2
 800d206:	f7fe f829 	bl	800b25c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d20a:	697b      	ldr	r3, [r7, #20]
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3718      	adds	r7, #24
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}
 800d214:	20033588 	.word	0x20033588
 800d218:	20033584 	.word	0x20033584

0800d21c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b08e      	sub	sp, #56	; 0x38
 800d220:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d222:	e0c6      	b.n	800d3b2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2b00      	cmp	r3, #0
 800d228:	da17      	bge.n	800d25a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d22a:	1d3b      	adds	r3, r7, #4
 800d22c:	3304      	adds	r3, #4
 800d22e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d232:	2b00      	cmp	r3, #0
 800d234:	d109      	bne.n	800d24a <prvProcessReceivedCommands+0x2e>
 800d236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23a:	f383 8811 	msr	BASEPRI, r3
 800d23e:	f3bf 8f6f 	isb	sy
 800d242:	f3bf 8f4f 	dsb	sy
 800d246:	61fb      	str	r3, [r7, #28]
 800d248:	e7fe      	b.n	800d248 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d250:	6850      	ldr	r0, [r2, #4]
 800d252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d254:	6892      	ldr	r2, [r2, #8]
 800d256:	4611      	mov	r1, r2
 800d258:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	f2c0 80a7 	blt.w	800d3b0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d268:	695b      	ldr	r3, [r3, #20]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d004      	beq.n	800d278 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d270:	3304      	adds	r3, #4
 800d272:	4618      	mov	r0, r3
 800d274:	f7fe f82b 	bl	800b2ce <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d278:	463b      	mov	r3, r7
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7ff ff6c 	bl	800d158 <prvSampleTimeNow>
 800d280:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2b09      	cmp	r3, #9
 800d286:	f200 8094 	bhi.w	800d3b2 <prvProcessReceivedCommands+0x196>
 800d28a:	a201      	add	r2, pc, #4	; (adr r2, 800d290 <prvProcessReceivedCommands+0x74>)
 800d28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d290:	0800d2b9 	.word	0x0800d2b9
 800d294:	0800d2b9 	.word	0x0800d2b9
 800d298:	0800d2b9 	.word	0x0800d2b9
 800d29c:	0800d32b 	.word	0x0800d32b
 800d2a0:	0800d33f 	.word	0x0800d33f
 800d2a4:	0800d387 	.word	0x0800d387
 800d2a8:	0800d2b9 	.word	0x0800d2b9
 800d2ac:	0800d2b9 	.word	0x0800d2b9
 800d2b0:	0800d32b 	.word	0x0800d32b
 800d2b4:	0800d33f 	.word	0x0800d33f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2be:	f043 0301 	orr.w	r3, r3, #1
 800d2c2:	b2da      	uxtb	r2, r3
 800d2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d2ca:	68ba      	ldr	r2, [r7, #8]
 800d2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ce:	699b      	ldr	r3, [r3, #24]
 800d2d0:	18d1      	adds	r1, r2, r3
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2d8:	f7ff ff5e 	bl	800d198 <prvInsertTimerInActiveList>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d067      	beq.n	800d3b2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e4:	6a1b      	ldr	r3, [r3, #32]
 800d2e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2f0:	f003 0304 	and.w	r3, r3, #4
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d05c      	beq.n	800d3b2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d2f8:	68ba      	ldr	r2, [r7, #8]
 800d2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fc:	699b      	ldr	r3, [r3, #24]
 800d2fe:	441a      	add	r2, r3
 800d300:	2300      	movs	r3, #0
 800d302:	9300      	str	r3, [sp, #0]
 800d304:	2300      	movs	r3, #0
 800d306:	2100      	movs	r1, #0
 800d308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d30a:	f7ff fe09 	bl	800cf20 <xTimerGenericCommand>
 800d30e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d310:	6a3b      	ldr	r3, [r7, #32]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d14d      	bne.n	800d3b2 <prvProcessReceivedCommands+0x196>
 800d316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31a:	f383 8811 	msr	BASEPRI, r3
 800d31e:	f3bf 8f6f 	isb	sy
 800d322:	f3bf 8f4f 	dsb	sy
 800d326:	61bb      	str	r3, [r7, #24]
 800d328:	e7fe      	b.n	800d328 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d330:	f023 0301 	bic.w	r3, r3, #1
 800d334:	b2da      	uxtb	r2, r3
 800d336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d338:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d33c:	e039      	b.n	800d3b2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d344:	f043 0301 	orr.w	r3, r3, #1
 800d348:	b2da      	uxtb	r2, r3
 800d34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d34c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d350:	68ba      	ldr	r2, [r7, #8]
 800d352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d354:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d358:	699b      	ldr	r3, [r3, #24]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d109      	bne.n	800d372 <prvProcessReceivedCommands+0x156>
 800d35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d362:	f383 8811 	msr	BASEPRI, r3
 800d366:	f3bf 8f6f 	isb	sy
 800d36a:	f3bf 8f4f 	dsb	sy
 800d36e:	617b      	str	r3, [r7, #20]
 800d370:	e7fe      	b.n	800d370 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d374:	699a      	ldr	r2, [r3, #24]
 800d376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d378:	18d1      	adds	r1, r2, r3
 800d37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d37e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d380:	f7ff ff0a 	bl	800d198 <prvInsertTimerInActiveList>
					break;
 800d384:	e015      	b.n	800d3b2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d38c:	f003 0302 	and.w	r3, r3, #2
 800d390:	2b00      	cmp	r3, #0
 800d392:	d103      	bne.n	800d39c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800d394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d396:	f000 fbc3 	bl	800db20 <vPortFree>
 800d39a:	e00a      	b.n	800d3b2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3a2:	f023 0301 	bic.w	r3, r3, #1
 800d3a6:	b2da      	uxtb	r2, r3
 800d3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d3ae:	e000      	b.n	800d3b2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d3b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d3b2:	4b07      	ldr	r3, [pc, #28]	; (800d3d0 <prvProcessReceivedCommands+0x1b4>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	1d39      	adds	r1, r7, #4
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7fe faca 	bl	800b954 <xQueueReceive>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	f47f af2e 	bne.w	800d224 <prvProcessReceivedCommands+0x8>
	}
}
 800d3c8:	bf00      	nop
 800d3ca:	3730      	adds	r7, #48	; 0x30
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	2003358c 	.word	0x2003358c

0800d3d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b088      	sub	sp, #32
 800d3d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d3da:	e047      	b.n	800d46c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d3dc:	4b2d      	ldr	r3, [pc, #180]	; (800d494 <prvSwitchTimerLists+0xc0>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	68db      	ldr	r3, [r3, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3e6:	4b2b      	ldr	r3, [pc, #172]	; (800d494 <prvSwitchTimerLists+0xc0>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	68db      	ldr	r3, [r3, #12]
 800d3ec:	68db      	ldr	r3, [r3, #12]
 800d3ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	3304      	adds	r3, #4
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7fd ff6a 	bl	800b2ce <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	6a1b      	ldr	r3, [r3, #32]
 800d3fe:	68f8      	ldr	r0, [r7, #12]
 800d400:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d408:	f003 0304 	and.w	r3, r3, #4
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d02d      	beq.n	800d46c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	699b      	ldr	r3, [r3, #24]
 800d414:	693a      	ldr	r2, [r7, #16]
 800d416:	4413      	add	r3, r2
 800d418:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d41a:	68ba      	ldr	r2, [r7, #8]
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	429a      	cmp	r2, r3
 800d420:	d90e      	bls.n	800d440 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	68ba      	ldr	r2, [r7, #8]
 800d426:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	68fa      	ldr	r2, [r7, #12]
 800d42c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d42e:	4b19      	ldr	r3, [pc, #100]	; (800d494 <prvSwitchTimerLists+0xc0>)
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	3304      	adds	r3, #4
 800d436:	4619      	mov	r1, r3
 800d438:	4610      	mov	r0, r2
 800d43a:	f7fd ff0f 	bl	800b25c <vListInsert>
 800d43e:	e015      	b.n	800d46c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d440:	2300      	movs	r3, #0
 800d442:	9300      	str	r3, [sp, #0]
 800d444:	2300      	movs	r3, #0
 800d446:	693a      	ldr	r2, [r7, #16]
 800d448:	2100      	movs	r1, #0
 800d44a:	68f8      	ldr	r0, [r7, #12]
 800d44c:	f7ff fd68 	bl	800cf20 <xTimerGenericCommand>
 800d450:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d109      	bne.n	800d46c <prvSwitchTimerLists+0x98>
 800d458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45c:	f383 8811 	msr	BASEPRI, r3
 800d460:	f3bf 8f6f 	isb	sy
 800d464:	f3bf 8f4f 	dsb	sy
 800d468:	603b      	str	r3, [r7, #0]
 800d46a:	e7fe      	b.n	800d46a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d46c:	4b09      	ldr	r3, [pc, #36]	; (800d494 <prvSwitchTimerLists+0xc0>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d1b2      	bne.n	800d3dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d476:	4b07      	ldr	r3, [pc, #28]	; (800d494 <prvSwitchTimerLists+0xc0>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d47c:	4b06      	ldr	r3, [pc, #24]	; (800d498 <prvSwitchTimerLists+0xc4>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a04      	ldr	r2, [pc, #16]	; (800d494 <prvSwitchTimerLists+0xc0>)
 800d482:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d484:	4a04      	ldr	r2, [pc, #16]	; (800d498 <prvSwitchTimerLists+0xc4>)
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	6013      	str	r3, [r2, #0]
}
 800d48a:	bf00      	nop
 800d48c:	3718      	adds	r7, #24
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop
 800d494:	20033584 	.word	0x20033584
 800d498:	20033588 	.word	0x20033588

0800d49c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d4a2:	f000 f983 	bl	800d7ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d4a6:	4b15      	ldr	r3, [pc, #84]	; (800d4fc <prvCheckForValidListAndQueue+0x60>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d120      	bne.n	800d4f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d4ae:	4814      	ldr	r0, [pc, #80]	; (800d500 <prvCheckForValidListAndQueue+0x64>)
 800d4b0:	f7fd fe83 	bl	800b1ba <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d4b4:	4813      	ldr	r0, [pc, #76]	; (800d504 <prvCheckForValidListAndQueue+0x68>)
 800d4b6:	f7fd fe80 	bl	800b1ba <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d4ba:	4b13      	ldr	r3, [pc, #76]	; (800d508 <prvCheckForValidListAndQueue+0x6c>)
 800d4bc:	4a10      	ldr	r2, [pc, #64]	; (800d500 <prvCheckForValidListAndQueue+0x64>)
 800d4be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d4c0:	4b12      	ldr	r3, [pc, #72]	; (800d50c <prvCheckForValidListAndQueue+0x70>)
 800d4c2:	4a10      	ldr	r2, [pc, #64]	; (800d504 <prvCheckForValidListAndQueue+0x68>)
 800d4c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	9300      	str	r3, [sp, #0]
 800d4ca:	4b11      	ldr	r3, [pc, #68]	; (800d510 <prvCheckForValidListAndQueue+0x74>)
 800d4cc:	4a11      	ldr	r2, [pc, #68]	; (800d514 <prvCheckForValidListAndQueue+0x78>)
 800d4ce:	2110      	movs	r1, #16
 800d4d0:	200a      	movs	r0, #10
 800d4d2:	f7fd ff8f 	bl	800b3f4 <xQueueGenericCreateStatic>
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	4b08      	ldr	r3, [pc, #32]	; (800d4fc <prvCheckForValidListAndQueue+0x60>)
 800d4da:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d4dc:	4b07      	ldr	r3, [pc, #28]	; (800d4fc <prvCheckForValidListAndQueue+0x60>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d005      	beq.n	800d4f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d4e4:	4b05      	ldr	r3, [pc, #20]	; (800d4fc <prvCheckForValidListAndQueue+0x60>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	490b      	ldr	r1, [pc, #44]	; (800d518 <prvCheckForValidListAndQueue+0x7c>)
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7fe fc1e 	bl	800bd2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d4f0:	f000 f98a 	bl	800d808 <vPortExitCritical>
}
 800d4f4:	bf00      	nop
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	2003358c 	.word	0x2003358c
 800d500:	2003355c 	.word	0x2003355c
 800d504:	20033570 	.word	0x20033570
 800d508:	20033584 	.word	0x20033584
 800d50c:	20033588 	.word	0x20033588
 800d510:	20033638 	.word	0x20033638
 800d514:	20033598 	.word	0x20033598
 800d518:	0800e7e0 	.word	0x0800e7e0

0800d51c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b086      	sub	sp, #24
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d109      	bne.n	800d542 <pvTimerGetTimerID+0x26>
 800d52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d532:	f383 8811 	msr	BASEPRI, r3
 800d536:	f3bf 8f6f 	isb	sy
 800d53a:	f3bf 8f4f 	dsb	sy
 800d53e:	60fb      	str	r3, [r7, #12]
 800d540:	e7fe      	b.n	800d540 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 800d542:	f000 f933 	bl	800d7ac <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	69db      	ldr	r3, [r3, #28]
 800d54a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800d54c:	f000 f95c 	bl	800d808 <vPortExitCritical>

	return pvReturn;
 800d550:	693b      	ldr	r3, [r7, #16]
}
 800d552:	4618      	mov	r0, r3
 800d554:	3718      	adds	r7, #24
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
	...

0800d55c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d55c:	b480      	push	{r7}
 800d55e:	b085      	sub	sp, #20
 800d560:	af00      	add	r7, sp, #0
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	3b04      	subs	r3, #4
 800d56c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d574:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	3b04      	subs	r3, #4
 800d57a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	f023 0201 	bic.w	r2, r3, #1
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	3b04      	subs	r3, #4
 800d58a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d58c:	4a0c      	ldr	r2, [pc, #48]	; (800d5c0 <pxPortInitialiseStack+0x64>)
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	3b14      	subs	r3, #20
 800d596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d598:	687a      	ldr	r2, [r7, #4]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	3b04      	subs	r3, #4
 800d5a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f06f 0202 	mvn.w	r2, #2
 800d5aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	3b20      	subs	r3, #32
 800d5b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3714      	adds	r7, #20
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr
 800d5c0:	0800d5c5 	.word	0x0800d5c5

0800d5c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b085      	sub	sp, #20
 800d5c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d5ce:	4b11      	ldr	r3, [pc, #68]	; (800d614 <prvTaskExitError+0x50>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d5d6:	d009      	beq.n	800d5ec <prvTaskExitError+0x28>
 800d5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5dc:	f383 8811 	msr	BASEPRI, r3
 800d5e0:	f3bf 8f6f 	isb	sy
 800d5e4:	f3bf 8f4f 	dsb	sy
 800d5e8:	60fb      	str	r3, [r7, #12]
 800d5ea:	e7fe      	b.n	800d5ea <prvTaskExitError+0x26>
 800d5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f0:	f383 8811 	msr	BASEPRI, r3
 800d5f4:	f3bf 8f6f 	isb	sy
 800d5f8:	f3bf 8f4f 	dsb	sy
 800d5fc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d5fe:	bf00      	nop
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d0fc      	beq.n	800d600 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d606:	bf00      	nop
 800d608:	3714      	adds	r7, #20
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr
 800d612:	bf00      	nop
 800d614:	200000d0 	.word	0x200000d0
	...

0800d620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d620:	4b07      	ldr	r3, [pc, #28]	; (800d640 <pxCurrentTCBConst2>)
 800d622:	6819      	ldr	r1, [r3, #0]
 800d624:	6808      	ldr	r0, [r1, #0]
 800d626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d62a:	f380 8809 	msr	PSP, r0
 800d62e:	f3bf 8f6f 	isb	sy
 800d632:	f04f 0000 	mov.w	r0, #0
 800d636:	f380 8811 	msr	BASEPRI, r0
 800d63a:	4770      	bx	lr
 800d63c:	f3af 8000 	nop.w

0800d640 <pxCurrentTCBConst2>:
 800d640:	20033050 	.word	0x20033050
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d644:	bf00      	nop
 800d646:	bf00      	nop

0800d648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d648:	4808      	ldr	r0, [pc, #32]	; (800d66c <prvPortStartFirstTask+0x24>)
 800d64a:	6800      	ldr	r0, [r0, #0]
 800d64c:	6800      	ldr	r0, [r0, #0]
 800d64e:	f380 8808 	msr	MSP, r0
 800d652:	f04f 0000 	mov.w	r0, #0
 800d656:	f380 8814 	msr	CONTROL, r0
 800d65a:	b662      	cpsie	i
 800d65c:	b661      	cpsie	f
 800d65e:	f3bf 8f4f 	dsb	sy
 800d662:	f3bf 8f6f 	isb	sy
 800d666:	df00      	svc	0
 800d668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d66a:	bf00      	nop
 800d66c:	e000ed08 	.word	0xe000ed08

0800d670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b086      	sub	sp, #24
 800d674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d676:	4b44      	ldr	r3, [pc, #272]	; (800d788 <xPortStartScheduler+0x118>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4a44      	ldr	r2, [pc, #272]	; (800d78c <xPortStartScheduler+0x11c>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d109      	bne.n	800d694 <xPortStartScheduler+0x24>
 800d680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d684:	f383 8811 	msr	BASEPRI, r3
 800d688:	f3bf 8f6f 	isb	sy
 800d68c:	f3bf 8f4f 	dsb	sy
 800d690:	613b      	str	r3, [r7, #16]
 800d692:	e7fe      	b.n	800d692 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d694:	4b3c      	ldr	r3, [pc, #240]	; (800d788 <xPortStartScheduler+0x118>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	4a3d      	ldr	r2, [pc, #244]	; (800d790 <xPortStartScheduler+0x120>)
 800d69a:	4293      	cmp	r3, r2
 800d69c:	d109      	bne.n	800d6b2 <xPortStartScheduler+0x42>
 800d69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a2:	f383 8811 	msr	BASEPRI, r3
 800d6a6:	f3bf 8f6f 	isb	sy
 800d6aa:	f3bf 8f4f 	dsb	sy
 800d6ae:	60fb      	str	r3, [r7, #12]
 800d6b0:	e7fe      	b.n	800d6b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d6b2:	4b38      	ldr	r3, [pc, #224]	; (800d794 <xPortStartScheduler+0x124>)
 800d6b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	22ff      	movs	r2, #255	; 0xff
 800d6c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	b2db      	uxtb	r3, r3
 800d6ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d6cc:	78fb      	ldrb	r3, [r7, #3]
 800d6ce:	b2db      	uxtb	r3, r3
 800d6d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d6d4:	b2da      	uxtb	r2, r3
 800d6d6:	4b30      	ldr	r3, [pc, #192]	; (800d798 <xPortStartScheduler+0x128>)
 800d6d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d6da:	4b30      	ldr	r3, [pc, #192]	; (800d79c <xPortStartScheduler+0x12c>)
 800d6dc:	2207      	movs	r2, #7
 800d6de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d6e0:	e009      	b.n	800d6f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800d6e2:	4b2e      	ldr	r3, [pc, #184]	; (800d79c <xPortStartScheduler+0x12c>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	3b01      	subs	r3, #1
 800d6e8:	4a2c      	ldr	r2, [pc, #176]	; (800d79c <xPortStartScheduler+0x12c>)
 800d6ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d6ec:	78fb      	ldrb	r3, [r7, #3]
 800d6ee:	b2db      	uxtb	r3, r3
 800d6f0:	005b      	lsls	r3, r3, #1
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d6f6:	78fb      	ldrb	r3, [r7, #3]
 800d6f8:	b2db      	uxtb	r3, r3
 800d6fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6fe:	2b80      	cmp	r3, #128	; 0x80
 800d700:	d0ef      	beq.n	800d6e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d702:	4b26      	ldr	r3, [pc, #152]	; (800d79c <xPortStartScheduler+0x12c>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	f1c3 0307 	rsb	r3, r3, #7
 800d70a:	2b04      	cmp	r3, #4
 800d70c:	d009      	beq.n	800d722 <xPortStartScheduler+0xb2>
 800d70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d712:	f383 8811 	msr	BASEPRI, r3
 800d716:	f3bf 8f6f 	isb	sy
 800d71a:	f3bf 8f4f 	dsb	sy
 800d71e:	60bb      	str	r3, [r7, #8]
 800d720:	e7fe      	b.n	800d720 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d722:	4b1e      	ldr	r3, [pc, #120]	; (800d79c <xPortStartScheduler+0x12c>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	021b      	lsls	r3, r3, #8
 800d728:	4a1c      	ldr	r2, [pc, #112]	; (800d79c <xPortStartScheduler+0x12c>)
 800d72a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d72c:	4b1b      	ldr	r3, [pc, #108]	; (800d79c <xPortStartScheduler+0x12c>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d734:	4a19      	ldr	r2, [pc, #100]	; (800d79c <xPortStartScheduler+0x12c>)
 800d736:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	b2da      	uxtb	r2, r3
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d740:	4b17      	ldr	r3, [pc, #92]	; (800d7a0 <xPortStartScheduler+0x130>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a16      	ldr	r2, [pc, #88]	; (800d7a0 <xPortStartScheduler+0x130>)
 800d746:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d74a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d74c:	4b14      	ldr	r3, [pc, #80]	; (800d7a0 <xPortStartScheduler+0x130>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4a13      	ldr	r2, [pc, #76]	; (800d7a0 <xPortStartScheduler+0x130>)
 800d752:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d756:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d758:	f000 f8d6 	bl	800d908 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d75c:	4b11      	ldr	r3, [pc, #68]	; (800d7a4 <xPortStartScheduler+0x134>)
 800d75e:	2200      	movs	r2, #0
 800d760:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d762:	f000 f8f5 	bl	800d950 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d766:	4b10      	ldr	r3, [pc, #64]	; (800d7a8 <xPortStartScheduler+0x138>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	4a0f      	ldr	r2, [pc, #60]	; (800d7a8 <xPortStartScheduler+0x138>)
 800d76c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d770:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d772:	f7ff ff69 	bl	800d648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d776:	f7fe ff3f 	bl	800c5f8 <vTaskSwitchContext>
	prvTaskExitError();
 800d77a:	f7ff ff23 	bl	800d5c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d77e:	2300      	movs	r3, #0
}
 800d780:	4618      	mov	r0, r3
 800d782:	3718      	adds	r7, #24
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}
 800d788:	e000ed00 	.word	0xe000ed00
 800d78c:	410fc271 	.word	0x410fc271
 800d790:	410fc270 	.word	0x410fc270
 800d794:	e000e400 	.word	0xe000e400
 800d798:	20033688 	.word	0x20033688
 800d79c:	2003368c 	.word	0x2003368c
 800d7a0:	e000ed20 	.word	0xe000ed20
 800d7a4:	200000d0 	.word	0x200000d0
 800d7a8:	e000ef34 	.word	0xe000ef34

0800d7ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b6:	f383 8811 	msr	BASEPRI, r3
 800d7ba:	f3bf 8f6f 	isb	sy
 800d7be:	f3bf 8f4f 	dsb	sy
 800d7c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d7c4:	4b0e      	ldr	r3, [pc, #56]	; (800d800 <vPortEnterCritical+0x54>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	4a0d      	ldr	r2, [pc, #52]	; (800d800 <vPortEnterCritical+0x54>)
 800d7cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d7ce:	4b0c      	ldr	r3, [pc, #48]	; (800d800 <vPortEnterCritical+0x54>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	2b01      	cmp	r3, #1
 800d7d4:	d10e      	bne.n	800d7f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d7d6:	4b0b      	ldr	r3, [pc, #44]	; (800d804 <vPortEnterCritical+0x58>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d009      	beq.n	800d7f4 <vPortEnterCritical+0x48>
 800d7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e4:	f383 8811 	msr	BASEPRI, r3
 800d7e8:	f3bf 8f6f 	isb	sy
 800d7ec:	f3bf 8f4f 	dsb	sy
 800d7f0:	603b      	str	r3, [r7, #0]
 800d7f2:	e7fe      	b.n	800d7f2 <vPortEnterCritical+0x46>
	}
}
 800d7f4:	bf00      	nop
 800d7f6:	370c      	adds	r7, #12
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr
 800d800:	200000d0 	.word	0x200000d0
 800d804:	e000ed04 	.word	0xe000ed04

0800d808 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d808:	b480      	push	{r7}
 800d80a:	b083      	sub	sp, #12
 800d80c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d80e:	4b11      	ldr	r3, [pc, #68]	; (800d854 <vPortExitCritical+0x4c>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d109      	bne.n	800d82a <vPortExitCritical+0x22>
 800d816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81a:	f383 8811 	msr	BASEPRI, r3
 800d81e:	f3bf 8f6f 	isb	sy
 800d822:	f3bf 8f4f 	dsb	sy
 800d826:	607b      	str	r3, [r7, #4]
 800d828:	e7fe      	b.n	800d828 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800d82a:	4b0a      	ldr	r3, [pc, #40]	; (800d854 <vPortExitCritical+0x4c>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	3b01      	subs	r3, #1
 800d830:	4a08      	ldr	r2, [pc, #32]	; (800d854 <vPortExitCritical+0x4c>)
 800d832:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d834:	4b07      	ldr	r3, [pc, #28]	; (800d854 <vPortExitCritical+0x4c>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d104      	bne.n	800d846 <vPortExitCritical+0x3e>
 800d83c:	2300      	movs	r3, #0
 800d83e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800d846:	bf00      	nop
 800d848:	370c      	adds	r7, #12
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr
 800d852:	bf00      	nop
 800d854:	200000d0 	.word	0x200000d0
	...

0800d860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d860:	f3ef 8009 	mrs	r0, PSP
 800d864:	f3bf 8f6f 	isb	sy
 800d868:	4b15      	ldr	r3, [pc, #84]	; (800d8c0 <pxCurrentTCBConst>)
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	f01e 0f10 	tst.w	lr, #16
 800d870:	bf08      	it	eq
 800d872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d87a:	6010      	str	r0, [r2, #0]
 800d87c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d880:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d884:	f380 8811 	msr	BASEPRI, r0
 800d888:	f3bf 8f4f 	dsb	sy
 800d88c:	f3bf 8f6f 	isb	sy
 800d890:	f7fe feb2 	bl	800c5f8 <vTaskSwitchContext>
 800d894:	f04f 0000 	mov.w	r0, #0
 800d898:	f380 8811 	msr	BASEPRI, r0
 800d89c:	bc09      	pop	{r0, r3}
 800d89e:	6819      	ldr	r1, [r3, #0]
 800d8a0:	6808      	ldr	r0, [r1, #0]
 800d8a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a6:	f01e 0f10 	tst.w	lr, #16
 800d8aa:	bf08      	it	eq
 800d8ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d8b0:	f380 8809 	msr	PSP, r0
 800d8b4:	f3bf 8f6f 	isb	sy
 800d8b8:	4770      	bx	lr
 800d8ba:	bf00      	nop
 800d8bc:	f3af 8000 	nop.w

0800d8c0 <pxCurrentTCBConst>:
 800d8c0:	20033050 	.word	0x20033050
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d8c4:	bf00      	nop
 800d8c6:	bf00      	nop

0800d8c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b082      	sub	sp, #8
 800d8cc:	af00      	add	r7, sp, #0
	__asm volatile
 800d8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d2:	f383 8811 	msr	BASEPRI, r3
 800d8d6:	f3bf 8f6f 	isb	sy
 800d8da:	f3bf 8f4f 	dsb	sy
 800d8de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d8e0:	f7fe fdca 	bl	800c478 <xTaskIncrementTick>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d003      	beq.n	800d8f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d8ea:	4b06      	ldr	r3, [pc, #24]	; (800d904 <SysTick_Handler+0x3c>)
 800d8ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8f0:	601a      	str	r2, [r3, #0]
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800d8fc:	bf00      	nop
 800d8fe:	3708      	adds	r7, #8
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}
 800d904:	e000ed04 	.word	0xe000ed04

0800d908 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d908:	b480      	push	{r7}
 800d90a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d90c:	4b0b      	ldr	r3, [pc, #44]	; (800d93c <vPortSetupTimerInterrupt+0x34>)
 800d90e:	2200      	movs	r2, #0
 800d910:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d912:	4b0b      	ldr	r3, [pc, #44]	; (800d940 <vPortSetupTimerInterrupt+0x38>)
 800d914:	2200      	movs	r2, #0
 800d916:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d918:	4b0a      	ldr	r3, [pc, #40]	; (800d944 <vPortSetupTimerInterrupt+0x3c>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	4a0a      	ldr	r2, [pc, #40]	; (800d948 <vPortSetupTimerInterrupt+0x40>)
 800d91e:	fba2 2303 	umull	r2, r3, r2, r3
 800d922:	099b      	lsrs	r3, r3, #6
 800d924:	4a09      	ldr	r2, [pc, #36]	; (800d94c <vPortSetupTimerInterrupt+0x44>)
 800d926:	3b01      	subs	r3, #1
 800d928:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d92a:	4b04      	ldr	r3, [pc, #16]	; (800d93c <vPortSetupTimerInterrupt+0x34>)
 800d92c:	2207      	movs	r2, #7
 800d92e:	601a      	str	r2, [r3, #0]
}
 800d930:	bf00      	nop
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	e000e010 	.word	0xe000e010
 800d940:	e000e018 	.word	0xe000e018
 800d944:	200000b4 	.word	0x200000b4
 800d948:	10624dd3 	.word	0x10624dd3
 800d94c:	e000e014 	.word	0xe000e014

0800d950 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d950:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d960 <vPortEnableVFP+0x10>
 800d954:	6801      	ldr	r1, [r0, #0]
 800d956:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d95a:	6001      	str	r1, [r0, #0]
 800d95c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d95e:	bf00      	nop
 800d960:	e000ed88 	.word	0xe000ed88

0800d964 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d964:	b480      	push	{r7}
 800d966:	b085      	sub	sp, #20
 800d968:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d96a:	f3ef 8305 	mrs	r3, IPSR
 800d96e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	2b0f      	cmp	r3, #15
 800d974:	d913      	bls.n	800d99e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d976:	4a16      	ldr	r2, [pc, #88]	; (800d9d0 <vPortValidateInterruptPriority+0x6c>)
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	4413      	add	r3, r2
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d980:	4b14      	ldr	r3, [pc, #80]	; (800d9d4 <vPortValidateInterruptPriority+0x70>)
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	7afa      	ldrb	r2, [r7, #11]
 800d986:	429a      	cmp	r2, r3
 800d988:	d209      	bcs.n	800d99e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800d98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d98e:	f383 8811 	msr	BASEPRI, r3
 800d992:	f3bf 8f6f 	isb	sy
 800d996:	f3bf 8f4f 	dsb	sy
 800d99a:	607b      	str	r3, [r7, #4]
 800d99c:	e7fe      	b.n	800d99c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d99e:	4b0e      	ldr	r3, [pc, #56]	; (800d9d8 <vPortValidateInterruptPriority+0x74>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d9a6:	4b0d      	ldr	r3, [pc, #52]	; (800d9dc <vPortValidateInterruptPriority+0x78>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d909      	bls.n	800d9c2 <vPortValidateInterruptPriority+0x5e>
 800d9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b2:	f383 8811 	msr	BASEPRI, r3
 800d9b6:	f3bf 8f6f 	isb	sy
 800d9ba:	f3bf 8f4f 	dsb	sy
 800d9be:	603b      	str	r3, [r7, #0]
 800d9c0:	e7fe      	b.n	800d9c0 <vPortValidateInterruptPriority+0x5c>
	}
 800d9c2:	bf00      	nop
 800d9c4:	3714      	adds	r7, #20
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9cc:	4770      	bx	lr
 800d9ce:	bf00      	nop
 800d9d0:	e000e3f0 	.word	0xe000e3f0
 800d9d4:	20033688 	.word	0x20033688
 800d9d8:	e000ed0c 	.word	0xe000ed0c
 800d9dc:	2003368c 	.word	0x2003368c

0800d9e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b088      	sub	sp, #32
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 800d9ec:	4b47      	ldr	r3, [pc, #284]	; (800db0c <pvPortMalloc+0x12c>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d109      	bne.n	800da08 <pvPortMalloc+0x28>
 800d9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f8:	f383 8811 	msr	BASEPRI, r3
 800d9fc:	f3bf 8f6f 	isb	sy
 800da00:	f3bf 8f4f 	dsb	sy
 800da04:	60fb      	str	r3, [r7, #12]
 800da06:	e7fe      	b.n	800da06 <pvPortMalloc+0x26>

	vTaskSuspendAll();
 800da08:	f7fe fc7c 	bl	800c304 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800da0c:	4b40      	ldr	r3, [pc, #256]	; (800db10 <pvPortMalloc+0x130>)
 800da0e:	681a      	ldr	r2, [r3, #0]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	4013      	ands	r3, r2
 800da14:	2b00      	cmp	r3, #0
 800da16:	d16d      	bne.n	800daf4 <pvPortMalloc+0x114>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d00d      	beq.n	800da3a <pvPortMalloc+0x5a>
			{
				xWantedSize += xHeapStructSize;
 800da1e:	2208      	movs	r2, #8
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	4413      	add	r3, r2
 800da24:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f003 0307 	and.w	r3, r3, #7
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d004      	beq.n	800da3a <pvPortMalloc+0x5a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f023 0307 	bic.w	r3, r3, #7
 800da36:	3308      	adds	r3, #8
 800da38:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d059      	beq.n	800daf4 <pvPortMalloc+0x114>
 800da40:	4b34      	ldr	r3, [pc, #208]	; (800db14 <pvPortMalloc+0x134>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	687a      	ldr	r2, [r7, #4]
 800da46:	429a      	cmp	r2, r3
 800da48:	d854      	bhi.n	800daf4 <pvPortMalloc+0x114>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800da4a:	4b33      	ldr	r3, [pc, #204]	; (800db18 <pvPortMalloc+0x138>)
 800da4c:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 800da4e:	4b32      	ldr	r3, [pc, #200]	; (800db18 <pvPortMalloc+0x138>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da54:	e004      	b.n	800da60 <pvPortMalloc+0x80>
				{
					pxPreviousBlock = pxBlock;
 800da56:	69fb      	ldr	r3, [r7, #28]
 800da58:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 800da5a:	69fb      	ldr	r3, [r7, #28]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da60:	69fb      	ldr	r3, [r7, #28]
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	429a      	cmp	r2, r3
 800da68:	d903      	bls.n	800da72 <pvPortMalloc+0x92>
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d1f1      	bne.n	800da56 <pvPortMalloc+0x76>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800da72:	4b26      	ldr	r3, [pc, #152]	; (800db0c <pvPortMalloc+0x12c>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	69fa      	ldr	r2, [r7, #28]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d03b      	beq.n	800daf4 <pvPortMalloc+0x114>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800da7c:	69bb      	ldr	r3, [r7, #24]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2208      	movs	r2, #8
 800da82:	4413      	add	r3, r2
 800da84:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800da86:	69fb      	ldr	r3, [r7, #28]
 800da88:	681a      	ldr	r2, [r3, #0]
 800da8a:	69bb      	ldr	r3, [r7, #24]
 800da8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800da8e:	69fb      	ldr	r3, [r7, #28]
 800da90:	685a      	ldr	r2, [r3, #4]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	1ad2      	subs	r2, r2, r3
 800da96:	2308      	movs	r3, #8
 800da98:	005b      	lsls	r3, r3, #1
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d90f      	bls.n	800dabe <pvPortMalloc+0xde>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800da9e:	69fa      	ldr	r2, [r7, #28]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	4413      	add	r3, r2
 800daa4:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800daa6:	69fb      	ldr	r3, [r7, #28]
 800daa8:	685a      	ldr	r2, [r3, #4]
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	1ad2      	subs	r2, r2, r3
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dab2:	69fb      	ldr	r3, [r7, #28]
 800dab4:	687a      	ldr	r2, [r7, #4]
 800dab6:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800dab8:	6938      	ldr	r0, [r7, #16]
 800daba:	f000 f889 	bl	800dbd0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dabe:	4b15      	ldr	r3, [pc, #84]	; (800db14 <pvPortMalloc+0x134>)
 800dac0:	681a      	ldr	r2, [r3, #0]
 800dac2:	69fb      	ldr	r3, [r7, #28]
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	1ad3      	subs	r3, r2, r3
 800dac8:	4a12      	ldr	r2, [pc, #72]	; (800db14 <pvPortMalloc+0x134>)
 800daca:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dacc:	4b11      	ldr	r3, [pc, #68]	; (800db14 <pvPortMalloc+0x134>)
 800dace:	681a      	ldr	r2, [r3, #0]
 800dad0:	4b12      	ldr	r3, [pc, #72]	; (800db1c <pvPortMalloc+0x13c>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d203      	bcs.n	800dae0 <pvPortMalloc+0x100>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dad8:	4b0e      	ldr	r3, [pc, #56]	; (800db14 <pvPortMalloc+0x134>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4a0f      	ldr	r2, [pc, #60]	; (800db1c <pvPortMalloc+0x13c>)
 800dade:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dae0:	69fb      	ldr	r3, [r7, #28]
 800dae2:	685a      	ldr	r2, [r3, #4]
 800dae4:	4b0a      	ldr	r3, [pc, #40]	; (800db10 <pvPortMalloc+0x130>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	431a      	orrs	r2, r3
 800daea:	69fb      	ldr	r3, [r7, #28]
 800daec:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800daee:	69fb      	ldr	r3, [r7, #28]
 800daf0:	2200      	movs	r2, #0
 800daf2:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800daf4:	f7fe fc14 	bl	800c320 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d101      	bne.n	800db02 <pvPortMalloc+0x122>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800dafe:	f7fd fac7 	bl	800b090 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 800db02:	697b      	ldr	r3, [r7, #20]
}
 800db04:	4618      	mov	r0, r3
 800db06:	3720      	adds	r7, #32
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	20033698 	.word	0x20033698
 800db10:	200336a4 	.word	0x200336a4
 800db14:	2003369c 	.word	0x2003369c
 800db18:	20033690 	.word	0x20033690
 800db1c:	200336a0 	.word	0x200336a0

0800db20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b086      	sub	sp, #24
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d046      	beq.n	800dbc0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800db32:	2308      	movs	r3, #8
 800db34:	425b      	negs	r3, r3
 800db36:	697a      	ldr	r2, [r7, #20]
 800db38:	4413      	add	r3, r2
 800db3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	685a      	ldr	r2, [r3, #4]
 800db44:	4b20      	ldr	r3, [pc, #128]	; (800dbc8 <vPortFree+0xa8>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4013      	ands	r3, r2
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d109      	bne.n	800db62 <vPortFree+0x42>
 800db4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db52:	f383 8811 	msr	BASEPRI, r3
 800db56:	f3bf 8f6f 	isb	sy
 800db5a:	f3bf 8f4f 	dsb	sy
 800db5e:	60fb      	str	r3, [r7, #12]
 800db60:	e7fe      	b.n	800db60 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800db62:	693b      	ldr	r3, [r7, #16]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d009      	beq.n	800db7e <vPortFree+0x5e>
 800db6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db6e:	f383 8811 	msr	BASEPRI, r3
 800db72:	f3bf 8f6f 	isb	sy
 800db76:	f3bf 8f4f 	dsb	sy
 800db7a:	60bb      	str	r3, [r7, #8]
 800db7c:	e7fe      	b.n	800db7c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	685a      	ldr	r2, [r3, #4]
 800db82:	4b11      	ldr	r3, [pc, #68]	; (800dbc8 <vPortFree+0xa8>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	4013      	ands	r3, r2
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d019      	beq.n	800dbc0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d115      	bne.n	800dbc0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	685a      	ldr	r2, [r3, #4]
 800db98:	4b0b      	ldr	r3, [pc, #44]	; (800dbc8 <vPortFree+0xa8>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	43db      	mvns	r3, r3
 800db9e:	401a      	ands	r2, r3
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dba4:	f7fe fbae 	bl	800c304 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	685a      	ldr	r2, [r3, #4]
 800dbac:	4b07      	ldr	r3, [pc, #28]	; (800dbcc <vPortFree+0xac>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4413      	add	r3, r2
 800dbb2:	4a06      	ldr	r2, [pc, #24]	; (800dbcc <vPortFree+0xac>)
 800dbb4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dbb6:	6938      	ldr	r0, [r7, #16]
 800dbb8:	f000 f80a 	bl	800dbd0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800dbbc:	f7fe fbb0 	bl	800c320 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dbc0:	bf00      	nop
 800dbc2:	3718      	adds	r7, #24
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}
 800dbc8:	200336a4 	.word	0x200336a4
 800dbcc:	2003369c 	.word	0x2003369c

0800dbd0 <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b085      	sub	sp, #20
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dbd8:	4b28      	ldr	r3, [pc, #160]	; (800dc7c <prvInsertBlockIntoFreeList+0xac>)
 800dbda:	60fb      	str	r3, [r7, #12]
 800dbdc:	e002      	b.n	800dbe4 <prvInsertBlockIntoFreeList+0x14>
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	60fb      	str	r3, [r7, #12]
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	687a      	ldr	r2, [r7, #4]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d8f7      	bhi.n	800dbde <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	685b      	ldr	r3, [r3, #4]
 800dbf6:	68ba      	ldr	r2, [r7, #8]
 800dbf8:	4413      	add	r3, r2
 800dbfa:	687a      	ldr	r2, [r7, #4]
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	d108      	bne.n	800dc12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	685a      	ldr	r2, [r3, #4]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	441a      	add	r2, r3
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	685b      	ldr	r3, [r3, #4]
 800dc1a:	68ba      	ldr	r2, [r7, #8]
 800dc1c:	441a      	add	r2, r3
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d118      	bne.n	800dc58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681a      	ldr	r2, [r3, #0]
 800dc2a:	4b15      	ldr	r3, [pc, #84]	; (800dc80 <prvInsertBlockIntoFreeList+0xb0>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d00d      	beq.n	800dc4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	685a      	ldr	r2, [r3, #4]
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	685b      	ldr	r3, [r3, #4]
 800dc3c:	441a      	add	r2, r3
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	601a      	str	r2, [r3, #0]
 800dc4c:	e008      	b.n	800dc60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dc4e:	4b0c      	ldr	r3, [pc, #48]	; (800dc80 <prvInsertBlockIntoFreeList+0xb0>)
 800dc50:	681a      	ldr	r2, [r3, #0]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	601a      	str	r2, [r3, #0]
 800dc56:	e003      	b.n	800dc60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681a      	ldr	r2, [r3, #0]
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dc60:	68fa      	ldr	r2, [r7, #12]
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d002      	beq.n	800dc6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc6e:	bf00      	nop
 800dc70:	3714      	adds	r7, #20
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr
 800dc7a:	bf00      	nop
 800dc7c:	20033690 	.word	0x20033690
 800dc80:	20033698 	.word	0x20033698

0800dc84 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 800dc84:	b480      	push	{r7}
 800dc86:	b08f      	sub	sp, #60	; 0x3c
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 800dc90:	2300      	movs	r3, #0
 800dc92:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 800dc94:	2300      	movs	r3, #0
 800dc96:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800dc98:	4b58      	ldr	r3, [pc, #352]	; (800ddfc <vPortDefineHeapRegions+0x178>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d009      	beq.n	800dcb4 <vPortDefineHeapRegions+0x30>
 800dca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca4:	f383 8811 	msr	BASEPRI, r3
 800dca8:	f3bf 8f6f 	isb	sy
 800dcac:	f3bf 8f4f 	dsb	sy
 800dcb0:	617b      	str	r3, [r7, #20]
 800dcb2:	e7fe      	b.n	800dcb2 <vPortDefineHeapRegions+0x2e>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800dcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb6:	00db      	lsls	r3, r3, #3
 800dcb8:	687a      	ldr	r2, [r7, #4]
 800dcba:	4413      	add	r3, r2
 800dcbc:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 800dcbe:	e07b      	b.n	800ddb8 <vPortDefineHeapRegions+0x134>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 800dcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 800dcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcce:	f003 0307 	and.w	r3, r3, #7
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d00e      	beq.n	800dcf4 <vPortDefineHeapRegions+0x70>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 800dcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd8:	3307      	adds	r3, #7
 800dcda:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800dcdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcde:	f023 0307 	bic.w	r3, r3, #7
 800dce2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 800dce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	461a      	mov	r2, r3
 800dcea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcec:	1ad3      	subs	r3, r2, r3
 800dcee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcf0:	4413      	add	r3, r2
 800dcf2:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 800dcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf6:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 800dcf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d106      	bne.n	800dd0c <vPortDefineHeapRegions+0x88>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800dcfe:	69fb      	ldr	r3, [r7, #28]
 800dd00:	4a3f      	ldr	r2, [pc, #252]	; (800de00 <vPortDefineHeapRegions+0x17c>)
 800dd02:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 800dd04:	4b3e      	ldr	r3, [pc, #248]	; (800de00 <vPortDefineHeapRegions+0x17c>)
 800dd06:	2200      	movs	r2, #0
 800dd08:	605a      	str	r2, [r3, #4]
 800dd0a:	e01d      	b.n	800dd48 <vPortDefineHeapRegions+0xc4>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 800dd0c:	4b3b      	ldr	r3, [pc, #236]	; (800ddfc <vPortDefineHeapRegions+0x178>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d109      	bne.n	800dd28 <vPortDefineHeapRegions+0xa4>
 800dd14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd18:	f383 8811 	msr	BASEPRI, r3
 800dd1c:	f3bf 8f6f 	isb	sy
 800dd20:	f3bf 8f4f 	dsb	sy
 800dd24:	613b      	str	r3, [r7, #16]
 800dd26:	e7fe      	b.n	800dd26 <vPortDefineHeapRegions+0xa2>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 800dd28:	4b34      	ldr	r3, [pc, #208]	; (800ddfc <vPortDefineHeapRegions+0x178>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d809      	bhi.n	800dd48 <vPortDefineHeapRegions+0xc4>
 800dd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd38:	f383 8811 	msr	BASEPRI, r3
 800dd3c:	f3bf 8f6f 	isb	sy
 800dd40:	f3bf 8f4f 	dsb	sy
 800dd44:	60fb      	str	r3, [r7, #12]
 800dd46:	e7fe      	b.n	800dd46 <vPortDefineHeapRegions+0xc2>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 800dd48:	4b2c      	ldr	r3, [pc, #176]	; (800ddfc <vPortDefineHeapRegions+0x178>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 800dd4e:	69fa      	ldr	r2, [r7, #28]
 800dd50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd52:	4413      	add	r3, r2
 800dd54:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 800dd56:	2208      	movs	r2, #8
 800dd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5a:	1a9b      	subs	r3, r3, r2
 800dd5c:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800dd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd60:	f023 0307 	bic.w	r3, r3, #7
 800dd64:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 800dd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd68:	4a24      	ldr	r2, [pc, #144]	; (800ddfc <vPortDefineHeapRegions+0x178>)
 800dd6a:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 800dd6c:	4b23      	ldr	r3, [pc, #140]	; (800ddfc <vPortDefineHeapRegions+0x178>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	2200      	movs	r2, #0
 800dd72:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 800dd74:	4b21      	ldr	r3, [pc, #132]	; (800ddfc <vPortDefineHeapRegions+0x178>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800dd7c:	69fb      	ldr	r3, [r7, #28]
 800dd7e:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800dd80:	6a3b      	ldr	r3, [r7, #32]
 800dd82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd84:	1ad2      	subs	r2, r2, r3
 800dd86:	6a3b      	ldr	r3, [r7, #32]
 800dd88:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800dd8a:	4b1c      	ldr	r3, [pc, #112]	; (800ddfc <vPortDefineHeapRegions+0x178>)
 800dd8c:	681a      	ldr	r2, [r3, #0]
 800dd8e:	6a3b      	ldr	r3, [r7, #32]
 800dd90:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800dd92:	69bb      	ldr	r3, [r7, #24]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d002      	beq.n	800dd9e <vPortDefineHeapRegions+0x11a>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800dd98:	69bb      	ldr	r3, [r7, #24]
 800dd9a:	6a3a      	ldr	r2, [r7, #32]
 800dd9c:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800dd9e:	6a3b      	ldr	r3, [r7, #32]
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dda4:	4413      	add	r3, r2
 800dda6:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800dda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddaa:	3301      	adds	r3, #1
 800ddac:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800ddae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb0:	00db      	lsls	r3, r3, #3
 800ddb2:	687a      	ldr	r2, [r7, #4]
 800ddb4:	4413      	add	r3, r2
 800ddb6:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 800ddb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddba:	685b      	ldr	r3, [r3, #4]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	f47f af7f 	bne.w	800dcc0 <vPortDefineHeapRegions+0x3c>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800ddc2:	4a10      	ldr	r2, [pc, #64]	; (800de04 <vPortDefineHeapRegions+0x180>)
 800ddc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800ddc8:	4a0f      	ldr	r2, [pc, #60]	; (800de08 <vPortDefineHeapRegions+0x184>)
 800ddca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddcc:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800ddce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d109      	bne.n	800dde8 <vPortDefineHeapRegions+0x164>
 800ddd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd8:	f383 8811 	msr	BASEPRI, r3
 800dddc:	f3bf 8f6f 	isb	sy
 800dde0:	f3bf 8f4f 	dsb	sy
 800dde4:	60bb      	str	r3, [r7, #8]
 800dde6:	e7fe      	b.n	800dde6 <vPortDefineHeapRegions+0x162>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dde8:	4b08      	ldr	r3, [pc, #32]	; (800de0c <vPortDefineHeapRegions+0x188>)
 800ddea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ddee:	601a      	str	r2, [r3, #0]
}
 800ddf0:	bf00      	nop
 800ddf2:	373c      	adds	r7, #60	; 0x3c
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfa:	4770      	bx	lr
 800ddfc:	20033698 	.word	0x20033698
 800de00:	20033690 	.word	0x20033690
 800de04:	200336a0 	.word	0x200336a0
 800de08:	2003369c 	.word	0x2003369c
 800de0c:	200336a4 	.word	0x200336a4

0800de10 <__errno>:
 800de10:	4b01      	ldr	r3, [pc, #4]	; (800de18 <__errno+0x8>)
 800de12:	6818      	ldr	r0, [r3, #0]
 800de14:	4770      	bx	lr
 800de16:	bf00      	nop
 800de18:	200000d4 	.word	0x200000d4

0800de1c <__libc_init_array>:
 800de1c:	b570      	push	{r4, r5, r6, lr}
 800de1e:	4e0d      	ldr	r6, [pc, #52]	; (800de54 <__libc_init_array+0x38>)
 800de20:	4c0d      	ldr	r4, [pc, #52]	; (800de58 <__libc_init_array+0x3c>)
 800de22:	1ba4      	subs	r4, r4, r6
 800de24:	10a4      	asrs	r4, r4, #2
 800de26:	2500      	movs	r5, #0
 800de28:	42a5      	cmp	r5, r4
 800de2a:	d109      	bne.n	800de40 <__libc_init_array+0x24>
 800de2c:	4e0b      	ldr	r6, [pc, #44]	; (800de5c <__libc_init_array+0x40>)
 800de2e:	4c0c      	ldr	r4, [pc, #48]	; (800de60 <__libc_init_array+0x44>)
 800de30:	f000 fa30 	bl	800e294 <_init>
 800de34:	1ba4      	subs	r4, r4, r6
 800de36:	10a4      	asrs	r4, r4, #2
 800de38:	2500      	movs	r5, #0
 800de3a:	42a5      	cmp	r5, r4
 800de3c:	d105      	bne.n	800de4a <__libc_init_array+0x2e>
 800de3e:	bd70      	pop	{r4, r5, r6, pc}
 800de40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800de44:	4798      	blx	r3
 800de46:	3501      	adds	r5, #1
 800de48:	e7ee      	b.n	800de28 <__libc_init_array+0xc>
 800de4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800de4e:	4798      	blx	r3
 800de50:	3501      	adds	r5, #1
 800de52:	e7f2      	b.n	800de3a <__libc_init_array+0x1e>
 800de54:	0800e93c 	.word	0x0800e93c
 800de58:	0800e93c 	.word	0x0800e93c
 800de5c:	0800e93c 	.word	0x0800e93c
 800de60:	0800e944 	.word	0x0800e944

0800de64 <memcpy>:
 800de64:	b510      	push	{r4, lr}
 800de66:	1e43      	subs	r3, r0, #1
 800de68:	440a      	add	r2, r1
 800de6a:	4291      	cmp	r1, r2
 800de6c:	d100      	bne.n	800de70 <memcpy+0xc>
 800de6e:	bd10      	pop	{r4, pc}
 800de70:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de74:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de78:	e7f7      	b.n	800de6a <memcpy+0x6>

0800de7a <memset>:
 800de7a:	4402      	add	r2, r0
 800de7c:	4603      	mov	r3, r0
 800de7e:	4293      	cmp	r3, r2
 800de80:	d100      	bne.n	800de84 <memset+0xa>
 800de82:	4770      	bx	lr
 800de84:	f803 1b01 	strb.w	r1, [r3], #1
 800de88:	e7f9      	b.n	800de7e <memset+0x4>

0800de8a <cleanup_glue>:
 800de8a:	b538      	push	{r3, r4, r5, lr}
 800de8c:	460c      	mov	r4, r1
 800de8e:	6809      	ldr	r1, [r1, #0]
 800de90:	4605      	mov	r5, r0
 800de92:	b109      	cbz	r1, 800de98 <cleanup_glue+0xe>
 800de94:	f7ff fff9 	bl	800de8a <cleanup_glue>
 800de98:	4621      	mov	r1, r4
 800de9a:	4628      	mov	r0, r5
 800de9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dea0:	f000 b8ba 	b.w	800e018 <_free_r>

0800dea4 <_reclaim_reent>:
 800dea4:	4b1f      	ldr	r3, [pc, #124]	; (800df24 <_reclaim_reent+0x80>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	4283      	cmp	r3, r0
 800deaa:	b570      	push	{r4, r5, r6, lr}
 800deac:	4604      	mov	r4, r0
 800deae:	d038      	beq.n	800df22 <_reclaim_reent+0x7e>
 800deb0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800deb2:	bb13      	cbnz	r3, 800defa <_reclaim_reent+0x56>
 800deb4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800deb6:	b111      	cbz	r1, 800debe <_reclaim_reent+0x1a>
 800deb8:	4620      	mov	r0, r4
 800deba:	f000 f8ad 	bl	800e018 <_free_r>
 800debe:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 800dec2:	b1e1      	cbz	r1, 800defe <_reclaim_reent+0x5a>
 800dec4:	f504 75a6 	add.w	r5, r4, #332	; 0x14c
 800dec8:	42a9      	cmp	r1, r5
 800deca:	d018      	beq.n	800defe <_reclaim_reent+0x5a>
 800decc:	680e      	ldr	r6, [r1, #0]
 800dece:	4620      	mov	r0, r4
 800ded0:	f000 f8a2 	bl	800e018 <_free_r>
 800ded4:	4631      	mov	r1, r6
 800ded6:	42b5      	cmp	r5, r6
 800ded8:	e7f7      	b.n	800deca <_reclaim_reent+0x26>
 800deda:	5949      	ldr	r1, [r1, r5]
 800dedc:	b939      	cbnz	r1, 800deee <_reclaim_reent+0x4a>
 800dede:	3504      	adds	r5, #4
 800dee0:	2d80      	cmp	r5, #128	; 0x80
 800dee2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800dee4:	d1f9      	bne.n	800deda <_reclaim_reent+0x36>
 800dee6:	4620      	mov	r0, r4
 800dee8:	f000 f896 	bl	800e018 <_free_r>
 800deec:	e7e2      	b.n	800deb4 <_reclaim_reent+0x10>
 800deee:	680e      	ldr	r6, [r1, #0]
 800def0:	4620      	mov	r0, r4
 800def2:	f000 f891 	bl	800e018 <_free_r>
 800def6:	4631      	mov	r1, r6
 800def8:	e7f0      	b.n	800dedc <_reclaim_reent+0x38>
 800defa:	2500      	movs	r5, #0
 800defc:	e7f0      	b.n	800dee0 <_reclaim_reent+0x3c>
 800defe:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800df00:	b111      	cbz	r1, 800df08 <_reclaim_reent+0x64>
 800df02:	4620      	mov	r0, r4
 800df04:	f000 f888 	bl	800e018 <_free_r>
 800df08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df0a:	b153      	cbz	r3, 800df22 <_reclaim_reent+0x7e>
 800df0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800df0e:	4620      	mov	r0, r4
 800df10:	4798      	blx	r3
 800df12:	f8d4 12e0 	ldr.w	r1, [r4, #736]	; 0x2e0
 800df16:	b121      	cbz	r1, 800df22 <_reclaim_reent+0x7e>
 800df18:	4620      	mov	r0, r4
 800df1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df1e:	f7ff bfb4 	b.w	800de8a <cleanup_glue>
 800df22:	bd70      	pop	{r4, r5, r6, pc}
 800df24:	200000d4 	.word	0x200000d4

0800df28 <register_fini>:
 800df28:	4b02      	ldr	r3, [pc, #8]	; (800df34 <register_fini+0xc>)
 800df2a:	b113      	cbz	r3, 800df32 <register_fini+0xa>
 800df2c:	4802      	ldr	r0, [pc, #8]	; (800df38 <register_fini+0x10>)
 800df2e:	f000 b805 	b.w	800df3c <atexit>
 800df32:	4770      	bx	lr
 800df34:	00000000 	.word	0x00000000
 800df38:	0800df49 	.word	0x0800df49

0800df3c <atexit>:
 800df3c:	2300      	movs	r3, #0
 800df3e:	4601      	mov	r1, r0
 800df40:	461a      	mov	r2, r3
 800df42:	4618      	mov	r0, r3
 800df44:	f000 b950 	b.w	800e1e8 <__register_exitproc>

0800df48 <__libc_fini_array>:
 800df48:	b538      	push	{r3, r4, r5, lr}
 800df4a:	4d07      	ldr	r5, [pc, #28]	; (800df68 <__libc_fini_array+0x20>)
 800df4c:	4c07      	ldr	r4, [pc, #28]	; (800df6c <__libc_fini_array+0x24>)
 800df4e:	1b64      	subs	r4, r4, r5
 800df50:	10a4      	asrs	r4, r4, #2
 800df52:	b91c      	cbnz	r4, 800df5c <__libc_fini_array+0x14>
 800df54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df58:	f000 b9a2 	b.w	800e2a0 <_fini>
 800df5c:	3c01      	subs	r4, #1
 800df5e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800df62:	4798      	blx	r3
 800df64:	e7f5      	b.n	800df52 <__libc_fini_array+0xa>
 800df66:	bf00      	nop
 800df68:	0800e944 	.word	0x0800e944
 800df6c:	0800e948 	.word	0x0800e948

0800df70 <_malloc_trim_r>:
 800df70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df74:	4605      	mov	r5, r0
 800df76:	2008      	movs	r0, #8
 800df78:	460c      	mov	r4, r1
 800df7a:	f000 f927 	bl	800e1cc <sysconf>
 800df7e:	4f23      	ldr	r7, [pc, #140]	; (800e00c <_malloc_trim_r+0x9c>)
 800df80:	4680      	mov	r8, r0
 800df82:	4628      	mov	r0, r5
 800df84:	f000 f906 	bl	800e194 <__malloc_lock>
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	685e      	ldr	r6, [r3, #4]
 800df8c:	f026 0603 	bic.w	r6, r6, #3
 800df90:	1b34      	subs	r4, r6, r4
 800df92:	3c11      	subs	r4, #17
 800df94:	4444      	add	r4, r8
 800df96:	fbb4 f4f8 	udiv	r4, r4, r8
 800df9a:	3c01      	subs	r4, #1
 800df9c:	fb08 f404 	mul.w	r4, r8, r4
 800dfa0:	45a0      	cmp	r8, r4
 800dfa2:	dd05      	ble.n	800dfb0 <_malloc_trim_r+0x40>
 800dfa4:	4628      	mov	r0, r5
 800dfa6:	f000 f8fb 	bl	800e1a0 <__malloc_unlock>
 800dfaa:	2000      	movs	r0, #0
 800dfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfb0:	2100      	movs	r1, #0
 800dfb2:	4628      	mov	r0, r5
 800dfb4:	f000 f8fa 	bl	800e1ac <_sbrk_r>
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	4433      	add	r3, r6
 800dfbc:	4298      	cmp	r0, r3
 800dfbe:	d1f1      	bne.n	800dfa4 <_malloc_trim_r+0x34>
 800dfc0:	4261      	negs	r1, r4
 800dfc2:	4628      	mov	r0, r5
 800dfc4:	f000 f8f2 	bl	800e1ac <_sbrk_r>
 800dfc8:	3001      	adds	r0, #1
 800dfca:	d110      	bne.n	800dfee <_malloc_trim_r+0x7e>
 800dfcc:	2100      	movs	r1, #0
 800dfce:	4628      	mov	r0, r5
 800dfd0:	f000 f8ec 	bl	800e1ac <_sbrk_r>
 800dfd4:	68ba      	ldr	r2, [r7, #8]
 800dfd6:	1a83      	subs	r3, r0, r2
 800dfd8:	2b0f      	cmp	r3, #15
 800dfda:	dde3      	ble.n	800dfa4 <_malloc_trim_r+0x34>
 800dfdc:	490c      	ldr	r1, [pc, #48]	; (800e010 <_malloc_trim_r+0xa0>)
 800dfde:	6809      	ldr	r1, [r1, #0]
 800dfe0:	1a40      	subs	r0, r0, r1
 800dfe2:	490c      	ldr	r1, [pc, #48]	; (800e014 <_malloc_trim_r+0xa4>)
 800dfe4:	f043 0301 	orr.w	r3, r3, #1
 800dfe8:	6008      	str	r0, [r1, #0]
 800dfea:	6053      	str	r3, [r2, #4]
 800dfec:	e7da      	b.n	800dfa4 <_malloc_trim_r+0x34>
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	4a08      	ldr	r2, [pc, #32]	; (800e014 <_malloc_trim_r+0xa4>)
 800dff2:	1b36      	subs	r6, r6, r4
 800dff4:	f046 0601 	orr.w	r6, r6, #1
 800dff8:	605e      	str	r6, [r3, #4]
 800dffa:	6813      	ldr	r3, [r2, #0]
 800dffc:	4628      	mov	r0, r5
 800dffe:	1b1c      	subs	r4, r3, r4
 800e000:	6014      	str	r4, [r2, #0]
 800e002:	f000 f8cd 	bl	800e1a0 <__malloc_unlock>
 800e006:	2001      	movs	r0, #1
 800e008:	e7d0      	b.n	800dfac <_malloc_trim_r+0x3c>
 800e00a:	bf00      	nop
 800e00c:	20000504 	.word	0x20000504
 800e010:	2000090c 	.word	0x2000090c
 800e014:	200336a8 	.word	0x200336a8

0800e018 <_free_r>:
 800e018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e01c:	4604      	mov	r4, r0
 800e01e:	4688      	mov	r8, r1
 800e020:	2900      	cmp	r1, #0
 800e022:	f000 80ab 	beq.w	800e17c <_free_r+0x164>
 800e026:	f000 f8b5 	bl	800e194 <__malloc_lock>
 800e02a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800e02e:	4d54      	ldr	r5, [pc, #336]	; (800e180 <_free_r+0x168>)
 800e030:	f022 0001 	bic.w	r0, r2, #1
 800e034:	f1a8 0308 	sub.w	r3, r8, #8
 800e038:	181f      	adds	r7, r3, r0
 800e03a:	68a9      	ldr	r1, [r5, #8]
 800e03c:	687e      	ldr	r6, [r7, #4]
 800e03e:	42b9      	cmp	r1, r7
 800e040:	f026 0603 	bic.w	r6, r6, #3
 800e044:	f002 0201 	and.w	r2, r2, #1
 800e048:	d11b      	bne.n	800e082 <_free_r+0x6a>
 800e04a:	4430      	add	r0, r6
 800e04c:	b93a      	cbnz	r2, 800e05e <_free_r+0x46>
 800e04e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800e052:	1a9b      	subs	r3, r3, r2
 800e054:	4410      	add	r0, r2
 800e056:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800e05a:	60ca      	str	r2, [r1, #12]
 800e05c:	6091      	str	r1, [r2, #8]
 800e05e:	f040 0201 	orr.w	r2, r0, #1
 800e062:	605a      	str	r2, [r3, #4]
 800e064:	60ab      	str	r3, [r5, #8]
 800e066:	4b47      	ldr	r3, [pc, #284]	; (800e184 <_free_r+0x16c>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4283      	cmp	r3, r0
 800e06c:	d804      	bhi.n	800e078 <_free_r+0x60>
 800e06e:	4b46      	ldr	r3, [pc, #280]	; (800e188 <_free_r+0x170>)
 800e070:	4620      	mov	r0, r4
 800e072:	6819      	ldr	r1, [r3, #0]
 800e074:	f7ff ff7c 	bl	800df70 <_malloc_trim_r>
 800e078:	4620      	mov	r0, r4
 800e07a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e07e:	f000 b88f 	b.w	800e1a0 <__malloc_unlock>
 800e082:	607e      	str	r6, [r7, #4]
 800e084:	2a00      	cmp	r2, #0
 800e086:	d139      	bne.n	800e0fc <_free_r+0xe4>
 800e088:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800e08c:	1a5b      	subs	r3, r3, r1
 800e08e:	4408      	add	r0, r1
 800e090:	6899      	ldr	r1, [r3, #8]
 800e092:	f105 0c08 	add.w	ip, r5, #8
 800e096:	4561      	cmp	r1, ip
 800e098:	d032      	beq.n	800e100 <_free_r+0xe8>
 800e09a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800e09e:	f8c1 c00c 	str.w	ip, [r1, #12]
 800e0a2:	f8cc 1008 	str.w	r1, [ip, #8]
 800e0a6:	19b9      	adds	r1, r7, r6
 800e0a8:	6849      	ldr	r1, [r1, #4]
 800e0aa:	07c9      	lsls	r1, r1, #31
 800e0ac:	d40a      	bmi.n	800e0c4 <_free_r+0xac>
 800e0ae:	4430      	add	r0, r6
 800e0b0:	68b9      	ldr	r1, [r7, #8]
 800e0b2:	bb3a      	cbnz	r2, 800e104 <_free_r+0xec>
 800e0b4:	4e35      	ldr	r6, [pc, #212]	; (800e18c <_free_r+0x174>)
 800e0b6:	42b1      	cmp	r1, r6
 800e0b8:	d124      	bne.n	800e104 <_free_r+0xec>
 800e0ba:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800e0be:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	f040 0101 	orr.w	r1, r0, #1
 800e0c8:	6059      	str	r1, [r3, #4]
 800e0ca:	5018      	str	r0, [r3, r0]
 800e0cc:	2a00      	cmp	r2, #0
 800e0ce:	d1d3      	bne.n	800e078 <_free_r+0x60>
 800e0d0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800e0d4:	d21a      	bcs.n	800e10c <_free_r+0xf4>
 800e0d6:	08c0      	lsrs	r0, r0, #3
 800e0d8:	1081      	asrs	r1, r0, #2
 800e0da:	2201      	movs	r2, #1
 800e0dc:	408a      	lsls	r2, r1
 800e0de:	6869      	ldr	r1, [r5, #4]
 800e0e0:	3001      	adds	r0, #1
 800e0e2:	430a      	orrs	r2, r1
 800e0e4:	606a      	str	r2, [r5, #4]
 800e0e6:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800e0ea:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800e0ee:	3a08      	subs	r2, #8
 800e0f0:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800e0f4:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800e0f8:	60cb      	str	r3, [r1, #12]
 800e0fa:	e7bd      	b.n	800e078 <_free_r+0x60>
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	e7d2      	b.n	800e0a6 <_free_r+0x8e>
 800e100:	2201      	movs	r2, #1
 800e102:	e7d0      	b.n	800e0a6 <_free_r+0x8e>
 800e104:	68fe      	ldr	r6, [r7, #12]
 800e106:	60ce      	str	r6, [r1, #12]
 800e108:	60b1      	str	r1, [r6, #8]
 800e10a:	e7db      	b.n	800e0c4 <_free_r+0xac>
 800e10c:	0a42      	lsrs	r2, r0, #9
 800e10e:	2a04      	cmp	r2, #4
 800e110:	d813      	bhi.n	800e13a <_free_r+0x122>
 800e112:	0982      	lsrs	r2, r0, #6
 800e114:	3238      	adds	r2, #56	; 0x38
 800e116:	1c51      	adds	r1, r2, #1
 800e118:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800e11c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800e120:	428e      	cmp	r6, r1
 800e122:	d124      	bne.n	800e16e <_free_r+0x156>
 800e124:	2001      	movs	r0, #1
 800e126:	1092      	asrs	r2, r2, #2
 800e128:	fa00 f202 	lsl.w	r2, r0, r2
 800e12c:	6868      	ldr	r0, [r5, #4]
 800e12e:	4302      	orrs	r2, r0
 800e130:	606a      	str	r2, [r5, #4]
 800e132:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800e136:	60b3      	str	r3, [r6, #8]
 800e138:	e7de      	b.n	800e0f8 <_free_r+0xe0>
 800e13a:	2a14      	cmp	r2, #20
 800e13c:	d801      	bhi.n	800e142 <_free_r+0x12a>
 800e13e:	325b      	adds	r2, #91	; 0x5b
 800e140:	e7e9      	b.n	800e116 <_free_r+0xfe>
 800e142:	2a54      	cmp	r2, #84	; 0x54
 800e144:	d802      	bhi.n	800e14c <_free_r+0x134>
 800e146:	0b02      	lsrs	r2, r0, #12
 800e148:	326e      	adds	r2, #110	; 0x6e
 800e14a:	e7e4      	b.n	800e116 <_free_r+0xfe>
 800e14c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800e150:	d802      	bhi.n	800e158 <_free_r+0x140>
 800e152:	0bc2      	lsrs	r2, r0, #15
 800e154:	3277      	adds	r2, #119	; 0x77
 800e156:	e7de      	b.n	800e116 <_free_r+0xfe>
 800e158:	f240 5154 	movw	r1, #1364	; 0x554
 800e15c:	428a      	cmp	r2, r1
 800e15e:	bf9a      	itte	ls
 800e160:	0c82      	lsrls	r2, r0, #18
 800e162:	327c      	addls	r2, #124	; 0x7c
 800e164:	227e      	movhi	r2, #126	; 0x7e
 800e166:	e7d6      	b.n	800e116 <_free_r+0xfe>
 800e168:	6889      	ldr	r1, [r1, #8]
 800e16a:	428e      	cmp	r6, r1
 800e16c:	d004      	beq.n	800e178 <_free_r+0x160>
 800e16e:	684a      	ldr	r2, [r1, #4]
 800e170:	f022 0203 	bic.w	r2, r2, #3
 800e174:	4282      	cmp	r2, r0
 800e176:	d8f7      	bhi.n	800e168 <_free_r+0x150>
 800e178:	68ce      	ldr	r6, [r1, #12]
 800e17a:	e7da      	b.n	800e132 <_free_r+0x11a>
 800e17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e180:	20000504 	.word	0x20000504
 800e184:	20000910 	.word	0x20000910
 800e188:	200336d0 	.word	0x200336d0
 800e18c:	2000050c 	.word	0x2000050c

0800e190 <__retarget_lock_acquire_recursive>:
 800e190:	4770      	bx	lr

0800e192 <__retarget_lock_release_recursive>:
 800e192:	4770      	bx	lr

0800e194 <__malloc_lock>:
 800e194:	4801      	ldr	r0, [pc, #4]	; (800e19c <__malloc_lock+0x8>)
 800e196:	f7ff bffb 	b.w	800e190 <__retarget_lock_acquire_recursive>
 800e19a:	bf00      	nop
 800e19c:	20033c00 	.word	0x20033c00

0800e1a0 <__malloc_unlock>:
 800e1a0:	4801      	ldr	r0, [pc, #4]	; (800e1a8 <__malloc_unlock+0x8>)
 800e1a2:	f7ff bff6 	b.w	800e192 <__retarget_lock_release_recursive>
 800e1a6:	bf00      	nop
 800e1a8:	20033c00 	.word	0x20033c00

0800e1ac <_sbrk_r>:
 800e1ac:	b538      	push	{r3, r4, r5, lr}
 800e1ae:	4c06      	ldr	r4, [pc, #24]	; (800e1c8 <_sbrk_r+0x1c>)
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	4605      	mov	r5, r0
 800e1b4:	4608      	mov	r0, r1
 800e1b6:	6023      	str	r3, [r4, #0]
 800e1b8:	f7f3 f904 	bl	80013c4 <_sbrk>
 800e1bc:	1c43      	adds	r3, r0, #1
 800e1be:	d102      	bne.n	800e1c6 <_sbrk_r+0x1a>
 800e1c0:	6823      	ldr	r3, [r4, #0]
 800e1c2:	b103      	cbz	r3, 800e1c6 <_sbrk_r+0x1a>
 800e1c4:	602b      	str	r3, [r5, #0]
 800e1c6:	bd38      	pop	{r3, r4, r5, pc}
 800e1c8:	20033bf8 	.word	0x20033bf8

0800e1cc <sysconf>:
 800e1cc:	2808      	cmp	r0, #8
 800e1ce:	b508      	push	{r3, lr}
 800e1d0:	d006      	beq.n	800e1e0 <sysconf+0x14>
 800e1d2:	f7ff fe1d 	bl	800de10 <__errno>
 800e1d6:	2316      	movs	r3, #22
 800e1d8:	6003      	str	r3, [r0, #0]
 800e1da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e1de:	bd08      	pop	{r3, pc}
 800e1e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e1e4:	e7fb      	b.n	800e1de <sysconf+0x12>
	...

0800e1e8 <__register_exitproc>:
 800e1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1ec:	4c26      	ldr	r4, [pc, #152]	; (800e288 <__register_exitproc+0xa0>)
 800e1ee:	4606      	mov	r6, r0
 800e1f0:	6820      	ldr	r0, [r4, #0]
 800e1f2:	4698      	mov	r8, r3
 800e1f4:	460f      	mov	r7, r1
 800e1f6:	4691      	mov	r9, r2
 800e1f8:	f7ff ffca 	bl	800e190 <__retarget_lock_acquire_recursive>
 800e1fc:	4b23      	ldr	r3, [pc, #140]	; (800e28c <__register_exitproc+0xa4>)
 800e1fe:	681d      	ldr	r5, [r3, #0]
 800e200:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 800e204:	b918      	cbnz	r0, 800e20e <__register_exitproc+0x26>
 800e206:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800e20a:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800e20e:	6843      	ldr	r3, [r0, #4]
 800e210:	2b1f      	cmp	r3, #31
 800e212:	dd19      	ble.n	800e248 <__register_exitproc+0x60>
 800e214:	4b1e      	ldr	r3, [pc, #120]	; (800e290 <__register_exitproc+0xa8>)
 800e216:	b933      	cbnz	r3, 800e226 <__register_exitproc+0x3e>
 800e218:	6820      	ldr	r0, [r4, #0]
 800e21a:	f7ff ffba 	bl	800e192 <__retarget_lock_release_recursive>
 800e21e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e226:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800e22a:	f3af 8000 	nop.w
 800e22e:	2800      	cmp	r0, #0
 800e230:	d0f2      	beq.n	800e218 <__register_exitproc+0x30>
 800e232:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800e236:	6003      	str	r3, [r0, #0]
 800e238:	2200      	movs	r2, #0
 800e23a:	6042      	str	r2, [r0, #4]
 800e23c:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800e240:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 800e244:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 800e248:	6843      	ldr	r3, [r0, #4]
 800e24a:	b19e      	cbz	r6, 800e274 <__register_exitproc+0x8c>
 800e24c:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800e250:	2201      	movs	r2, #1
 800e252:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800e256:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800e25a:	409a      	lsls	r2, r3
 800e25c:	4311      	orrs	r1, r2
 800e25e:	2e02      	cmp	r6, #2
 800e260:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800e264:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 800e268:	bf02      	ittt	eq
 800e26a:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 800e26e:	430a      	orreq	r2, r1
 800e270:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 800e274:	1c5a      	adds	r2, r3, #1
 800e276:	3302      	adds	r3, #2
 800e278:	6042      	str	r2, [r0, #4]
 800e27a:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 800e27e:	6820      	ldr	r0, [r4, #0]
 800e280:	f7ff ff87 	bl	800e192 <__retarget_lock_release_recursive>
 800e284:	2000      	movs	r0, #0
 800e286:	e7cc      	b.n	800e222 <__register_exitproc+0x3a>
 800e288:	20000500 	.word	0x20000500
 800e28c:	0800e930 	.word	0x0800e930
 800e290:	00000000 	.word	0x00000000

0800e294 <_init>:
 800e294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e296:	bf00      	nop
 800e298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e29a:	bc08      	pop	{r3}
 800e29c:	469e      	mov	lr, r3
 800e29e:	4770      	bx	lr

0800e2a0 <_fini>:
 800e2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2a2:	bf00      	nop
 800e2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2a6:	bc08      	pop	{r3}
 800e2a8:	469e      	mov	lr, r3
 800e2aa:	4770      	bx	lr
