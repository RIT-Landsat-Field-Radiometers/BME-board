
BMEBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9e0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  0800bba0  0800bba0  0001bba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd7c  0800bd7c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd7c  0800bd7c  0001bd7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd84  0800bd84  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd84  0800bd84  0001bd84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd88  0800bd88  0001bd88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800bd8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00033448  20000084  0800be10  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200334cc  0800be10  000234cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003bc4f  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000652e  00000000  00000000  0005bd03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002688  00000000  00000000  00062238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023f0  00000000  00000000  000648c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a17b  00000000  00000000  00066cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e462  00000000  00000000  00070e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00150b04  00000000  00000000  0009f28d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001efd91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a570  00000000  00000000  001efde4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000084 	.word	0x20000084
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800bb88 	.word	0x0800bb88

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000088 	.word	0x20000088
 80001fc:	0800bb88 	.word	0x0800bb88

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000214:	f000 b96e 	b.w	80004f4 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468c      	mov	ip, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	f040 8083 	bne.w	8000346 <__udivmoddi4+0x116>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d947      	bls.n	80002d6 <__udivmoddi4+0xa6>
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	b142      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024c:	f1c2 0020 	rsb	r0, r2, #32
 8000250:	fa24 f000 	lsr.w	r0, r4, r0
 8000254:	4091      	lsls	r1, r2
 8000256:	4097      	lsls	r7, r2
 8000258:	ea40 0c01 	orr.w	ip, r0, r1
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbbc f6f8 	udiv	r6, ip, r8
 8000268:	fa1f fe87 	uxth.w	lr, r7
 800026c:	fb08 c116 	mls	r1, r8, r6, ip
 8000270:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000274:	fb06 f10e 	mul.w	r1, r6, lr
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18fb      	adds	r3, r7, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 8119 	bcs.w	80004b8 <__udivmoddi4+0x288>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8116 	bls.w	80004b8 <__udivmoddi4+0x288>
 800028c:	3e02      	subs	r6, #2
 800028e:	443b      	add	r3, r7
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a4:	45a6      	cmp	lr, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ae:	f080 8105 	bcs.w	80004bc <__udivmoddi4+0x28c>
 80002b2:	45a6      	cmp	lr, r4
 80002b4:	f240 8102 	bls.w	80004bc <__udivmoddi4+0x28c>
 80002b8:	3802      	subs	r0, #2
 80002ba:	443c      	add	r4, r7
 80002bc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c0:	eba4 040e 	sub.w	r4, r4, lr
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	b902      	cbnz	r2, 80002da <__udivmoddi4+0xaa>
 80002d8:	deff      	udf	#255	; 0xff
 80002da:	fab2 f282 	clz	r2, r2
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d150      	bne.n	8000384 <__udivmoddi4+0x154>
 80002e2:	1bcb      	subs	r3, r1, r7
 80002e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e8:	fa1f f887 	uxth.w	r8, r7
 80002ec:	2601      	movs	r6, #1
 80002ee:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f2:	0c21      	lsrs	r1, r4, #16
 80002f4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002fc:	fb08 f30c 	mul.w	r3, r8, ip
 8000300:	428b      	cmp	r3, r1
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000304:	1879      	adds	r1, r7, r1
 8000306:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0xe2>
 800030c:	428b      	cmp	r3, r1
 800030e:	f200 80e9 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 8000312:	4684      	mov	ip, r0
 8000314:	1ac9      	subs	r1, r1, r3
 8000316:	b2a3      	uxth	r3, r4
 8000318:	fbb1 f0fe 	udiv	r0, r1, lr
 800031c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000320:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000324:	fb08 f800 	mul.w	r8, r8, r0
 8000328:	45a0      	cmp	r8, r4
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x10c>
 800032c:	193c      	adds	r4, r7, r4
 800032e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x10a>
 8000334:	45a0      	cmp	r8, r4
 8000336:	f200 80d9 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 800033a:	4618      	mov	r0, r3
 800033c:	eba4 0408 	sub.w	r4, r4, r8
 8000340:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000344:	e7bf      	b.n	80002c6 <__udivmoddi4+0x96>
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x12e>
 800034a:	2d00      	cmp	r5, #0
 800034c:	f000 80b1 	beq.w	80004b2 <__udivmoddi4+0x282>
 8000350:	2600      	movs	r6, #0
 8000352:	e9c5 0100 	strd	r0, r1, [r5]
 8000356:	4630      	mov	r0, r6
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f683 	clz	r6, r3
 8000362:	2e00      	cmp	r6, #0
 8000364:	d14a      	bne.n	80003fc <__udivmoddi4+0x1cc>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0x140>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80b8 	bhi.w	80004e0 <__udivmoddi4+0x2b0>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0103 	sbc.w	r1, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	468c      	mov	ip, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0a8      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800037e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000384:	f1c2 0320 	rsb	r3, r2, #32
 8000388:	fa20 f603 	lsr.w	r6, r0, r3
 800038c:	4097      	lsls	r7, r2
 800038e:	fa01 f002 	lsl.w	r0, r1, r2
 8000392:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000396:	40d9      	lsrs	r1, r3
 8000398:	4330      	orrs	r0, r6
 800039a:	0c03      	lsrs	r3, r0, #16
 800039c:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a0:	fa1f f887 	uxth.w	r8, r7
 80003a4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb06 f108 	mul.w	r1, r6, r8
 80003b0:	4299      	cmp	r1, r3
 80003b2:	fa04 f402 	lsl.w	r4, r4, r2
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x19c>
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003be:	f080 808d 	bcs.w	80004dc <__udivmoddi4+0x2ac>
 80003c2:	4299      	cmp	r1, r3
 80003c4:	f240 808a 	bls.w	80004dc <__udivmoddi4+0x2ac>
 80003c8:	3e02      	subs	r6, #2
 80003ca:	443b      	add	r3, r7
 80003cc:	1a5b      	subs	r3, r3, r1
 80003ce:	b281      	uxth	r1, r0
 80003d0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb00 f308 	mul.w	r3, r0, r8
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x1c4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ea:	d273      	bcs.n	80004d4 <__udivmoddi4+0x2a4>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d971      	bls.n	80004d4 <__udivmoddi4+0x2a4>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4439      	add	r1, r7
 80003f4:	1acb      	subs	r3, r1, r3
 80003f6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fa:	e778      	b.n	80002ee <__udivmoddi4+0xbe>
 80003fc:	f1c6 0c20 	rsb	ip, r6, #32
 8000400:	fa03 f406 	lsl.w	r4, r3, r6
 8000404:	fa22 f30c 	lsr.w	r3, r2, ip
 8000408:	431c      	orrs	r4, r3
 800040a:	fa20 f70c 	lsr.w	r7, r0, ip
 800040e:	fa01 f306 	lsl.w	r3, r1, r6
 8000412:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000416:	fa21 f10c 	lsr.w	r1, r1, ip
 800041a:	431f      	orrs	r7, r3
 800041c:	0c3b      	lsrs	r3, r7, #16
 800041e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000422:	fa1f f884 	uxth.w	r8, r4
 8000426:	fb0e 1119 	mls	r1, lr, r9, r1
 800042a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042e:	fb09 fa08 	mul.w	sl, r9, r8
 8000432:	458a      	cmp	sl, r1
 8000434:	fa02 f206 	lsl.w	r2, r2, r6
 8000438:	fa00 f306 	lsl.w	r3, r0, r6
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x220>
 800043e:	1861      	adds	r1, r4, r1
 8000440:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000444:	d248      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 8000446:	458a      	cmp	sl, r1
 8000448:	d946      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4421      	add	r1, r4
 8000450:	eba1 010a 	sub.w	r1, r1, sl
 8000454:	b2bf      	uxth	r7, r7
 8000456:	fbb1 f0fe 	udiv	r0, r1, lr
 800045a:	fb0e 1110 	mls	r1, lr, r0, r1
 800045e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000462:	fb00 f808 	mul.w	r8, r0, r8
 8000466:	45b8      	cmp	r8, r7
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x24a>
 800046a:	19e7      	adds	r7, r4, r7
 800046c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000470:	d22e      	bcs.n	80004d0 <__udivmoddi4+0x2a0>
 8000472:	45b8      	cmp	r8, r7
 8000474:	d92c      	bls.n	80004d0 <__udivmoddi4+0x2a0>
 8000476:	3802      	subs	r0, #2
 8000478:	4427      	add	r7, r4
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	eba7 0708 	sub.w	r7, r7, r8
 8000482:	fba0 8902 	umull	r8, r9, r0, r2
 8000486:	454f      	cmp	r7, r9
 8000488:	46c6      	mov	lr, r8
 800048a:	4649      	mov	r1, r9
 800048c:	d31a      	bcc.n	80004c4 <__udivmoddi4+0x294>
 800048e:	d017      	beq.n	80004c0 <__udivmoddi4+0x290>
 8000490:	b15d      	cbz	r5, 80004aa <__udivmoddi4+0x27a>
 8000492:	ebb3 020e 	subs.w	r2, r3, lr
 8000496:	eb67 0701 	sbc.w	r7, r7, r1
 800049a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049e:	40f2      	lsrs	r2, r6
 80004a0:	ea4c 0202 	orr.w	r2, ip, r2
 80004a4:	40f7      	lsrs	r7, r6
 80004a6:	e9c5 2700 	strd	r2, r7, [r5]
 80004aa:	2600      	movs	r6, #0
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e70b      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e9      	b.n	8000290 <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fd      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c0:	4543      	cmp	r3, r8
 80004c2:	d2e5      	bcs.n	8000490 <__udivmoddi4+0x260>
 80004c4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c8:	eb69 0104 	sbc.w	r1, r9, r4
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7df      	b.n	8000490 <__udivmoddi4+0x260>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e7d2      	b.n	800047a <__udivmoddi4+0x24a>
 80004d4:	4660      	mov	r0, ip
 80004d6:	e78d      	b.n	80003f4 <__udivmoddi4+0x1c4>
 80004d8:	4681      	mov	r9, r0
 80004da:	e7b9      	b.n	8000450 <__udivmoddi4+0x220>
 80004dc:	4666      	mov	r6, ip
 80004de:	e775      	b.n	80003cc <__udivmoddi4+0x19c>
 80004e0:	4630      	mov	r0, r6
 80004e2:	e74a      	b.n	800037a <__udivmoddi4+0x14a>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	4439      	add	r1, r7
 80004ea:	e713      	b.n	8000314 <__udivmoddi4+0xe4>
 80004ec:	3802      	subs	r0, #2
 80004ee:	443c      	add	r4, r7
 80004f0:	e724      	b.n	800033c <__udivmoddi4+0x10c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004fe:	463b      	mov	r3, r7
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]
 800050c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800050e:	4b32      	ldr	r3, [pc, #200]	; (80005d8 <MX_ADC1_Init+0xe0>)
 8000510:	4a32      	ldr	r2, [pc, #200]	; (80005dc <MX_ADC1_Init+0xe4>)
 8000512:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8000514:	4b30      	ldr	r3, [pc, #192]	; (80005d8 <MX_ADC1_Init+0xe0>)
 8000516:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 800051a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800051c:	4b2e      	ldr	r3, [pc, #184]	; (80005d8 <MX_ADC1_Init+0xe0>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000522:	4b2d      	ldr	r3, [pc, #180]	; (80005d8 <MX_ADC1_Init+0xe0>)
 8000524:	2200      	movs	r2, #0
 8000526:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000528:	4b2b      	ldr	r3, [pc, #172]	; (80005d8 <MX_ADC1_Init+0xe0>)
 800052a:	2201      	movs	r2, #1
 800052c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800052e:	4b2a      	ldr	r3, [pc, #168]	; (80005d8 <MX_ADC1_Init+0xe0>)
 8000530:	2208      	movs	r2, #8
 8000532:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000534:	4b28      	ldr	r3, [pc, #160]	; (80005d8 <MX_ADC1_Init+0xe0>)
 8000536:	2200      	movs	r2, #0
 8000538:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800053a:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <MX_ADC1_Init+0xe0>)
 800053c:	2201      	movs	r2, #1
 800053e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000540:	4b25      	ldr	r3, [pc, #148]	; (80005d8 <MX_ADC1_Init+0xe0>)
 8000542:	2202      	movs	r2, #2
 8000544:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000546:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <MX_ADC1_Init+0xe0>)
 8000548:	2200      	movs	r2, #0
 800054a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800054e:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <MX_ADC1_Init+0xe0>)
 8000550:	2200      	movs	r2, #0
 8000552:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000554:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <MX_ADC1_Init+0xe0>)
 8000556:	2200      	movs	r2, #0
 8000558:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800055a:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <MX_ADC1_Init+0xe0>)
 800055c:	2201      	movs	r2, #1
 800055e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000562:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <MX_ADC1_Init+0xe0>)
 8000564:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000568:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800056a:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <MX_ADC1_Init+0xe0>)
 800056c:	2200      	movs	r2, #0
 800056e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000572:	4819      	ldr	r0, [pc, #100]	; (80005d8 <MX_ADC1_Init+0xe0>)
 8000574:	f001 fb04 	bl	8001b80 <HAL_ADC_Init>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800057e:	f000 fd7b 	bl	8001078 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000582:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <MX_ADC1_Init+0xe8>)
 8000584:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000586:	2306      	movs	r3, #6
 8000588:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800058a:	2307      	movs	r3, #7
 800058c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800058e:	237f      	movs	r3, #127	; 0x7f
 8000590:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000592:	2304      	movs	r3, #4
 8000594:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800059a:	463b      	mov	r3, r7
 800059c:	4619      	mov	r1, r3
 800059e:	480e      	ldr	r0, [pc, #56]	; (80005d8 <MX_ADC1_Init+0xe0>)
 80005a0:	f001 fe5e 	bl	8002260 <HAL_ADC_ConfigChannel>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80005aa:	f000 fd65 	bl	8001078 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005ae:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <MX_ADC1_Init+0xec>)
 80005b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005b2:	230c      	movs	r3, #12
 80005b4:	607b      	str	r3, [r7, #4]
  sConfig.Offset = 1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ba:	463b      	mov	r3, r7
 80005bc:	4619      	mov	r1, r3
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MX_ADC1_Init+0xe0>)
 80005c0:	f001 fe4e 	bl	8002260 <HAL_ADC_ConfigChannel>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80005ca:	f000 fd55 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	3718      	adds	r7, #24
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20032f94 	.word	0x20032f94
 80005dc:	50040000 	.word	0x50040000
 80005e0:	08600004 	.word	0x08600004
 80005e4:	21800100 	.word	0x21800100

080005e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	; 0x28
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a3b      	ldr	r2, [pc, #236]	; (80006f4 <HAL_ADC_MspInit+0x10c>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d170      	bne.n	80006ec <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800060a:	4b3b      	ldr	r3, [pc, #236]	; (80006f8 <HAL_ADC_MspInit+0x110>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	4a3a      	ldr	r2, [pc, #232]	; (80006f8 <HAL_ADC_MspInit+0x110>)
 8000610:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000616:	4b38      	ldr	r3, [pc, #224]	; (80006f8 <HAL_ADC_MspInit+0x110>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	4b35      	ldr	r3, [pc, #212]	; (80006f8 <HAL_ADC_MspInit+0x110>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	4a34      	ldr	r2, [pc, #208]	; (80006f8 <HAL_ADC_MspInit+0x110>)
 8000628:	f043 0304 	orr.w	r3, r3, #4
 800062c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062e:	4b32      	ldr	r3, [pc, #200]	; (80006f8 <HAL_ADC_MspInit+0x110>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	f003 0304 	and.w	r3, r3, #4
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b2f      	ldr	r3, [pc, #188]	; (80006f8 <HAL_ADC_MspInit+0x110>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	4a2e      	ldr	r2, [pc, #184]	; (80006f8 <HAL_ADC_MspInit+0x110>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000646:	4b2c      	ldr	r3, [pc, #176]	; (80006f8 <HAL_ADC_MspInit+0x110>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Rain_Ivl_Pin;
 8000652:	2302      	movs	r3, #2
 8000654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000656:	230b      	movs	r3, #11
 8000658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Rain_Ivl_GPIO_Port, &GPIO_InitStruct);
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	4619      	mov	r1, r3
 8000664:	4825      	ldr	r0, [pc, #148]	; (80006fc <HAL_ADC_MspInit+0x114>)
 8000666:	f003 f9f7 	bl	8003a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Wind_DIR_Pin;
 800066a:	2308      	movs	r3, #8
 800066c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800066e:	230b      	movs	r3, #11
 8000670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Wind_DIR_GPIO_Port, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000680:	f003 f9ea 	bl	8003a58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000684:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <HAL_ADC_MspInit+0x118>)
 8000686:	4a1f      	ldr	r2, [pc, #124]	; (8000704 <HAL_ADC_MspInit+0x11c>)
 8000688:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800068a:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <HAL_ADC_MspInit+0x118>)
 800068c:	2205      	movs	r2, #5
 800068e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <HAL_ADC_MspInit+0x118>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <HAL_ADC_MspInit+0x118>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <HAL_ADC_MspInit+0x118>)
 800069e:	2280      	movs	r2, #128	; 0x80
 80006a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <HAL_ADC_MspInit+0x118>)
 80006a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <HAL_ADC_MspInit+0x118>)
 80006ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <HAL_ADC_MspInit+0x118>)
 80006b4:	2220      	movs	r2, #32
 80006b6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <HAL_ADC_MspInit+0x118>)
 80006ba:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80006be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006c0:	480f      	ldr	r0, [pc, #60]	; (8000700 <HAL_ADC_MspInit+0x118>)
 80006c2:	f002 ff55 	bl	8003570 <HAL_DMA_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <HAL_ADC_MspInit+0xe8>
    {
      Error_Handler();
 80006cc:	f000 fcd4 	bl	8001078 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <HAL_ADC_MspInit+0x118>)
 80006d4:	651a      	str	r2, [r3, #80]	; 0x50
 80006d6:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <HAL_ADC_MspInit+0x118>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2105      	movs	r1, #5
 80006e0:	2012      	movs	r0, #18
 80006e2:	f002 fe31 	bl	8003348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80006e6:	2012      	movs	r0, #18
 80006e8:	f002 fe4a 	bl	8003380 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ec:	bf00      	nop
 80006ee:	3728      	adds	r7, #40	; 0x28
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	50040000 	.word	0x50040000
 80006f8:	40021000 	.word	0x40021000
 80006fc:	48000800 	.word	0x48000800
 8000700:	20033028 	.word	0x20033028
 8000704:	40020008 	.word	0x40020008

08000708 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_CAN1_Init+0x64>)
 800070e:	4a18      	ldr	r2, [pc, #96]	; (8000770 <MX_CAN1_Init+0x68>)
 8000710:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_CAN1_Init+0x64>)
 8000714:	2205      	movs	r2, #5
 8000716:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_CAN1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_CAN1_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_CAN1_Init+0x64>)
 8000726:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800072a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_CAN1_Init+0x64>)
 800072e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000732:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_CAN1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_CAN1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <MX_CAN1_Init+0x64>)
 8000742:	2201      	movs	r2, #1
 8000744:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_CAN1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <MX_CAN1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_CAN1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_CAN1_Init+0x64>)
 800075a:	f002 f9af 	bl	8002abc <HAL_CAN_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000764:	f000 fc88 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20033088 	.word	0x20033088
 8000770:	40006400 	.word	0x40006400

08000774 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a24      	ldr	r2, [pc, #144]	; (8000824 <HAL_CAN_MspInit+0xb0>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d141      	bne.n	800081a <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000796:	4b24      	ldr	r3, [pc, #144]	; (8000828 <HAL_CAN_MspInit+0xb4>)
 8000798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079a:	4a23      	ldr	r2, [pc, #140]	; (8000828 <HAL_CAN_MspInit+0xb4>)
 800079c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007a0:	6593      	str	r3, [r2, #88]	; 0x58
 80007a2:	4b21      	ldr	r3, [pc, #132]	; (8000828 <HAL_CAN_MspInit+0xb4>)
 80007a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <HAL_CAN_MspInit+0xb4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	4a1d      	ldr	r2, [pc, #116]	; (8000828 <HAL_CAN_MspInit+0xb4>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <HAL_CAN_MspInit+0xb4>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80007d8:	2309      	movs	r3, #9
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e6:	f003 f937 	bl	8003a58 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2105      	movs	r1, #5
 80007ee:	2013      	movs	r0, #19
 80007f0:	f002 fdaa 	bl	8003348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80007f4:	2013      	movs	r0, #19
 80007f6:	f002 fdc3 	bl	8003380 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2105      	movs	r1, #5
 80007fe:	2014      	movs	r0, #20
 8000800:	f002 fda2 	bl	8003348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000804:	2014      	movs	r0, #20
 8000806:	f002 fdbb 	bl	8003380 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2105      	movs	r1, #5
 800080e:	2015      	movs	r0, #21
 8000810:	f002 fd9a 	bl	8003348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000814:	2015      	movs	r0, #21
 8000816:	f002 fdb3 	bl	8003380 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800081a:	bf00      	nop
 800081c:	3728      	adds	r7, #40	; 0x28
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40006400 	.word	0x40006400
 8000828:	40021000 	.word	0x40021000

0800082c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000830:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <MX_CRC_Init+0x3c>)
 8000832:	4a0e      	ldr	r2, [pc, #56]	; (800086c <MX_CRC_Init+0x40>)
 8000834:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_CRC_Init+0x3c>)
 8000838:	2200      	movs	r2, #0
 800083a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_CRC_Init+0x3c>)
 800083e:	2200      	movs	r2, #0
 8000840:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_CRC_Init+0x3c>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_CRC_Init+0x3c>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_CRC_Init+0x3c>)
 8000850:	2201      	movs	r2, #1
 8000852:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_CRC_Init+0x3c>)
 8000856:	f002 fda1 	bl	800339c <HAL_CRC_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000860:	f000 fc0a 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200330ec 	.word	0x200330ec
 800086c:	40023000 	.word	0x40023000

08000870 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <HAL_CRC_MspInit+0x38>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d10b      	bne.n	800089a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000882:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <HAL_CRC_MspInit+0x3c>)
 8000884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000886:	4a09      	ldr	r2, [pc, #36]	; (80008ac <HAL_CRC_MspInit+0x3c>)
 8000888:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800088c:	6493      	str	r3, [r2, #72]	; 0x48
 800088e:	4b07      	ldr	r3, [pc, #28]	; (80008ac <HAL_CRC_MspInit+0x3c>)
 8000890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000892:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800089a:	bf00      	nop
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40023000 	.word	0x40023000
 80008ac:	40021000 	.word	0x40021000

080008b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008b6:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_DMA_Init+0x50>)
 80008b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ba:	4a11      	ldr	r2, [pc, #68]	; (8000900 <MX_DMA_Init+0x50>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6493      	str	r3, [r2, #72]	; 0x48
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_DMA_Init+0x50>)
 80008c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_DMA_Init+0x50>)
 80008d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008d2:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <MX_DMA_Init+0x50>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6493      	str	r3, [r2, #72]	; 0x48
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_DMA_Init+0x50>)
 80008dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2105      	movs	r1, #5
 80008ea:	200b      	movs	r0, #11
 80008ec:	f002 fd2c 	bl	8003348 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008f0:	200b      	movs	r0, #11
 80008f2:	f002 fd45 	bl	8003380 <HAL_NVIC_EnableIRQ>

}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000

08000904 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
	return 0;
 8000916:	2300      	movs	r3, #0
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <_Z16MX_FREERTOS_Initv>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Init */

	processCANMesg_attributes.name = "processCANMesg";
 8000928:	4b66      	ldr	r3, [pc, #408]	; (8000ac4 <_Z16MX_FREERTOS_Initv+0x1a0>)
 800092a:	4a67      	ldr	r2, [pc, #412]	; (8000ac8 <_Z16MX_FREERTOS_Initv+0x1a4>)
 800092c:	601a      	str	r2, [r3, #0]
	processCANMesg_attributes.stack_size = 2048 * 4;
 800092e:	4b65      	ldr	r3, [pc, #404]	; (8000ac4 <_Z16MX_FREERTOS_Initv+0x1a0>)
 8000930:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000934:	615a      	str	r2, [r3, #20]
	processCANMesg_attributes.priority = (osPriority_t) osPriorityNormal;
 8000936:	4b63      	ldr	r3, [pc, #396]	; (8000ac4 <_Z16MX_FREERTOS_Initv+0x1a0>)
 8000938:	2218      	movs	r2, #24
 800093a:	619a      	str	r2, [r3, #24]

	MeasureTask_attributes.name = "MeasureTask";
 800093c:	4b63      	ldr	r3, [pc, #396]	; (8000acc <_Z16MX_FREERTOS_Initv+0x1a8>)
 800093e:	4a64      	ldr	r2, [pc, #400]	; (8000ad0 <_Z16MX_FREERTOS_Initv+0x1ac>)
 8000940:	601a      	str	r2, [r3, #0]
	MeasureTask_attributes.stack_size = 2048 * 4;
 8000942:	4b62      	ldr	r3, [pc, #392]	; (8000acc <_Z16MX_FREERTOS_Initv+0x1a8>)
 8000944:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000948:	615a      	str	r2, [r3, #20]
	MeasureTask_attributes.priority = (osPriority_t) osPriorityNormal;
 800094a:	4b60      	ldr	r3, [pc, #384]	; (8000acc <_Z16MX_FREERTOS_Initv+0x1a8>)
 800094c:	2218      	movs	r2, #24
 800094e:	619a      	str	r2, [r3, #24]

	sysMonitor_attributes.name = "sysMonitor";
 8000950:	4b60      	ldr	r3, [pc, #384]	; (8000ad4 <_Z16MX_FREERTOS_Initv+0x1b0>)
 8000952:	4a61      	ldr	r2, [pc, #388]	; (8000ad8 <_Z16MX_FREERTOS_Initv+0x1b4>)
 8000954:	601a      	str	r2, [r3, #0]
	sysMonitor_attributes.stack_size = 2048 * 4;
 8000956:	4b5f      	ldr	r3, [pc, #380]	; (8000ad4 <_Z16MX_FREERTOS_Initv+0x1b0>)
 8000958:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800095c:	615a      	str	r2, [r3, #20]
	sysMonitor_attributes.priority = (osPriority_t) osPriorityLow;
 800095e:	4b5d      	ldr	r3, [pc, #372]	; (8000ad4 <_Z16MX_FREERTOS_Initv+0x1b0>)
 8000960:	2208      	movs	r2, #8
 8000962:	619a      	str	r2, [r3, #24]

	UI_attributes.name = "UI";
 8000964:	4b5d      	ldr	r3, [pc, #372]	; (8000adc <_Z16MX_FREERTOS_Initv+0x1b8>)
 8000966:	4a5e      	ldr	r2, [pc, #376]	; (8000ae0 <_Z16MX_FREERTOS_Initv+0x1bc>)
 8000968:	601a      	str	r2, [r3, #0]
	UI_attributes.stack_size = 2048 * 4;
 800096a:	4b5c      	ldr	r3, [pc, #368]	; (8000adc <_Z16MX_FREERTOS_Initv+0x1b8>)
 800096c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000970:	615a      	str	r2, [r3, #20]
	UI_attributes.priority = (osPriority_t) osPriorityLow;
 8000972:	4b5a      	ldr	r3, [pc, #360]	; (8000adc <_Z16MX_FREERTOS_Initv+0x1b8>)
 8000974:	2208      	movs	r2, #8
 8000976:	619a      	str	r2, [r3, #24]

	processUART_attributes.name = "processUART";
 8000978:	4b5a      	ldr	r3, [pc, #360]	; (8000ae4 <_Z16MX_FREERTOS_Initv+0x1c0>)
 800097a:	4a5b      	ldr	r2, [pc, #364]	; (8000ae8 <_Z16MX_FREERTOS_Initv+0x1c4>)
 800097c:	601a      	str	r2, [r3, #0]
	processUART_attributes.stack_size = 2048 * 4;
 800097e:	4b59      	ldr	r3, [pc, #356]	; (8000ae4 <_Z16MX_FREERTOS_Initv+0x1c0>)
 8000980:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000984:	615a      	str	r2, [r3, #20]
	processUART_attributes.priority = (osPriority_t) osPriorityNormal;
 8000986:	4b57      	ldr	r3, [pc, #348]	; (8000ae4 <_Z16MX_FREERTOS_Initv+0x1c0>)
 8000988:	2218      	movs	r2, #24
 800098a:	619a      	str	r2, [r3, #24]

	CANInbox_attributes.name = "CANInbox";
 800098c:	4b57      	ldr	r3, [pc, #348]	; (8000aec <_Z16MX_FREERTOS_Initv+0x1c8>)
 800098e:	4a58      	ldr	r2, [pc, #352]	; (8000af0 <_Z16MX_FREERTOS_Initv+0x1cc>)
 8000990:	601a      	str	r2, [r3, #0]
	CANOutbox_attributes.name = "CANOutbox";
 8000992:	4b58      	ldr	r3, [pc, #352]	; (8000af4 <_Z16MX_FREERTOS_Initv+0x1d0>)
 8000994:	4a58      	ldr	r2, [pc, #352]	; (8000af8 <_Z16MX_FREERTOS_Initv+0x1d4>)
 8000996:	601a      	str	r2, [r3, #0]
	MeasureTimer_attributes.name = "MeasureTimer";
 8000998:	4b58      	ldr	r3, [pc, #352]	; (8000afc <_Z16MX_FREERTOS_Initv+0x1d8>)
 800099a:	4a59      	ldr	r2, [pc, #356]	; (8000b00 <_Z16MX_FREERTOS_Initv+0x1dc>)
 800099c:	601a      	str	r2, [r3, #0]
	LEDTimeoutTimer_attributes.name = "LEDTimeoutTimer";
 800099e:	4b59      	ldr	r3, [pc, #356]	; (8000b04 <_Z16MX_FREERTOS_Initv+0x1e0>)
 80009a0:	4a59      	ldr	r2, [pc, #356]	; (8000b08 <_Z16MX_FREERTOS_Initv+0x1e4>)
 80009a2:	601a      	str	r2, [r3, #0]
	InputTimeout_attributes.name = "InputTimeout";
 80009a4:	4b59      	ldr	r3, [pc, #356]	; (8000b0c <_Z16MX_FREERTOS_Initv+0x1e8>)
 80009a6:	4a5a      	ldr	r2, [pc, #360]	; (8000b10 <_Z16MX_FREERTOS_Initv+0x1ec>)
 80009a8:	601a      	str	r2, [r3, #0]
	BME280_lock_attributes.name = "BME280_lock";
 80009aa:	4b5a      	ldr	r3, [pc, #360]	; (8000b14 <_Z16MX_FREERTOS_Initv+0x1f0>)
 80009ac:	4a5a      	ldr	r2, [pc, #360]	; (8000b18 <_Z16MX_FREERTOS_Initv+0x1f4>)
 80009ae:	601a      	str	r2, [r3, #0]
	SiliconID_lock_attributes.name = "SiliconID_lock";
 80009b0:	4b5a      	ldr	r3, [pc, #360]	; (8000b1c <_Z16MX_FREERTOS_Initv+0x1f8>)
 80009b2:	4a5b      	ldr	r2, [pc, #364]	; (8000b20 <_Z16MX_FREERTOS_Initv+0x1fc>)
 80009b4:	601a      	str	r2, [r3, #0]
	startMeasurement_attributes.name = "startMeasurement";
 80009b6:	4b5b      	ldr	r3, [pc, #364]	; (8000b24 <_Z16MX_FREERTOS_Initv+0x200>)
 80009b8:	4a5b      	ldr	r2, [pc, #364]	; (8000b28 <_Z16MX_FREERTOS_Initv+0x204>)
 80009ba:	601a      	str	r2, [r3, #0]
	LEDState_attributes.name = "LEDState";
 80009bc:	4b5b      	ldr	r3, [pc, #364]	; (8000b2c <_Z16MX_FREERTOS_Initv+0x208>)
 80009be:	4a5c      	ldr	r2, [pc, #368]	; (8000b30 <_Z16MX_FREERTOS_Initv+0x20c>)
 80009c0:	601a      	str	r2, [r3, #0]
	ButtonCommand_attributes.name = "ButtonCommand";
 80009c2:	4b5c      	ldr	r3, [pc, #368]	; (8000b34 <_Z16MX_FREERTOS_Initv+0x210>)
 80009c4:	4a5c      	ldr	r2, [pc, #368]	; (8000b38 <_Z16MX_FREERTOS_Initv+0x214>)
 80009c6:	601a      	str	r2, [r3, #0]

	/* USER CODE END Init */
	/* Create the mutex(es) */
	/* creation of BME280_lock */
	BME280_lockHandle = osMutexNew(&BME280_lock_attributes);
 80009c8:	4852      	ldr	r0, [pc, #328]	; (8000b14 <_Z16MX_FREERTOS_Initv+0x1f0>)
 80009ca:	f007 fea8 	bl	800871e <osMutexNew>
 80009ce:	4603      	mov	r3, r0
 80009d0:	4a5a      	ldr	r2, [pc, #360]	; (8000b3c <_Z16MX_FREERTOS_Initv+0x218>)
 80009d2:	6013      	str	r3, [r2, #0]

	/* creation of SiliconID_lock */
	SiliconID_lockHandle = osMutexNew(&SiliconID_lock_attributes);
 80009d4:	4851      	ldr	r0, [pc, #324]	; (8000b1c <_Z16MX_FREERTOS_Initv+0x1f8>)
 80009d6:	f007 fea2 	bl	800871e <osMutexNew>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a58      	ldr	r2, [pc, #352]	; (8000b40 <_Z16MX_FREERTOS_Initv+0x21c>)
 80009de:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of startMeasurement */
	startMeasurementHandle = osSemaphoreNew(1, 1, &startMeasurement_attributes);
 80009e0:	4a50      	ldr	r2, [pc, #320]	; (8000b24 <_Z16MX_FREERTOS_Initv+0x200>)
 80009e2:	2101      	movs	r1, #1
 80009e4:	2001      	movs	r0, #1
 80009e6:	f007 ff20 	bl	800882a <osSemaphoreNew>
 80009ea:	4603      	mov	r3, r0
 80009ec:	4a55      	ldr	r2, [pc, #340]	; (8000b44 <_Z16MX_FREERTOS_Initv+0x220>)
 80009ee:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* Create the timer(s) */
	/* creation of MeasureTimer */
	MeasureTimerHandle = osTimerNew(MeasureRoutine, osTimerPeriodic, NULL,
 80009f0:	4b42      	ldr	r3, [pc, #264]	; (8000afc <_Z16MX_FREERTOS_Initv+0x1d8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	2101      	movs	r1, #1
 80009f6:	4854      	ldr	r0, [pc, #336]	; (8000b48 <_Z16MX_FREERTOS_Initv+0x224>)
 80009f8:	f007 fdd6 	bl	80085a8 <osTimerNew>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4a53      	ldr	r2, [pc, #332]	; (8000b4c <_Z16MX_FREERTOS_Initv+0x228>)
 8000a00:	6013      	str	r3, [r2, #0]
			&MeasureTimer_attributes);

	/* creation of LEDTimeoutTimer */
	LEDTimeoutTimerHandle = osTimerNew(LEDTimeoutRoutine, osTimerOnce, NULL,
 8000a02:	4b40      	ldr	r3, [pc, #256]	; (8000b04 <_Z16MX_FREERTOS_Initv+0x1e0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	4851      	ldr	r0, [pc, #324]	; (8000b50 <_Z16MX_FREERTOS_Initv+0x22c>)
 8000a0a:	f007 fdcd 	bl	80085a8 <osTimerNew>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	4a50      	ldr	r2, [pc, #320]	; (8000b54 <_Z16MX_FREERTOS_Initv+0x230>)
 8000a12:	6013      	str	r3, [r2, #0]
			&LEDTimeoutTimer_attributes);

	/* creation of InputTimeout */
	InputTimeoutHandle = osTimerNew(processInput, osTimerOnce, NULL,
 8000a14:	4b3d      	ldr	r3, [pc, #244]	; (8000b0c <_Z16MX_FREERTOS_Initv+0x1e8>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	484f      	ldr	r0, [pc, #316]	; (8000b58 <_Z16MX_FREERTOS_Initv+0x234>)
 8000a1c:	f007 fdc4 	bl	80085a8 <osTimerNew>
 8000a20:	4603      	mov	r3, r0
 8000a22:	4a4e      	ldr	r2, [pc, #312]	; (8000b5c <_Z16MX_FREERTOS_Initv+0x238>)
 8000a24:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of CANInbox */
	CANInboxHandle = osMessageQueueNew(16, sizeof(uint32_t),
 8000a26:	4a31      	ldr	r2, [pc, #196]	; (8000aec <_Z16MX_FREERTOS_Initv+0x1c8>)
 8000a28:	2104      	movs	r1, #4
 8000a2a:	2010      	movs	r0, #16
 8000a2c:	f007 ff86 	bl	800893c <osMessageQueueNew>
 8000a30:	4603      	mov	r3, r0
 8000a32:	4a4b      	ldr	r2, [pc, #300]	; (8000b60 <_Z16MX_FREERTOS_Initv+0x23c>)
 8000a34:	6013      	str	r3, [r2, #0]
			&CANInbox_attributes);

	/* creation of CANOutbox */
	CANOutboxHandle = osMessageQueueNew(16, sizeof(uint32_t),
 8000a36:	4a2f      	ldr	r2, [pc, #188]	; (8000af4 <_Z16MX_FREERTOS_Initv+0x1d0>)
 8000a38:	2104      	movs	r1, #4
 8000a3a:	2010      	movs	r0, #16
 8000a3c:	f007 ff7e 	bl	800893c <osMessageQueueNew>
 8000a40:	4603      	mov	r3, r0
 8000a42:	4a48      	ldr	r2, [pc, #288]	; (8000b64 <_Z16MX_FREERTOS_Initv+0x240>)
 8000a44:	6013      	str	r3, [r2, #0]
			&CANOutbox_attributes);

	/* creation of UARTOutbox */
	UARTOutboxHandle = osMessageQueueNew(16, sizeof(uint32_t),
 8000a46:	4a48      	ldr	r2, [pc, #288]	; (8000b68 <_Z16MX_FREERTOS_Initv+0x244>)
 8000a48:	2104      	movs	r1, #4
 8000a4a:	2010      	movs	r0, #16
 8000a4c:	f007 ff76 	bl	800893c <osMessageQueueNew>
 8000a50:	4603      	mov	r3, r0
 8000a52:	4a46      	ldr	r2, [pc, #280]	; (8000b6c <_Z16MX_FREERTOS_Initv+0x248>)
 8000a54:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of processCANMesg */
	processCANMesgHandle = osThreadNew(StartCANMesgTask, nullptr,
 8000a56:	4a1b      	ldr	r2, [pc, #108]	; (8000ac4 <_Z16MX_FREERTOS_Initv+0x1a0>)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4845      	ldr	r0, [pc, #276]	; (8000b70 <_Z16MX_FREERTOS_Initv+0x24c>)
 8000a5c:	f007 fce0 	bl	8008420 <osThreadNew>
 8000a60:	4603      	mov	r3, r0
 8000a62:	4a44      	ldr	r2, [pc, #272]	; (8000b74 <_Z16MX_FREERTOS_Initv+0x250>)
 8000a64:	6013      	str	r3, [r2, #0]
			&processCANMesg_attributes);

	/* creation of MeasureTask */
	MeasureTaskHandle = osThreadNew(StartMeasureTask, nullptr,
 8000a66:	4a19      	ldr	r2, [pc, #100]	; (8000acc <_Z16MX_FREERTOS_Initv+0x1a8>)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4843      	ldr	r0, [pc, #268]	; (8000b78 <_Z16MX_FREERTOS_Initv+0x254>)
 8000a6c:	f007 fcd8 	bl	8008420 <osThreadNew>
 8000a70:	4603      	mov	r3, r0
 8000a72:	4a42      	ldr	r2, [pc, #264]	; (8000b7c <_Z16MX_FREERTOS_Initv+0x258>)
 8000a74:	6013      	str	r3, [r2, #0]
			&MeasureTask_attributes);

	/* creation of sysMonitor */
	sysMonitorHandle = osThreadNew(startMonitor, nullptr,
 8000a76:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <_Z16MX_FREERTOS_Initv+0x1b0>)
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4841      	ldr	r0, [pc, #260]	; (8000b80 <_Z16MX_FREERTOS_Initv+0x25c>)
 8000a7c:	f007 fcd0 	bl	8008420 <osThreadNew>
 8000a80:	4603      	mov	r3, r0
 8000a82:	4a40      	ldr	r2, [pc, #256]	; (8000b84 <_Z16MX_FREERTOS_Initv+0x260>)
 8000a84:	6013      	str	r3, [r2, #0]
			&sysMonitor_attributes);

	/* creation of UI */
	UIHandle = osThreadNew(startUI, nullptr, &UI_attributes);
 8000a86:	4a15      	ldr	r2, [pc, #84]	; (8000adc <_Z16MX_FREERTOS_Initv+0x1b8>)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	483f      	ldr	r0, [pc, #252]	; (8000b88 <_Z16MX_FREERTOS_Initv+0x264>)
 8000a8c:	f007 fcc8 	bl	8008420 <osThreadNew>
 8000a90:	4603      	mov	r3, r0
 8000a92:	4a3e      	ldr	r2, [pc, #248]	; (8000b8c <_Z16MX_FREERTOS_Initv+0x268>)
 8000a94:	6013      	str	r3, [r2, #0]

	/* creation of processUART */
	processUARTHandle = osThreadNew(startUART, nullptr,
 8000a96:	4a13      	ldr	r2, [pc, #76]	; (8000ae4 <_Z16MX_FREERTOS_Initv+0x1c0>)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	483d      	ldr	r0, [pc, #244]	; (8000b90 <_Z16MX_FREERTOS_Initv+0x26c>)
 8000a9c:	f007 fcc0 	bl	8008420 <osThreadNew>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	4a3c      	ldr	r2, [pc, #240]	; (8000b94 <_Z16MX_FREERTOS_Initv+0x270>)
 8000aa4:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* creation of LEDState */
	LEDStateHandle = osEventFlagsNew(&LEDState_attributes);
 8000aa6:	4821      	ldr	r0, [pc, #132]	; (8000b2c <_Z16MX_FREERTOS_Initv+0x208>)
 8000aa8:	f007 fdfa 	bl	80086a0 <osEventFlagsNew>
 8000aac:	4603      	mov	r3, r0
 8000aae:	4a3a      	ldr	r2, [pc, #232]	; (8000b98 <_Z16MX_FREERTOS_Initv+0x274>)
 8000ab0:	6013      	str	r3, [r2, #0]

	/* creation of ButtonCommand */
	ButtonCommandHandle = osEventFlagsNew(&ButtonCommand_attributes);
 8000ab2:	4820      	ldr	r0, [pc, #128]	; (8000b34 <_Z16MX_FREERTOS_Initv+0x210>)
 8000ab4:	f007 fdf4 	bl	80086a0 <osEventFlagsNew>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4a38      	ldr	r2, [pc, #224]	; (8000b9c <_Z16MX_FREERTOS_Initv+0x278>)
 8000abc:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200000a4 	.word	0x200000a4
 8000ac8:	0800bba0 	.word	0x0800bba0
 8000acc:	200000cc 	.word	0x200000cc
 8000ad0:	0800bbb0 	.word	0x0800bbb0
 8000ad4:	200000f4 	.word	0x200000f4
 8000ad8:	0800bbbc 	.word	0x0800bbbc
 8000adc:	2000011c 	.word	0x2000011c
 8000ae0:	0800bbc8 	.word	0x0800bbc8
 8000ae4:	20000144 	.word	0x20000144
 8000ae8:	0800bbcc 	.word	0x0800bbcc
 8000aec:	2000016c 	.word	0x2000016c
 8000af0:	0800bbd8 	.word	0x0800bbd8
 8000af4:	20000188 	.word	0x20000188
 8000af8:	0800bbe4 	.word	0x0800bbe4
 8000afc:	200001c0 	.word	0x200001c0
 8000b00:	0800bbf0 	.word	0x0800bbf0
 8000b04:	200001d4 	.word	0x200001d4
 8000b08:	0800bc00 	.word	0x0800bc00
 8000b0c:	200001e8 	.word	0x200001e8
 8000b10:	0800bc10 	.word	0x0800bc10
 8000b14:	200001fc 	.word	0x200001fc
 8000b18:	0800bc20 	.word	0x0800bc20
 8000b1c:	20000210 	.word	0x20000210
 8000b20:	0800bc2c 	.word	0x0800bc2c
 8000b24:	20000224 	.word	0x20000224
 8000b28:	0800bc3c 	.word	0x0800bc3c
 8000b2c:	20000238 	.word	0x20000238
 8000b30:	0800bc50 	.word	0x0800bc50
 8000b34:	2000024c 	.word	0x2000024c
 8000b38:	0800bc5c 	.word	0x0800bc5c
 8000b3c:	200001f8 	.word	0x200001f8
 8000b40:	2000020c 	.word	0x2000020c
 8000b44:	20000220 	.word	0x20000220
 8000b48:	08000bf1 	.word	0x08000bf1
 8000b4c:	200001bc 	.word	0x200001bc
 8000b50:	08000c05 	.word	0x08000c05
 8000b54:	200001d0 	.word	0x200001d0
 8000b58:	08000c19 	.word	0x08000c19
 8000b5c:	200001e4 	.word	0x200001e4
 8000b60:	20000168 	.word	0x20000168
 8000b64:	20000184 	.word	0x20000184
 8000b68:	200001a4 	.word	0x200001a4
 8000b6c:	200001a0 	.word	0x200001a0
 8000b70:	08000ba1 	.word	0x08000ba1
 8000b74:	200000a0 	.word	0x200000a0
 8000b78:	08000bb1 	.word	0x08000bb1
 8000b7c:	200000c8 	.word	0x200000c8
 8000b80:	08000bc1 	.word	0x08000bc1
 8000b84:	200000f0 	.word	0x200000f0
 8000b88:	08000bd1 	.word	0x08000bd1
 8000b8c:	20000118 	.word	0x20000118
 8000b90:	08000be1 	.word	0x08000be1
 8000b94:	20000140 	.word	0x20000140
 8000b98:	20000234 	.word	0x20000234
 8000b9c:	20000248 	.word	0x20000248

08000ba0 <_Z16StartCANMesgTaskPv>:
 * @brief  Function implementing the processCANMesg thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCANMesgTask */
void StartCANMesgTask(void *argument) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCANMesgTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f007 fccc 	bl	8008546 <osDelay>
 8000bae:	e7fb      	b.n	8000ba8 <_Z16StartCANMesgTaskPv+0x8>

08000bb0 <_Z16StartMeasureTaskPv>:
 * @brief Function implementing the MeasureTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMeasureTask */
void StartMeasureTask(void *argument) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartMeasureTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f007 fcc4 	bl	8008546 <osDelay>
 8000bbe:	e7fb      	b.n	8000bb8 <_Z16StartMeasureTaskPv+0x8>

08000bc0 <_Z12startMonitorPv>:
 * @brief Function implementing the sysMonitor thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startMonitor */
void startMonitor(void *argument) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startMonitor */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f007 fcbc 	bl	8008546 <osDelay>
 8000bce:	e7fb      	b.n	8000bc8 <_Z12startMonitorPv+0x8>

08000bd0 <_Z7startUIPv>:
 * @brief Function implementing the UI thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUI */
void startUI(void *argument) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startUI */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f007 fcb4 	bl	8008546 <osDelay>
 8000bde:	e7fb      	b.n	8000bd8 <_Z7startUIPv+0x8>

08000be0 <_Z9startUARTPv>:
 * @brief Function implementing the processUART thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUART */
void startUART(void *argument) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startUART */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000be8:	2001      	movs	r0, #1
 8000bea:	f007 fcac 	bl	8008546 <osDelay>
 8000bee:	e7fb      	b.n	8000be8 <_Z9startUARTPv+0x8>

08000bf0 <_Z14MeasureRoutinePv>:
	}
	/* USER CODE END startUART */
}

/* MeasureRoutine function */
void MeasureRoutine(void *argument) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN MeasureRoutine */

	/* USER CODE END MeasureRoutine */
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <_Z17LEDTimeoutRoutinePv>:

/* LEDTimeoutRoutine function */
void LEDTimeoutRoutine(void *argument) {
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN LEDTimeoutRoutine */

	/* USER CODE END LEDTimeoutRoutine */
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <_Z12processInputPv>:

/* processInput function */
void processInput(void *argument) {
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN processInput */

	/* USER CODE END processInput */
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c42:	4b52      	ldr	r3, [pc, #328]	; (8000d8c <MX_GPIO_Init+0x160>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	4a51      	ldr	r2, [pc, #324]	; (8000d8c <MX_GPIO_Init+0x160>)
 8000c48:	f043 0310 	orr.w	r3, r3, #16
 8000c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4e:	4b4f      	ldr	r3, [pc, #316]	; (8000d8c <MX_GPIO_Init+0x160>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	f003 0310 	and.w	r3, r3, #16
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	4b4c      	ldr	r3, [pc, #304]	; (8000d8c <MX_GPIO_Init+0x160>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	4a4b      	ldr	r2, [pc, #300]	; (8000d8c <MX_GPIO_Init+0x160>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c66:	4b49      	ldr	r3, [pc, #292]	; (8000d8c <MX_GPIO_Init+0x160>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	4b46      	ldr	r3, [pc, #280]	; (8000d8c <MX_GPIO_Init+0x160>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	4a45      	ldr	r2, [pc, #276]	; (8000d8c <MX_GPIO_Init+0x160>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7e:	4b43      	ldr	r3, [pc, #268]	; (8000d8c <MX_GPIO_Init+0x160>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	4b40      	ldr	r3, [pc, #256]	; (8000d8c <MX_GPIO_Init+0x160>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	4a3f      	ldr	r2, [pc, #252]	; (8000d8c <MX_GPIO_Init+0x160>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c96:	4b3d      	ldr	r3, [pc, #244]	; (8000d8c <MX_GPIO_Init+0x160>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca2:	4b3a      	ldr	r3, [pc, #232]	; (8000d8c <MX_GPIO_Init+0x160>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	4a39      	ldr	r2, [pc, #228]	; (8000d8c <MX_GPIO_Init+0x160>)
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cae:	4b37      	ldr	r3, [pc, #220]	; (8000d8c <MX_GPIO_Init+0x160>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BME_CS_GPIO_Port, BME_CS_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4834      	ldr	r0, [pc, #208]	; (8000d90 <MX_GPIO_Init+0x164>)
 8000cc0:	f003 f85c 	bl	8003d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_B_Pin|LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000cca:	4832      	ldr	r0, [pc, #200]	; (8000d94 <MX_GPIO_Init+0x168>)
 8000ccc:	f003 f856 	bl	8003d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TP13_Pin|TP9_Pin;
 8000cd0:	f242 0310 	movw	r3, #8208	; 0x2010
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	482c      	ldr	r0, [pc, #176]	; (8000d98 <MX_GPIO_Init+0x16c>)
 8000ce6:	f002 feb7 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BME_CS_Pin;
 8000cea:	2302      	movs	r3, #2
 8000cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BME_CS_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4823      	ldr	r0, [pc, #140]	; (8000d90 <MX_GPIO_Init+0x164>)
 8000d02:	f002 fea9 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP33_Pin;
 8000d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TP33_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4820      	ldr	r0, [pc, #128]	; (8000d9c <MX_GPIO_Init+0x170>)
 8000d1c:	f002 fe9c 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TP22_Pin|TP23_Pin;
 8000d20:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	4816      	ldr	r0, [pc, #88]	; (8000d90 <MX_GPIO_Init+0x164>)
 8000d36:	f002 fe8f 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin|LED_R_Pin;
 8000d3a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	4810      	ldr	r0, [pc, #64]	; (8000d94 <MX_GPIO_Init+0x168>)
 8000d54:	f002 fe80 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_BTN_Pin;
 8000d58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <MX_GPIO_Init+0x174>)
 8000d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_BTN_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4809      	ldr	r0, [pc, #36]	; (8000d94 <MX_GPIO_Init+0x168>)
 8000d6e:	f002 fe73 	bl	8003a58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2105      	movs	r1, #5
 8000d76:	2028      	movs	r0, #40	; 0x28
 8000d78:	f002 fae6 	bl	8003348 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d7c:	2028      	movs	r0, #40	; 0x28
 8000d7e:	f002 faff 	bl	8003380 <HAL_NVIC_EnableIRQ>

}
 8000d82:	bf00      	nop
 8000d84:	3728      	adds	r7, #40	; 0x28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	48000400 	.word	0x48000400
 8000d94:	48000c00 	.word	0x48000c00
 8000d98:	48000800 	.word	0x48000800
 8000d9c:	48001000 	.word	0x48001000
 8000da0:	10110000 	.word	0x10110000

08000da4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000daa:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <MX_I2C1_Init+0x78>)
 8000dac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000db0:	4a1b      	ldr	r2, [pc, #108]	; (8000e20 <MX_I2C1_Init+0x7c>)
 8000db2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dba:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dde:	480e      	ldr	r0, [pc, #56]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000de0:	f003 f808 	bl	8003df4 <HAL_I2C_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dea:	f000 f945 	bl	8001078 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dee:	2100      	movs	r1, #0
 8000df0:	4809      	ldr	r0, [pc, #36]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000df2:	f003 f933 	bl	800405c <HAL_I2CEx_ConfigAnalogFilter>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dfc:	f000 f93c 	bl	8001078 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e00:	2100      	movs	r1, #0
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000e04:	f003 f975 	bl	80040f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e0e:	f000 f933 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20033110 	.word	0x20033110
 8000e1c:	40005400 	.word	0x40005400
 8000e20:	2000090e 	.word	0x2000090e

08000e24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b0b0      	sub	sp, #192	; 0xc0
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	229c      	movs	r2, #156	; 0x9c
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f00a fdd1 	bl	800b9ec <memset>
  if(i2cHandle->Instance==I2C1)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a21      	ldr	r2, [pc, #132]	; (8000ed4 <HAL_I2C_MspInit+0xb0>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d13a      	bne.n	8000eca <HAL_I2C_MspInit+0xa6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e54:	2340      	movs	r3, #64	; 0x40
 8000e56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	4618      	mov	r0, r3
 8000e62:	f004 f961 	bl	8005128 <HAL_RCCEx_PeriphCLKConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e6c:	f000 f904 	bl	8001078 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_I2C_MspInit+0xb4>)
 8000e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e74:	4a18      	ldr	r2, [pc, #96]	; (8000ed8 <HAL_I2C_MspInit+0xb4>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <HAL_I2C_MspInit+0xb4>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e88:	23c0      	movs	r3, #192	; 0xc0
 8000e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8e:	2312      	movs	r3, #18
 8000e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480b      	ldr	r0, [pc, #44]	; (8000edc <HAL_I2C_MspInit+0xb8>)
 8000eae:	f002 fdd3 	bl	8003a58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <HAL_I2C_MspInit+0xb4>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <HAL_I2C_MspInit+0xb4>)
 8000eb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_I2C_MspInit+0xb4>)
 8000ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000eca:	bf00      	nop
 8000ecc:	37c0      	adds	r7, #192	; 0xc0
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40005400 	.word	0x40005400
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	48000400 	.word	0x48000400

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee4:	f000 fc4d 	bl	8001782 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee8:	f000 f81d 	bl	8000f26 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000eec:	f000 f87c 	bl	8000fe8 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef0:	f7ff fe9c 	bl	8000c2c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef4:	f7ff fcdc 	bl	80008b0 <MX_DMA_Init>
  MX_CAN1_Init();
 8000ef8:	f7ff fc06 	bl	8000708 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000efc:	f7ff ff52 	bl	8000da4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f00:	f000 f8f6 	bl	80010f0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f04:	f000 fb62 	bl	80015cc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000f08:	f7ff faf6 	bl	80004f8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f0c:	f000 faa0 	bl	8001450 <MX_TIM3_Init>
  MX_CRC_Init();
 8000f10:	f7ff fc8c 	bl	800082c <MX_CRC_Init>
  MX_RNG_Init();
 8000f14:	f000 f8b6 	bl	8001084 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000f18:	f007 fa36 	bl	8008388 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000f1c:	f7ff fd02 	bl	8000924 <_Z16MX_FREERTOS_Initv>
  /* Start scheduler */
  osKernelStart();
 8000f20:	f007 fa58 	bl	80083d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <main+0x44>

08000f26 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b096      	sub	sp, #88	; 0x58
 8000f2a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2244      	movs	r2, #68	; 0x44
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f00a fd59 	bl	800b9ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f48:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f4c:	f003 f93e 	bl	80041cc <HAL_PWREx_ControlVoltageScaling>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	bf14      	ite	ne
 8000f56:	2301      	movne	r3, #1
 8000f58:	2300      	moveq	r3, #0
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8000f60:	f000 f88a 	bl	8001078 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f64:	2310      	movs	r3, #16
 8000f66:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f70:	2360      	movs	r3, #96	; 0x60
 8000f72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f74:	2302      	movs	r3, #2
 8000f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000f80:	2310      	movs	r3, #16
 8000f82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f84:	2302      	movs	r3, #2
 8000f86:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4618      	mov	r0, r3
 8000f96:	f003 f9bd 	bl	8004314 <HAL_RCC_OscConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	bf14      	ite	ne
 8000fa0:	2301      	movne	r3, #1
 8000fa2:	2300      	moveq	r3, #0
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8000faa:	f000 f865 	bl	8001078 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fae:	230f      	movs	r3, #15
 8000fb0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000fb6:	2390      	movs	r3, #144	; 0x90
 8000fb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f003 fdca 	bl	8004b60 <HAL_RCC_ClockConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	bf14      	ite	ne
 8000fd2:	2301      	movne	r3, #1
 8000fd4:	2300      	moveq	r3, #0
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8000fdc:	f000 f84c 	bl	8001078 <Error_Handler>
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	3758      	adds	r7, #88	; 0x58
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0a8      	sub	sp, #160	; 0xa0
 8000fec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	229c      	movs	r2, #156	; 0x9c
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f00a fcf9 	bl	800b9ec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC;
 8000ffa:	f44f 2388 	mov.w	r3, #278528	; 0x44000
 8000ffe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001000:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001008:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800100c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001010:	2301      	movs	r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001014:	2301      	movs	r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 8001018:	2314      	movs	r3, #20
 800101a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800101c:	2302      	movs	r3, #2
 800101e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001020:	2302      	movs	r3, #2
 8001022:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 8001024:	2308      	movs	r3, #8
 8001026:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001028:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800102c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	4618      	mov	r0, r3
 8001032:	f004 f879 	bl	8005128 <HAL_RCCEx_PeriphCLKConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	bf14      	ite	ne
 800103c:	2301      	movne	r3, #1
 800103e:	2300      	moveq	r3, #0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <_Z24PeriphCommonClock_Configv+0x62>
  {
    Error_Handler();
 8001046:	f000 f817 	bl	8001078 <Error_Handler>
  }
}
 800104a:	bf00      	nop
 800104c:	37a0      	adds	r7, #160	; 0xa0
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d101      	bne.n	800106a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001066:	f000 fba5 	bl	80017b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40012c00 	.word	0x40012c00

08001078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800107c:	b672      	cpsid	i
}
 800107e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001080:	e7fe      	b.n	8001080 <Error_Handler+0x8>
	...

08001084 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <MX_RNG_Init+0x24>)
 800108a:	4a08      	ldr	r2, [pc, #32]	; (80010ac <MX_RNG_Init+0x28>)
 800108c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_RNG_Init+0x24>)
 8001090:	2200      	movs	r2, #0
 8001092:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <MX_RNG_Init+0x24>)
 8001096:	f004 fdbf 	bl	8005c18 <HAL_RNG_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80010a0:	f7ff ffea 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2003318c 	.word	0x2003318c
 80010ac:	50060800 	.word	0x50060800

080010b0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <HAL_RNG_MspInit+0x38>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d10b      	bne.n	80010da <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_RNG_MspInit+0x3c>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	4a09      	ldr	r2, [pc, #36]	; (80010ec <HAL_RNG_MspInit+0x3c>)
 80010c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ce:	4b07      	ldr	r3, [pc, #28]	; (80010ec <HAL_RNG_MspInit+0x3c>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	50060800 	.word	0x50060800
 80010ec:	40021000 	.word	0x40021000

080010f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <MX_SPI1_Init+0x74>)
 80010f6:	4a1c      	ldr	r2, [pc, #112]	; (8001168 <MX_SPI1_Init+0x78>)
 80010f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010fa:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <MX_SPI1_Init+0x74>)
 80010fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001100:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <MX_SPI1_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <MX_SPI1_Init+0x74>)
 800110a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800110e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_SPI1_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <MX_SPI1_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_SPI1_Init+0x74>)
 800111e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001122:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <MX_SPI1_Init+0x74>)
 8001126:	2208      	movs	r2, #8
 8001128:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MX_SPI1_Init+0x74>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <MX_SPI1_Init+0x74>)
 8001132:	2200      	movs	r2, #0
 8001134:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <MX_SPI1_Init+0x74>)
 8001138:	2200      	movs	r2, #0
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MX_SPI1_Init+0x74>)
 800113e:	2207      	movs	r2, #7
 8001140:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <MX_SPI1_Init+0x74>)
 8001144:	2200      	movs	r2, #0
 8001146:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <MX_SPI1_Init+0x74>)
 800114a:	2208      	movs	r2, #8
 800114c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_SPI1_Init+0x74>)
 8001150:	f004 fde8 	bl	8005d24 <HAL_SPI_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800115a:	f7ff ff8d 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200331b0 	.word	0x200331b0
 8001168:	40013000 	.word	0x40013000

0800116c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <HAL_SPI_MspInit+0x8c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d130      	bne.n	80011f0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <HAL_SPI_MspInit+0x90>)
 8001190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001192:	4a1a      	ldr	r2, [pc, #104]	; (80011fc <HAL_SPI_MspInit+0x90>)
 8001194:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001198:	6613      	str	r3, [r2, #96]	; 0x60
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <HAL_SPI_MspInit+0x90>)
 800119c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_SPI_MspInit+0x90>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	4a14      	ldr	r2, [pc, #80]	; (80011fc <HAL_SPI_MspInit+0x90>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_SPI_MspInit+0x90>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011be:	23e0      	movs	r3, #224	; 0xe0
 80011c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ce:	2305      	movs	r3, #5
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011dc:	f002 fc3c 	bl	8003a58 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2105      	movs	r1, #5
 80011e4:	2023      	movs	r0, #35	; 0x23
 80011e6:	f002 f8af 	bl	8003348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80011ea:	2023      	movs	r0, #35	; 0x23
 80011ec:	f002 f8c8 	bl	8003380 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	; 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40013000 	.word	0x40013000
 80011fc:	40021000 	.word	0x40021000

08001200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <HAL_MspInit+0x4c>)
 8001208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120a:	4a10      	ldr	r2, [pc, #64]	; (800124c <HAL_MspInit+0x4c>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6613      	str	r3, [r2, #96]	; 0x60
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <HAL_MspInit+0x4c>)
 8001214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_MspInit+0x4c>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <HAL_MspInit+0x4c>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	6593      	str	r3, [r2, #88]	; 0x58
 800122a:	4b08      	ldr	r3, [pc, #32]	; (800124c <HAL_MspInit+0x4c>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	210f      	movs	r1, #15
 800123a:	f06f 0001 	mvn.w	r0, #1
 800123e:	f002 f883 	bl	8003348 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000

08001250 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	; 0x30
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001260:	2200      	movs	r2, #0
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	2019      	movs	r0, #25
 8001266:	f002 f86f 	bl	8003348 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800126a:	2019      	movs	r0, #25
 800126c:	f002 f888 	bl	8003380 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <HAL_InitTick+0x9c>)
 8001272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001274:	4a1d      	ldr	r2, [pc, #116]	; (80012ec <HAL_InitTick+0x9c>)
 8001276:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800127a:	6613      	str	r3, [r2, #96]	; 0x60
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_InitTick+0x9c>)
 800127e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001288:	f107 0210 	add.w	r2, r7, #16
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4611      	mov	r1, r2
 8001292:	4618      	mov	r0, r3
 8001294:	f003 fe54 	bl	8004f40 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001298:	f003 fe3c 	bl	8004f14 <HAL_RCC_GetPCLK2Freq>
 800129c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800129e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a0:	4a13      	ldr	r2, [pc, #76]	; (80012f0 <HAL_InitTick+0xa0>)
 80012a2:	fba2 2303 	umull	r2, r3, r2, r3
 80012a6:	0c9b      	lsrs	r3, r3, #18
 80012a8:	3b01      	subs	r3, #1
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <HAL_InitTick+0xa4>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <HAL_InitTick+0xa8>)
 80012b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <HAL_InitTick+0xa4>)
 80012b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80012ba:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <HAL_InitTick+0xa4>)
 80012bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <HAL_InitTick+0xa4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_InitTick+0xa4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80012cc:	4809      	ldr	r0, [pc, #36]	; (80012f4 <HAL_InitTick+0xa4>)
 80012ce:	f004 ff69 	bl	80061a4 <HAL_TIM_Base_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d104      	bne.n	80012e2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80012d8:	4806      	ldr	r0, [pc, #24]	; (80012f4 <HAL_InitTick+0xa4>)
 80012da:	f004 ffc7 	bl	800626c <HAL_TIM_Base_Start_IT>
 80012de:	4603      	mov	r3, r0
 80012e0:	e000      	b.n	80012e4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3730      	adds	r7, #48	; 0x30
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40021000 	.word	0x40021000
 80012f0:	431bde83 	.word	0x431bde83
 80012f4:	2003323c 	.word	0x2003323c
 80012f8:	40012c00 	.word	0x40012c00

080012fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <NMI_Handler+0x4>

08001302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <HardFault_Handler+0x4>

08001308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <MemManage_Handler+0x4>

0800130e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <BusFault_Handler+0x4>

08001314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <UsageFault_Handler+0x4>

0800131a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <DMA1_Channel1_IRQHandler+0x10>)
 800132e:	f002 fa82 	bl	8003836 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20033028 	.word	0x20033028

0800133c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <ADC1_IRQHandler+0x10>)
 8001342:	f000 fda5 	bl	8001e90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20032f94 	.word	0x20032f94

08001350 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <CAN1_TX_IRQHandler+0x10>)
 8001356:	f001 fcf7 	bl	8002d48 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20033088 	.word	0x20033088

08001364 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <CAN1_RX0_IRQHandler+0x10>)
 800136a:	f001 fced 	bl	8002d48 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20033088 	.word	0x20033088

08001378 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <CAN1_RX1_IRQHandler+0x10>)
 800137e:	f001 fce3 	bl	8002d48 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20033088 	.word	0x20033088

0800138c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001392:	f005 f849 	bl	8006428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2003323c 	.word	0x2003323c

080013a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <TIM3_IRQHandler+0x10>)
 80013a6:	f005 f83f 	bl	8006428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200332f8 	.word	0x200332f8

080013b4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <SPI1_IRQHandler+0x10>)
 80013ba:	f004 fd8d 	bl	8005ed8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200331b0 	.word	0x200331b0

080013c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <USART1_IRQHandler+0x10>)
 80013ce:	f005 fee7 	bl	80071a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200333b4 	.word	0x200333b4

080013dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80013e0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013e4:	f002 fce2 	bl	8003dac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}

080013ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <SystemInit+0x5c>)
 80013f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013f6:	4a14      	ldr	r2, [pc, #80]	; (8001448 <SystemInit+0x5c>)
 80013f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <SystemInit+0x60>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a11      	ldr	r2, [pc, #68]	; (800144c <SystemInit+0x60>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <SystemInit+0x60>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <SystemInit+0x60>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a0d      	ldr	r2, [pc, #52]	; (800144c <SystemInit+0x60>)
 8001418:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800141c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001420:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <SystemInit+0x60>)
 8001424:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001428:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <SystemInit+0x60>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a07      	ldr	r2, [pc, #28]	; (800144c <SystemInit+0x60>)
 8001430:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001434:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <SystemInit+0x60>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000ed00 	.word	0xe000ed00
 800144c:	40021000 	.word	0x40021000

08001450 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08c      	sub	sp, #48	; 0x30
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001456:	f107 0320 	add.w	r3, r7, #32
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800147c:	4b2b      	ldr	r3, [pc, #172]	; (800152c <MX_TIM3_Init+0xdc>)
 800147e:	4a2c      	ldr	r2, [pc, #176]	; (8001530 <MX_TIM3_Init+0xe0>)
 8001480:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <MX_TIM3_Init+0xdc>)
 8001484:	2200      	movs	r2, #0
 8001486:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001488:	4b28      	ldr	r3, [pc, #160]	; (800152c <MX_TIM3_Init+0xdc>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800148e:	4b27      	ldr	r3, [pc, #156]	; (800152c <MX_TIM3_Init+0xdc>)
 8001490:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001494:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001496:	4b25      	ldr	r3, [pc, #148]	; (800152c <MX_TIM3_Init+0xdc>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800149c:	4b23      	ldr	r3, [pc, #140]	; (800152c <MX_TIM3_Init+0xdc>)
 800149e:	2280      	movs	r2, #128	; 0x80
 80014a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014a2:	4822      	ldr	r0, [pc, #136]	; (800152c <MX_TIM3_Init+0xdc>)
 80014a4:	f004 fe7e 	bl	80061a4 <HAL_TIM_Base_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 80014ae:	f7ff fde3 	bl	8001078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014b8:	f107 0320 	add.w	r3, r7, #32
 80014bc:	4619      	mov	r1, r3
 80014be:	481b      	ldr	r0, [pc, #108]	; (800152c <MX_TIM3_Init+0xdc>)
 80014c0:	f005 f987 	bl	80067d2 <HAL_TIM_ConfigClockSource>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80014ca:	f7ff fdd5 	bl	8001078 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80014ce:	4817      	ldr	r0, [pc, #92]	; (800152c <MX_TIM3_Init+0xdc>)
 80014d0:	f004 ff3c 	bl	800634c <HAL_TIM_IC_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80014da:	f7ff fdcd 	bl	8001078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	480f      	ldr	r0, [pc, #60]	; (800152c <MX_TIM3_Init+0xdc>)
 80014ee:	f005 fd47 	bl	8006f80 <HAL_TIMEx_MasterConfigSynchronization>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80014f8:	f7ff fdbe 	bl	8001078 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014fc:	2300      	movs	r3, #0
 80014fe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001500:	2301      	movs	r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2200      	movs	r2, #0
 8001510:	4619      	mov	r1, r3
 8001512:	4806      	ldr	r0, [pc, #24]	; (800152c <MX_TIM3_Init+0xdc>)
 8001514:	f005 f8c9 	bl	80066aa <HAL_TIM_IC_ConfigChannel>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 800151e:	f7ff fdab 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	3730      	adds	r7, #48	; 0x30
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200332f8 	.word	0x200332f8
 8001530:	40000400 	.word	0x40000400

08001534 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a1b      	ldr	r2, [pc, #108]	; (80015c0 <HAL_TIM_Base_MspInit+0x8c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d12f      	bne.n	80015b6 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_TIM_Base_MspInit+0x90>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	4a1a      	ldr	r2, [pc, #104]	; (80015c4 <HAL_TIM_Base_MspInit+0x90>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	6593      	str	r3, [r2, #88]	; 0x58
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <HAL_TIM_Base_MspInit+0x90>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <HAL_TIM_Base_MspInit+0x90>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <HAL_TIM_Base_MspInit+0x90>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_TIM_Base_MspInit+0x90>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Wind_SPD_Pin;
 8001586:	2340      	movs	r3, #64	; 0x40
 8001588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001596:	2302      	movs	r3, #2
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Wind_SPD_GPIO_Port, &GPIO_InitStruct);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	4809      	ldr	r0, [pc, #36]	; (80015c8 <HAL_TIM_Base_MspInit+0x94>)
 80015a2:	f002 fa59 	bl	8003a58 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2105      	movs	r1, #5
 80015aa:	201d      	movs	r0, #29
 80015ac:	f001 fecc 	bl	8003348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015b0:	201d      	movs	r0, #29
 80015b2:	f001 fee5 	bl	8003380 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	; 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40000400 	.word	0x40000400
 80015c4:	40021000 	.word	0x40021000
 80015c8:	48000800 	.word	0x48000800

080015cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d0:	4b22      	ldr	r3, [pc, #136]	; (800165c <MX_USART1_UART_Init+0x90>)
 80015d2:	4a23      	ldr	r2, [pc, #140]	; (8001660 <MX_USART1_UART_Init+0x94>)
 80015d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015d6:	4b21      	ldr	r3, [pc, #132]	; (800165c <MX_USART1_UART_Init+0x90>)
 80015d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015de:	4b1f      	ldr	r3, [pc, #124]	; (800165c <MX_USART1_UART_Init+0x90>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015e4:	4b1d      	ldr	r3, [pc, #116]	; (800165c <MX_USART1_UART_Init+0x90>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <MX_USART1_UART_Init+0x90>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f0:	4b1a      	ldr	r3, [pc, #104]	; (800165c <MX_USART1_UART_Init+0x90>)
 80015f2:	220c      	movs	r2, #12
 80015f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f6:	4b19      	ldr	r3, [pc, #100]	; (800165c <MX_USART1_UART_Init+0x90>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <MX_USART1_UART_Init+0x90>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <MX_USART1_UART_Init+0x90>)
 8001604:	2200      	movs	r2, #0
 8001606:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <MX_USART1_UART_Init+0x90>)
 800160a:	2200      	movs	r2, #0
 800160c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <MX_USART1_UART_Init+0x90>)
 8001610:	2200      	movs	r2, #0
 8001612:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001614:	4811      	ldr	r0, [pc, #68]	; (800165c <MX_USART1_UART_Init+0x90>)
 8001616:	f005 fd63 	bl	80070e0 <HAL_UART_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001620:	f7ff fd2a 	bl	8001078 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001624:	2100      	movs	r1, #0
 8001626:	480d      	ldr	r0, [pc, #52]	; (800165c <MX_USART1_UART_Init+0x90>)
 8001628:	f006 fda0 	bl	800816c <HAL_UARTEx_SetTxFifoThreshold>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001632:	f7ff fd21 	bl	8001078 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001636:	2100      	movs	r1, #0
 8001638:	4808      	ldr	r0, [pc, #32]	; (800165c <MX_USART1_UART_Init+0x90>)
 800163a:	f006 fdd5 	bl	80081e8 <HAL_UARTEx_SetRxFifoThreshold>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001644:	f7ff fd18 	bl	8001078 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001648:	4804      	ldr	r0, [pc, #16]	; (800165c <MX_USART1_UART_Init+0x90>)
 800164a:	f006 fd56 	bl	80080fa <HAL_UARTEx_DisableFifoMode>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001654:	f7ff fd10 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200333b4 	.word	0x200333b4
 8001660:	40013800 	.word	0x40013800

08001664 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b0b0      	sub	sp, #192	; 0xc0
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	229c      	movs	r2, #156	; 0x9c
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f00a f9b1 	bl	800b9ec <memset>
  if(uartHandle->Instance==USART1)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a26      	ldr	r2, [pc, #152]	; (8001728 <HAL_UART_MspInit+0xc4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d144      	bne.n	800171e <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001694:	2301      	movs	r3, #1
 8001696:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001698:	2300      	movs	r3, #0
 800169a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	4618      	mov	r0, r3
 80016a2:	f003 fd41 	bl	8005128 <HAL_RCCEx_PeriphCLKConfig>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016ac:	f7ff fce4 	bl	8001078 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016b0:	4b1e      	ldr	r3, [pc, #120]	; (800172c <HAL_UART_MspInit+0xc8>)
 80016b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016b4:	4a1d      	ldr	r2, [pc, #116]	; (800172c <HAL_UART_MspInit+0xc8>)
 80016b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ba:	6613      	str	r3, [r2, #96]	; 0x60
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <HAL_UART_MspInit+0xc8>)
 80016be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c8:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_UART_MspInit+0xc8>)
 80016ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016cc:	4a17      	ldr	r2, [pc, #92]	; (800172c <HAL_UART_MspInit+0xc8>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d4:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_UART_MspInit+0xc8>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016e0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f4:	2303      	movs	r3, #3
 80016f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016fa:	2307      	movs	r3, #7
 80016fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001700:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001704:	4619      	mov	r1, r3
 8001706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170a:	f002 f9a5 	bl	8003a58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2105      	movs	r1, #5
 8001712:	2025      	movs	r0, #37	; 0x25
 8001714:	f001 fe18 	bl	8003348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001718:	2025      	movs	r0, #37	; 0x25
 800171a:	f001 fe31 	bl	8003380 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800171e:	bf00      	nop
 8001720:	37c0      	adds	r7, #192	; 0xc0
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40013800 	.word	0x40013800
 800172c:	40021000 	.word	0x40021000

08001730 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001768 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001734:	f7ff fe5a 	bl	80013ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001738:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800173a:	e003      	b.n	8001744 <LoopCopyDataInit>

0800173c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800173e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001740:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001742:	3104      	adds	r1, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001744:	480a      	ldr	r0, [pc, #40]	; (8001770 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001748:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800174a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800174c:	d3f6      	bcc.n	800173c <CopyDataInit>
	ldr	r2, =_sbss
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001750:	e002      	b.n	8001758 <LoopFillZerobss>

08001752 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001752:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001754:	f842 3b04 	str.w	r3, [r2], #4

08001758 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <LoopForever+0x16>)
	cmp	r2, r3
 800175a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800175c:	d3f9      	bcc.n	8001752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800175e:	f00a f911 	bl	800b984 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001762:	f7ff fbbd 	bl	8000ee0 <main>

08001766 <LoopForever>:

LoopForever:
    b LoopForever
 8001766:	e7fe      	b.n	8001766 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001768:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 800176c:	0800bd8c 	.word	0x0800bd8c
	ldr	r0, =_sdata
 8001770:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001774:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8001778:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 800177c:	200334cc 	.word	0x200334cc

08001780 <CAN1_SCE_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001780:	e7fe      	b.n	8001780 <CAN1_SCE_IRQHandler>

08001782 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800178c:	2003      	movs	r0, #3
 800178e:	f001 fdd0 	bl	8003332 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001792:	2000      	movs	r0, #0
 8001794:	f7ff fd5c 	bl	8001250 <HAL_InitTick>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	71fb      	strb	r3, [r7, #7]
 80017a2:	e001      	b.n	80017a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017a4:	f7ff fd2c 	bl	8001200 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017a8:	79fb      	ldrb	r3, [r7, #7]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_IncTick+0x20>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_IncTick+0x24>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4413      	add	r3, r2
 80017c4:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <HAL_IncTick+0x24>)
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000008 	.word	0x20000008
 80017d8:	2003347c 	.word	0x2003347c

080017dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return uwTick;
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <HAL_GetTick+0x14>)
 80017e2:	681b      	ldr	r3, [r3, #0]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	2003347c 	.word	0x2003347c

080017f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	609a      	str	r2, [r3, #8]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	609a      	str	r2, [r3, #8]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800185c:	b480      	push	{r7}
 800185e:	b087      	sub	sp, #28
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	3360      	adds	r3, #96	; 0x60
 800186e:	461a      	mov	r2, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <LL_ADC_SetOffset+0x44>)
 800187e:	4013      	ands	r3, r2
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	4313      	orrs	r3, r2
 800188c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001894:	bf00      	nop
 8001896:	371c      	adds	r7, #28
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	03fff000 	.word	0x03fff000

080018a4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3360      	adds	r3, #96	; 0x60
 80018b2:	461a      	mov	r2, r3
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b087      	sub	sp, #28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	3360      	adds	r3, #96	; 0x60
 80018e0:	461a      	mov	r2, r3
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	431a      	orrs	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018fa:	bf00      	nop
 80018fc:	371c      	adds	r7, #28
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	615a      	str	r2, [r3, #20]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001952:	b480      	push	{r7}
 8001954:	b087      	sub	sp, #28
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3330      	adds	r3, #48	; 0x30
 8001962:	461a      	mov	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	0a1b      	lsrs	r3, r3, #8
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	4413      	add	r3, r2
 8001970:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	f003 031f 	and.w	r3, r3, #31
 800197c:	211f      	movs	r1, #31
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	401a      	ands	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	0e9b      	lsrs	r3, r3, #26
 800198a:	f003 011f 	and.w	r1, r3, #31
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	f003 031f 	and.w	r3, r3, #31
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	431a      	orrs	r2, r3
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800199e:	bf00      	nop
 80019a0:	371c      	adds	r7, #28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	3314      	adds	r3, #20
 80019e0:	461a      	mov	r2, r3
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	0e5b      	lsrs	r3, r3, #25
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	4413      	add	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	0d1b      	lsrs	r3, r3, #20
 80019f8:	f003 031f 	and.w	r3, r3, #31
 80019fc:	2107      	movs	r1, #7
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	401a      	ands	r2, r3
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	0d1b      	lsrs	r3, r3, #20
 8001a0a:	f003 031f 	and.w	r3, r3, #31
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	fa01 f303 	lsl.w	r3, r1, r3
 8001a14:	431a      	orrs	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a1a:	bf00      	nop
 8001a1c:	371c      	adds	r7, #28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a40:	43db      	mvns	r3, r3
 8001a42:	401a      	ands	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0318 	and.w	r3, r3, #24
 8001a4a:	4908      	ldr	r1, [pc, #32]	; (8001a6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a4c:	40d9      	lsrs	r1, r3
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	400b      	ands	r3, r1
 8001a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a56:	431a      	orrs	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	0007ffff 	.word	0x0007ffff

08001a70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6093      	str	r3, [r2, #8]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001aa8:	d101      	bne.n	8001aae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001acc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ad0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001af8:	d101      	bne.n	8001afe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <LL_ADC_IsEnabled+0x18>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <LL_ADC_IsEnabled+0x1a>
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d101      	bne.n	8001b4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d101      	bne.n	8001b70 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e176      	b.n	8001e88 <HAL_ADC_Init+0x308>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d132      	bne.n	8001c0e <HAL_ADC_Init+0x8e>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a9b      	ldr	r2, [pc, #620]	; (8001e18 <HAL_ADC_Init+0x298>)
 8001bac:	669a      	str	r2, [r3, #104]	; 0x68
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a9a      	ldr	r2, [pc, #616]	; (8001e1c <HAL_ADC_Init+0x29c>)
 8001bb2:	66da      	str	r2, [r3, #108]	; 0x6c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a9a      	ldr	r2, [pc, #616]	; (8001e20 <HAL_ADC_Init+0x2a0>)
 8001bb8:	671a      	str	r2, [r3, #112]	; 0x70
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a99      	ldr	r2, [pc, #612]	; (8001e24 <HAL_ADC_Init+0x2a4>)
 8001bbe:	675a      	str	r2, [r3, #116]	; 0x74
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a99      	ldr	r2, [pc, #612]	; (8001e28 <HAL_ADC_Init+0x2a8>)
 8001bc4:	679a      	str	r2, [r3, #120]	; 0x78
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a98      	ldr	r2, [pc, #608]	; (8001e2c <HAL_ADC_Init+0x2ac>)
 8001bca:	67da      	str	r2, [r3, #124]	; 0x7c
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a98      	ldr	r2, [pc, #608]	; (8001e30 <HAL_ADC_Init+0x2b0>)
 8001bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a97      	ldr	r2, [pc, #604]	; (8001e34 <HAL_ADC_Init+0x2b4>)
 8001bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a96      	ldr	r2, [pc, #600]	; (8001e38 <HAL_ADC_Init+0x2b8>)
 8001be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (hadc->MspInitCallback == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d103      	bne.n	8001bf6 <HAL_ADC_Init+0x76>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a92      	ldr	r2, [pc, #584]	; (8001e3c <HAL_ADC_Init+0x2bc>)
 8001bf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ff3e 	bl	8001a94 <LL_ADC_IsDeepPowerDownEnabled>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d004      	beq.n	8001c28 <HAL_ADC_Init+0xa8>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff24 	bl	8001a70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff59 	bl	8001ae4 <LL_ADC_IsInternalRegulatorEnabled>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d115      	bne.n	8001c64 <HAL_ADC_Init+0xe4>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff3d 	bl	8001abc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c42:	4b7f      	ldr	r3, [pc, #508]	; (8001e40 <HAL_ADC_Init+0x2c0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	099b      	lsrs	r3, r3, #6
 8001c48:	4a7e      	ldr	r2, [pc, #504]	; (8001e44 <HAL_ADC_Init+0x2c4>)
 8001c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4e:	099b      	lsrs	r3, r3, #6
 8001c50:	3301      	adds	r3, #1
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c56:	e002      	b.n	8001c5e <HAL_ADC_Init+0xde>
    {
      wait_loop_index--;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f9      	bne.n	8001c58 <HAL_ADC_Init+0xd8>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff3b 	bl	8001ae4 <LL_ADC_IsInternalRegulatorEnabled>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10d      	bne.n	8001c90 <HAL_ADC_Init+0x110>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c78:	f043 0210 	orr.w	r2, r3, #16
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c84:	f043 0201 	orr.w	r2, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff4c 	bl	8001b32 <LL_ADC_REG_IsConversionOngoing>
 8001c9a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	f003 0310 	and.w	r3, r3, #16
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f040 80e6 	bne.w	8001e76 <HAL_ADC_Init+0x2f6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f040 80e2 	bne.w	8001e76 <HAL_ADC_Init+0x2f6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cba:	f043 0202 	orr.w	r2, r3, #2
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ff20 	bl	8001b0c <LL_ADC_IsEnabled>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10b      	bne.n	8001cea <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cd2:	485d      	ldr	r0, [pc, #372]	; (8001e48 <HAL_ADC_Init+0x2c8>)
 8001cd4:	f7ff ff1a 	bl	8001b0c <LL_ADC_IsEnabled>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d105      	bne.n	8001cea <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4859      	ldr	r0, [pc, #356]	; (8001e4c <HAL_ADC_Init+0x2cc>)
 8001ce6:	f7ff fd85 	bl	80017f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	7e5b      	ldrb	r3, [r3, #25]
 8001cee:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cf4:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001cfa:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001d00:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d08:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d106      	bne.n	8001d26 <HAL_ADC_Init+0x1a6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	045b      	lsls	r3, r3, #17
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d009      	beq.n	8001d42 <HAL_ADC_Init+0x1c2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d32:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	4b41      	ldr	r3, [pc, #260]	; (8001e50 <HAL_ADC_Init+0x2d0>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	69b9      	ldr	r1, [r7, #24]
 8001d52:	430b      	orrs	r3, r1
 8001d54:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fee9 	bl	8001b32 <LL_ADC_REG_IsConversionOngoing>
 8001d60:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fef6 	bl	8001b58 <LL_ADC_INJ_IsConversionOngoing>
 8001d6c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d140      	bne.n	8001df6 <HAL_ADC_Init+0x276>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d13d      	bne.n	8001df6 <HAL_ADC_Init+0x276>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	7e1b      	ldrb	r3, [r3, #24]
 8001d82:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d84:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d8c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d9c:	f023 0306 	bic.w	r3, r3, #6
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	69b9      	ldr	r1, [r7, #24]
 8001da6:	430b      	orrs	r3, r1
 8001da8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d118      	bne.n	8001de6 <HAL_ADC_Init+0x266>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001dbe:	f023 0304 	bic.w	r3, r3, #4
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dca:	4311      	orrs	r1, r2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001dd0:	4311      	orrs	r1, r2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	611a      	str	r2, [r3, #16]
 8001de4:	e007      	b.n	8001df6 <HAL_ADC_Init+0x276>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0201 	bic.w	r2, r2, #1
 8001df4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d12a      	bne.n	8001e54 <HAL_ADC_Init+0x2d4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	f023 010f 	bic.w	r1, r3, #15
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	1e5a      	subs	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	631a      	str	r2, [r3, #48]	; 0x30
 8001e16:	e025      	b.n	8001e64 <HAL_ADC_Init+0x2e4>
 8001e18:	0800220f 	.word	0x0800220f
 8001e1c:	08002223 	.word	0x08002223
 8001e20:	08002237 	.word	0x08002237
 8001e24:	0800224b 	.word	0x0800224b
 8001e28:	08002a59 	.word	0x08002a59
 8001e2c:	08002a6d 	.word	0x08002a6d
 8001e30:	08002a81 	.word	0x08002a81
 8001e34:	08002a95 	.word	0x08002a95
 8001e38:	08002aa9 	.word	0x08002aa9
 8001e3c:	080005e9 	.word	0x080005e9
 8001e40:	20000000 	.word	0x20000000
 8001e44:	053e2d63 	.word	0x053e2d63
 8001e48:	50040000 	.word	0x50040000
 8001e4c:	50040300 	.word	0x50040300
 8001e50:	fff0c007 	.word	0xfff0c007
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 020f 	bic.w	r2, r2, #15
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	f023 0303 	bic.w	r3, r3, #3
 8001e6c:	f043 0201 	orr.w	r2, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	659a      	str	r2, [r3, #88]	; 0x58
 8001e74:	e007      	b.n	8001e86 <HAL_ADC_Init+0x306>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	f043 0210 	orr.w	r2, r3, #16
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e86:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3720      	adds	r7, #32
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d019      	beq.n	8001eea <HAL_ADC_IRQHandler+0x5a>
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d014      	beq.n	8001eea <HAL_ADC_IRQHandler+0x5a>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d105      	bne.n	8001ed8 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	4798      	blx	r3
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d004      	beq.n	8001efe <HAL_ADC_IRQHandler+0x6e>
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d109      	bne.n	8001f12 <HAL_ADC_IRQHandler+0x82>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d05f      	beq.n	8001fc8 <HAL_ADC_IRQHandler+0x138>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d05a      	beq.n	8001fc8 <HAL_ADC_IRQHandler+0x138>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d105      	bne.n	8001f2a <HAL_ADC_IRQHandler+0x9a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fcfc 	bl	800192c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d03e      	beq.n	8001fb8 <HAL_ADC_IRQHandler+0x128>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d135      	bne.n	8001fb8 <HAL_ADC_IRQHandler+0x128>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d12e      	bne.n	8001fb8 <HAL_ADC_IRQHandler+0x128>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fde7 	bl	8001b32 <LL_ADC_REG_IsConversionOngoing>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d11a      	bne.n	8001fa0 <HAL_ADC_IRQHandler+0x110>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 020c 	bic.w	r2, r2, #12
 8001f78:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d112      	bne.n	8001fb8 <HAL_ADC_IRQHandler+0x128>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f96:	f043 0201 	orr.w	r2, r3, #1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	659a      	str	r2, [r3, #88]	; 0x58
 8001f9e:	e00b      	b.n	8001fb8 <HAL_ADC_IRQHandler+0x128>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa4:	f043 0210 	orr.w	r2, r3, #16
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb0:	f043 0201 	orr.w	r2, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: Into callback function "HAL_ADC_ConvCpltCallback()",             */
    /*       to determine if conversion has been triggered from EOC or EOS,   */
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	4798      	blx	r3
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	220c      	movs	r2, #12
 8001fc6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d004      	beq.n	8001fdc <HAL_ADC_IRQHandler+0x14c>
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f003 0320 	and.w	r3, r3, #32
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d109      	bne.n	8001ff0 <HAL_ADC_IRQHandler+0x160>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d073      	beq.n	80020ce <HAL_ADC_IRQHandler+0x23e>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d06e      	beq.n	80020ce <HAL_ADC_IRQHandler+0x23e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d105      	bne.n	8002008 <HAL_ADC_IRQHandler+0x178>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002000:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fccc 	bl	80019aa <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002012:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fc87 	bl	800192c <LL_ADC_REG_IsTriggerSourceSWStart>
 800201e:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d047      	beq.n	80020be <HAL_ADC_IRQHandler+0x22e>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_ADC_IRQHandler+0x1b8>
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d03f      	beq.n	80020be <HAL_ADC_IRQHandler+0x22e>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002044:	2b00      	cmp	r3, #0
 8002046:	d13a      	bne.n	80020be <HAL_ADC_IRQHandler+0x22e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002052:	2b40      	cmp	r3, #64	; 0x40
 8002054:	d133      	bne.n	80020be <HAL_ADC_IRQHandler+0x22e>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d12e      	bne.n	80020be <HAL_ADC_IRQHandler+0x22e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fd77 	bl	8001b58 <LL_ADC_INJ_IsConversionOngoing>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d11a      	bne.n	80020a6 <HAL_ADC_IRQHandler+0x216>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800207e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d112      	bne.n	80020be <HAL_ADC_IRQHandler+0x22e>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	f043 0201 	orr.w	r2, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	659a      	str	r2, [r3, #88]	; 0x58
 80020a4:	e00b      	b.n	80020be <HAL_ADC_IRQHandler+0x22e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	f043 0210 	orr.w	r2, r3, #16
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b6:	f043 0201 	orr.w	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	65da      	str	r2, [r3, #92]	; 0x5c
              if (__HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) or
              if (__HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOC)) to determine whether
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	4798      	blx	r3
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2260      	movs	r2, #96	; 0x60
 80020cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d012      	beq.n	80020fe <HAL_ADC_IRQHandler+0x26e>
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00d      	beq.n	80020fe <HAL_ADC_IRQHandler+0x26e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	4798      	blx	r3
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2280      	movs	r2, #128	; 0x80
 80020fc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002104:	2b00      	cmp	r3, #0
 8002106:	d014      	beq.n	8002132 <HAL_ADC_IRQHandler+0x2a2>
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00f      	beq.n	8002132 <HAL_ADC_IRQHandler+0x2a2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002116:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	4798      	blx	r3
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002130:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002138:	2b00      	cmp	r3, #0
 800213a:	d014      	beq.n	8002166 <HAL_ADC_IRQHandler+0x2d6>
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00f      	beq.n	8002166 <HAL_ADC_IRQHandler+0x2d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002164:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b00      	cmp	r3, #0
 800216e:	d02b      	beq.n	80021c8 <HAL_ADC_IRQHandler+0x338>
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	2b00      	cmp	r3, #0
 8002178:	d026      	beq.n	80021c8 <HAL_ADC_IRQHandler+0x338>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217e:	2b00      	cmp	r3, #0
 8002180:	d102      	bne.n	8002188 <HAL_ADC_IRQHandler+0x2f8>
    {
      overrun_error = 1UL;
 8002182:	2301      	movs	r3, #1
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	e008      	b.n	800219a <HAL_ADC_IRQHandler+0x30a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_ADC_IRQHandler+0x30a>
        {
          overrun_error = 1UL;
 8002196:	2301      	movs	r3, #1
 8002198:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d10f      	bne.n	80021c0 <HAL_ADC_IRQHandler+0x330>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b0:	f043 0202 	orr.w	r2, r3, #2
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Note: In case of overrun, ADC conversion data is preserved until     */
      /*       flag OVR is reset.                                             */
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	4798      	blx	r3
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2210      	movs	r2, #16
 80021c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d019      	beq.n	8002206 <HAL_ADC_IRQHandler+0x376>
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d014      	beq.n	8002206 <HAL_ADC_IRQHandler+0x376>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ec:	f043 0208 	orr.w	r2, r3, #8
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021fc:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	4798      	blx	r3
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002206:	bf00      	nop
 8002208:	3720      	adds	r7, #32
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b0b6      	sub	sp, #216	; 0xd8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x22>
 800227e:	2302      	movs	r3, #2
 8002280:	e3d5      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x7ce>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fc4f 	bl	8001b32 <LL_ADC_REG_IsConversionOngoing>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	f040 83ba 	bne.w	8002a10 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b05      	cmp	r3, #5
 80022a2:	d824      	bhi.n	80022ee <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	3b02      	subs	r3, #2
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d81b      	bhi.n	80022e6 <HAL_ADC_ConfigChannel+0x86>
 80022ae:	a201      	add	r2, pc, #4	; (adr r2, 80022b4 <HAL_ADC_ConfigChannel+0x54>)
 80022b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b4:	080022c5 	.word	0x080022c5
 80022b8:	080022cd 	.word	0x080022cd
 80022bc:	080022d5 	.word	0x080022d5
 80022c0:	080022dd 	.word	0x080022dd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	220c      	movs	r2, #12
 80022c8:	605a      	str	r2, [r3, #4]
          break;
 80022ca:	e011      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	2212      	movs	r2, #18
 80022d0:	605a      	str	r2, [r3, #4]
          break;
 80022d2:	e00d      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	2218      	movs	r2, #24
 80022d8:	605a      	str	r2, [r3, #4]
          break;
 80022da:	e009      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022e2:	605a      	str	r2, [r3, #4]
          break;
 80022e4:	e004      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2206      	movs	r2, #6
 80022ea:	605a      	str	r2, [r3, #4]
          break;
 80022ec:	e000      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80022ee:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	f7ff fb28 	bl	8001952 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fc13 	bl	8001b32 <LL_ADC_REG_IsConversionOngoing>
 800230c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fc1f 	bl	8001b58 <LL_ADC_INJ_IsConversionOngoing>
 800231a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800231e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 81c1 	bne.w	80026aa <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002328:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800232c:	2b00      	cmp	r3, #0
 800232e:	f040 81bc 	bne.w	80026aa <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800233a:	d10f      	bne.n	800235c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6818      	ldr	r0, [r3, #0]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2200      	movs	r2, #0
 8002346:	4619      	mov	r1, r3
 8002348:	f7ff fb42 	bl	80019d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fad6 	bl	8001906 <LL_ADC_SetSamplingTimeCommonConfig>
 800235a:	e00e      	b.n	800237a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	6819      	ldr	r1, [r3, #0]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	461a      	mov	r2, r3
 800236a:	f7ff fb31 	bl	80019d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fac6 	bl	8001906 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	695a      	ldr	r2, [r3, #20]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	08db      	lsrs	r3, r3, #3
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	2b04      	cmp	r3, #4
 800239a:	d00a      	beq.n	80023b2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6818      	ldr	r0, [r3, #0]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	6919      	ldr	r1, [r3, #16]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023ac:	f7ff fa56 	bl	800185c <LL_ADC_SetOffset>
 80023b0:	e17b      	b.n	80026aa <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2100      	movs	r1, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fa73 	bl	80018a4 <LL_ADC_GetOffsetChannel>
 80023be:	4603      	mov	r3, r0
 80023c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10a      	bne.n	80023de <HAL_ADC_ConfigChannel+0x17e>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2100      	movs	r1, #0
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fa68 	bl	80018a4 <LL_ADC_GetOffsetChannel>
 80023d4:	4603      	mov	r3, r0
 80023d6:	0e9b      	lsrs	r3, r3, #26
 80023d8:	f003 021f 	and.w	r2, r3, #31
 80023dc:	e01e      	b.n	800241c <HAL_ADC_ConfigChannel+0x1bc>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fa5d 	bl	80018a4 <LL_ADC_GetOffsetChannel>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002400:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002404:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800240c:	2320      	movs	r3, #32
 800240e:	e004      	b.n	800241a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002410:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002414:	fab3 f383 	clz	r3, r3
 8002418:	b2db      	uxtb	r3, r3
 800241a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002424:	2b00      	cmp	r3, #0
 8002426:	d105      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x1d4>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	0e9b      	lsrs	r3, r3, #26
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	e018      	b.n	8002466 <HAL_ADC_ConfigChannel+0x206>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800244c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002450:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002458:	2320      	movs	r3, #32
 800245a:	e004      	b.n	8002466 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800245c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002466:	429a      	cmp	r2, r3
 8002468:	d106      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2200      	movs	r2, #0
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fa2c 	bl	80018d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2101      	movs	r1, #1
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fa10 	bl	80018a4 <LL_ADC_GetOffsetChannel>
 8002484:	4603      	mov	r3, r0
 8002486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10a      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x244>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2101      	movs	r1, #1
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fa05 	bl	80018a4 <LL_ADC_GetOffsetChannel>
 800249a:	4603      	mov	r3, r0
 800249c:	0e9b      	lsrs	r3, r3, #26
 800249e:	f003 021f 	and.w	r2, r3, #31
 80024a2:	e01e      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x282>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2101      	movs	r1, #1
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff f9fa 	bl	80018a4 <LL_ADC_GetOffsetChannel>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024ba:	fa93 f3a3 	rbit	r3, r3
 80024be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80024c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80024ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80024d2:	2320      	movs	r3, #32
 80024d4:	e004      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80024d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d105      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x29a>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	0e9b      	lsrs	r3, r3, #26
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	e018      	b.n	800252c <HAL_ADC_ConfigChannel+0x2cc>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800250e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002512:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002516:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800251e:	2320      	movs	r3, #32
 8002520:	e004      	b.n	800252c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002522:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800252c:	429a      	cmp	r2, r3
 800252e:	d106      	bne.n	800253e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2200      	movs	r2, #0
 8002536:	2101      	movs	r1, #1
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff f9c9 	bl	80018d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2102      	movs	r1, #2
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff f9ad 	bl	80018a4 <LL_ADC_GetOffsetChannel>
 800254a:	4603      	mov	r3, r0
 800254c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10a      	bne.n	800256a <HAL_ADC_ConfigChannel+0x30a>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2102      	movs	r1, #2
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff f9a2 	bl	80018a4 <LL_ADC_GetOffsetChannel>
 8002560:	4603      	mov	r3, r0
 8002562:	0e9b      	lsrs	r3, r3, #26
 8002564:	f003 021f 	and.w	r2, r3, #31
 8002568:	e01e      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x348>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2102      	movs	r1, #2
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff f997 	bl	80018a4 <LL_ADC_GetOffsetChannel>
 8002576:	4603      	mov	r3, r0
 8002578:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002588:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800258c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002590:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002598:	2320      	movs	r3, #32
 800259a:	e004      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800259c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025a0:	fab3 f383 	clz	r3, r3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d105      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x360>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	0e9b      	lsrs	r3, r3, #26
 80025ba:	f003 031f 	and.w	r3, r3, #31
 80025be:	e016      	b.n	80025ee <HAL_ADC_ConfigChannel+0x38e>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80025d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80025d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80025e0:	2320      	movs	r3, #32
 80025e2:	e004      	b.n	80025ee <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80025e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d106      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2200      	movs	r2, #0
 80025f8:	2102      	movs	r1, #2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff f968 	bl	80018d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2103      	movs	r1, #3
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff f94c 	bl	80018a4 <LL_ADC_GetOffsetChannel>
 800260c:	4603      	mov	r3, r0
 800260e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10a      	bne.n	800262c <HAL_ADC_ConfigChannel+0x3cc>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2103      	movs	r1, #3
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff f941 	bl	80018a4 <LL_ADC_GetOffsetChannel>
 8002622:	4603      	mov	r3, r0
 8002624:	0e9b      	lsrs	r3, r3, #26
 8002626:	f003 021f 	and.w	r2, r3, #31
 800262a:	e017      	b.n	800265c <HAL_ADC_ConfigChannel+0x3fc>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2103      	movs	r1, #3
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff f936 	bl	80018a4 <LL_ADC_GetOffsetChannel>
 8002638:	4603      	mov	r3, r0
 800263a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800263e:	fa93 f3a3 	rbit	r3, r3
 8002642:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002644:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002646:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800264e:	2320      	movs	r3, #32
 8002650:	e003      	b.n	800265a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002652:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002664:	2b00      	cmp	r3, #0
 8002666:	d105      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x414>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	0e9b      	lsrs	r3, r3, #26
 800266e:	f003 031f 	and.w	r3, r3, #31
 8002672:	e011      	b.n	8002698 <HAL_ADC_ConfigChannel+0x438>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800267c:	fa93 f3a3 	rbit	r3, r3
 8002680:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002682:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002684:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800268c:	2320      	movs	r3, #32
 800268e:	e003      	b.n	8002698 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002698:	429a      	cmp	r2, r3
 800269a:	d106      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2200      	movs	r2, #0
 80026a2:	2103      	movs	r1, #3
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff f913 	bl	80018d0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fa2c 	bl	8001b0c <LL_ADC_IsEnabled>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f040 8140 	bne.w	800293c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	6819      	ldr	r1, [r3, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	461a      	mov	r2, r3
 80026ca:	f7ff f9ad 	bl	8001a28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	4a8f      	ldr	r2, [pc, #572]	; (8002910 <HAL_ADC_ConfigChannel+0x6b0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	f040 8131 	bne.w	800293c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10b      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x4a2>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	0e9b      	lsrs	r3, r3, #26
 80026f0:	3301      	adds	r3, #1
 80026f2:	f003 031f 	and.w	r3, r3, #31
 80026f6:	2b09      	cmp	r3, #9
 80026f8:	bf94      	ite	ls
 80026fa:	2301      	movls	r3, #1
 80026fc:	2300      	movhi	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	e019      	b.n	8002736 <HAL_ADC_ConfigChannel+0x4d6>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002710:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002712:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002714:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800271a:	2320      	movs	r3, #32
 800271c:	e003      	b.n	8002726 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800271e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002720:	fab3 f383 	clz	r3, r3
 8002724:	b2db      	uxtb	r3, r3
 8002726:	3301      	adds	r3, #1
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	2b09      	cmp	r3, #9
 800272e:	bf94      	ite	ls
 8002730:	2301      	movls	r3, #1
 8002732:	2300      	movhi	r3, #0
 8002734:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002736:	2b00      	cmp	r3, #0
 8002738:	d079      	beq.n	800282e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002742:	2b00      	cmp	r3, #0
 8002744:	d107      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x4f6>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	0e9b      	lsrs	r3, r3, #26
 800274c:	3301      	adds	r3, #1
 800274e:	069b      	lsls	r3, r3, #26
 8002750:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002754:	e015      	b.n	8002782 <HAL_ADC_ConfigChannel+0x522>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002766:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800276e:	2320      	movs	r3, #32
 8002770:	e003      	b.n	800277a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	3301      	adds	r3, #1
 800277c:	069b      	lsls	r3, r3, #26
 800277e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x542>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	0e9b      	lsrs	r3, r3, #26
 8002794:	3301      	adds	r3, #1
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	e017      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x572>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80027b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80027b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80027ba:	2320      	movs	r3, #32
 80027bc:	e003      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80027be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	3301      	adds	r3, #1
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	2101      	movs	r1, #1
 80027ce:	fa01 f303 	lsl.w	r3, r1, r3
 80027d2:	ea42 0103 	orr.w	r1, r2, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10a      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x598>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	0e9b      	lsrs	r3, r3, #26
 80027e8:	3301      	adds	r3, #1
 80027ea:	f003 021f 	and.w	r2, r3, #31
 80027ee:	4613      	mov	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	051b      	lsls	r3, r3, #20
 80027f6:	e018      	b.n	800282a <HAL_ADC_ConfigChannel+0x5ca>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002808:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800280a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002810:	2320      	movs	r3, #32
 8002812:	e003      	b.n	800281c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002816:	fab3 f383 	clz	r3, r3
 800281a:	b2db      	uxtb	r3, r3
 800281c:	3301      	adds	r3, #1
 800281e:	f003 021f 	and.w	r2, r3, #31
 8002822:	4613      	mov	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4413      	add	r3, r2
 8002828:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800282a:	430b      	orrs	r3, r1
 800282c:	e081      	b.n	8002932 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002836:	2b00      	cmp	r3, #0
 8002838:	d107      	bne.n	800284a <HAL_ADC_ConfigChannel+0x5ea>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	0e9b      	lsrs	r3, r3, #26
 8002840:	3301      	adds	r3, #1
 8002842:	069b      	lsls	r3, r3, #26
 8002844:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002848:	e015      	b.n	8002876 <HAL_ADC_ConfigChannel+0x616>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800285c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002862:	2320      	movs	r3, #32
 8002864:	e003      	b.n	800286e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002868:	fab3 f383 	clz	r3, r3
 800286c:	b2db      	uxtb	r3, r3
 800286e:	3301      	adds	r3, #1
 8002870:	069b      	lsls	r3, r3, #26
 8002872:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x636>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	0e9b      	lsrs	r3, r3, #26
 8002888:	3301      	adds	r3, #1
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	2101      	movs	r1, #1
 8002890:	fa01 f303 	lsl.w	r3, r1, r3
 8002894:	e017      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x666>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	61fb      	str	r3, [r7, #28]
  return result;
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80028ae:	2320      	movs	r3, #32
 80028b0:	e003      	b.n	80028ba <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	fab3 f383 	clz	r3, r3
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	3301      	adds	r3, #1
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	2101      	movs	r1, #1
 80028c2:	fa01 f303 	lsl.w	r3, r1, r3
 80028c6:	ea42 0103 	orr.w	r1, r2, r3
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10d      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x692>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	0e9b      	lsrs	r3, r3, #26
 80028dc:	3301      	adds	r3, #1
 80028de:	f003 021f 	and.w	r2, r3, #31
 80028e2:	4613      	mov	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	4413      	add	r3, r2
 80028e8:	3b1e      	subs	r3, #30
 80028ea:	051b      	lsls	r3, r3, #20
 80028ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028f0:	e01e      	b.n	8002930 <HAL_ADC_ConfigChannel+0x6d0>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	613b      	str	r3, [r7, #16]
  return result;
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d104      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800290a:	2320      	movs	r3, #32
 800290c:	e006      	b.n	800291c <HAL_ADC_ConfigChannel+0x6bc>
 800290e:	bf00      	nop
 8002910:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	fab3 f383 	clz	r3, r3
 800291a:	b2db      	uxtb	r3, r3
 800291c:	3301      	adds	r3, #1
 800291e:	f003 021f 	and.w	r2, r3, #31
 8002922:	4613      	mov	r3, r2
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	4413      	add	r3, r2
 8002928:	3b1e      	subs	r3, #30
 800292a:	051b      	lsls	r3, r3, #20
 800292c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002930:	430b      	orrs	r3, r1
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	6892      	ldr	r2, [r2, #8]
 8002936:	4619      	mov	r1, r3
 8002938:	f7ff f84a 	bl	80019d0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b3d      	ldr	r3, [pc, #244]	; (8002a38 <HAL_ADC_ConfigChannel+0x7d8>)
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d06c      	beq.n	8002a22 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002948:	483c      	ldr	r0, [pc, #240]	; (8002a3c <HAL_ADC_ConfigChannel+0x7dc>)
 800294a:	f7fe ff79 	bl	8001840 <LL_ADC_GetCommonPathInternalCh>
 800294e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a3a      	ldr	r2, [pc, #232]	; (8002a40 <HAL_ADC_ConfigChannel+0x7e0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d127      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800295c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002960:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d121      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a35      	ldr	r2, [pc, #212]	; (8002a44 <HAL_ADC_ConfigChannel+0x7e4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d157      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002972:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002976:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800297a:	4619      	mov	r1, r3
 800297c:	482f      	ldr	r0, [pc, #188]	; (8002a3c <HAL_ADC_ConfigChannel+0x7dc>)
 800297e:	f7fe ff4c 	bl	800181a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002982:	4b31      	ldr	r3, [pc, #196]	; (8002a48 <HAL_ADC_ConfigChannel+0x7e8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	099b      	lsrs	r3, r3, #6
 8002988:	4a30      	ldr	r2, [pc, #192]	; (8002a4c <HAL_ADC_ConfigChannel+0x7ec>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	099b      	lsrs	r3, r3, #6
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	4613      	mov	r3, r2
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800299c:	e002      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f9      	bne.n	800299e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029aa:	e03a      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a27      	ldr	r2, [pc, #156]	; (8002a50 <HAL_ADC_ConfigChannel+0x7f0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d113      	bne.n	80029de <HAL_ADC_ConfigChannel+0x77e>
 80029b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10d      	bne.n	80029de <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a1f      	ldr	r2, [pc, #124]	; (8002a44 <HAL_ADC_ConfigChannel+0x7e4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d12a      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029d4:	4619      	mov	r1, r3
 80029d6:	4819      	ldr	r0, [pc, #100]	; (8002a3c <HAL_ADC_ConfigChannel+0x7dc>)
 80029d8:	f7fe ff1f 	bl	800181a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029dc:	e021      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a1c      	ldr	r2, [pc, #112]	; (8002a54 <HAL_ADC_ConfigChannel+0x7f4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d11c      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d116      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a12      	ldr	r2, [pc, #72]	; (8002a44 <HAL_ADC_ConfigChannel+0x7e4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d111      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a06:	4619      	mov	r1, r3
 8002a08:	480c      	ldr	r0, [pc, #48]	; (8002a3c <HAL_ADC_ConfigChannel+0x7dc>)
 8002a0a:	f7fe ff06 	bl	800181a <LL_ADC_SetCommonPathInternalCh>
 8002a0e:	e008      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a14:	f043 0220 	orr.w	r2, r3, #32
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002a2a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	37d8      	adds	r7, #216	; 0xd8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	80080000 	.word	0x80080000
 8002a3c:	50040300 	.word	0x50040300
 8002a40:	c7520000 	.word	0xc7520000
 8002a44:	50040000 	.word	0x50040000
 8002a48:	20000000 	.word	0x20000000
 8002a4c:	053e2d63 	.word	0x053e2d63
 8002a50:	cb840000 	.word	0xcb840000
 8002a54:	80000001 	.word	0x80000001

08002a58 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e11c      	b.n	8002d08 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d131      	bne.n	8002b3e <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a8c      	ldr	r2, [pc, #560]	; (8002d10 <HAL_CAN_Init+0x254>)
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a8c      	ldr	r2, [pc, #560]	; (8002d14 <HAL_CAN_Init+0x258>)
 8002ae4:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a8b      	ldr	r2, [pc, #556]	; (8002d18 <HAL_CAN_Init+0x25c>)
 8002aea:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a8b      	ldr	r2, [pc, #556]	; (8002d1c <HAL_CAN_Init+0x260>)
 8002af0:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a8a      	ldr	r2, [pc, #552]	; (8002d20 <HAL_CAN_Init+0x264>)
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a8a      	ldr	r2, [pc, #552]	; (8002d24 <HAL_CAN_Init+0x268>)
 8002afc:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a89      	ldr	r2, [pc, #548]	; (8002d28 <HAL_CAN_Init+0x26c>)
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a89      	ldr	r2, [pc, #548]	; (8002d2c <HAL_CAN_Init+0x270>)
 8002b08:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a88      	ldr	r2, [pc, #544]	; (8002d30 <HAL_CAN_Init+0x274>)
 8002b0e:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a88      	ldr	r2, [pc, #544]	; (8002d34 <HAL_CAN_Init+0x278>)
 8002b14:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a87      	ldr	r2, [pc, #540]	; (8002d38 <HAL_CAN_Init+0x27c>)
 8002b1a:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a87      	ldr	r2, [pc, #540]	; (8002d3c <HAL_CAN_Init+0x280>)
 8002b20:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a86      	ldr	r2, [pc, #536]	; (8002d40 <HAL_CAN_Init+0x284>)
 8002b26:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d102      	bne.n	8002b36 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a84      	ldr	r2, [pc, #528]	; (8002d44 <HAL_CAN_Init+0x288>)
 8002b34:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0202 	bic.w	r2, r2, #2
 8002b4c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b4e:	f7fe fe45 	bl	80017dc <HAL_GetTick>
 8002b52:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b54:	e012      	b.n	8002b7c <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b56:	f7fe fe41 	bl	80017dc <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b0a      	cmp	r3, #10
 8002b62:	d90b      	bls.n	8002b7c <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2205      	movs	r2, #5
 8002b74:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0c5      	b.n	8002d08 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1e5      	bne.n	8002b56 <HAL_CAN_Init+0x9a>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f042 0201 	orr.w	r2, r2, #1
 8002b98:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b9a:	f7fe fe1f 	bl	80017dc <HAL_GetTick>
 8002b9e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ba0:	e012      	b.n	8002bc8 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ba2:	f7fe fe1b 	bl	80017dc <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b0a      	cmp	r3, #10
 8002bae:	d90b      	bls.n	8002bc8 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2205      	movs	r2, #5
 8002bc0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e09f      	b.n	8002d08 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0e5      	beq.n	8002ba2 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	7e1b      	ldrb	r3, [r3, #24]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d108      	bne.n	8002bf0 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	e007      	b.n	8002c00 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	7e5b      	ldrb	r3, [r3, #25]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d108      	bne.n	8002c1a <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	e007      	b.n	8002c2a <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	7e9b      	ldrb	r3, [r3, #26]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d108      	bne.n	8002c44 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0220 	orr.w	r2, r2, #32
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	e007      	b.n	8002c54 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0220 	bic.w	r2, r2, #32
 8002c52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	7edb      	ldrb	r3, [r3, #27]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d108      	bne.n	8002c6e <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0210 	bic.w	r2, r2, #16
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	e007      	b.n	8002c7e <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0210 	orr.w	r2, r2, #16
 8002c7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	7f1b      	ldrb	r3, [r3, #28]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d108      	bne.n	8002c98 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0208 	orr.w	r2, r2, #8
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	e007      	b.n	8002ca8 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0208 	bic.w	r2, r2, #8
 8002ca6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7f5b      	ldrb	r3, [r3, #29]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d108      	bne.n	8002cc2 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0204 	orr.w	r2, r2, #4
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	e007      	b.n	8002cd2 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0204 	bic.w	r2, r2, #4
 8002cd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	ea42 0103 	orr.w	r1, r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	1e5a      	subs	r2, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	0800314b 	.word	0x0800314b
 8002d14:	0800315f 	.word	0x0800315f
 8002d18:	08003173 	.word	0x08003173
 8002d1c:	08003187 	.word	0x08003187
 8002d20:	080030d3 	.word	0x080030d3
 8002d24:	080030e7 	.word	0x080030e7
 8002d28:	080030fb 	.word	0x080030fb
 8002d2c:	0800310f 	.word	0x0800310f
 8002d30:	08003123 	.word	0x08003123
 8002d34:	08003137 	.word	0x08003137
 8002d38:	0800319b 	.word	0x0800319b
 8002d3c:	080031af 	.word	0x080031af
 8002d40:	080031c3 	.word	0x080031c3
 8002d44:	08000775 	.word	0x08000775

08002d48 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08a      	sub	sp, #40	; 0x28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 8083 	beq.w	8002e96 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d025      	beq.n	8002de6 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d004      	beq.n	8002db6 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	4798      	blx	r3
 8002db4:	e017      	b.n	8002de6 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d004      	beq.n	8002dca <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc8:	e00d      	b.n	8002de6 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d004      	beq.n	8002dde <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
 8002ddc:	e003      	b.n	8002de6 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d026      	beq.n	8002e3e <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002df8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d004      	beq.n	8002e0e <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	4798      	blx	r3
 8002e0c:	e017      	b.n	8002e3e <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d004      	beq.n	8002e22 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e20:	e00d      	b.n	8002e3e <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d004      	beq.n	8002e36 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
 8002e34:	e003      	b.n	8002e3e <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d026      	beq.n	8002e96 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d004      	beq.n	8002e66 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	4798      	blx	r3
 8002e64:	e017      	b.n	8002e96 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d004      	beq.n	8002e7a <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
 8002e78:	e00d      	b.n	8002e96 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d004      	beq.n	8002e8e <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8c:	e003      	b.n	8002e96 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00c      	beq.n	8002eba <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2210      	movs	r2, #16
 8002eb8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00c      	beq.n	8002ede <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d007      	beq.n	8002ede <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2208      	movs	r2, #8
 8002ed4:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 mesage pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00c      	beq.n	8002f22 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d007      	beq.n	8002f22 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2210      	movs	r2, #16
 8002f20:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00c      	beq.n	8002f46 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d007      	beq.n	8002f46 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2208      	movs	r2, #8
 8002f3c:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 mesage pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00c      	beq.n	8002f8a <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d007      	beq.n	8002f8a <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2210      	movs	r2, #16
 8002f80:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00c      	beq.n	8002fae <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d007      	beq.n	8002fae <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2208      	movs	r2, #8
 8002fa4:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d07b      	beq.n	80030b0 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d072      	beq.n	80030a8 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d008      	beq.n	8002fde <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	f043 0302 	orr.w	r3, r3, #2
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	f043 0304 	orr.w	r3, r3, #4
 8003014:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800301c:	2b00      	cmp	r3, #0
 800301e:	d043      	beq.n	80030a8 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003026:	2b00      	cmp	r3, #0
 8003028:	d03e      	beq.n	80030a8 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003030:	2b60      	cmp	r3, #96	; 0x60
 8003032:	d02b      	beq.n	800308c <HAL_CAN_IRQHandler+0x344>
 8003034:	2b60      	cmp	r3, #96	; 0x60
 8003036:	d82e      	bhi.n	8003096 <HAL_CAN_IRQHandler+0x34e>
 8003038:	2b50      	cmp	r3, #80	; 0x50
 800303a:	d022      	beq.n	8003082 <HAL_CAN_IRQHandler+0x33a>
 800303c:	2b50      	cmp	r3, #80	; 0x50
 800303e:	d82a      	bhi.n	8003096 <HAL_CAN_IRQHandler+0x34e>
 8003040:	2b40      	cmp	r3, #64	; 0x40
 8003042:	d019      	beq.n	8003078 <HAL_CAN_IRQHandler+0x330>
 8003044:	2b40      	cmp	r3, #64	; 0x40
 8003046:	d826      	bhi.n	8003096 <HAL_CAN_IRQHandler+0x34e>
 8003048:	2b30      	cmp	r3, #48	; 0x30
 800304a:	d010      	beq.n	800306e <HAL_CAN_IRQHandler+0x326>
 800304c:	2b30      	cmp	r3, #48	; 0x30
 800304e:	d822      	bhi.n	8003096 <HAL_CAN_IRQHandler+0x34e>
 8003050:	2b10      	cmp	r3, #16
 8003052:	d002      	beq.n	800305a <HAL_CAN_IRQHandler+0x312>
 8003054:	2b20      	cmp	r3, #32
 8003056:	d005      	beq.n	8003064 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003058:	e01d      	b.n	8003096 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	f043 0308 	orr.w	r3, r3, #8
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003062:	e019      	b.n	8003098 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	f043 0310 	orr.w	r3, r3, #16
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800306c:	e014      	b.n	8003098 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	f043 0320 	orr.w	r3, r3, #32
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003076:	e00f      	b.n	8003098 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003080:	e00a      	b.n	8003098 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800308a:	e005      	b.n	8003098 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003094:	e000      	b.n	8003098 <HAL_CAN_IRQHandler+0x350>
            break;
 8003096:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030a6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2204      	movs	r2, #4
 80030ae:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d009      	beq.n	80030ca <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80030ca:	bf00      	nop
 80030cc:	3728      	adds	r7, #40	; 0x28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <__NVIC_SetPriorityGrouping+0x44>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031f4:	4013      	ands	r3, r2
 80031f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800320a:	4a04      	ldr	r2, [pc, #16]	; (800321c <__NVIC_SetPriorityGrouping+0x44>)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	60d3      	str	r3, [r2, #12]
}
 8003210:	bf00      	nop
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	e000ed00 	.word	0xe000ed00

08003220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003224:	4b04      	ldr	r3, [pc, #16]	; (8003238 <__NVIC_GetPriorityGrouping+0x18>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	0a1b      	lsrs	r3, r3, #8
 800322a:	f003 0307 	and.w	r3, r3, #7
}
 800322e:	4618      	mov	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	e000ed00 	.word	0xe000ed00

0800323c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324a:	2b00      	cmp	r3, #0
 800324c:	db0b      	blt.n	8003266 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	f003 021f 	and.w	r2, r3, #31
 8003254:	4907      	ldr	r1, [pc, #28]	; (8003274 <__NVIC_EnableIRQ+0x38>)
 8003256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325a:	095b      	lsrs	r3, r3, #5
 800325c:	2001      	movs	r0, #1
 800325e:	fa00 f202 	lsl.w	r2, r0, r2
 8003262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	e000e100 	.word	0xe000e100

08003278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	6039      	str	r1, [r7, #0]
 8003282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003288:	2b00      	cmp	r3, #0
 800328a:	db0a      	blt.n	80032a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	b2da      	uxtb	r2, r3
 8003290:	490c      	ldr	r1, [pc, #48]	; (80032c4 <__NVIC_SetPriority+0x4c>)
 8003292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003296:	0112      	lsls	r2, r2, #4
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	440b      	add	r3, r1
 800329c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032a0:	e00a      	b.n	80032b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	4908      	ldr	r1, [pc, #32]	; (80032c8 <__NVIC_SetPriority+0x50>)
 80032a8:	79fb      	ldrb	r3, [r7, #7]
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	3b04      	subs	r3, #4
 80032b0:	0112      	lsls	r2, r2, #4
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	440b      	add	r3, r1
 80032b6:	761a      	strb	r2, [r3, #24]
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	e000e100 	.word	0xe000e100
 80032c8:	e000ed00 	.word	0xe000ed00

080032cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b089      	sub	sp, #36	; 0x24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f1c3 0307 	rsb	r3, r3, #7
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	bf28      	it	cs
 80032ea:	2304      	movcs	r3, #4
 80032ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	3304      	adds	r3, #4
 80032f2:	2b06      	cmp	r3, #6
 80032f4:	d902      	bls.n	80032fc <NVIC_EncodePriority+0x30>
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3b03      	subs	r3, #3
 80032fa:	e000      	b.n	80032fe <NVIC_EncodePriority+0x32>
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43da      	mvns	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	401a      	ands	r2, r3
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003314:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	fa01 f303 	lsl.w	r3, r1, r3
 800331e:	43d9      	mvns	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003324:	4313      	orrs	r3, r2
         );
}
 8003326:	4618      	mov	r0, r3
 8003328:	3724      	adds	r7, #36	; 0x24
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff ff4c 	bl	80031d8 <__NVIC_SetPriorityGrouping>
}
 8003340:	bf00      	nop
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
 8003354:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800335a:	f7ff ff61 	bl	8003220 <__NVIC_GetPriorityGrouping>
 800335e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	68b9      	ldr	r1, [r7, #8]
 8003364:	6978      	ldr	r0, [r7, #20]
 8003366:	f7ff ffb1 	bl	80032cc <NVIC_EncodePriority>
 800336a:	4602      	mov	r2, r0
 800336c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003370:	4611      	mov	r1, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff ff80 	bl	8003278 <__NVIC_SetPriority>
}
 8003378:	bf00      	nop
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800338a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff ff54 	bl	800323c <__NVIC_EnableIRQ>
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e054      	b.n	8003458 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	7f5b      	ldrb	r3, [r3, #29]
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d105      	bne.n	80033c4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fd fa56 	bl	8000870 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	791b      	ldrb	r3, [r3, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10c      	bne.n	80033ec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a22      	ldr	r2, [pc, #136]	; (8003460 <HAL_CRC_Init+0xc4>)
 80033d8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0218 	bic.w	r2, r2, #24
 80033e8:	609a      	str	r2, [r3, #8]
 80033ea:	e00c      	b.n	8003406 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6899      	ldr	r1, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	461a      	mov	r2, r3
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f834 	bl	8003464 <HAL_CRCEx_Polynomial_Set>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e028      	b.n	8003458 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	795b      	ldrb	r3, [r3, #5]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d105      	bne.n	800341a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003416:	611a      	str	r2, [r3, #16]
 8003418:	e004      	b.n	8003424 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6912      	ldr	r2, [r2, #16]
 8003422:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695a      	ldr	r2, [r3, #20]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699a      	ldr	r2, [r3, #24]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	04c11db7 	.word	0x04c11db7

08003464 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003474:	231f      	movs	r3, #31
 8003476:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003478:	bf00      	nop
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1e5a      	subs	r2, r3, #1
 800347e:	613a      	str	r2, [r7, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d009      	beq.n	8003498 <HAL_CRCEx_Polynomial_Set+0x34>
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f003 031f 	and.w	r3, r3, #31
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	fa22 f303 	lsr.w	r3, r2, r3
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_CRCEx_Polynomial_Set+0x16>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b18      	cmp	r3, #24
 800349c:	d846      	bhi.n	800352c <HAL_CRCEx_Polynomial_Set+0xc8>
 800349e:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80034a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a4:	08003533 	.word	0x08003533
 80034a8:	0800352d 	.word	0x0800352d
 80034ac:	0800352d 	.word	0x0800352d
 80034b0:	0800352d 	.word	0x0800352d
 80034b4:	0800352d 	.word	0x0800352d
 80034b8:	0800352d 	.word	0x0800352d
 80034bc:	0800352d 	.word	0x0800352d
 80034c0:	0800352d 	.word	0x0800352d
 80034c4:	08003521 	.word	0x08003521
 80034c8:	0800352d 	.word	0x0800352d
 80034cc:	0800352d 	.word	0x0800352d
 80034d0:	0800352d 	.word	0x0800352d
 80034d4:	0800352d 	.word	0x0800352d
 80034d8:	0800352d 	.word	0x0800352d
 80034dc:	0800352d 	.word	0x0800352d
 80034e0:	0800352d 	.word	0x0800352d
 80034e4:	08003515 	.word	0x08003515
 80034e8:	0800352d 	.word	0x0800352d
 80034ec:	0800352d 	.word	0x0800352d
 80034f0:	0800352d 	.word	0x0800352d
 80034f4:	0800352d 	.word	0x0800352d
 80034f8:	0800352d 	.word	0x0800352d
 80034fc:	0800352d 	.word	0x0800352d
 8003500:	0800352d 	.word	0x0800352d
 8003504:	08003509 	.word	0x08003509
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	2b06      	cmp	r3, #6
 800350c:	d913      	bls.n	8003536 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003512:	e010      	b.n	8003536 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b07      	cmp	r3, #7
 8003518:	d90f      	bls.n	800353a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800351e:	e00c      	b.n	800353a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	2b0f      	cmp	r3, #15
 8003524:	d90b      	bls.n	800353e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800352a:	e008      	b.n	800353e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	75fb      	strb	r3, [r7, #23]
      break;
 8003530:	e006      	b.n	8003540 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003532:	bf00      	nop
 8003534:	e004      	b.n	8003540 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003536:	bf00      	nop
 8003538:	e002      	b.n	8003540 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800353a:	bf00      	nop
 800353c:	e000      	b.n	8003540 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800353e:	bf00      	nop
  }
  if (status == HAL_OK)
 8003540:	7dfb      	ldrb	r3, [r7, #23]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10d      	bne.n	8003562 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f023 0118 	bic.w	r1, r3, #24
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	430a      	orrs	r2, r1
 8003560:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003562:	7dfb      	ldrb	r3, [r7, #23]
}
 8003564:	4618      	mov	r0, r3
 8003566:	371c      	adds	r7, #28
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e08d      	b.n	800369e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	4b47      	ldr	r3, [pc, #284]	; (80036a8 <HAL_DMA_Init+0x138>)
 800358a:	429a      	cmp	r2, r3
 800358c:	d80f      	bhi.n	80035ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	4b45      	ldr	r3, [pc, #276]	; (80036ac <HAL_DMA_Init+0x13c>)
 8003596:	4413      	add	r3, r2
 8003598:	4a45      	ldr	r2, [pc, #276]	; (80036b0 <HAL_DMA_Init+0x140>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	091b      	lsrs	r3, r3, #4
 80035a0:	009a      	lsls	r2, r3, #2
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a42      	ldr	r2, [pc, #264]	; (80036b4 <HAL_DMA_Init+0x144>)
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40
 80035ac:	e00e      	b.n	80035cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	4b40      	ldr	r3, [pc, #256]	; (80036b8 <HAL_DMA_Init+0x148>)
 80035b6:	4413      	add	r3, r2
 80035b8:	4a3d      	ldr	r2, [pc, #244]	; (80036b0 <HAL_DMA_Init+0x140>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	091b      	lsrs	r3, r3, #4
 80035c0:	009a      	lsls	r2, r3, #2
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a3c      	ldr	r2, [pc, #240]	; (80036bc <HAL_DMA_Init+0x14c>)
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80035e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80035f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003608:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f9b8 	bl	8003994 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800362c:	d102      	bne.n	8003634 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003648:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d010      	beq.n	8003674 <HAL_DMA_Init+0x104>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b04      	cmp	r3, #4
 8003658:	d80c      	bhi.n	8003674 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f9d8 	bl	8003a10 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	e008      	b.n	8003686 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40020407 	.word	0x40020407
 80036ac:	bffdfff8 	.word	0xbffdfff8
 80036b0:	cccccccd 	.word	0xcccccccd
 80036b4:	40020000 	.word	0x40020000
 80036b8:	bffdfbf8 	.word	0xbffdfbf8
 80036bc:	40020400 	.word	0x40020400

080036c0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d008      	beq.n	80036ea <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2204      	movs	r2, #4
 80036dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e040      	b.n	800376c <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 020e 	bic.w	r2, r2, #14
 80036f8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003704:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003708:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0201 	bic.w	r2, r2, #1
 8003718:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	f003 021c 	and.w	r2, r3, #28
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	2101      	movs	r1, #1
 8003728:	fa01 f202 	lsl.w	r2, r1, r2
 800372c:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003736:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00c      	beq.n	800375a <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800374e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003758:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800376a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800376c:	4618      	mov	r0, r3
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d005      	beq.n	800379c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2204      	movs	r2, #4
 8003794:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	73fb      	strb	r3, [r7, #15]
 800379a:	e047      	b.n	800382c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 020e 	bic.w	r2, r2, #14
 80037aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d0:	f003 021c 	and.w	r2, r3, #28
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	2101      	movs	r1, #1
 80037da:	fa01 f202 	lsl.w	r2, r1, r2
 80037de:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037e8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00c      	beq.n	800380c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003800:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800380a:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	4798      	blx	r3
    }
  }
  return status;
 800382c:	7bfb      	ldrb	r3, [r7, #15]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b084      	sub	sp, #16
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	f003 031c 	and.w	r3, r3, #28
 8003856:	2204      	movs	r2, #4
 8003858:	409a      	lsls	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4013      	ands	r3, r2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d026      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x7a>
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d021      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b00      	cmp	r3, #0
 8003878:	d107      	bne.n	800388a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0204 	bic.w	r2, r2, #4
 8003888:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388e:	f003 021c 	and.w	r2, r3, #28
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	2104      	movs	r1, #4
 8003898:	fa01 f202 	lsl.w	r2, r1, r2
 800389c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d071      	beq.n	800398a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80038ae:	e06c      	b.n	800398a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b4:	f003 031c 	and.w	r3, r3, #28
 80038b8:	2202      	movs	r2, #2
 80038ba:	409a      	lsls	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d02e      	beq.n	8003922 <HAL_DMA_IRQHandler+0xec>
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d029      	beq.n	8003922 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10b      	bne.n	80038f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 020a 	bic.w	r2, r2, #10
 80038ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f8:	f003 021c 	and.w	r2, r3, #28
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	2102      	movs	r1, #2
 8003902:	fa01 f202 	lsl.w	r2, r1, r2
 8003906:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	2b00      	cmp	r3, #0
 8003916:	d038      	beq.n	800398a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003920:	e033      	b.n	800398a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	f003 031c 	and.w	r3, r3, #28
 800392a:	2208      	movs	r2, #8
 800392c:	409a      	lsls	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4013      	ands	r3, r2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d02a      	beq.n	800398c <HAL_DMA_IRQHandler+0x156>
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d025      	beq.n	800398c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 020e 	bic.w	r2, r2, #14
 800394e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	f003 021c 	and.w	r2, r3, #28
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	2101      	movs	r1, #1
 800395e:	fa01 f202 	lsl.w	r2, r1, r2
 8003962:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397e:	2b00      	cmp	r3, #0
 8003980:	d004      	beq.n	800398c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800398a:	bf00      	nop
 800398c:	bf00      	nop
}
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	461a      	mov	r2, r3
 80039a2:	4b17      	ldr	r3, [pc, #92]	; (8003a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d80a      	bhi.n	80039be <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ac:	089b      	lsrs	r3, r3, #2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039b4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6493      	str	r3, [r2, #72]	; 0x48
 80039bc:	e007      	b.n	80039ce <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	089b      	lsrs	r3, r3, #2
 80039c4:	009a      	lsls	r2, r3, #2
 80039c6:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80039c8:	4413      	add	r3, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	3b08      	subs	r3, #8
 80039d6:	4a0c      	ldr	r2, [pc, #48]	; (8003a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80039d8:	fba2 2303 	umull	r2, r3, r2, r3
 80039dc:	091b      	lsrs	r3, r3, #4
 80039de:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80039e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f003 031f 	and.w	r3, r3, #31
 80039ec:	2201      	movs	r2, #1
 80039ee:	409a      	lsls	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039f4:	bf00      	nop
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	40020407 	.word	0x40020407
 8003a04:	4002081c 	.word	0x4002081c
 8003a08:	cccccccd 	.word	0xcccccccd
 8003a0c:	40020880 	.word	0x40020880

08003a10 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	461a      	mov	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a08      	ldr	r2, [pc, #32]	; (8003a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003a32:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003a44:	bf00      	nop
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	1000823f 	.word	0x1000823f
 8003a54:	40020940 	.word	0x40020940

08003a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a66:	e166      	b.n	8003d36 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	fa01 f303 	lsl.w	r3, r1, r3
 8003a74:	4013      	ands	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 8158 	beq.w	8003d30 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d00b      	beq.n	8003aa0 <HAL_GPIO_Init+0x48>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d007      	beq.n	8003aa0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a94:	2b11      	cmp	r3, #17
 8003a96:	d003      	beq.n	8003aa0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b12      	cmp	r3, #18
 8003a9e:	d130      	bne.n	8003b02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	2203      	movs	r2, #3
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	091b      	lsrs	r3, r3, #4
 8003aec:	f003 0201 	and.w	r2, r3, #1
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	43db      	mvns	r3, r3
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4013      	ands	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d003      	beq.n	8003b42 <HAL_GPIO_Init+0xea>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b12      	cmp	r3, #18
 8003b40:	d123      	bne.n	8003b8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	08da      	lsrs	r2, r3, #3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3208      	adds	r2, #8
 8003b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	220f      	movs	r2, #15
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4013      	ands	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	691a      	ldr	r2, [r3, #16]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	08da      	lsrs	r2, r3, #3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3208      	adds	r2, #8
 8003b84:	6939      	ldr	r1, [r7, #16]
 8003b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	2203      	movs	r2, #3
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f003 0203 	and.w	r2, r3, #3
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 80b2 	beq.w	8003d30 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bcc:	4b61      	ldr	r3, [pc, #388]	; (8003d54 <HAL_GPIO_Init+0x2fc>)
 8003bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd0:	4a60      	ldr	r2, [pc, #384]	; (8003d54 <HAL_GPIO_Init+0x2fc>)
 8003bd2:	f043 0301 	orr.w	r3, r3, #1
 8003bd6:	6613      	str	r3, [r2, #96]	; 0x60
 8003bd8:	4b5e      	ldr	r3, [pc, #376]	; (8003d54 <HAL_GPIO_Init+0x2fc>)
 8003bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003be4:	4a5c      	ldr	r2, [pc, #368]	; (8003d58 <HAL_GPIO_Init+0x300>)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	089b      	lsrs	r3, r3, #2
 8003bea:	3302      	adds	r3, #2
 8003bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	220f      	movs	r2, #15
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4013      	ands	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c0e:	d02b      	beq.n	8003c68 <HAL_GPIO_Init+0x210>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a52      	ldr	r2, [pc, #328]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d025      	beq.n	8003c64 <HAL_GPIO_Init+0x20c>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a51      	ldr	r2, [pc, #324]	; (8003d60 <HAL_GPIO_Init+0x308>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d01f      	beq.n	8003c60 <HAL_GPIO_Init+0x208>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a50      	ldr	r2, [pc, #320]	; (8003d64 <HAL_GPIO_Init+0x30c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d019      	beq.n	8003c5c <HAL_GPIO_Init+0x204>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a4f      	ldr	r2, [pc, #316]	; (8003d68 <HAL_GPIO_Init+0x310>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d013      	beq.n	8003c58 <HAL_GPIO_Init+0x200>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a4e      	ldr	r2, [pc, #312]	; (8003d6c <HAL_GPIO_Init+0x314>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d00d      	beq.n	8003c54 <HAL_GPIO_Init+0x1fc>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a4d      	ldr	r2, [pc, #308]	; (8003d70 <HAL_GPIO_Init+0x318>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d007      	beq.n	8003c50 <HAL_GPIO_Init+0x1f8>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a4c      	ldr	r2, [pc, #304]	; (8003d74 <HAL_GPIO_Init+0x31c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d101      	bne.n	8003c4c <HAL_GPIO_Init+0x1f4>
 8003c48:	2307      	movs	r3, #7
 8003c4a:	e00e      	b.n	8003c6a <HAL_GPIO_Init+0x212>
 8003c4c:	2308      	movs	r3, #8
 8003c4e:	e00c      	b.n	8003c6a <HAL_GPIO_Init+0x212>
 8003c50:	2306      	movs	r3, #6
 8003c52:	e00a      	b.n	8003c6a <HAL_GPIO_Init+0x212>
 8003c54:	2305      	movs	r3, #5
 8003c56:	e008      	b.n	8003c6a <HAL_GPIO_Init+0x212>
 8003c58:	2304      	movs	r3, #4
 8003c5a:	e006      	b.n	8003c6a <HAL_GPIO_Init+0x212>
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e004      	b.n	8003c6a <HAL_GPIO_Init+0x212>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e002      	b.n	8003c6a <HAL_GPIO_Init+0x212>
 8003c64:	2301      	movs	r3, #1
 8003c66:	e000      	b.n	8003c6a <HAL_GPIO_Init+0x212>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	f002 0203 	and.w	r2, r2, #3
 8003c70:	0092      	lsls	r2, r2, #2
 8003c72:	4093      	lsls	r3, r2
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c7a:	4937      	ldr	r1, [pc, #220]	; (8003d58 <HAL_GPIO_Init+0x300>)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	089b      	lsrs	r3, r3, #2
 8003c80:	3302      	adds	r3, #2
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c88:	4b3b      	ldr	r3, [pc, #236]	; (8003d78 <HAL_GPIO_Init+0x320>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	43db      	mvns	r3, r3
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4013      	ands	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cac:	4a32      	ldr	r2, [pc, #200]	; (8003d78 <HAL_GPIO_Init+0x320>)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003cb2:	4b31      	ldr	r3, [pc, #196]	; (8003d78 <HAL_GPIO_Init+0x320>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cd6:	4a28      	ldr	r2, [pc, #160]	; (8003d78 <HAL_GPIO_Init+0x320>)
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cdc:	4b26      	ldr	r3, [pc, #152]	; (8003d78 <HAL_GPIO_Init+0x320>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d00:	4a1d      	ldr	r2, [pc, #116]	; (8003d78 <HAL_GPIO_Init+0x320>)
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d06:	4b1c      	ldr	r3, [pc, #112]	; (8003d78 <HAL_GPIO_Init+0x320>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4013      	ands	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d2a:	4a13      	ldr	r2, [pc, #76]	; (8003d78 <HAL_GPIO_Init+0x320>)
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	3301      	adds	r3, #1
 8003d34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f47f ae91 	bne.w	8003a68 <HAL_GPIO_Init+0x10>
  }
}
 8003d46:	bf00      	nop
 8003d48:	bf00      	nop
 8003d4a:	371c      	adds	r7, #28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	40021000 	.word	0x40021000
 8003d58:	40010000 	.word	0x40010000
 8003d5c:	48000400 	.word	0x48000400
 8003d60:	48000800 	.word	0x48000800
 8003d64:	48000c00 	.word	0x48000c00
 8003d68:	48001000 	.word	0x48001000
 8003d6c:	48001400 	.word	0x48001400
 8003d70:	48001800 	.word	0x48001800
 8003d74:	48001c00 	.word	0x48001c00
 8003d78:	40010400 	.word	0x40010400

08003d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	807b      	strh	r3, [r7, #2]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d8c:	787b      	ldrb	r3, [r7, #1]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d92:	887a      	ldrh	r2, [r7, #2]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d98:	e002      	b.n	8003da0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d9a:	887a      	ldrh	r2, [r7, #2]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003db6:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003db8:	695a      	ldr	r2, [r3, #20]
 8003dba:	88fb      	ldrh	r3, [r7, #6]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d006      	beq.n	8003dd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dc2:	4a05      	ldr	r2, [pc, #20]	; (8003dd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dc4:	88fb      	ldrh	r3, [r7, #6]
 8003dc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 f806 	bl	8003ddc <HAL_GPIO_EXTI_Callback>
  }
}
 8003dd0:	bf00      	nop
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40010400 	.word	0x40010400

08003ddc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
	...

08003df4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e0a7      	b.n	8003f56 <HAL_I2C_Init+0x162>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d12c      	bne.n	8003e6c <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a50      	ldr	r2, [pc, #320]	; (8003f60 <HAL_I2C_Init+0x16c>)
 8003e1e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a50      	ldr	r2, [pc, #320]	; (8003f64 <HAL_I2C_Init+0x170>)
 8003e24:	651a      	str	r2, [r3, #80]	; 0x50
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a4f      	ldr	r2, [pc, #316]	; (8003f68 <HAL_I2C_Init+0x174>)
 8003e2a:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a4f      	ldr	r2, [pc, #316]	; (8003f6c <HAL_I2C_Init+0x178>)
 8003e30:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a4e      	ldr	r2, [pc, #312]	; (8003f70 <HAL_I2C_Init+0x17c>)
 8003e36:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a4e      	ldr	r2, [pc, #312]	; (8003f74 <HAL_I2C_Init+0x180>)
 8003e3c:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a4d      	ldr	r2, [pc, #308]	; (8003f78 <HAL_I2C_Init+0x184>)
 8003e42:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a4d      	ldr	r2, [pc, #308]	; (8003f7c <HAL_I2C_Init+0x188>)
 8003e48:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a4c      	ldr	r2, [pc, #304]	; (8003f80 <HAL_I2C_Init+0x18c>)
 8003e4e:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a4c      	ldr	r2, [pc, #304]	; (8003f84 <HAL_I2C_Init+0x190>)
 8003e54:	671a      	str	r2, [r3, #112]	; 0x70

    if (hi2c->MspInitCallback == NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d102      	bne.n	8003e64 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a49      	ldr	r2, [pc, #292]	; (8003f88 <HAL_I2C_Init+0x194>)
 8003e62:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2224      	movs	r2, #36	; 0x24
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0201 	bic.w	r2, r2, #1
 8003e82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ea0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d107      	bne.n	8003eba <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eb6:	609a      	str	r2, [r3, #8]
 8003eb8:	e006      	b.n	8003ec8 <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003ec6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d104      	bne.n	8003eda <HAL_I2C_Init+0xe6>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ed8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003efc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	ea42 0103 	orr.w	r1, r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	021a      	lsls	r2, r3, #8
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69d9      	ldr	r1, [r3, #28]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1a      	ldr	r2, [r3, #32]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	08003f8d 	.word	0x08003f8d
 8003f64:	08003fa1 	.word	0x08003fa1
 8003f68:	08003fb5 	.word	0x08003fb5
 8003f6c:	08003fc9 	.word	0x08003fc9
 8003f70:	08003ff9 	.word	0x08003ff9
 8003f74:	0800400d 	.word	0x0800400d
 8003f78:	08004021 	.word	0x08004021
 8003f7c:	08004035 	.word	0x08004035
 8003f80:	08004049 	.word	0x08004049
 8003f84:	08003fdd 	.word	0x08003fdd
 8003f88:	08000e25 	.word	0x08000e25

08003f8c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	70fb      	strb	r3, [r7, #3]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b20      	cmp	r3, #32
 8004070:	d138      	bne.n	80040e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800407c:	2302      	movs	r3, #2
 800407e:	e032      	b.n	80040e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2224      	movs	r2, #36	; 0x24
 800408c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0201 	bic.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6819      	ldr	r1, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	e000      	b.n	80040e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040e4:	2302      	movs	r3, #2
  }
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b085      	sub	sp, #20
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b20      	cmp	r3, #32
 8004106:	d139      	bne.n	800417c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800410e:	2b01      	cmp	r3, #1
 8004110:	d101      	bne.n	8004116 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004112:	2302      	movs	r3, #2
 8004114:	e033      	b.n	800417e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2224      	movs	r2, #36	; 0x24
 8004122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004144:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	021b      	lsls	r3, r3, #8
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4313      	orrs	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0201 	orr.w	r2, r2, #1
 8004166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	e000      	b.n	800417e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800417c:	2302      	movs	r3, #2
  }
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
	...

0800418c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004190:	4b0d      	ldr	r3, [pc, #52]	; (80041c8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800419c:	d102      	bne.n	80041a4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800419e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041a2:	e00b      	b.n	80041bc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80041a4:	4b08      	ldr	r3, [pc, #32]	; (80041c8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80041a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b2:	d102      	bne.n	80041ba <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80041b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041b8:	e000      	b.n	80041bc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80041ba:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80041bc:	4618      	mov	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40007000 	.word	0x40007000

080041cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d141      	bne.n	800425e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041da:	4b4b      	ldr	r3, [pc, #300]	; (8004308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e6:	d131      	bne.n	800424c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041e8:	4b47      	ldr	r3, [pc, #284]	; (8004308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ee:	4a46      	ldr	r2, [pc, #280]	; (8004308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041f8:	4b43      	ldr	r3, [pc, #268]	; (8004308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004200:	4a41      	ldr	r2, [pc, #260]	; (8004308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004206:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004208:	4b40      	ldr	r3, [pc, #256]	; (800430c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2232      	movs	r2, #50	; 0x32
 800420e:	fb02 f303 	mul.w	r3, r2, r3
 8004212:	4a3f      	ldr	r2, [pc, #252]	; (8004310 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004214:	fba2 2303 	umull	r2, r3, r2, r3
 8004218:	0c9b      	lsrs	r3, r3, #18
 800421a:	3301      	adds	r3, #1
 800421c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800421e:	e002      	b.n	8004226 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	3b01      	subs	r3, #1
 8004224:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004226:	4b38      	ldr	r3, [pc, #224]	; (8004308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004232:	d102      	bne.n	800423a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f2      	bne.n	8004220 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800423a:	4b33      	ldr	r3, [pc, #204]	; (8004308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004246:	d158      	bne.n	80042fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e057      	b.n	80042fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800424c:	4b2e      	ldr	r3, [pc, #184]	; (8004308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800424e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004252:	4a2d      	ldr	r2, [pc, #180]	; (8004308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004258:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800425c:	e04d      	b.n	80042fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004264:	d141      	bne.n	80042ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004266:	4b28      	ldr	r3, [pc, #160]	; (8004308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800426e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004272:	d131      	bne.n	80042d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004274:	4b24      	ldr	r3, [pc, #144]	; (8004308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800427a:	4a23      	ldr	r2, [pc, #140]	; (8004308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800427c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004280:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004284:	4b20      	ldr	r3, [pc, #128]	; (8004308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800428c:	4a1e      	ldr	r2, [pc, #120]	; (8004308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800428e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004292:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004294:	4b1d      	ldr	r3, [pc, #116]	; (800430c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2232      	movs	r2, #50	; 0x32
 800429a:	fb02 f303 	mul.w	r3, r2, r3
 800429e:	4a1c      	ldr	r2, [pc, #112]	; (8004310 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042a0:	fba2 2303 	umull	r2, r3, r2, r3
 80042a4:	0c9b      	lsrs	r3, r3, #18
 80042a6:	3301      	adds	r3, #1
 80042a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042aa:	e002      	b.n	80042b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042b2:	4b15      	ldr	r3, [pc, #84]	; (8004308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042be:	d102      	bne.n	80042c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f2      	bne.n	80042ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042c6:	4b10      	ldr	r3, [pc, #64]	; (8004308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d2:	d112      	bne.n	80042fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e011      	b.n	80042fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042de:	4a0a      	ldr	r2, [pc, #40]	; (8004308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80042e8:	e007      	b.n	80042fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042ea:	4b07      	ldr	r3, [pc, #28]	; (8004308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042f2:	4a05      	ldr	r2, [pc, #20]	; (8004308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042f8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	40007000 	.word	0x40007000
 800430c:	20000000 	.word	0x20000000
 8004310:	431bde83 	.word	0x431bde83

08004314 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b088      	sub	sp, #32
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d102      	bne.n	8004328 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	f000 bc16 	b.w	8004b54 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004328:	4ba0      	ldr	r3, [pc, #640]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 030c 	and.w	r3, r3, #12
 8004330:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004332:	4b9e      	ldr	r3, [pc, #632]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 80e4 	beq.w	8004512 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d007      	beq.n	8004360 <HAL_RCC_OscConfig+0x4c>
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	2b0c      	cmp	r3, #12
 8004354:	f040 808b 	bne.w	800446e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2b01      	cmp	r3, #1
 800435c:	f040 8087 	bne.w	800446e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004360:	4b92      	ldr	r3, [pc, #584]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_RCC_OscConfig+0x64>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e3ed      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1a      	ldr	r2, [r3, #32]
 800437c:	4b8b      	ldr	r3, [pc, #556]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b00      	cmp	r3, #0
 8004386:	d004      	beq.n	8004392 <HAL_RCC_OscConfig+0x7e>
 8004388:	4b88      	ldr	r3, [pc, #544]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004390:	e005      	b.n	800439e <HAL_RCC_OscConfig+0x8a>
 8004392:	4b86      	ldr	r3, [pc, #536]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 8004394:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800439e:	4293      	cmp	r3, r2
 80043a0:	d223      	bcs.n	80043ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fdfc 	bl	8004fa4 <RCC_SetFlashLatencyFromMSIRange>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e3ce      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043b6:	4b7d      	ldr	r3, [pc, #500]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a7c      	ldr	r2, [pc, #496]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 80043bc:	f043 0308 	orr.w	r3, r3, #8
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	4b7a      	ldr	r3, [pc, #488]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	4977      	ldr	r1, [pc, #476]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043d4:	4b75      	ldr	r3, [pc, #468]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	021b      	lsls	r3, r3, #8
 80043e2:	4972      	ldr	r1, [pc, #456]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	604b      	str	r3, [r1, #4]
 80043e8:	e025      	b.n	8004436 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043ea:	4b70      	ldr	r3, [pc, #448]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a6f      	ldr	r2, [pc, #444]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 80043f0:	f043 0308 	orr.w	r3, r3, #8
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	4b6d      	ldr	r3, [pc, #436]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	496a      	ldr	r1, [pc, #424]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 8004404:	4313      	orrs	r3, r2
 8004406:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004408:	4b68      	ldr	r3, [pc, #416]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	021b      	lsls	r3, r3, #8
 8004416:	4965      	ldr	r1, [pc, #404]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 8004418:	4313      	orrs	r3, r2
 800441a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d109      	bne.n	8004436 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fdbc 	bl	8004fa4 <RCC_SetFlashLatencyFromMSIRange>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e38e      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004436:	f000 fcbf 	bl	8004db8 <HAL_RCC_GetSysClockFreq>
 800443a:	4602      	mov	r2, r0
 800443c:	4b5b      	ldr	r3, [pc, #364]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	495a      	ldr	r1, [pc, #360]	; (80045b0 <HAL_RCC_OscConfig+0x29c>)
 8004448:	5ccb      	ldrb	r3, [r1, r3]
 800444a:	f003 031f 	and.w	r3, r3, #31
 800444e:	fa22 f303 	lsr.w	r3, r2, r3
 8004452:	4a58      	ldr	r2, [pc, #352]	; (80045b4 <HAL_RCC_OscConfig+0x2a0>)
 8004454:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004456:	4b58      	ldr	r3, [pc, #352]	; (80045b8 <HAL_RCC_OscConfig+0x2a4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f7fc fef8 	bl	8001250 <HAL_InitTick>
 8004460:	4603      	mov	r3, r0
 8004462:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d052      	beq.n	8004510 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800446a:	7bfb      	ldrb	r3, [r7, #15]
 800446c:	e372      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d032      	beq.n	80044dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004476:	4b4d      	ldr	r3, [pc, #308]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a4c      	ldr	r2, [pc, #304]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 800447c:	f043 0301 	orr.w	r3, r3, #1
 8004480:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004482:	f7fd f9ab 	bl	80017dc <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800448a:	f7fd f9a7 	bl	80017dc <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e35b      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800449c:	4b43      	ldr	r3, [pc, #268]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0f0      	beq.n	800448a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044a8:	4b40      	ldr	r3, [pc, #256]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a3f      	ldr	r2, [pc, #252]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 80044ae:	f043 0308 	orr.w	r3, r3, #8
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	4b3d      	ldr	r3, [pc, #244]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	493a      	ldr	r1, [pc, #232]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044c6:	4b39      	ldr	r3, [pc, #228]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	021b      	lsls	r3, r3, #8
 80044d4:	4935      	ldr	r1, [pc, #212]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	604b      	str	r3, [r1, #4]
 80044da:	e01a      	b.n	8004512 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044dc:	4b33      	ldr	r3, [pc, #204]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a32      	ldr	r2, [pc, #200]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 80044e2:	f023 0301 	bic.w	r3, r3, #1
 80044e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044e8:	f7fd f978 	bl	80017dc <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044f0:	f7fd f974 	bl	80017dc <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e328      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004502:	4b2a      	ldr	r3, [pc, #168]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1f0      	bne.n	80044f0 <HAL_RCC_OscConfig+0x1dc>
 800450e:	e000      	b.n	8004512 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004510:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d073      	beq.n	8004606 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	2b08      	cmp	r3, #8
 8004522:	d005      	beq.n	8004530 <HAL_RCC_OscConfig+0x21c>
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	2b0c      	cmp	r3, #12
 8004528:	d10e      	bne.n	8004548 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2b03      	cmp	r3, #3
 800452e:	d10b      	bne.n	8004548 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004530:	4b1e      	ldr	r3, [pc, #120]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d063      	beq.n	8004604 <HAL_RCC_OscConfig+0x2f0>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d15f      	bne.n	8004604 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e305      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004550:	d106      	bne.n	8004560 <HAL_RCC_OscConfig+0x24c>
 8004552:	4b16      	ldr	r3, [pc, #88]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a15      	ldr	r2, [pc, #84]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 8004558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	e01d      	b.n	800459c <HAL_RCC_OscConfig+0x288>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004568:	d10c      	bne.n	8004584 <HAL_RCC_OscConfig+0x270>
 800456a:	4b10      	ldr	r3, [pc, #64]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a0f      	ldr	r2, [pc, #60]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 8004570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	4b0d      	ldr	r3, [pc, #52]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a0c      	ldr	r2, [pc, #48]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 800457c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	e00b      	b.n	800459c <HAL_RCC_OscConfig+0x288>
 8004584:	4b09      	ldr	r3, [pc, #36]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a08      	ldr	r2, [pc, #32]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 800458a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	4b06      	ldr	r3, [pc, #24]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a05      	ldr	r2, [pc, #20]	; (80045ac <HAL_RCC_OscConfig+0x298>)
 8004596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800459a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d01b      	beq.n	80045dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a4:	f7fd f91a 	bl	80017dc <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045aa:	e010      	b.n	80045ce <HAL_RCC_OscConfig+0x2ba>
 80045ac:	40021000 	.word	0x40021000
 80045b0:	0800bcac 	.word	0x0800bcac
 80045b4:	20000000 	.word	0x20000000
 80045b8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045bc:	f7fd f90e 	bl	80017dc <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b64      	cmp	r3, #100	; 0x64
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e2c2      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045ce:	4baf      	ldr	r3, [pc, #700]	; (800488c <HAL_RCC_OscConfig+0x578>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0f0      	beq.n	80045bc <HAL_RCC_OscConfig+0x2a8>
 80045da:	e014      	b.n	8004606 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045dc:	f7fd f8fe 	bl	80017dc <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e4:	f7fd f8fa 	bl	80017dc <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b64      	cmp	r3, #100	; 0x64
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e2ae      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045f6:	4ba5      	ldr	r3, [pc, #660]	; (800488c <HAL_RCC_OscConfig+0x578>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f0      	bne.n	80045e4 <HAL_RCC_OscConfig+0x2d0>
 8004602:	e000      	b.n	8004606 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d060      	beq.n	80046d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	2b04      	cmp	r3, #4
 8004616:	d005      	beq.n	8004624 <HAL_RCC_OscConfig+0x310>
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	2b0c      	cmp	r3, #12
 800461c:	d119      	bne.n	8004652 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2b02      	cmp	r3, #2
 8004622:	d116      	bne.n	8004652 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004624:	4b99      	ldr	r3, [pc, #612]	; (800488c <HAL_RCC_OscConfig+0x578>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_RCC_OscConfig+0x328>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e28b      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800463c:	4b93      	ldr	r3, [pc, #588]	; (800488c <HAL_RCC_OscConfig+0x578>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	061b      	lsls	r3, r3, #24
 800464a:	4990      	ldr	r1, [pc, #576]	; (800488c <HAL_RCC_OscConfig+0x578>)
 800464c:	4313      	orrs	r3, r2
 800464e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004650:	e040      	b.n	80046d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d023      	beq.n	80046a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800465a:	4b8c      	ldr	r3, [pc, #560]	; (800488c <HAL_RCC_OscConfig+0x578>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a8b      	ldr	r2, [pc, #556]	; (800488c <HAL_RCC_OscConfig+0x578>)
 8004660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004666:	f7fd f8b9 	bl	80017dc <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800466e:	f7fd f8b5 	bl	80017dc <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e269      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004680:	4b82      	ldr	r3, [pc, #520]	; (800488c <HAL_RCC_OscConfig+0x578>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f0      	beq.n	800466e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468c:	4b7f      	ldr	r3, [pc, #508]	; (800488c <HAL_RCC_OscConfig+0x578>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	061b      	lsls	r3, r3, #24
 800469a:	497c      	ldr	r1, [pc, #496]	; (800488c <HAL_RCC_OscConfig+0x578>)
 800469c:	4313      	orrs	r3, r2
 800469e:	604b      	str	r3, [r1, #4]
 80046a0:	e018      	b.n	80046d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046a2:	4b7a      	ldr	r3, [pc, #488]	; (800488c <HAL_RCC_OscConfig+0x578>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a79      	ldr	r2, [pc, #484]	; (800488c <HAL_RCC_OscConfig+0x578>)
 80046a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ae:	f7fd f895 	bl	80017dc <HAL_GetTick>
 80046b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046b4:	e008      	b.n	80046c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046b6:	f7fd f891 	bl	80017dc <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e245      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046c8:	4b70      	ldr	r3, [pc, #448]	; (800488c <HAL_RCC_OscConfig+0x578>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1f0      	bne.n	80046b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d03c      	beq.n	800475a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01c      	beq.n	8004722 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046e8:	4b68      	ldr	r3, [pc, #416]	; (800488c <HAL_RCC_OscConfig+0x578>)
 80046ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ee:	4a67      	ldr	r2, [pc, #412]	; (800488c <HAL_RCC_OscConfig+0x578>)
 80046f0:	f043 0301 	orr.w	r3, r3, #1
 80046f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f8:	f7fd f870 	bl	80017dc <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004700:	f7fd f86c 	bl	80017dc <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e220      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004712:	4b5e      	ldr	r3, [pc, #376]	; (800488c <HAL_RCC_OscConfig+0x578>)
 8004714:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0ef      	beq.n	8004700 <HAL_RCC_OscConfig+0x3ec>
 8004720:	e01b      	b.n	800475a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004722:	4b5a      	ldr	r3, [pc, #360]	; (800488c <HAL_RCC_OscConfig+0x578>)
 8004724:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004728:	4a58      	ldr	r2, [pc, #352]	; (800488c <HAL_RCC_OscConfig+0x578>)
 800472a:	f023 0301 	bic.w	r3, r3, #1
 800472e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004732:	f7fd f853 	bl	80017dc <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004738:	e008      	b.n	800474c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800473a:	f7fd f84f 	bl	80017dc <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e203      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800474c:	4b4f      	ldr	r3, [pc, #316]	; (800488c <HAL_RCC_OscConfig+0x578>)
 800474e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1ef      	bne.n	800473a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 80a6 	beq.w	80048b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004768:	2300      	movs	r3, #0
 800476a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800476c:	4b47      	ldr	r3, [pc, #284]	; (800488c <HAL_RCC_OscConfig+0x578>)
 800476e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10d      	bne.n	8004794 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004778:	4b44      	ldr	r3, [pc, #272]	; (800488c <HAL_RCC_OscConfig+0x578>)
 800477a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477c:	4a43      	ldr	r2, [pc, #268]	; (800488c <HAL_RCC_OscConfig+0x578>)
 800477e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004782:	6593      	str	r3, [r2, #88]	; 0x58
 8004784:	4b41      	ldr	r3, [pc, #260]	; (800488c <HAL_RCC_OscConfig+0x578>)
 8004786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004790:	2301      	movs	r3, #1
 8004792:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004794:	4b3e      	ldr	r3, [pc, #248]	; (8004890 <HAL_RCC_OscConfig+0x57c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479c:	2b00      	cmp	r3, #0
 800479e:	d118      	bne.n	80047d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047a0:	4b3b      	ldr	r3, [pc, #236]	; (8004890 <HAL_RCC_OscConfig+0x57c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a3a      	ldr	r2, [pc, #232]	; (8004890 <HAL_RCC_OscConfig+0x57c>)
 80047a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ac:	f7fd f816 	bl	80017dc <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b4:	f7fd f812 	bl	80017dc <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e1c6      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047c6:	4b32      	ldr	r3, [pc, #200]	; (8004890 <HAL_RCC_OscConfig+0x57c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d108      	bne.n	80047ec <HAL_RCC_OscConfig+0x4d8>
 80047da:	4b2c      	ldr	r3, [pc, #176]	; (800488c <HAL_RCC_OscConfig+0x578>)
 80047dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e0:	4a2a      	ldr	r2, [pc, #168]	; (800488c <HAL_RCC_OscConfig+0x578>)
 80047e2:	f043 0301 	orr.w	r3, r3, #1
 80047e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047ea:	e024      	b.n	8004836 <HAL_RCC_OscConfig+0x522>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2b05      	cmp	r3, #5
 80047f2:	d110      	bne.n	8004816 <HAL_RCC_OscConfig+0x502>
 80047f4:	4b25      	ldr	r3, [pc, #148]	; (800488c <HAL_RCC_OscConfig+0x578>)
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fa:	4a24      	ldr	r2, [pc, #144]	; (800488c <HAL_RCC_OscConfig+0x578>)
 80047fc:	f043 0304 	orr.w	r3, r3, #4
 8004800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004804:	4b21      	ldr	r3, [pc, #132]	; (800488c <HAL_RCC_OscConfig+0x578>)
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480a:	4a20      	ldr	r2, [pc, #128]	; (800488c <HAL_RCC_OscConfig+0x578>)
 800480c:	f043 0301 	orr.w	r3, r3, #1
 8004810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004814:	e00f      	b.n	8004836 <HAL_RCC_OscConfig+0x522>
 8004816:	4b1d      	ldr	r3, [pc, #116]	; (800488c <HAL_RCC_OscConfig+0x578>)
 8004818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481c:	4a1b      	ldr	r2, [pc, #108]	; (800488c <HAL_RCC_OscConfig+0x578>)
 800481e:	f023 0301 	bic.w	r3, r3, #1
 8004822:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004826:	4b19      	ldr	r3, [pc, #100]	; (800488c <HAL_RCC_OscConfig+0x578>)
 8004828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482c:	4a17      	ldr	r2, [pc, #92]	; (800488c <HAL_RCC_OscConfig+0x578>)
 800482e:	f023 0304 	bic.w	r3, r3, #4
 8004832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d016      	beq.n	800486c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483e:	f7fc ffcd 	bl	80017dc <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004844:	e00a      	b.n	800485c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004846:	f7fc ffc9 	bl	80017dc <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	f241 3288 	movw	r2, #5000	; 0x1388
 8004854:	4293      	cmp	r3, r2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e17b      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800485c:	4b0b      	ldr	r3, [pc, #44]	; (800488c <HAL_RCC_OscConfig+0x578>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0ed      	beq.n	8004846 <HAL_RCC_OscConfig+0x532>
 800486a:	e01a      	b.n	80048a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486c:	f7fc ffb6 	bl	80017dc <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004872:	e00f      	b.n	8004894 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004874:	f7fc ffb2 	bl	80017dc <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004882:	4293      	cmp	r3, r2
 8004884:	d906      	bls.n	8004894 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e164      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
 800488a:	bf00      	nop
 800488c:	40021000 	.word	0x40021000
 8004890:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004894:	4ba8      	ldr	r3, [pc, #672]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1e8      	bne.n	8004874 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048a2:	7ffb      	ldrb	r3, [r7, #31]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d105      	bne.n	80048b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a8:	4ba3      	ldr	r3, [pc, #652]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 80048aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ac:	4aa2      	ldr	r2, [pc, #648]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 80048ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0320 	and.w	r3, r3, #32
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d03c      	beq.n	800493a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01c      	beq.n	8004902 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048c8:	4b9b      	ldr	r3, [pc, #620]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 80048ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048ce:	4a9a      	ldr	r2, [pc, #616]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 80048d0:	f043 0301 	orr.w	r3, r3, #1
 80048d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d8:	f7fc ff80 	bl	80017dc <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048e0:	f7fc ff7c 	bl	80017dc <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e130      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048f2:	4b91      	ldr	r3, [pc, #580]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 80048f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0ef      	beq.n	80048e0 <HAL_RCC_OscConfig+0x5cc>
 8004900:	e01b      	b.n	800493a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004902:	4b8d      	ldr	r3, [pc, #564]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004904:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004908:	4a8b      	ldr	r2, [pc, #556]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 800490a:	f023 0301 	bic.w	r3, r3, #1
 800490e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004912:	f7fc ff63 	bl	80017dc <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800491a:	f7fc ff5f 	bl	80017dc <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e113      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800492c:	4b82      	ldr	r3, [pc, #520]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 800492e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1ef      	bne.n	800491a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 8107 	beq.w	8004b52 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004948:	2b02      	cmp	r3, #2
 800494a:	f040 80cb 	bne.w	8004ae4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800494e:	4b7a      	ldr	r3, [pc, #488]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f003 0203 	and.w	r2, r3, #3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	429a      	cmp	r2, r3
 8004960:	d12c      	bne.n	80049bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496c:	3b01      	subs	r3, #1
 800496e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004970:	429a      	cmp	r2, r3
 8004972:	d123      	bne.n	80049bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004980:	429a      	cmp	r2, r3
 8004982:	d11b      	bne.n	80049bc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004990:	429a      	cmp	r2, r3
 8004992:	d113      	bne.n	80049bc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499e:	085b      	lsrs	r3, r3, #1
 80049a0:	3b01      	subs	r3, #1
 80049a2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d109      	bne.n	80049bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	085b      	lsrs	r3, r3, #1
 80049b4:	3b01      	subs	r3, #1
 80049b6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d06d      	beq.n	8004a98 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	2b0c      	cmp	r3, #12
 80049c0:	d068      	beq.n	8004a94 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80049c2:	4b5d      	ldr	r3, [pc, #372]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d105      	bne.n	80049da <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80049ce:	4b5a      	ldr	r3, [pc, #360]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e0ba      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049de:	4b56      	ldr	r3, [pc, #344]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a55      	ldr	r2, [pc, #340]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 80049e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049ea:	f7fc fef7 	bl	80017dc <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f2:	f7fc fef3 	bl	80017dc <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e0a7      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a04:	4b4c      	ldr	r3, [pc, #304]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1f0      	bne.n	80049f2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a10:	4b49      	ldr	r3, [pc, #292]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	4b49      	ldr	r3, [pc, #292]	; (8004b3c <HAL_RCC_OscConfig+0x828>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a20:	3a01      	subs	r2, #1
 8004a22:	0112      	lsls	r2, r2, #4
 8004a24:	4311      	orrs	r1, r2
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a2a:	0212      	lsls	r2, r2, #8
 8004a2c:	4311      	orrs	r1, r2
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a32:	0852      	lsrs	r2, r2, #1
 8004a34:	3a01      	subs	r2, #1
 8004a36:	0552      	lsls	r2, r2, #21
 8004a38:	4311      	orrs	r1, r2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a3e:	0852      	lsrs	r2, r2, #1
 8004a40:	3a01      	subs	r2, #1
 8004a42:	0652      	lsls	r2, r2, #25
 8004a44:	4311      	orrs	r1, r2
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a4a:	06d2      	lsls	r2, r2, #27
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	493a      	ldr	r1, [pc, #232]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a54:	4b38      	ldr	r3, [pc, #224]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a37      	ldr	r2, [pc, #220]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a60:	4b35      	ldr	r3, [pc, #212]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	4a34      	ldr	r2, [pc, #208]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a6c:	f7fc feb6 	bl	80017dc <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a74:	f7fc feb2 	bl	80017dc <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e066      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a86:	4b2c      	ldr	r3, [pc, #176]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0f0      	beq.n	8004a74 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a92:	e05e      	b.n	8004b52 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e05d      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a98:	4b27      	ldr	r3, [pc, #156]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d156      	bne.n	8004b52 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004aa4:	4b24      	ldr	r3, [pc, #144]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a23      	ldr	r2, [pc, #140]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ab0:	4b21      	ldr	r3, [pc, #132]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	4a20      	ldr	r2, [pc, #128]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004abc:	f7fc fe8e 	bl	80017dc <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac4:	f7fc fe8a 	bl	80017dc <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e03e      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ad6:	4b18      	ldr	r3, [pc, #96]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0f0      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x7b0>
 8004ae2:	e036      	b.n	8004b52 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2b0c      	cmp	r3, #12
 8004ae8:	d031      	beq.n	8004b4e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aea:	4b13      	ldr	r3, [pc, #76]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a12      	ldr	r2, [pc, #72]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004af0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004af4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004af6:	4b10      	ldr	r3, [pc, #64]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d105      	bne.n	8004b0e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004b02:	4b0d      	ldr	r3, [pc, #52]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	4a0c      	ldr	r2, [pc, #48]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004b08:	f023 0303 	bic.w	r3, r3, #3
 8004b0c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b0e:	4b0a      	ldr	r3, [pc, #40]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	4a09      	ldr	r2, [pc, #36]	; (8004b38 <HAL_RCC_OscConfig+0x824>)
 8004b14:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b1c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1e:	f7fc fe5d 	bl	80017dc <HAL_GetTick>
 8004b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b24:	e00c      	b.n	8004b40 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b26:	f7fc fe59 	bl	80017dc <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d905      	bls.n	8004b40 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e00d      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b40:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <HAL_RCC_OscConfig+0x848>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1ec      	bne.n	8004b26 <HAL_RCC_OscConfig+0x812>
 8004b4c:	e001      	b.n	8004b52 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3720      	adds	r7, #32
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40021000 	.word	0x40021000

08004b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e10f      	b.n	8004d98 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b78:	4b89      	ldr	r3, [pc, #548]	; (8004da0 <HAL_RCC_ClockConfig+0x240>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 030f 	and.w	r3, r3, #15
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d910      	bls.n	8004ba8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b86:	4b86      	ldr	r3, [pc, #536]	; (8004da0 <HAL_RCC_ClockConfig+0x240>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f023 020f 	bic.w	r2, r3, #15
 8004b8e:	4984      	ldr	r1, [pc, #528]	; (8004da0 <HAL_RCC_ClockConfig+0x240>)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b96:	4b82      	ldr	r3, [pc, #520]	; (8004da0 <HAL_RCC_ClockConfig+0x240>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d001      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e0f7      	b.n	8004d98 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 8089 	beq.w	8004cc8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d133      	bne.n	8004c26 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bbe:	4b79      	ldr	r3, [pc, #484]	; (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e0e4      	b.n	8004d98 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004bce:	f000 fa43 	bl	8005058 <RCC_GetSysClockFreqFromPLLSource>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4a74      	ldr	r2, [pc, #464]	; (8004da8 <HAL_RCC_ClockConfig+0x248>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d955      	bls.n	8004c86 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004bda:	4b72      	ldr	r3, [pc, #456]	; (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10a      	bne.n	8004bfc <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004be6:	4b6f      	ldr	r3, [pc, #444]	; (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bee:	4a6d      	ldr	r2, [pc, #436]	; (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bf4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004bf6:	2380      	movs	r3, #128	; 0x80
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	e044      	b.n	8004c86 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d03e      	beq.n	8004c86 <HAL_RCC_ClockConfig+0x126>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d13a      	bne.n	8004c86 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c10:	4b64      	ldr	r3, [pc, #400]	; (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c18:	4a62      	ldr	r2, [pc, #392]	; (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c1e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c20:	2380      	movs	r3, #128	; 0x80
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	e02f      	b.n	8004c86 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d107      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c2e:	4b5d      	ldr	r3, [pc, #372]	; (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d115      	bne.n	8004c66 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e0ac      	b.n	8004d98 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d107      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c46:	4b57      	ldr	r3, [pc, #348]	; (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d109      	bne.n	8004c66 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e0a0      	b.n	8004d98 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c56:	4b53      	ldr	r3, [pc, #332]	; (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e098      	b.n	8004d98 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004c66:	f000 f8a7 	bl	8004db8 <HAL_RCC_GetSysClockFreq>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	4a4e      	ldr	r2, [pc, #312]	; (8004da8 <HAL_RCC_ClockConfig+0x248>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d909      	bls.n	8004c86 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c72:	4b4c      	ldr	r3, [pc, #304]	; (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c7a:	4a4a      	ldr	r2, [pc, #296]	; (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c80:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004c82:	2380      	movs	r3, #128	; 0x80
 8004c84:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c86:	4b47      	ldr	r3, [pc, #284]	; (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f023 0203 	bic.w	r2, r3, #3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	4944      	ldr	r1, [pc, #272]	; (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c98:	f7fc fda0 	bl	80017dc <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9e:	e00a      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca0:	f7fc fd9c 	bl	80017dc <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e070      	b.n	8004d98 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb6:	4b3b      	ldr	r3, [pc, #236]	; (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 020c 	and.w	r2, r3, #12
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d1eb      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d009      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd4:	4b33      	ldr	r3, [pc, #204]	; (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	4930      	ldr	r1, [pc, #192]	; (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	608b      	str	r3, [r1, #8]
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	2b80      	cmp	r3, #128	; 0x80
 8004cec:	d105      	bne.n	8004cfa <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004cee:	4b2d      	ldr	r3, [pc, #180]	; (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	4a2c      	ldr	r2, [pc, #176]	; (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004cf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cf8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cfa:	4b29      	ldr	r3, [pc, #164]	; (8004da0 <HAL_RCC_ClockConfig+0x240>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d210      	bcs.n	8004d2a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d08:	4b25      	ldr	r3, [pc, #148]	; (8004da0 <HAL_RCC_ClockConfig+0x240>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f023 020f 	bic.w	r2, r3, #15
 8004d10:	4923      	ldr	r1, [pc, #140]	; (8004da0 <HAL_RCC_ClockConfig+0x240>)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d18:	4b21      	ldr	r3, [pc, #132]	; (8004da0 <HAL_RCC_ClockConfig+0x240>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 030f 	and.w	r3, r3, #15
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d001      	beq.n	8004d2a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e036      	b.n	8004d98 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0304 	and.w	r3, r3, #4
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d008      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d36:	4b1b      	ldr	r3, [pc, #108]	; (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	4918      	ldr	r1, [pc, #96]	; (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0308 	and.w	r3, r3, #8
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d009      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d54:	4b13      	ldr	r3, [pc, #76]	; (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	4910      	ldr	r1, [pc, #64]	; (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d68:	f000 f826 	bl	8004db8 <HAL_RCC_GetSysClockFreq>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	4b0d      	ldr	r3, [pc, #52]	; (8004da4 <HAL_RCC_ClockConfig+0x244>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	091b      	lsrs	r3, r3, #4
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	490c      	ldr	r1, [pc, #48]	; (8004dac <HAL_RCC_ClockConfig+0x24c>)
 8004d7a:	5ccb      	ldrb	r3, [r1, r3]
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
 8004d84:	4a0a      	ldr	r2, [pc, #40]	; (8004db0 <HAL_RCC_ClockConfig+0x250>)
 8004d86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d88:	4b0a      	ldr	r3, [pc, #40]	; (8004db4 <HAL_RCC_ClockConfig+0x254>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fc fa5f 	bl	8001250 <HAL_InitTick>
 8004d92:	4603      	mov	r3, r0
 8004d94:	73fb      	strb	r3, [r7, #15]

  return status;
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40022000 	.word	0x40022000
 8004da4:	40021000 	.word	0x40021000
 8004da8:	04c4b400 	.word	0x04c4b400
 8004dac:	0800bcac 	.word	0x0800bcac
 8004db0:	20000000 	.word	0x20000000
 8004db4:	20000004 	.word	0x20000004

08004db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b089      	sub	sp, #36	; 0x24
 8004dbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61fb      	str	r3, [r7, #28]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dc6:	4b3e      	ldr	r3, [pc, #248]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 030c 	and.w	r3, r3, #12
 8004dce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dd0:	4b3b      	ldr	r3, [pc, #236]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0303 	and.w	r3, r3, #3
 8004dd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <HAL_RCC_GetSysClockFreq+0x34>
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	2b0c      	cmp	r3, #12
 8004de4:	d121      	bne.n	8004e2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d11e      	bne.n	8004e2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004dec:	4b34      	ldr	r3, [pc, #208]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d107      	bne.n	8004e08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004df8:	4b31      	ldr	r3, [pc, #196]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dfe:	0a1b      	lsrs	r3, r3, #8
 8004e00:	f003 030f 	and.w	r3, r3, #15
 8004e04:	61fb      	str	r3, [r7, #28]
 8004e06:	e005      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e08:	4b2d      	ldr	r3, [pc, #180]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	091b      	lsrs	r3, r3, #4
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e14:	4a2b      	ldr	r2, [pc, #172]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10d      	bne.n	8004e40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e28:	e00a      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d102      	bne.n	8004e36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e30:	4b25      	ldr	r3, [pc, #148]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e32:	61bb      	str	r3, [r7, #24]
 8004e34:	e004      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d101      	bne.n	8004e40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e3c:	4b23      	ldr	r3, [pc, #140]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8004e3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	2b0c      	cmp	r3, #12
 8004e44:	d134      	bne.n	8004eb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e46:	4b1e      	ldr	r3, [pc, #120]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f003 0303 	and.w	r3, r3, #3
 8004e4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d003      	beq.n	8004e5e <HAL_RCC_GetSysClockFreq+0xa6>
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d003      	beq.n	8004e64 <HAL_RCC_GetSysClockFreq+0xac>
 8004e5c:	e005      	b.n	8004e6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e5e:	4b1a      	ldr	r3, [pc, #104]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e60:	617b      	str	r3, [r7, #20]
      break;
 8004e62:	e005      	b.n	8004e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e64:	4b19      	ldr	r3, [pc, #100]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8004e66:	617b      	str	r3, [r7, #20]
      break;
 8004e68:	e002      	b.n	8004e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	617b      	str	r3, [r7, #20]
      break;
 8004e6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e70:	4b13      	ldr	r3, [pc, #76]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e7e:	4b10      	ldr	r3, [pc, #64]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	fb02 f203 	mul.w	r2, r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e96:	4b0a      	ldr	r3, [pc, #40]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	0e5b      	lsrs	r3, r3, #25
 8004e9c:	f003 0303 	and.w	r3, r3, #3
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004eb0:	69bb      	ldr	r3, [r7, #24]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3724      	adds	r7, #36	; 0x24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	0800bcc4 	.word	0x0800bcc4
 8004ec8:	00f42400 	.word	0x00f42400
 8004ecc:	007a1200 	.word	0x007a1200

08004ed0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ed4:	4b03      	ldr	r3, [pc, #12]	; (8004ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	20000000 	.word	0x20000000

08004ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004eec:	f7ff fff0 	bl	8004ed0 <HAL_RCC_GetHCLKFreq>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	4b06      	ldr	r3, [pc, #24]	; (8004f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	0a1b      	lsrs	r3, r3, #8
 8004ef8:	f003 0307 	and.w	r3, r3, #7
 8004efc:	4904      	ldr	r1, [pc, #16]	; (8004f10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004efe:	5ccb      	ldrb	r3, [r1, r3]
 8004f00:	f003 031f 	and.w	r3, r3, #31
 8004f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	0800bcbc 	.word	0x0800bcbc

08004f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f18:	f7ff ffda 	bl	8004ed0 <HAL_RCC_GetHCLKFreq>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	0adb      	lsrs	r3, r3, #11
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	4904      	ldr	r1, [pc, #16]	; (8004f3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f2a:	5ccb      	ldrb	r3, [r1, r3]
 8004f2c:	f003 031f 	and.w	r3, r3, #31
 8004f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	0800bcbc 	.word	0x0800bcbc

08004f40 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	220f      	movs	r2, #15
 8004f4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004f50:	4b12      	ldr	r3, [pc, #72]	; (8004f9c <HAL_RCC_GetClockConfig+0x5c>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f003 0203 	and.w	r2, r3, #3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004f5c:	4b0f      	ldr	r3, [pc, #60]	; (8004f9c <HAL_RCC_GetClockConfig+0x5c>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004f68:	4b0c      	ldr	r3, [pc, #48]	; (8004f9c <HAL_RCC_GetClockConfig+0x5c>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004f74:	4b09      	ldr	r3, [pc, #36]	; (8004f9c <HAL_RCC_GetClockConfig+0x5c>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	08db      	lsrs	r3, r3, #3
 8004f7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004f82:	4b07      	ldr	r3, [pc, #28]	; (8004fa0 <HAL_RCC_GetClockConfig+0x60>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 020f 	and.w	r2, r3, #15
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	601a      	str	r2, [r3, #0]
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	40022000 	.word	0x40022000

08004fa4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004fac:	2300      	movs	r3, #0
 8004fae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004fb0:	4b27      	ldr	r3, [pc, #156]	; (8005050 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004fbc:	f7ff f8e6 	bl	800418c <HAL_PWREx_GetVoltageRange>
 8004fc0:	6178      	str	r0, [r7, #20]
 8004fc2:	e014      	b.n	8004fee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fc4:	4b22      	ldr	r3, [pc, #136]	; (8005050 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc8:	4a21      	ldr	r2, [pc, #132]	; (8005050 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fce:	6593      	str	r3, [r2, #88]	; 0x58
 8004fd0:	4b1f      	ldr	r3, [pc, #124]	; (8005050 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004fdc:	f7ff f8d6 	bl	800418c <HAL_PWREx_GetVoltageRange>
 8004fe0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004fe2:	4b1b      	ldr	r3, [pc, #108]	; (8005050 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe6:	4a1a      	ldr	r2, [pc, #104]	; (8005050 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ff4:	d10b      	bne.n	800500e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b80      	cmp	r3, #128	; 0x80
 8004ffa:	d913      	bls.n	8005024 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2ba0      	cmp	r3, #160	; 0xa0
 8005000:	d902      	bls.n	8005008 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005002:	2302      	movs	r3, #2
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	e00d      	b.n	8005024 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005008:	2301      	movs	r3, #1
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	e00a      	b.n	8005024 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b7f      	cmp	r3, #127	; 0x7f
 8005012:	d902      	bls.n	800501a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005014:	2302      	movs	r3, #2
 8005016:	613b      	str	r3, [r7, #16]
 8005018:	e004      	b.n	8005024 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b70      	cmp	r3, #112	; 0x70
 800501e:	d101      	bne.n	8005024 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005020:	2301      	movs	r3, #1
 8005022:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005024:	4b0b      	ldr	r3, [pc, #44]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f023 020f 	bic.w	r2, r3, #15
 800502c:	4909      	ldr	r1, [pc, #36]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005034:	4b07      	ldr	r3, [pc, #28]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	429a      	cmp	r2, r3
 8005040:	d001      	beq.n	8005046 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40021000 	.word	0x40021000
 8005054:	40022000 	.word	0x40022000

08005058 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8005062:	4b2d      	ldr	r3, [pc, #180]	; (8005118 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	2b01      	cmp	r3, #1
 800506c:	d118      	bne.n	80050a0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800506e:	4b2a      	ldr	r3, [pc, #168]	; (8005118 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d107      	bne.n	800508a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800507a:	4b27      	ldr	r3, [pc, #156]	; (8005118 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800507c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005080:	0a1b      	lsrs	r3, r3, #8
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	e005      	b.n	8005096 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800508a:	4b23      	ldr	r3, [pc, #140]	; (8005118 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	091b      	lsrs	r3, r3, #4
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005096:	4a21      	ldr	r2, [pc, #132]	; (800511c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800509e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050a0:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d003      	beq.n	80050b8 <RCC_GetSysClockFreqFromPLLSource+0x60>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	d003      	beq.n	80050be <RCC_GetSysClockFreqFromPLLSource+0x66>
 80050b6:	e005      	b.n	80050c4 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80050b8:	4b19      	ldr	r3, [pc, #100]	; (8005120 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80050ba:	613b      	str	r3, [r7, #16]
    break;
 80050bc:	e005      	b.n	80050ca <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80050be:	4b19      	ldr	r3, [pc, #100]	; (8005124 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80050c0:	613b      	str	r3, [r7, #16]
    break;
 80050c2:	e002      	b.n	80050ca <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	613b      	str	r3, [r7, #16]
    break;
 80050c8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050ca:	4b13      	ldr	r3, [pc, #76]	; (8005118 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	091b      	lsrs	r3, r3, #4
 80050d0:	f003 030f 	and.w	r3, r3, #15
 80050d4:	3301      	adds	r3, #1
 80050d6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80050d8:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	0a1b      	lsrs	r3, r3, #8
 80050de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	fb02 f203 	mul.w	r2, r2, r3
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ee:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050f0:	4b09      	ldr	r3, [pc, #36]	; (8005118 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	0e5b      	lsrs	r3, r3, #25
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	3301      	adds	r3, #1
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	fbb2 f3f3 	udiv	r3, r2, r3
 8005108:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800510a:	683b      	ldr	r3, [r7, #0]
}
 800510c:	4618      	mov	r0, r3
 800510e:	371c      	adds	r7, #28
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	40021000 	.word	0x40021000
 800511c:	0800bcc4 	.word	0x0800bcc4
 8005120:	00f42400 	.word	0x00f42400
 8005124:	007a1200 	.word	0x007a1200

08005128 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005130:	2300      	movs	r3, #0
 8005132:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005134:	2300      	movs	r3, #0
 8005136:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005140:	2b00      	cmp	r3, #0
 8005142:	d040      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005148:	2b80      	cmp	r3, #128	; 0x80
 800514a:	d02a      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800514c:	2b80      	cmp	r3, #128	; 0x80
 800514e:	d825      	bhi.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005150:	2b60      	cmp	r3, #96	; 0x60
 8005152:	d026      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005154:	2b60      	cmp	r3, #96	; 0x60
 8005156:	d821      	bhi.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005158:	2b40      	cmp	r3, #64	; 0x40
 800515a:	d006      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800515c:	2b40      	cmp	r3, #64	; 0x40
 800515e:	d81d      	bhi.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005160:	2b00      	cmp	r3, #0
 8005162:	d009      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005164:	2b20      	cmp	r3, #32
 8005166:	d010      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005168:	e018      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800516a:	4b89      	ldr	r3, [pc, #548]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	4a88      	ldr	r2, [pc, #544]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005174:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005176:	e015      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3304      	adds	r3, #4
 800517c:	2100      	movs	r1, #0
 800517e:	4618      	mov	r0, r3
 8005180:	f000 fb62 	bl	8005848 <RCCEx_PLLSAI1_Config>
 8005184:	4603      	mov	r3, r0
 8005186:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005188:	e00c      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	3320      	adds	r3, #32
 800518e:	2100      	movs	r1, #0
 8005190:	4618      	mov	r0, r3
 8005192:	f000 fc4d 	bl	8005a30 <RCCEx_PLLSAI2_Config>
 8005196:	4603      	mov	r3, r0
 8005198:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800519a:	e003      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	74fb      	strb	r3, [r7, #19]
      break;
 80051a0:	e000      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80051a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051a4:	7cfb      	ldrb	r3, [r7, #19]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10b      	bne.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051aa:	4b79      	ldr	r3, [pc, #484]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051b0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051b8:	4975      	ldr	r1, [pc, #468]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80051c0:	e001      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c2:	7cfb      	ldrb	r3, [r7, #19]
 80051c4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d047      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051da:	d030      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80051dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e0:	d82a      	bhi.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051e6:	d02a      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80051e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051ec:	d824      	bhi.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051f2:	d008      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80051f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051f8:	d81e      	bhi.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80051fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005202:	d010      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005204:	e018      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005206:	4b62      	ldr	r3, [pc, #392]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	4a61      	ldr	r2, [pc, #388]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800520c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005210:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005212:	e015      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3304      	adds	r3, #4
 8005218:	2100      	movs	r1, #0
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fb14 	bl	8005848 <RCCEx_PLLSAI1_Config>
 8005220:	4603      	mov	r3, r0
 8005222:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005224:	e00c      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3320      	adds	r3, #32
 800522a:	2100      	movs	r1, #0
 800522c:	4618      	mov	r0, r3
 800522e:	f000 fbff 	bl	8005a30 <RCCEx_PLLSAI2_Config>
 8005232:	4603      	mov	r3, r0
 8005234:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005236:	e003      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	74fb      	strb	r3, [r7, #19]
      break;
 800523c:	e000      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800523e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005240:	7cfb      	ldrb	r3, [r7, #19]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10b      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005246:	4b52      	ldr	r3, [pc, #328]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005248:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800524c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005254:	494e      	ldr	r1, [pc, #312]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800525c:	e001      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525e:	7cfb      	ldrb	r3, [r7, #19]
 8005260:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 809f 	beq.w	80053ae <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005270:	2300      	movs	r3, #0
 8005272:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005274:	4b46      	ldr	r3, [pc, #280]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005284:	2300      	movs	r3, #0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00d      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800528a:	4b41      	ldr	r3, [pc, #260]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800528c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528e:	4a40      	ldr	r2, [pc, #256]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005294:	6593      	str	r3, [r2, #88]	; 0x58
 8005296:	4b3e      	ldr	r3, [pc, #248]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529e:	60bb      	str	r3, [r7, #8]
 80052a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052a2:	2301      	movs	r3, #1
 80052a4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052a6:	4b3b      	ldr	r3, [pc, #236]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a3a      	ldr	r2, [pc, #232]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80052ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052b2:	f7fc fa93 	bl	80017dc <HAL_GetTick>
 80052b6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052b8:	e009      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ba:	f7fc fa8f 	bl	80017dc <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d902      	bls.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	74fb      	strb	r3, [r7, #19]
        break;
 80052cc:	e005      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052ce:	4b31      	ldr	r3, [pc, #196]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0ef      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80052da:	7cfb      	ldrb	r3, [r7, #19]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d15b      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052e0:	4b2b      	ldr	r3, [pc, #172]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ea:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d01f      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d019      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052fe:	4b24      	ldr	r3, [pc, #144]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005308:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800530a:	4b21      	ldr	r3, [pc, #132]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800530c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005310:	4a1f      	ldr	r2, [pc, #124]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005316:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800531a:	4b1d      	ldr	r3, [pc, #116]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800531c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005320:	4a1b      	ldr	r2, [pc, #108]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005326:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800532a:	4a19      	ldr	r2, [pc, #100]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	d016      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533c:	f7fc fa4e 	bl	80017dc <HAL_GetTick>
 8005340:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005342:	e00b      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005344:	f7fc fa4a 	bl	80017dc <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005352:	4293      	cmp	r3, r2
 8005354:	d902      	bls.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	74fb      	strb	r3, [r7, #19]
            break;
 800535a:	e006      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800535c:	4b0c      	ldr	r3, [pc, #48]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0ec      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800536a:	7cfb      	ldrb	r3, [r7, #19]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10c      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005370:	4b07      	ldr	r3, [pc, #28]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005376:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005380:	4903      	ldr	r1, [pc, #12]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005388:	e008      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800538a:	7cfb      	ldrb	r3, [r7, #19]
 800538c:	74bb      	strb	r3, [r7, #18]
 800538e:	e005      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005390:	40021000 	.word	0x40021000
 8005394:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005398:	7cfb      	ldrb	r3, [r7, #19]
 800539a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800539c:	7c7b      	ldrb	r3, [r7, #17]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d105      	bne.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053a2:	4ba0      	ldr	r3, [pc, #640]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a6:	4a9f      	ldr	r2, [pc, #636]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053ba:	4b9a      	ldr	r3, [pc, #616]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c0:	f023 0203 	bic.w	r2, r3, #3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c8:	4996      	ldr	r1, [pc, #600]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053dc:	4b91      	ldr	r3, [pc, #580]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e2:	f023 020c 	bic.w	r2, r3, #12
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	498e      	ldr	r1, [pc, #568]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0304 	and.w	r3, r3, #4
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053fe:	4b89      	ldr	r3, [pc, #548]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005404:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540c:	4985      	ldr	r1, [pc, #532]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005420:	4b80      	ldr	r3, [pc, #512]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005426:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800542e:	497d      	ldr	r1, [pc, #500]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005430:	4313      	orrs	r3, r2
 8005432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0310 	and.w	r3, r3, #16
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005442:	4b78      	ldr	r3, [pc, #480]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005448:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005450:	4974      	ldr	r1, [pc, #464]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0320 	and.w	r3, r3, #32
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005464:	4b6f      	ldr	r3, [pc, #444]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005472:	496c      	ldr	r1, [pc, #432]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005486:	4b67      	ldr	r3, [pc, #412]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005494:	4963      	ldr	r1, [pc, #396]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054a8:	4b5e      	ldr	r3, [pc, #376]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054b6:	495b      	ldr	r1, [pc, #364]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054ca:	4b56      	ldr	r3, [pc, #344]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d8:	4952      	ldr	r1, [pc, #328]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00a      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054ec:	4b4d      	ldr	r3, [pc, #308]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fa:	494a      	ldr	r1, [pc, #296]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800550e:	4b45      	ldr	r3, [pc, #276]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005514:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800551c:	4941      	ldr	r1, [pc, #260]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800551e:	4313      	orrs	r3, r2
 8005520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00a      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005530:	4b3c      	ldr	r3, [pc, #240]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005532:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005536:	f023 0203 	bic.w	r2, r3, #3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553e:	4939      	ldr	r1, [pc, #228]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005540:	4313      	orrs	r3, r2
 8005542:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d028      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005552:	4b34      	ldr	r3, [pc, #208]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005558:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005560:	4930      	ldr	r1, [pc, #192]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005562:	4313      	orrs	r3, r2
 8005564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800556c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005570:	d106      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005572:	4b2c      	ldr	r3, [pc, #176]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	4a2b      	ldr	r2, [pc, #172]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005578:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800557c:	60d3      	str	r3, [r2, #12]
 800557e:	e011      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005584:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005588:	d10c      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3304      	adds	r3, #4
 800558e:	2101      	movs	r1, #1
 8005590:	4618      	mov	r0, r3
 8005592:	f000 f959 	bl	8005848 <RCCEx_PLLSAI1_Config>
 8005596:	4603      	mov	r3, r0
 8005598:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800559a:	7cfb      	ldrb	r3, [r7, #19]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80055a0:	7cfb      	ldrb	r3, [r7, #19]
 80055a2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d04d      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055b8:	d108      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80055ba:	4b1a      	ldr	r3, [pc, #104]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055c0:	4a18      	ldr	r2, [pc, #96]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055c6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80055ca:	e012      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80055cc:	4b15      	ldr	r3, [pc, #84]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055d2:	4a14      	ldr	r2, [pc, #80]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055d8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80055dc:	4b11      	ldr	r3, [pc, #68]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055ea:	490e      	ldr	r1, [pc, #56]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055fa:	d106      	bne.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055fc:	4b09      	ldr	r3, [pc, #36]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	4a08      	ldr	r2, [pc, #32]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005606:	60d3      	str	r3, [r2, #12]
 8005608:	e020      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800560e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005612:	d109      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005614:	4b03      	ldr	r3, [pc, #12]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	4a02      	ldr	r2, [pc, #8]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800561a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800561e:	60d3      	str	r3, [r2, #12]
 8005620:	e014      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005622:	bf00      	nop
 8005624:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800562c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005630:	d10c      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	3304      	adds	r3, #4
 8005636:	2101      	movs	r1, #1
 8005638:	4618      	mov	r0, r3
 800563a:	f000 f905 	bl	8005848 <RCCEx_PLLSAI1_Config>
 800563e:	4603      	mov	r3, r0
 8005640:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005642:	7cfb      	ldrb	r3, [r7, #19]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005648:	7cfb      	ldrb	r3, [r7, #19]
 800564a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d028      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005658:	4b7a      	ldr	r3, [pc, #488]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005666:	4977      	ldr	r1, [pc, #476]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005672:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005676:	d106      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005678:	4b72      	ldr	r3, [pc, #456]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	4a71      	ldr	r2, [pc, #452]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800567e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005682:	60d3      	str	r3, [r2, #12]
 8005684:	e011      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800568a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800568e:	d10c      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3304      	adds	r3, #4
 8005694:	2101      	movs	r1, #1
 8005696:	4618      	mov	r0, r3
 8005698:	f000 f8d6 	bl	8005848 <RCCEx_PLLSAI1_Config>
 800569c:	4603      	mov	r3, r0
 800569e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056a0:	7cfb      	ldrb	r3, [r7, #19]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80056a6:	7cfb      	ldrb	r3, [r7, #19]
 80056a8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d01e      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056b6:	4b63      	ldr	r3, [pc, #396]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80056b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056c6:	495f      	ldr	r1, [pc, #380]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056d8:	d10c      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3304      	adds	r3, #4
 80056de:	2102      	movs	r1, #2
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 f8b1 	bl	8005848 <RCCEx_PLLSAI1_Config>
 80056e6:	4603      	mov	r3, r0
 80056e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056ea:	7cfb      	ldrb	r3, [r7, #19]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80056f0:	7cfb      	ldrb	r3, [r7, #19]
 80056f2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00b      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005700:	4b50      	ldr	r3, [pc, #320]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005702:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005706:	f023 0204 	bic.w	r2, r3, #4
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005710:	494c      	ldr	r1, [pc, #304]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005712:	4313      	orrs	r3, r2
 8005714:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00b      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005724:	4b47      	ldr	r3, [pc, #284]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005726:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800572a:	f023 0218 	bic.w	r2, r3, #24
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005734:	4943      	ldr	r1, [pc, #268]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005736:	4313      	orrs	r3, r2
 8005738:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d035      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005748:	4b3e      	ldr	r3, [pc, #248]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a3d      	ldr	r2, [pc, #244]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800574e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005754:	f7fc f842 	bl	80017dc <HAL_GetTick>
 8005758:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800575a:	e009      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800575c:	f7fc f83e 	bl	80017dc <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d902      	bls.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	74fb      	strb	r3, [r7, #19]
        break;
 800576e:	e005      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005770:	4b34      	ldr	r3, [pc, #208]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1ef      	bne.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800577c:	7cfb      	ldrb	r3, [r7, #19]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d113      	bne.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8005782:	4b30      	ldr	r3, [pc, #192]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005784:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005788:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005792:	492c      	ldr	r1, [pc, #176]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005794:	4313      	orrs	r3, r2
 8005796:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	3320      	adds	r3, #32
 800579e:	2102      	movs	r1, #2
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 f945 	bl	8005a30 <RCCEx_PLLSAI2_Config>
 80057a6:	4603      	mov	r3, r0
 80057a8:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80057aa:	7cfb      	ldrb	r3, [r7, #19]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80057b0:	7cfb      	ldrb	r3, [r7, #19]
 80057b2:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d01e      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80057c0:	4b20      	ldr	r3, [pc, #128]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80057c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d0:	491c      	ldr	r1, [pc, #112]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e2:	d10c      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3320      	adds	r3, #32
 80057e8:	2101      	movs	r1, #1
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 f920 	bl	8005a30 <RCCEx_PLLSAI2_Config>
 80057f0:	4603      	mov	r3, r0
 80057f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057f4:	7cfb      	ldrb	r3, [r7, #19]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 80057fa:	7cfb      	ldrb	r3, [r7, #19]
 80057fc:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d017      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800580a:	4b0e      	ldr	r3, [pc, #56]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800580c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005810:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800581a:	490a      	ldr	r1, [pc, #40]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005828:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800582c:	d105      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800582e:	4b05      	ldr	r3, [pc, #20]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	4a04      	ldr	r2, [pc, #16]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005834:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005838:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800583a:	7cbb      	ldrb	r3, [r7, #18]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3718      	adds	r7, #24
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40021000 	.word	0x40021000

08005848 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005856:	4b72      	ldr	r3, [pc, #456]	; (8005a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00e      	beq.n	8005880 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005862:	4b6f      	ldr	r3, [pc, #444]	; (8005a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f003 0203 	and.w	r2, r3, #3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	429a      	cmp	r2, r3
 8005870:	d103      	bne.n	800587a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
       ||
 8005876:	2b00      	cmp	r3, #0
 8005878:	d142      	bne.n	8005900 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	73fb      	strb	r3, [r7, #15]
 800587e:	e03f      	b.n	8005900 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b03      	cmp	r3, #3
 8005886:	d018      	beq.n	80058ba <RCCEx_PLLSAI1_Config+0x72>
 8005888:	2b03      	cmp	r3, #3
 800588a:	d825      	bhi.n	80058d8 <RCCEx_PLLSAI1_Config+0x90>
 800588c:	2b01      	cmp	r3, #1
 800588e:	d002      	beq.n	8005896 <RCCEx_PLLSAI1_Config+0x4e>
 8005890:	2b02      	cmp	r3, #2
 8005892:	d009      	beq.n	80058a8 <RCCEx_PLLSAI1_Config+0x60>
 8005894:	e020      	b.n	80058d8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005896:	4b62      	ldr	r3, [pc, #392]	; (8005a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d11d      	bne.n	80058de <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058a6:	e01a      	b.n	80058de <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058a8:	4b5d      	ldr	r3, [pc, #372]	; (8005a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d116      	bne.n	80058e2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058b8:	e013      	b.n	80058e2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058ba:	4b59      	ldr	r3, [pc, #356]	; (8005a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10f      	bne.n	80058e6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058c6:	4b56      	ldr	r3, [pc, #344]	; (8005a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d109      	bne.n	80058e6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058d6:	e006      	b.n	80058e6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	73fb      	strb	r3, [r7, #15]
      break;
 80058dc:	e004      	b.n	80058e8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80058de:	bf00      	nop
 80058e0:	e002      	b.n	80058e8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80058e2:	bf00      	nop
 80058e4:	e000      	b.n	80058e8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80058e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d108      	bne.n	8005900 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80058ee:	4b4c      	ldr	r3, [pc, #304]	; (8005a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f023 0203 	bic.w	r2, r3, #3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4949      	ldr	r1, [pc, #292]	; (8005a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005900:	7bfb      	ldrb	r3, [r7, #15]
 8005902:	2b00      	cmp	r3, #0
 8005904:	f040 8086 	bne.w	8005a14 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005908:	4b45      	ldr	r3, [pc, #276]	; (8005a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a44      	ldr	r2, [pc, #272]	; (8005a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 800590e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005912:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005914:	f7fb ff62 	bl	80017dc <HAL_GetTick>
 8005918:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800591a:	e009      	b.n	8005930 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800591c:	f7fb ff5e 	bl	80017dc <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d902      	bls.n	8005930 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	73fb      	strb	r3, [r7, #15]
        break;
 800592e:	e005      	b.n	800593c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005930:	4b3b      	ldr	r3, [pc, #236]	; (8005a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1ef      	bne.n	800591c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800593c:	7bfb      	ldrb	r3, [r7, #15]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d168      	bne.n	8005a14 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d113      	bne.n	8005970 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005948:	4b35      	ldr	r3, [pc, #212]	; (8005a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	4b35      	ldr	r3, [pc, #212]	; (8005a24 <RCCEx_PLLSAI1_Config+0x1dc>)
 800594e:	4013      	ands	r3, r2
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	6892      	ldr	r2, [r2, #8]
 8005954:	0211      	lsls	r1, r2, #8
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	68d2      	ldr	r2, [r2, #12]
 800595a:	06d2      	lsls	r2, r2, #27
 800595c:	4311      	orrs	r1, r2
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	6852      	ldr	r2, [r2, #4]
 8005962:	3a01      	subs	r2, #1
 8005964:	0112      	lsls	r2, r2, #4
 8005966:	430a      	orrs	r2, r1
 8005968:	492d      	ldr	r1, [pc, #180]	; (8005a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 800596a:	4313      	orrs	r3, r2
 800596c:	610b      	str	r3, [r1, #16]
 800596e:	e02d      	b.n	80059cc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d115      	bne.n	80059a2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005976:	4b2a      	ldr	r3, [pc, #168]	; (8005a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005978:	691a      	ldr	r2, [r3, #16]
 800597a:	4b2b      	ldr	r3, [pc, #172]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 800597c:	4013      	ands	r3, r2
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6892      	ldr	r2, [r2, #8]
 8005982:	0211      	lsls	r1, r2, #8
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6912      	ldr	r2, [r2, #16]
 8005988:	0852      	lsrs	r2, r2, #1
 800598a:	3a01      	subs	r2, #1
 800598c:	0552      	lsls	r2, r2, #21
 800598e:	4311      	orrs	r1, r2
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6852      	ldr	r2, [r2, #4]
 8005994:	3a01      	subs	r2, #1
 8005996:	0112      	lsls	r2, r2, #4
 8005998:	430a      	orrs	r2, r1
 800599a:	4921      	ldr	r1, [pc, #132]	; (8005a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 800599c:	4313      	orrs	r3, r2
 800599e:	610b      	str	r3, [r1, #16]
 80059a0:	e014      	b.n	80059cc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059a2:	4b1f      	ldr	r3, [pc, #124]	; (8005a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059a4:	691a      	ldr	r2, [r3, #16]
 80059a6:	4b21      	ldr	r3, [pc, #132]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80059a8:	4013      	ands	r3, r2
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6892      	ldr	r2, [r2, #8]
 80059ae:	0211      	lsls	r1, r2, #8
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6952      	ldr	r2, [r2, #20]
 80059b4:	0852      	lsrs	r2, r2, #1
 80059b6:	3a01      	subs	r2, #1
 80059b8:	0652      	lsls	r2, r2, #25
 80059ba:	4311      	orrs	r1, r2
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6852      	ldr	r2, [r2, #4]
 80059c0:	3a01      	subs	r2, #1
 80059c2:	0112      	lsls	r2, r2, #4
 80059c4:	430a      	orrs	r2, r1
 80059c6:	4916      	ldr	r1, [pc, #88]	; (8005a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80059cc:	4b14      	ldr	r3, [pc, #80]	; (8005a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a13      	ldr	r2, [pc, #76]	; (8005a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d8:	f7fb ff00 	bl	80017dc <HAL_GetTick>
 80059dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059de:	e009      	b.n	80059f4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059e0:	f7fb fefc 	bl	80017dc <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d902      	bls.n	80059f4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	73fb      	strb	r3, [r7, #15]
          break;
 80059f2:	e005      	b.n	8005a00 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059f4:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d0ef      	beq.n	80059e0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a06:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a08:	691a      	ldr	r2, [r3, #16]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	4904      	ldr	r1, [pc, #16]	; (8005a20 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	40021000 	.word	0x40021000
 8005a24:	07ff800f 	.word	0x07ff800f
 8005a28:	ff9f800f 	.word	0xff9f800f
 8005a2c:	f9ff800f 	.word	0xf9ff800f

08005a30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a3e:	4b72      	ldr	r3, [pc, #456]	; (8005c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00e      	beq.n	8005a68 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005a4a:	4b6f      	ldr	r3, [pc, #444]	; (8005c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f003 0203 	and.w	r2, r3, #3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d103      	bne.n	8005a62 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
       ||
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d142      	bne.n	8005ae8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	73fb      	strb	r3, [r7, #15]
 8005a66:	e03f      	b.n	8005ae8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b03      	cmp	r3, #3
 8005a6e:	d018      	beq.n	8005aa2 <RCCEx_PLLSAI2_Config+0x72>
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d825      	bhi.n	8005ac0 <RCCEx_PLLSAI2_Config+0x90>
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d002      	beq.n	8005a7e <RCCEx_PLLSAI2_Config+0x4e>
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d009      	beq.n	8005a90 <RCCEx_PLLSAI2_Config+0x60>
 8005a7c:	e020      	b.n	8005ac0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a7e:	4b62      	ldr	r3, [pc, #392]	; (8005c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d11d      	bne.n	8005ac6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a8e:	e01a      	b.n	8005ac6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a90:	4b5d      	ldr	r3, [pc, #372]	; (8005c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d116      	bne.n	8005aca <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aa0:	e013      	b.n	8005aca <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005aa2:	4b59      	ldr	r3, [pc, #356]	; (8005c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10f      	bne.n	8005ace <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005aae:	4b56      	ldr	r3, [pc, #344]	; (8005c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d109      	bne.n	8005ace <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005abe:	e006      	b.n	8005ace <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac4:	e004      	b.n	8005ad0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005ac6:	bf00      	nop
 8005ac8:	e002      	b.n	8005ad0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005aca:	bf00      	nop
 8005acc:	e000      	b.n	8005ad0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005ace:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d108      	bne.n	8005ae8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005ad6:	4b4c      	ldr	r3, [pc, #304]	; (8005c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f023 0203 	bic.w	r2, r3, #3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4949      	ldr	r1, [pc, #292]	; (8005c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f040 8086 	bne.w	8005bfc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005af0:	4b45      	ldr	r3, [pc, #276]	; (8005c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a44      	ldr	r2, [pc, #272]	; (8005c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005afc:	f7fb fe6e 	bl	80017dc <HAL_GetTick>
 8005b00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b02:	e009      	b.n	8005b18 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b04:	f7fb fe6a 	bl	80017dc <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d902      	bls.n	8005b18 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	73fb      	strb	r3, [r7, #15]
        break;
 8005b16:	e005      	b.n	8005b24 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b18:	4b3b      	ldr	r3, [pc, #236]	; (8005c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1ef      	bne.n	8005b04 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d168      	bne.n	8005bfc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d113      	bne.n	8005b58 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b30:	4b35      	ldr	r3, [pc, #212]	; (8005c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b32:	695a      	ldr	r2, [r3, #20]
 8005b34:	4b35      	ldr	r3, [pc, #212]	; (8005c0c <RCCEx_PLLSAI2_Config+0x1dc>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6892      	ldr	r2, [r2, #8]
 8005b3c:	0211      	lsls	r1, r2, #8
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	68d2      	ldr	r2, [r2, #12]
 8005b42:	06d2      	lsls	r2, r2, #27
 8005b44:	4311      	orrs	r1, r2
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	6852      	ldr	r2, [r2, #4]
 8005b4a:	3a01      	subs	r2, #1
 8005b4c:	0112      	lsls	r2, r2, #4
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	492d      	ldr	r1, [pc, #180]	; (8005c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	614b      	str	r3, [r1, #20]
 8005b56:	e02d      	b.n	8005bb4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d115      	bne.n	8005b8a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b5e:	4b2a      	ldr	r3, [pc, #168]	; (8005c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b60:	695a      	ldr	r2, [r3, #20]
 8005b62:	4b2b      	ldr	r3, [pc, #172]	; (8005c10 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6892      	ldr	r2, [r2, #8]
 8005b6a:	0211      	lsls	r1, r2, #8
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6912      	ldr	r2, [r2, #16]
 8005b70:	0852      	lsrs	r2, r2, #1
 8005b72:	3a01      	subs	r2, #1
 8005b74:	0552      	lsls	r2, r2, #21
 8005b76:	4311      	orrs	r1, r2
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6852      	ldr	r2, [r2, #4]
 8005b7c:	3a01      	subs	r2, #1
 8005b7e:	0112      	lsls	r2, r2, #4
 8005b80:	430a      	orrs	r2, r1
 8005b82:	4921      	ldr	r1, [pc, #132]	; (8005c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	614b      	str	r3, [r1, #20]
 8005b88:	e014      	b.n	8005bb4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b8a:	4b1f      	ldr	r3, [pc, #124]	; (8005c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b8c:	695a      	ldr	r2, [r3, #20]
 8005b8e:	4b21      	ldr	r3, [pc, #132]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005b90:	4013      	ands	r3, r2
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	6892      	ldr	r2, [r2, #8]
 8005b96:	0211      	lsls	r1, r2, #8
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6952      	ldr	r2, [r2, #20]
 8005b9c:	0852      	lsrs	r2, r2, #1
 8005b9e:	3a01      	subs	r2, #1
 8005ba0:	0652      	lsls	r2, r2, #25
 8005ba2:	4311      	orrs	r1, r2
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6852      	ldr	r2, [r2, #4]
 8005ba8:	3a01      	subs	r2, #1
 8005baa:	0112      	lsls	r2, r2, #4
 8005bac:	430a      	orrs	r2, r1
 8005bae:	4916      	ldr	r1, [pc, #88]	; (8005c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005bb4:	4b14      	ldr	r3, [pc, #80]	; (8005c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a13      	ldr	r2, [pc, #76]	; (8005c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc0:	f7fb fe0c 	bl	80017dc <HAL_GetTick>
 8005bc4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bc6:	e009      	b.n	8005bdc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005bc8:	f7fb fe08 	bl	80017dc <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d902      	bls.n	8005bdc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	73fb      	strb	r3, [r7, #15]
          break;
 8005bda:	e005      	b.n	8005be8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bdc:	4b0a      	ldr	r3, [pc, #40]	; (8005c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d0ef      	beq.n	8005bc8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d106      	bne.n	8005bfc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005bee:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bf0:	695a      	ldr	r2, [r3, #20]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	4904      	ldr	r1, [pc, #16]	; (8005c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	07ff800f 	.word	0x07ff800f
 8005c10:	ff9f800f 	.word	0xff9f800f
 8005c14:	f9ff800f 	.word	0xf9ff800f

08005c18 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e05b      	b.n	8005ce2 <HAL_RNG_Init+0xca>
#if defined(RNG_CR_CED)
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));
#endif /* defined(RNG_CR_CED) */

#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	7a5b      	ldrb	r3, [r3, #9]
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d113      	bne.n	8005c5c <HAL_RNG_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	721a      	strb	r2, [r3, #8]

    hrng->ReadyDataCallback  = HAL_RNG_ReadyDataCallback;  /* Legacy weak ReadyDataCallback  */
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a2b      	ldr	r2, [pc, #172]	; (8005cec <HAL_RNG_Init+0xd4>)
 8005c3e:	615a      	str	r2, [r3, #20]
    hrng->ErrorCallback      = HAL_RNG_ErrorCallback;      /* Legacy weak ErrorCallback      */
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a2b      	ldr	r2, [pc, #172]	; (8005cf0 <HAL_RNG_Init+0xd8>)
 8005c44:	619a      	str	r2, [r3, #24]

    if (hrng->MspInitCallback == NULL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d102      	bne.n	8005c54 <HAL_RNG_Init+0x3c>
    {
      hrng->MspInitCallback = HAL_RNG_MspInit; /* Legacy weak MspInit  */
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a28      	ldr	r2, [pc, #160]	; (8005cf4 <HAL_RNG_Init+0xdc>)
 8005c52:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	4798      	blx	r3
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	725a      	strb	r2, [r3, #9]
    }
  }
#else
#if defined(RNG_CR_CED)
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f023 0120 	bic.w	r1, r3, #32
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	601a      	str	r2, [r3, #0]
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0204 	orr.w	r2, r2, #4
 8005c86:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c92:	2b40      	cmp	r3, #64	; 0x40
 8005c94:	d104      	bne.n	8005ca0 <HAL_RNG_Init+0x88>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2204      	movs	r2, #4
 8005c9a:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e020      	b.n	8005ce2 <HAL_RNG_Init+0xca>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8005ca0:	f7fb fd9c 	bl	80017dc <HAL_GetTick>
 8005ca4:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005ca6:	e00e      	b.n	8005cc6 <HAL_RNG_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005ca8:	f7fb fd98 	bl	80017dc <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d907      	bls.n	8005cc6 <HAL_RNG_Init+0xae>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2204      	movs	r2, #4
 8005cba:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e00d      	b.n	8005ce2 <HAL_RNG_Init+0xca>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f003 0304 	and.w	r3, r3, #4
 8005cd0:	2b04      	cmp	r3, #4
 8005cd2:	d0e9      	beq.n	8005ca8 <HAL_RNG_Init+0x90>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	08005cf9 	.word	0x08005cf9
 8005cf0:	08005d0f 	.word	0x08005d0f
 8005cf4:	080010b1 	.word	0x080010b1

08005cf8 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
	...

08005d24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e0b9      	b.n	8005eaa <HAL_SPI_Init+0x186>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d108      	bne.n	8005d50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d46:	d009      	beq.n	8005d5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	61da      	str	r2, [r3, #28]
 8005d4e:	e005      	b.n	8005d5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d12a      	bne.n	8005dc4 <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a4e      	ldr	r2, [pc, #312]	; (8005eb4 <HAL_SPI_Init+0x190>)
 8005d7a:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a4e      	ldr	r2, [pc, #312]	; (8005eb8 <HAL_SPI_Init+0x194>)
 8005d80:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a4d      	ldr	r2, [pc, #308]	; (8005ebc <HAL_SPI_Init+0x198>)
 8005d86:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a4d      	ldr	r2, [pc, #308]	; (8005ec0 <HAL_SPI_Init+0x19c>)
 8005d8c:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a4c      	ldr	r2, [pc, #304]	; (8005ec4 <HAL_SPI_Init+0x1a0>)
 8005d92:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a4c      	ldr	r2, [pc, #304]	; (8005ec8 <HAL_SPI_Init+0x1a4>)
 8005d98:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a4b      	ldr	r2, [pc, #300]	; (8005ecc <HAL_SPI_Init+0x1a8>)
 8005d9e:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a4b      	ldr	r2, [pc, #300]	; (8005ed0 <HAL_SPI_Init+0x1ac>)
 8005da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d103      	bne.n	8005dba <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a47      	ldr	r2, [pc, #284]	; (8005ed4 <HAL_SPI_Init+0x1b0>)
 8005db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005de4:	d902      	bls.n	8005dec <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005de6:	2300      	movs	r3, #0
 8005de8:	60fb      	str	r3, [r7, #12]
 8005dea:	e002      	b.n	8005df2 <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005df0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005dfa:	d007      	beq.n	8005e0c <HAL_SPI_Init+0xe8>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e04:	d002      	beq.n	8005e0c <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	431a      	orrs	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e44:	431a      	orrs	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4e:	ea42 0103 	orr.w	r1, r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	0c1b      	lsrs	r3, r3, #16
 8005e68:	f003 0204 	and.w	r2, r3, #4
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	f003 0310 	and.w	r3, r3, #16
 8005e74:	431a      	orrs	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7a:	f003 0308 	and.w	r3, r3, #8
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005e88:	ea42 0103 	orr.w	r1, r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	080060d9 	.word	0x080060d9
 8005eb8:	080060ed 	.word	0x080060ed
 8005ebc:	08006101 	.word	0x08006101
 8005ec0:	08006115 	.word	0x08006115
 8005ec4:	08006129 	.word	0x08006129
 8005ec8:	0800613d 	.word	0x0800613d
 8005ecc:	08006151 	.word	0x08006151
 8005ed0:	08006165 	.word	0x08006165
 8005ed4:	0800116d 	.word	0x0800116d

08005ed8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b088      	sub	sp, #32
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	099b      	lsrs	r3, r3, #6
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10f      	bne.n	8005f1c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	099b      	lsrs	r3, r3, #6
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d004      	beq.n	8005f1c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	4798      	blx	r3
    return;
 8005f1a:	e0d8      	b.n	80060ce <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	085b      	lsrs	r3, r3, #1
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00a      	beq.n	8005f3e <HAL_SPI_IRQHandler+0x66>
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	09db      	lsrs	r3, r3, #7
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d004      	beq.n	8005f3e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	4798      	blx	r3
    return;
 8005f3c:	e0c7      	b.n	80060ce <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	095b      	lsrs	r3, r3, #5
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10c      	bne.n	8005f64 <HAL_SPI_IRQHandler+0x8c>
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	099b      	lsrs	r3, r3, #6
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d106      	bne.n	8005f64 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	0a1b      	lsrs	r3, r3, #8
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 80b5 	beq.w	80060ce <HAL_SPI_IRQHandler+0x1f6>
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 80ae 	beq.w	80060ce <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	099b      	lsrs	r3, r3, #6
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d023      	beq.n	8005fc6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d011      	beq.n	8005fae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f8e:	f043 0204 	orr.w	r2, r3, #4
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	e00b      	b.n	8005fc6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fae:	2300      	movs	r3, #0
 8005fb0:	613b      	str	r3, [r7, #16]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	613b      	str	r3, [r7, #16]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	613b      	str	r3, [r7, #16]
 8005fc2:	693b      	ldr	r3, [r7, #16]
        return;
 8005fc4:	e083      	b.n	80060ce <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	095b      	lsrs	r3, r3, #5
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d014      	beq.n	8005ffc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd6:	f043 0201 	orr.w	r2, r3, #1
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	0a1b      	lsrs	r3, r3, #8
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00c      	beq.n	8006022 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800600c:	f043 0208 	orr.w	r2, r3, #8
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006014:	2300      	movs	r3, #0
 8006016:	60bb      	str	r3, [r7, #8]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	60bb      	str	r3, [r7, #8]
 8006020:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006026:	2b00      	cmp	r3, #0
 8006028:	d050      	beq.n	80060cc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006038:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d104      	bne.n	8006056 <HAL_SPI_IRQHandler+0x17e>
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b00      	cmp	r3, #0
 8006054:	d034      	beq.n	80060c0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0203 	bic.w	r2, r2, #3
 8006064:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606a:	2b00      	cmp	r3, #0
 800606c:	d011      	beq.n	8006092 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006072:	4a18      	ldr	r2, [pc, #96]	; (80060d4 <HAL_SPI_IRQHandler+0x1fc>)
 8006074:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800607a:	4618      	mov	r0, r3
 800607c:	f7fd fb7c 	bl	8003778 <HAL_DMA_Abort_IT>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d005      	beq.n	8006092 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800608a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006096:	2b00      	cmp	r3, #0
 8006098:	d017      	beq.n	80060ca <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609e:	4a0d      	ldr	r2, [pc, #52]	; (80060d4 <HAL_SPI_IRQHandler+0x1fc>)
 80060a0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fd fb66 	bl	8003778 <HAL_DMA_Abort_IT>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00b      	beq.n	80060ca <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80060be:	e004      	b.n	80060ca <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80060c8:	e000      	b.n	80060cc <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 80060ca:	bf00      	nop
    return;
 80060cc:	bf00      	nop
  }
}
 80060ce:	3720      	adds	r7, #32
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	08006179 	.word	0x08006179

080060d8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006184:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800619c:	bf00      	nop
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e054      	b.n	8006260 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d111      	bne.n	80061e6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fe7a 	bl	8006ec4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d102      	bne.n	80061de <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a23      	ldr	r2, [pc, #140]	; (8006268 <HAL_TIM_Base_Init+0xc4>)
 80061dc:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2202      	movs	r2, #2
 80061ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3304      	adds	r3, #4
 80061f6:	4619      	mov	r1, r3
 80061f8:	4610      	mov	r0, r2
 80061fa:	f000 fc0b 	bl	8006a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	08001535 	.word	0x08001535

0800626c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b01      	cmp	r3, #1
 800627e:	d001      	beq.n	8006284 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e04f      	b.n	8006324 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0201 	orr.w	r2, r2, #1
 800629a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a23      	ldr	r2, [pc, #140]	; (8006330 <HAL_TIM_Base_Start_IT+0xc4>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d01d      	beq.n	80062e2 <HAL_TIM_Base_Start_IT+0x76>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ae:	d018      	beq.n	80062e2 <HAL_TIM_Base_Start_IT+0x76>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a1f      	ldr	r2, [pc, #124]	; (8006334 <HAL_TIM_Base_Start_IT+0xc8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d013      	beq.n	80062e2 <HAL_TIM_Base_Start_IT+0x76>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a1e      	ldr	r2, [pc, #120]	; (8006338 <HAL_TIM_Base_Start_IT+0xcc>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00e      	beq.n	80062e2 <HAL_TIM_Base_Start_IT+0x76>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a1c      	ldr	r2, [pc, #112]	; (800633c <HAL_TIM_Base_Start_IT+0xd0>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d009      	beq.n	80062e2 <HAL_TIM_Base_Start_IT+0x76>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a1b      	ldr	r2, [pc, #108]	; (8006340 <HAL_TIM_Base_Start_IT+0xd4>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d004      	beq.n	80062e2 <HAL_TIM_Base_Start_IT+0x76>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a19      	ldr	r2, [pc, #100]	; (8006344 <HAL_TIM_Base_Start_IT+0xd8>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d115      	bne.n	800630e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	4b17      	ldr	r3, [pc, #92]	; (8006348 <HAL_TIM_Base_Start_IT+0xdc>)
 80062ea:	4013      	ands	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2b06      	cmp	r3, #6
 80062f2:	d015      	beq.n	8006320 <HAL_TIM_Base_Start_IT+0xb4>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062fa:	d011      	beq.n	8006320 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f042 0201 	orr.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800630c:	e008      	b.n	8006320 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f042 0201 	orr.w	r2, r2, #1
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	e000      	b.n	8006322 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006320:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	40012c00 	.word	0x40012c00
 8006334:	40000400 	.word	0x40000400
 8006338:	40000800 	.word	0x40000800
 800633c:	40000c00 	.word	0x40000c00
 8006340:	40013400 	.word	0x40013400
 8006344:	40014000 	.word	0x40014000
 8006348:	00010007 	.word	0x00010007

0800634c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e054      	b.n	8006408 <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d111      	bne.n	800638e <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fda6 	bl	8006ec4 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637c:	2b00      	cmp	r3, #0
 800637e:	d102      	bne.n	8006386 <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a23      	ldr	r2, [pc, #140]	; (8006410 <HAL_TIM_IC_Init+0xc4>)
 8006384:	655a      	str	r2, [r3, #84]	; 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2202      	movs	r2, #2
 8006392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	3304      	adds	r3, #4
 800639e:	4619      	mov	r1, r3
 80063a0:	4610      	mov	r0, r2
 80063a2:	f000 fb37 	bl	8006a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	08006415 	.word	0x08006415

08006414 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b02      	cmp	r3, #2
 800643c:	d128      	bne.n	8006490 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b02      	cmp	r3, #2
 800644a:	d121      	bne.n	8006490 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f06f 0202 	mvn.w	r2, #2
 8006454:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	f003 0303 	and.w	r3, r3, #3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d005      	beq.n	8006476 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	4798      	blx	r3
 8006474:	e009      	b.n	800648a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	f003 0304 	and.w	r3, r3, #4
 800649a:	2b04      	cmp	r3, #4
 800649c:	d128      	bne.n	80064f0 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f003 0304 	and.w	r3, r3, #4
 80064a8:	2b04      	cmp	r3, #4
 80064aa:	d121      	bne.n	80064f0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f06f 0204 	mvn.w	r2, #4
 80064b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2202      	movs	r2, #2
 80064ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d005      	beq.n	80064d6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	4798      	blx	r3
 80064d4:	e009      	b.n	80064ea <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f003 0308 	and.w	r3, r3, #8
 80064fa:	2b08      	cmp	r3, #8
 80064fc:	d128      	bne.n	8006550 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f003 0308 	and.w	r3, r3, #8
 8006508:	2b08      	cmp	r3, #8
 800650a:	d121      	bne.n	8006550 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f06f 0208 	mvn.w	r2, #8
 8006514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2204      	movs	r2, #4
 800651a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	f003 0303 	and.w	r3, r3, #3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d005      	beq.n	8006536 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	4798      	blx	r3
 8006534:	e009      	b.n	800654a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f003 0310 	and.w	r3, r3, #16
 800655a:	2b10      	cmp	r3, #16
 800655c:	d128      	bne.n	80065b0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	f003 0310 	and.w	r3, r3, #16
 8006568:	2b10      	cmp	r3, #16
 800656a:	d121      	bne.n	80065b0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f06f 0210 	mvn.w	r2, #16
 8006574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2208      	movs	r2, #8
 800657a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	4798      	blx	r3
 8006594:	e009      	b.n	80065aa <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d110      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d109      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f06f 0201 	mvn.w	r2, #1
 80065d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ea:	2b80      	cmp	r3, #128	; 0x80
 80065ec:	d110      	bne.n	8006610 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f8:	2b80      	cmp	r3, #128	; 0x80
 80065fa:	d109      	bne.n	8006610 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800661e:	d110      	bne.n	8006642 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662a:	2b80      	cmp	r3, #128	; 0x80
 800662c:	d109      	bne.n	8006642 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664c:	2b40      	cmp	r3, #64	; 0x40
 800664e:	d110      	bne.n	8006672 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665a:	2b40      	cmp	r3, #64	; 0x40
 800665c:	d109      	bne.n	8006672 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	f003 0320 	and.w	r3, r3, #32
 800667c:	2b20      	cmp	r3, #32
 800667e:	d110      	bne.n	80066a2 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f003 0320 	and.w	r3, r3, #32
 800668a:	2b20      	cmp	r3, #32
 800668c:	d109      	bne.n	80066a2 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f06f 0220 	mvn.w	r2, #32
 8006696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066a2:	bf00      	nop
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	60f8      	str	r0, [r7, #12]
 80066b2:	60b9      	str	r1, [r7, #8]
 80066b4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d101      	bne.n	80066c4 <HAL_TIM_IC_ConfigChannel+0x1a>
 80066c0:	2302      	movs	r3, #2
 80066c2:	e082      	b.n	80067ca <HAL_TIM_IC_ConfigChannel+0x120>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d11b      	bne.n	800670a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6818      	ldr	r0, [r3, #0]
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	6819      	ldr	r1, [r3, #0]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f000 fa31 	bl	8006b48 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	699a      	ldr	r2, [r3, #24]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 020c 	bic.w	r2, r2, #12
 80066f4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6999      	ldr	r1, [r3, #24]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	430a      	orrs	r2, r1
 8006706:	619a      	str	r2, [r3, #24]
 8006708:	e05a      	b.n	80067c0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b04      	cmp	r3, #4
 800670e:	d11c      	bne.n	800674a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6818      	ldr	r0, [r3, #0]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	6819      	ldr	r1, [r3, #0]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f000 faaf 	bl	8006c82 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699a      	ldr	r2, [r3, #24]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006732:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6999      	ldr	r1, [r3, #24]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	021a      	lsls	r2, r3, #8
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	619a      	str	r2, [r3, #24]
 8006748:	e03a      	b.n	80067c0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b08      	cmp	r3, #8
 800674e:	d11b      	bne.n	8006788 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6818      	ldr	r0, [r3, #0]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	6819      	ldr	r1, [r3, #0]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f000 fafc 	bl	8006d5c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	69da      	ldr	r2, [r3, #28]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 020c 	bic.w	r2, r2, #12
 8006772:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	69d9      	ldr	r1, [r3, #28]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	689a      	ldr	r2, [r3, #8]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	61da      	str	r2, [r3, #28]
 8006786:	e01b      	b.n	80067c0 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6818      	ldr	r0, [r3, #0]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	6819      	ldr	r1, [r3, #0]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f000 fb1c 	bl	8006dd4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69da      	ldr	r2, [r3, #28]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80067aa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	69d9      	ldr	r1, [r3, #28]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	021a      	lsls	r2, r3, #8
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	430a      	orrs	r2, r1
 80067be:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b084      	sub	sp, #16
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d101      	bne.n	80067ea <HAL_TIM_ConfigClockSource+0x18>
 80067e6:	2302      	movs	r3, #2
 80067e8:	e0b5      	b.n	8006956 <HAL_TIM_ConfigClockSource+0x184>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2202      	movs	r2, #2
 80067f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006808:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800680c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006814:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006826:	d03e      	beq.n	80068a6 <HAL_TIM_ConfigClockSource+0xd4>
 8006828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800682c:	f200 8087 	bhi.w	800693e <HAL_TIM_ConfigClockSource+0x16c>
 8006830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006834:	f000 8085 	beq.w	8006942 <HAL_TIM_ConfigClockSource+0x170>
 8006838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800683c:	d87f      	bhi.n	800693e <HAL_TIM_ConfigClockSource+0x16c>
 800683e:	2b70      	cmp	r3, #112	; 0x70
 8006840:	d01a      	beq.n	8006878 <HAL_TIM_ConfigClockSource+0xa6>
 8006842:	2b70      	cmp	r3, #112	; 0x70
 8006844:	d87b      	bhi.n	800693e <HAL_TIM_ConfigClockSource+0x16c>
 8006846:	2b60      	cmp	r3, #96	; 0x60
 8006848:	d050      	beq.n	80068ec <HAL_TIM_ConfigClockSource+0x11a>
 800684a:	2b60      	cmp	r3, #96	; 0x60
 800684c:	d877      	bhi.n	800693e <HAL_TIM_ConfigClockSource+0x16c>
 800684e:	2b50      	cmp	r3, #80	; 0x50
 8006850:	d03c      	beq.n	80068cc <HAL_TIM_ConfigClockSource+0xfa>
 8006852:	2b50      	cmp	r3, #80	; 0x50
 8006854:	d873      	bhi.n	800693e <HAL_TIM_ConfigClockSource+0x16c>
 8006856:	2b40      	cmp	r3, #64	; 0x40
 8006858:	d058      	beq.n	800690c <HAL_TIM_ConfigClockSource+0x13a>
 800685a:	2b40      	cmp	r3, #64	; 0x40
 800685c:	d86f      	bhi.n	800693e <HAL_TIM_ConfigClockSource+0x16c>
 800685e:	2b30      	cmp	r3, #48	; 0x30
 8006860:	d064      	beq.n	800692c <HAL_TIM_ConfigClockSource+0x15a>
 8006862:	2b30      	cmp	r3, #48	; 0x30
 8006864:	d86b      	bhi.n	800693e <HAL_TIM_ConfigClockSource+0x16c>
 8006866:	2b20      	cmp	r3, #32
 8006868:	d060      	beq.n	800692c <HAL_TIM_ConfigClockSource+0x15a>
 800686a:	2b20      	cmp	r3, #32
 800686c:	d867      	bhi.n	800693e <HAL_TIM_ConfigClockSource+0x16c>
 800686e:	2b00      	cmp	r3, #0
 8006870:	d05c      	beq.n	800692c <HAL_TIM_ConfigClockSource+0x15a>
 8006872:	2b10      	cmp	r3, #16
 8006874:	d05a      	beq.n	800692c <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006876:	e062      	b.n	800693e <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	6899      	ldr	r1, [r3, #8]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f000 fafc 	bl	8006e84 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800689a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	609a      	str	r2, [r3, #8]
      break;
 80068a4:	e04e      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6818      	ldr	r0, [r3, #0]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	6899      	ldr	r1, [r3, #8]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f000 fae5 	bl	8006e84 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068c8:	609a      	str	r2, [r3, #8]
      break;
 80068ca:	e03b      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6818      	ldr	r0, [r3, #0]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	6859      	ldr	r1, [r3, #4]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	461a      	mov	r2, r3
 80068da:	f000 f9a3 	bl	8006c24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2150      	movs	r1, #80	; 0x50
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 fab2 	bl	8006e4e <TIM_ITRx_SetConfig>
      break;
 80068ea:	e02b      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6818      	ldr	r0, [r3, #0]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	6859      	ldr	r1, [r3, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	461a      	mov	r2, r3
 80068fa:	f000 f9ff 	bl	8006cfc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2160      	movs	r1, #96	; 0x60
 8006904:	4618      	mov	r0, r3
 8006906:	f000 faa2 	bl	8006e4e <TIM_ITRx_SetConfig>
      break;
 800690a:	e01b      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6818      	ldr	r0, [r3, #0]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	6859      	ldr	r1, [r3, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	461a      	mov	r2, r3
 800691a:	f000 f983 	bl	8006c24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2140      	movs	r1, #64	; 0x40
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fa92 	bl	8006e4e <TIM_ITRx_SetConfig>
      break;
 800692a:	e00b      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4619      	mov	r1, r3
 8006936:	4610      	mov	r0, r2
 8006938:	f000 fa89 	bl	8006e4e <TIM_ITRx_SetConfig>
        break;
 800693c:	e002      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800693e:	bf00      	nop
 8006940:	e000      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006942:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800695e:	b480      	push	{r7}
 8006960:	b083      	sub	sp, #12
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006966:	bf00      	nop
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006972:	b480      	push	{r7}
 8006974:	b083      	sub	sp, #12
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800697a:	bf00      	nop
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006986:	b480      	push	{r7}
 8006988:	b083      	sub	sp, #12
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800698e:	bf00      	nop
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800699a:	b480      	push	{r7}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069b6:	bf00      	nop
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b083      	sub	sp, #12
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80069ca:	bf00      	nop
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b083      	sub	sp, #12
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b083      	sub	sp, #12
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80069f2:	bf00      	nop
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
	...

08006a14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a40      	ldr	r2, [pc, #256]	; (8006b28 <TIM_Base_SetConfig+0x114>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d013      	beq.n	8006a54 <TIM_Base_SetConfig+0x40>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a32:	d00f      	beq.n	8006a54 <TIM_Base_SetConfig+0x40>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a3d      	ldr	r2, [pc, #244]	; (8006b2c <TIM_Base_SetConfig+0x118>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d00b      	beq.n	8006a54 <TIM_Base_SetConfig+0x40>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a3c      	ldr	r2, [pc, #240]	; (8006b30 <TIM_Base_SetConfig+0x11c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d007      	beq.n	8006a54 <TIM_Base_SetConfig+0x40>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a3b      	ldr	r2, [pc, #236]	; (8006b34 <TIM_Base_SetConfig+0x120>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d003      	beq.n	8006a54 <TIM_Base_SetConfig+0x40>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a3a      	ldr	r2, [pc, #232]	; (8006b38 <TIM_Base_SetConfig+0x124>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d108      	bne.n	8006a66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a2f      	ldr	r2, [pc, #188]	; (8006b28 <TIM_Base_SetConfig+0x114>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d01f      	beq.n	8006aae <TIM_Base_SetConfig+0x9a>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a74:	d01b      	beq.n	8006aae <TIM_Base_SetConfig+0x9a>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a2c      	ldr	r2, [pc, #176]	; (8006b2c <TIM_Base_SetConfig+0x118>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d017      	beq.n	8006aae <TIM_Base_SetConfig+0x9a>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a2b      	ldr	r2, [pc, #172]	; (8006b30 <TIM_Base_SetConfig+0x11c>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d013      	beq.n	8006aae <TIM_Base_SetConfig+0x9a>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a2a      	ldr	r2, [pc, #168]	; (8006b34 <TIM_Base_SetConfig+0x120>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d00f      	beq.n	8006aae <TIM_Base_SetConfig+0x9a>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a29      	ldr	r2, [pc, #164]	; (8006b38 <TIM_Base_SetConfig+0x124>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d00b      	beq.n	8006aae <TIM_Base_SetConfig+0x9a>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a28      	ldr	r2, [pc, #160]	; (8006b3c <TIM_Base_SetConfig+0x128>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d007      	beq.n	8006aae <TIM_Base_SetConfig+0x9a>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a27      	ldr	r2, [pc, #156]	; (8006b40 <TIM_Base_SetConfig+0x12c>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d003      	beq.n	8006aae <TIM_Base_SetConfig+0x9a>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a26      	ldr	r2, [pc, #152]	; (8006b44 <TIM_Base_SetConfig+0x130>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d108      	bne.n	8006ac0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	689a      	ldr	r2, [r3, #8]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a10      	ldr	r2, [pc, #64]	; (8006b28 <TIM_Base_SetConfig+0x114>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d00f      	beq.n	8006b0c <TIM_Base_SetConfig+0xf8>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a12      	ldr	r2, [pc, #72]	; (8006b38 <TIM_Base_SetConfig+0x124>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d00b      	beq.n	8006b0c <TIM_Base_SetConfig+0xf8>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a11      	ldr	r2, [pc, #68]	; (8006b3c <TIM_Base_SetConfig+0x128>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d007      	beq.n	8006b0c <TIM_Base_SetConfig+0xf8>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a10      	ldr	r2, [pc, #64]	; (8006b40 <TIM_Base_SetConfig+0x12c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d003      	beq.n	8006b0c <TIM_Base_SetConfig+0xf8>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a0f      	ldr	r2, [pc, #60]	; (8006b44 <TIM_Base_SetConfig+0x130>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d103      	bne.n	8006b14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	691a      	ldr	r2, [r3, #16]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	615a      	str	r2, [r3, #20]
}
 8006b1a:	bf00      	nop
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	40012c00 	.word	0x40012c00
 8006b2c:	40000400 	.word	0x40000400
 8006b30:	40000800 	.word	0x40000800
 8006b34:	40000c00 	.word	0x40000c00
 8006b38:	40013400 	.word	0x40013400
 8006b3c:	40014000 	.word	0x40014000
 8006b40:	40014400 	.word	0x40014400
 8006b44:	40014800 	.word	0x40014800

08006b48 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
 8006b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	f023 0201 	bic.w	r2, r3, #1
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	4a26      	ldr	r2, [pc, #152]	; (8006c0c <TIM_TI1_SetConfig+0xc4>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d017      	beq.n	8006ba6 <TIM_TI1_SetConfig+0x5e>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b7c:	d013      	beq.n	8006ba6 <TIM_TI1_SetConfig+0x5e>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4a23      	ldr	r2, [pc, #140]	; (8006c10 <TIM_TI1_SetConfig+0xc8>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d00f      	beq.n	8006ba6 <TIM_TI1_SetConfig+0x5e>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	4a22      	ldr	r2, [pc, #136]	; (8006c14 <TIM_TI1_SetConfig+0xcc>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00b      	beq.n	8006ba6 <TIM_TI1_SetConfig+0x5e>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	4a21      	ldr	r2, [pc, #132]	; (8006c18 <TIM_TI1_SetConfig+0xd0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d007      	beq.n	8006ba6 <TIM_TI1_SetConfig+0x5e>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	4a20      	ldr	r2, [pc, #128]	; (8006c1c <TIM_TI1_SetConfig+0xd4>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d003      	beq.n	8006ba6 <TIM_TI1_SetConfig+0x5e>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	4a1f      	ldr	r2, [pc, #124]	; (8006c20 <TIM_TI1_SetConfig+0xd8>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d101      	bne.n	8006baa <TIM_TI1_SetConfig+0x62>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e000      	b.n	8006bac <TIM_TI1_SetConfig+0x64>
 8006baa:	2300      	movs	r3, #0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d008      	beq.n	8006bc2 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f023 0303 	bic.w	r3, r3, #3
 8006bb6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	e003      	b.n	8006bca <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f043 0301 	orr.w	r3, r3, #1
 8006bc8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	011b      	lsls	r3, r3, #4
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f023 030a 	bic.w	r3, r3, #10
 8006be4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f003 030a 	and.w	r3, r3, #10
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	621a      	str	r2, [r3, #32]
}
 8006bfe:	bf00      	nop
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	40012c00 	.word	0x40012c00
 8006c10:	40000400 	.word	0x40000400
 8006c14:	40000800 	.word	0x40000800
 8006c18:	40000c00 	.word	0x40000c00
 8006c1c:	40013400 	.word	0x40013400
 8006c20:	40014000 	.word	0x40014000

08006c24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	f023 0201 	bic.w	r2, r3, #1
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	011b      	lsls	r3, r3, #4
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	f023 030a 	bic.w	r3, r3, #10
 8006c60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	621a      	str	r2, [r3, #32]
}
 8006c76:	bf00      	nop
 8006c78:	371c      	adds	r7, #28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b087      	sub	sp, #28
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	60f8      	str	r0, [r7, #12]
 8006c8a:	60b9      	str	r1, [r7, #8]
 8006c8c:	607a      	str	r2, [r7, #4]
 8006c8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a1b      	ldr	r3, [r3, #32]
 8006c94:	f023 0210 	bic.w	r2, r3, #16
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	021b      	lsls	r3, r3, #8
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	031b      	lsls	r3, r3, #12
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cd4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	011b      	lsls	r3, r3, #4
 8006cda:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	621a      	str	r2, [r3, #32]
}
 8006cf0:	bf00      	nop
 8006cf2:	371c      	adds	r7, #28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	f023 0210 	bic.w	r2, r3, #16
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	031b      	lsls	r3, r3, #12
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	011b      	lsls	r3, r3, #4
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	621a      	str	r2, [r3, #32]
}
 8006d50:	bf00      	nop
 8006d52:	371c      	adds	r7, #28
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
 8006d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f023 0303 	bic.w	r3, r3, #3
 8006d88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	011b      	lsls	r3, r3, #4
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006dac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	021b      	lsls	r3, r3, #8
 8006db2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	621a      	str	r2, [r3, #32]
}
 8006dc8:	bf00      	nop
 8006dca:	371c      	adds	r7, #28
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
 8006de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e12:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	031b      	lsls	r3, r3, #12
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006e26:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	031b      	lsls	r3, r3, #12
 8006e2c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	621a      	str	r2, [r3, #32]
}
 8006e42:	bf00      	nop
 8006e44:	371c      	adds	r7, #28
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b085      	sub	sp, #20
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	f043 0307 	orr.w	r3, r3, #7
 8006e70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	609a      	str	r2, [r3, #8]
}
 8006e78:	bf00      	nop
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b087      	sub	sp, #28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	021a      	lsls	r2, r3, #8
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	609a      	str	r2, [r3, #8]
}
 8006eb8:	bf00      	nop
 8006eba:	371c      	adds	r7, #28
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;             /* Legacy weak PeriodElapsedCallback             */
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a1e      	ldr	r2, [pc, #120]	; (8006f48 <TIM_ResetCallback+0x84>)
 8006ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;     /* Legacy weak PeriodElapsedHalfCpltCallback     */
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a1d      	ldr	r2, [pc, #116]	; (8006f4c <TIM_ResetCallback+0x88>)
 8006ed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;                   /* Legacy weak TriggerCallback                   */
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a1c      	ldr	r2, [pc, #112]	; (8006f50 <TIM_ResetCallback+0x8c>)
 8006ee0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;           /* Legacy weak TriggerHalfCpltCallback           */
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a1b      	ldr	r2, [pc, #108]	; (8006f54 <TIM_ResetCallback+0x90>)
 8006ee8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;                /* Legacy weak IC_CaptureCallback                */
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a1a      	ldr	r2, [pc, #104]	; (8006f58 <TIM_ResetCallback+0x94>)
 8006ef0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;        /* Legacy weak IC_CaptureHalfCpltCallback        */
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a19      	ldr	r2, [pc, #100]	; (8006f5c <TIM_ResetCallback+0x98>)
 8006ef8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;           /* Legacy weak OC_DelayElapsedCallback           */
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a18      	ldr	r2, [pc, #96]	; (8006f60 <TIM_ResetCallback+0x9c>)
 8006f00:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;         /* Legacy weak PWM_PulseFinishedCallback         */
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a17      	ldr	r2, [pc, #92]	; (8006f64 <TIM_ResetCallback+0xa0>)
 8006f08:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback; /* Legacy weak PWM_PulseFinishedHalfCpltCallback */
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a16      	ldr	r2, [pc, #88]	; (8006f68 <TIM_ResetCallback+0xa4>)
 8006f10:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;                     /* Legacy weak ErrorCallback                     */
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a15      	ldr	r2, [pc, #84]	; (8006f6c <TIM_ResetCallback+0xa8>)
 8006f18:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;                  /* Legacy weak CommutationCallback               */
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a14      	ldr	r2, [pc, #80]	; (8006f70 <TIM_ResetCallback+0xac>)
 8006f20:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;          /* Legacy weak CommutationHalfCpltCallback       */
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a13      	ldr	r2, [pc, #76]	; (8006f74 <TIM_ResetCallback+0xb0>)
 8006f28:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;                   /* Legacy weak BreakCallback                     */
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a12      	ldr	r2, [pc, #72]	; (8006f78 <TIM_ResetCallback+0xb4>)
 8006f30:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;                  /* Legacy weak Break2Callback                    */
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a11      	ldr	r2, [pc, #68]	; (8006f7c <TIM_ResetCallback+0xb8>)
 8006f38:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr
 8006f48:	08001055 	.word	0x08001055
 8006f4c:	0800695f 	.word	0x0800695f
 8006f50:	080069d7 	.word	0x080069d7
 8006f54:	080069eb 	.word	0x080069eb
 8006f58:	08006987 	.word	0x08006987
 8006f5c:	0800699b 	.word	0x0800699b
 8006f60:	08006973 	.word	0x08006973
 8006f64:	080069af 	.word	0x080069af
 8006f68:	080069c3 	.word	0x080069c3
 8006f6c:	080069ff 	.word	0x080069ff
 8006f70:	08007091 	.word	0x08007091
 8006f74:	080070a5 	.word	0x080070a5
 8006f78:	080070b9 	.word	0x080070b9
 8006f7c:	080070cd 	.word	0x080070cd

08006f80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d101      	bne.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f94:	2302      	movs	r3, #2
 8006f96:	e068      	b.n	800706a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a2e      	ldr	r2, [pc, #184]	; (8007078 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d004      	beq.n	8006fcc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a2d      	ldr	r2, [pc, #180]	; (800707c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d108      	bne.n	8006fde <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006fd2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a1e      	ldr	r2, [pc, #120]	; (8007078 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d01d      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800700a:	d018      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a1b      	ldr	r2, [pc, #108]	; (8007080 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d013      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a1a      	ldr	r2, [pc, #104]	; (8007084 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00e      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a18      	ldr	r2, [pc, #96]	; (8007088 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d009      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a13      	ldr	r2, [pc, #76]	; (800707c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d004      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a14      	ldr	r2, [pc, #80]	; (800708c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d10c      	bne.n	8007058 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	4313      	orrs	r3, r2
 800704e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	40012c00 	.word	0x40012c00
 800707c:	40013400 	.word	0x40013400
 8007080:	40000400 	.word	0x40000400
 8007084:	40000800 	.word	0x40000800
 8007088:	40000c00 	.word	0x40000c00
 800708c:	40014000 	.word	0x40014000

08007090 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e050      	b.n	8007194 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d114      	bne.n	8007126 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 faeb 	bl	80076e0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d103      	bne.n	800711c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a21      	ldr	r2, [pc, #132]	; (800719c <HAL_UART_Init+0xbc>)
 8007118:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2224      	movs	r2, #36	; 0x24
 800712a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 0201 	bic.w	r2, r2, #1
 800713c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fb20 	bl	8007784 <UART_SetConfig>
 8007144:	4603      	mov	r3, r0
 8007146:	2b01      	cmp	r3, #1
 8007148:	d101      	bne.n	800714e <HAL_UART_Init+0x6e>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e022      	b.n	8007194 <HAL_UART_Init+0xb4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007152:	2b00      	cmp	r3, #0
 8007154:	d002      	beq.n	800715c <HAL_UART_Init+0x7c>
  {
    UART_AdvFeatureConfig(huart);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fdde 	bl	8007d18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685a      	ldr	r2, [r3, #4]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800716a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	689a      	ldr	r2, [r3, #8]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800717a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f042 0201 	orr.w	r2, r2, #1
 800718a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fe65 	bl	8007e5c <UART_CheckIdleState>
 8007192:	4603      	mov	r3, r0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	08001665 	.word	0x08001665

080071a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80071c0:	69fa      	ldr	r2, [r7, #28]
 80071c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80071c6:	4013      	ands	r3, r2
 80071c8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d118      	bne.n	8007202 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	f003 0320 	and.w	r3, r3, #32
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d013      	beq.n	8007202 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	f003 0320 	and.w	r3, r3, #32
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d104      	bne.n	80071ee <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d009      	beq.n	8007202 <HAL_UART_IRQHandler+0x62>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 820b 	beq.w	800760e <HAL_UART_IRQHandler+0x46e>
      {
        huart->RxISR(huart);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	4798      	blx	r3
      }
      return;
 8007200:	e205      	b.n	800760e <HAL_UART_IRQHandler+0x46e>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 80f5 	beq.w	80073f4 <HAL_UART_IRQHandler+0x254>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	4b76      	ldr	r3, [pc, #472]	; (80073e8 <HAL_UART_IRQHandler+0x248>)
 800720e:	4013      	ands	r3, r2
 8007210:	2b00      	cmp	r3, #0
 8007212:	d105      	bne.n	8007220 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007214:	69ba      	ldr	r2, [r7, #24]
 8007216:	4b75      	ldr	r3, [pc, #468]	; (80073ec <HAL_UART_IRQHandler+0x24c>)
 8007218:	4013      	ands	r3, r2
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 80ea 	beq.w	80073f4 <HAL_UART_IRQHandler+0x254>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b00      	cmp	r3, #0
 8007228:	d010      	beq.n	800724c <HAL_UART_IRQHandler+0xac>
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00b      	beq.n	800724c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2201      	movs	r2, #1
 800723a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007242:	f043 0201 	orr.w	r2, r3, #1
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	f003 0302 	and.w	r3, r3, #2
 8007252:	2b00      	cmp	r3, #0
 8007254:	d010      	beq.n	8007278 <HAL_UART_IRQHandler+0xd8>
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00b      	beq.n	8007278 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2202      	movs	r2, #2
 8007266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800726e:	f043 0204 	orr.w	r2, r3, #4
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	f003 0304 	and.w	r3, r3, #4
 800727e:	2b00      	cmp	r3, #0
 8007280:	d010      	beq.n	80072a4 <HAL_UART_IRQHandler+0x104>
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f003 0301 	and.w	r3, r3, #1
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00b      	beq.n	80072a4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2204      	movs	r2, #4
 8007292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800729a:	f043 0202 	orr.w	r2, r3, #2
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	f003 0308 	and.w	r3, r3, #8
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d015      	beq.n	80072da <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	f003 0320 	and.w	r3, r3, #32
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d104      	bne.n	80072c2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	4b4b      	ldr	r3, [pc, #300]	; (80073e8 <HAL_UART_IRQHandler+0x248>)
 80072bc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00b      	beq.n	80072da <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2208      	movs	r2, #8
 80072c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072d0:	f043 0208 	orr.w	r2, r3, #8
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d011      	beq.n	8007308 <HAL_UART_IRQHandler+0x168>
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00c      	beq.n	8007308 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072fe:	f043 0220 	orr.w	r2, r3, #32
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800730e:	2b00      	cmp	r3, #0
 8007310:	f000 817f 	beq.w	8007612 <HAL_UART_IRQHandler+0x472>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	f003 0320 	and.w	r3, r3, #32
 800731a:	2b00      	cmp	r3, #0
 800731c:	d011      	beq.n	8007342 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	f003 0320 	and.w	r3, r3, #32
 8007324:	2b00      	cmp	r3, #0
 8007326:	d104      	bne.n	8007332 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d007      	beq.n	8007342 <HAL_UART_IRQHandler+0x1a2>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007348:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007354:	2b40      	cmp	r3, #64	; 0x40
 8007356:	d004      	beq.n	8007362 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800735e:	2b00      	cmp	r3, #0
 8007360:	d035      	beq.n	80073ce <HAL_UART_IRQHandler+0x22e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fe45 	bl	8007ff2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007372:	2b40      	cmp	r3, #64	; 0x40
 8007374:	d125      	bne.n	80073c2 <HAL_UART_IRQHandler+0x222>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689a      	ldr	r2, [r3, #8]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007384:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800738a:	2b00      	cmp	r3, #0
 800738c:	d013      	beq.n	80073b6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007392:	4a17      	ldr	r2, [pc, #92]	; (80073f0 <HAL_UART_IRQHandler+0x250>)
 8007394:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800739a:	4618      	mov	r0, r3
 800739c:	f7fc f9ec 	bl	8003778 <HAL_DMA_Abort_IT>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d01d      	beq.n	80073e2 <HAL_UART_IRQHandler+0x242>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80073b0:	4610      	mov	r0, r2
 80073b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b4:	e015      	b.n	80073e2 <HAL_UART_IRQHandler+0x242>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c0:	e00f      	b.n	80073e2 <HAL_UART_IRQHandler+0x242>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073cc:	e009      	b.n	80073e2 <HAL_UART_IRQHandler+0x242>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80073e0:	e117      	b.n	8007612 <HAL_UART_IRQHandler+0x472>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e2:	bf00      	nop
    return;
 80073e4:	e115      	b.n	8007612 <HAL_UART_IRQHandler+0x472>
 80073e6:	bf00      	nop
 80073e8:	10000001 	.word	0x10000001
 80073ec:	04000120 	.word	0x04000120
 80073f0:	08008057 	.word	0x08008057

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	f040 80af 	bne.w	800755c <HAL_UART_IRQHandler+0x3bc>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	f003 0310 	and.w	r3, r3, #16
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 80a9 	beq.w	800755c <HAL_UART_IRQHandler+0x3bc>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	f003 0310 	and.w	r3, r3, #16
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 80a3 	beq.w	800755c <HAL_UART_IRQHandler+0x3bc>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2210      	movs	r2, #16
 800741c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007428:	2b40      	cmp	r3, #64	; 0x40
 800742a:	d157      	bne.n	80074dc <HAL_UART_IRQHandler+0x33c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8007436:	893b      	ldrh	r3, [r7, #8]
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 80ec 	beq.w	8007616 <HAL_UART_IRQHandler+0x476>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007444:	893a      	ldrh	r2, [r7, #8]
 8007446:	429a      	cmp	r2, r3
 8007448:	f080 80e5 	bcs.w	8007616 <HAL_UART_IRQHandler+0x476>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	893a      	ldrh	r2, [r7, #8]
 8007450:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0320 	and.w	r3, r3, #32
 8007460:	2b00      	cmp	r3, #0
 8007462:	d12b      	bne.n	80074bc <HAL_UART_IRQHandler+0x31c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007472:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689a      	ldr	r2, [r3, #8]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 0201 	bic.w	r2, r2, #1
 8007482:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689a      	ldr	r2, [r3, #8]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007492:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2220      	movs	r2, #32
 8007498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f022 0210 	bic.w	r2, r2, #16
 80074b0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fc f902 	bl	80036c0 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 80074ce:	b292      	uxth	r2, r2
 80074d0:	1a8a      	subs	r2, r1, r2
 80074d2:	b292      	uxth	r2, r2
 80074d4:	4611      	mov	r1, r2
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 80074da:	e09c      	b.n	8007616 <HAL_UART_IRQHandler+0x476>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f000 808f 	beq.w	800761a <HAL_UART_IRQHandler+0x47a>
          &&(nb_rx_data > 0U) )
 80074fc:	897b      	ldrh	r3, [r7, #10]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f000 808b 	beq.w	800761a <HAL_UART_IRQHandler+0x47a>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007512:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	6812      	ldr	r2, [r2, #0]
 800751e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007522:	f023 0301 	bic.w	r3, r3, #1
 8007526:	6093      	str	r3, [r2, #8]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2220      	movs	r2, #32
 800752c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 0210 	bic.w	r2, r2, #16
 800754a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007552:	897a      	ldrh	r2, [r7, #10]
 8007554:	4611      	mov	r1, r2
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 800755a:	e05e      	b.n	800761a <HAL_UART_IRQHandler+0x47a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00f      	beq.n	8007586 <HAL_UART_IRQHandler+0x3e6>
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00a      	beq.n	8007586 <HAL_UART_IRQHandler+0x3e6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007578:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007584:	e04c      	b.n	8007620 <HAL_UART_IRQHandler+0x480>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800758c:	2b00      	cmp	r3, #0
 800758e:	d012      	beq.n	80075b6 <HAL_UART_IRQHandler+0x416>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007596:	2b00      	cmp	r3, #0
 8007598:	d104      	bne.n	80075a4 <HAL_UART_IRQHandler+0x404>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d008      	beq.n	80075b6 <HAL_UART_IRQHandler+0x416>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d038      	beq.n	800761e <HAL_UART_IRQHandler+0x47e>
    {
      huart->TxISR(huart);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	4798      	blx	r3
    }
    return;
 80075b4:	e033      	b.n	800761e <HAL_UART_IRQHandler+0x47e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d008      	beq.n	80075d2 <HAL_UART_IRQHandler+0x432>
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d003      	beq.n	80075d2 <HAL_UART_IRQHandler+0x432>
  {
    UART_EndTransmit_IT(huart);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fd5b 	bl	8008086 <UART_EndTransmit_IT>
    return;
 80075d0:	e026      	b.n	8007620 <HAL_UART_IRQHandler+0x480>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00a      	beq.n	80075f2 <HAL_UART_IRQHandler+0x452>
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d005      	beq.n	80075f2 <HAL_UART_IRQHandler+0x452>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075f0:	e016      	b.n	8007620 <HAL_UART_IRQHandler+0x480>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d011      	beq.n	8007620 <HAL_UART_IRQHandler+0x480>
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	da0e      	bge.n	8007620 <HAL_UART_IRQHandler+0x480>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800760c:	e008      	b.n	8007620 <HAL_UART_IRQHandler+0x480>
      return;
 800760e:	bf00      	nop
 8007610:	e006      	b.n	8007620 <HAL_UART_IRQHandler+0x480>
    return;
 8007612:	bf00      	nop
 8007614:	e004      	b.n	8007620 <HAL_UART_IRQHandler+0x480>
      return;
 8007616:	bf00      	nop
 8007618:	e002      	b.n	8007620 <HAL_UART_IRQHandler+0x480>
      return;
 800761a:	bf00      	nop
 800761c:	e000      	b.n	8007620 <HAL_UART_IRQHandler+0x480>
    return;
 800761e:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8007620:	3720      	adds	r7, #32
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop

08007628 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	460b      	mov	r3, r1
 80076d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a1a      	ldr	r2, [pc, #104]	; (8007754 <UART_InitCallbacksToDefault+0x74>)
 80076ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a19      	ldr	r2, [pc, #100]	; (8007758 <UART_InitCallbacksToDefault+0x78>)
 80076f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a18      	ldr	r2, [pc, #96]	; (800775c <UART_InitCallbacksToDefault+0x7c>)
 80076fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a17      	ldr	r2, [pc, #92]	; (8007760 <UART_InitCallbacksToDefault+0x80>)
 8007704:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a16      	ldr	r2, [pc, #88]	; (8007764 <UART_InitCallbacksToDefault+0x84>)
 800770c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a15      	ldr	r2, [pc, #84]	; (8007768 <UART_InitCallbacksToDefault+0x88>)
 8007714:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a14      	ldr	r2, [pc, #80]	; (800776c <UART_InitCallbacksToDefault+0x8c>)
 800771c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a13      	ldr	r2, [pc, #76]	; (8007770 <UART_InitCallbacksToDefault+0x90>)
 8007724:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a12      	ldr	r2, [pc, #72]	; (8007774 <UART_InitCallbacksToDefault+0x94>)
 800772c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#if defined(USART_CR1_FIFOEN)
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a11      	ldr	r2, [pc, #68]	; (8007778 <UART_InitCallbacksToDefault+0x98>)
 8007734:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a10      	ldr	r2, [pc, #64]	; (800777c <UART_InitCallbacksToDefault+0x9c>)
 800773c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* USART_CR1_FIFOEN */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a0f      	ldr	r2, [pc, #60]	; (8007780 <UART_InitCallbacksToDefault+0xa0>)
 8007744:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	0800763d 	.word	0x0800763d
 8007758:	08007629 	.word	0x08007629
 800775c:	08007665 	.word	0x08007665
 8007760:	08007651 	.word	0x08007651
 8007764:	08007679 	.word	0x08007679
 8007768:	0800768d 	.word	0x0800768d
 800776c:	080076a1 	.word	0x080076a1
 8007770:	080076b5 	.word	0x080076b5
 8007774:	080080bf 	.word	0x080080bf
 8007778:	080080d3 	.word	0x080080d3
 800777c:	080080e7 	.word	0x080080e7
 8007780:	080076c9 	.word	0x080076c9

08007784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007784:	b5b0      	push	{r4, r5, r7, lr}
 8007786:	b088      	sub	sp, #32
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800778c:	2300      	movs	r3, #0
 800778e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689a      	ldr	r2, [r3, #8]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	431a      	orrs	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	431a      	orrs	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	4bb1      	ldr	r3, [pc, #708]	; (8007a74 <UART_SetConfig+0x2f0>)
 80077b0:	4013      	ands	r3, r2
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	6812      	ldr	r2, [r2, #0]
 80077b6:	69f9      	ldr	r1, [r7, #28]
 80077b8:	430b      	orrs	r3, r1
 80077ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68da      	ldr	r2, [r3, #12]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4aa6      	ldr	r2, [pc, #664]	; (8007a78 <UART_SetConfig+0x2f4>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d004      	beq.n	80077ec <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	69fa      	ldr	r2, [r7, #28]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80077f6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	6812      	ldr	r2, [r2, #0]
 80077fe:	69f9      	ldr	r1, [r7, #28]
 8007800:	430b      	orrs	r3, r1
 8007802:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780a:	f023 010f 	bic.w	r1, r3, #15
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	430a      	orrs	r2, r1
 8007818:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a97      	ldr	r2, [pc, #604]	; (8007a7c <UART_SetConfig+0x2f8>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d120      	bne.n	8007866 <UART_SetConfig+0xe2>
 8007824:	4b96      	ldr	r3, [pc, #600]	; (8007a80 <UART_SetConfig+0x2fc>)
 8007826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800782a:	f003 0303 	and.w	r3, r3, #3
 800782e:	2b03      	cmp	r3, #3
 8007830:	d816      	bhi.n	8007860 <UART_SetConfig+0xdc>
 8007832:	a201      	add	r2, pc, #4	; (adr r2, 8007838 <UART_SetConfig+0xb4>)
 8007834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007838:	08007849 	.word	0x08007849
 800783c:	08007855 	.word	0x08007855
 8007840:	0800784f 	.word	0x0800784f
 8007844:	0800785b 	.word	0x0800785b
 8007848:	2301      	movs	r3, #1
 800784a:	76fb      	strb	r3, [r7, #27]
 800784c:	e0e7      	b.n	8007a1e <UART_SetConfig+0x29a>
 800784e:	2302      	movs	r3, #2
 8007850:	76fb      	strb	r3, [r7, #27]
 8007852:	e0e4      	b.n	8007a1e <UART_SetConfig+0x29a>
 8007854:	2304      	movs	r3, #4
 8007856:	76fb      	strb	r3, [r7, #27]
 8007858:	e0e1      	b.n	8007a1e <UART_SetConfig+0x29a>
 800785a:	2308      	movs	r3, #8
 800785c:	76fb      	strb	r3, [r7, #27]
 800785e:	e0de      	b.n	8007a1e <UART_SetConfig+0x29a>
 8007860:	2310      	movs	r3, #16
 8007862:	76fb      	strb	r3, [r7, #27]
 8007864:	e0db      	b.n	8007a1e <UART_SetConfig+0x29a>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a86      	ldr	r2, [pc, #536]	; (8007a84 <UART_SetConfig+0x300>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d132      	bne.n	80078d6 <UART_SetConfig+0x152>
 8007870:	4b83      	ldr	r3, [pc, #524]	; (8007a80 <UART_SetConfig+0x2fc>)
 8007872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007876:	f003 030c 	and.w	r3, r3, #12
 800787a:	2b0c      	cmp	r3, #12
 800787c:	d828      	bhi.n	80078d0 <UART_SetConfig+0x14c>
 800787e:	a201      	add	r2, pc, #4	; (adr r2, 8007884 <UART_SetConfig+0x100>)
 8007880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007884:	080078b9 	.word	0x080078b9
 8007888:	080078d1 	.word	0x080078d1
 800788c:	080078d1 	.word	0x080078d1
 8007890:	080078d1 	.word	0x080078d1
 8007894:	080078c5 	.word	0x080078c5
 8007898:	080078d1 	.word	0x080078d1
 800789c:	080078d1 	.word	0x080078d1
 80078a0:	080078d1 	.word	0x080078d1
 80078a4:	080078bf 	.word	0x080078bf
 80078a8:	080078d1 	.word	0x080078d1
 80078ac:	080078d1 	.word	0x080078d1
 80078b0:	080078d1 	.word	0x080078d1
 80078b4:	080078cb 	.word	0x080078cb
 80078b8:	2300      	movs	r3, #0
 80078ba:	76fb      	strb	r3, [r7, #27]
 80078bc:	e0af      	b.n	8007a1e <UART_SetConfig+0x29a>
 80078be:	2302      	movs	r3, #2
 80078c0:	76fb      	strb	r3, [r7, #27]
 80078c2:	e0ac      	b.n	8007a1e <UART_SetConfig+0x29a>
 80078c4:	2304      	movs	r3, #4
 80078c6:	76fb      	strb	r3, [r7, #27]
 80078c8:	e0a9      	b.n	8007a1e <UART_SetConfig+0x29a>
 80078ca:	2308      	movs	r3, #8
 80078cc:	76fb      	strb	r3, [r7, #27]
 80078ce:	e0a6      	b.n	8007a1e <UART_SetConfig+0x29a>
 80078d0:	2310      	movs	r3, #16
 80078d2:	76fb      	strb	r3, [r7, #27]
 80078d4:	e0a3      	b.n	8007a1e <UART_SetConfig+0x29a>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a6b      	ldr	r2, [pc, #428]	; (8007a88 <UART_SetConfig+0x304>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d120      	bne.n	8007922 <UART_SetConfig+0x19e>
 80078e0:	4b67      	ldr	r3, [pc, #412]	; (8007a80 <UART_SetConfig+0x2fc>)
 80078e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80078ea:	2b30      	cmp	r3, #48	; 0x30
 80078ec:	d013      	beq.n	8007916 <UART_SetConfig+0x192>
 80078ee:	2b30      	cmp	r3, #48	; 0x30
 80078f0:	d814      	bhi.n	800791c <UART_SetConfig+0x198>
 80078f2:	2b20      	cmp	r3, #32
 80078f4:	d009      	beq.n	800790a <UART_SetConfig+0x186>
 80078f6:	2b20      	cmp	r3, #32
 80078f8:	d810      	bhi.n	800791c <UART_SetConfig+0x198>
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <UART_SetConfig+0x180>
 80078fe:	2b10      	cmp	r3, #16
 8007900:	d006      	beq.n	8007910 <UART_SetConfig+0x18c>
 8007902:	e00b      	b.n	800791c <UART_SetConfig+0x198>
 8007904:	2300      	movs	r3, #0
 8007906:	76fb      	strb	r3, [r7, #27]
 8007908:	e089      	b.n	8007a1e <UART_SetConfig+0x29a>
 800790a:	2302      	movs	r3, #2
 800790c:	76fb      	strb	r3, [r7, #27]
 800790e:	e086      	b.n	8007a1e <UART_SetConfig+0x29a>
 8007910:	2304      	movs	r3, #4
 8007912:	76fb      	strb	r3, [r7, #27]
 8007914:	e083      	b.n	8007a1e <UART_SetConfig+0x29a>
 8007916:	2308      	movs	r3, #8
 8007918:	76fb      	strb	r3, [r7, #27]
 800791a:	e080      	b.n	8007a1e <UART_SetConfig+0x29a>
 800791c:	2310      	movs	r3, #16
 800791e:	76fb      	strb	r3, [r7, #27]
 8007920:	e07d      	b.n	8007a1e <UART_SetConfig+0x29a>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a59      	ldr	r2, [pc, #356]	; (8007a8c <UART_SetConfig+0x308>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d120      	bne.n	800796e <UART_SetConfig+0x1ea>
 800792c:	4b54      	ldr	r3, [pc, #336]	; (8007a80 <UART_SetConfig+0x2fc>)
 800792e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007932:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007936:	2bc0      	cmp	r3, #192	; 0xc0
 8007938:	d013      	beq.n	8007962 <UART_SetConfig+0x1de>
 800793a:	2bc0      	cmp	r3, #192	; 0xc0
 800793c:	d814      	bhi.n	8007968 <UART_SetConfig+0x1e4>
 800793e:	2b80      	cmp	r3, #128	; 0x80
 8007940:	d009      	beq.n	8007956 <UART_SetConfig+0x1d2>
 8007942:	2b80      	cmp	r3, #128	; 0x80
 8007944:	d810      	bhi.n	8007968 <UART_SetConfig+0x1e4>
 8007946:	2b00      	cmp	r3, #0
 8007948:	d002      	beq.n	8007950 <UART_SetConfig+0x1cc>
 800794a:	2b40      	cmp	r3, #64	; 0x40
 800794c:	d006      	beq.n	800795c <UART_SetConfig+0x1d8>
 800794e:	e00b      	b.n	8007968 <UART_SetConfig+0x1e4>
 8007950:	2300      	movs	r3, #0
 8007952:	76fb      	strb	r3, [r7, #27]
 8007954:	e063      	b.n	8007a1e <UART_SetConfig+0x29a>
 8007956:	2302      	movs	r3, #2
 8007958:	76fb      	strb	r3, [r7, #27]
 800795a:	e060      	b.n	8007a1e <UART_SetConfig+0x29a>
 800795c:	2304      	movs	r3, #4
 800795e:	76fb      	strb	r3, [r7, #27]
 8007960:	e05d      	b.n	8007a1e <UART_SetConfig+0x29a>
 8007962:	2308      	movs	r3, #8
 8007964:	76fb      	strb	r3, [r7, #27]
 8007966:	e05a      	b.n	8007a1e <UART_SetConfig+0x29a>
 8007968:	2310      	movs	r3, #16
 800796a:	76fb      	strb	r3, [r7, #27]
 800796c:	e057      	b.n	8007a1e <UART_SetConfig+0x29a>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a47      	ldr	r2, [pc, #284]	; (8007a90 <UART_SetConfig+0x30c>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d125      	bne.n	80079c4 <UART_SetConfig+0x240>
 8007978:	4b41      	ldr	r3, [pc, #260]	; (8007a80 <UART_SetConfig+0x2fc>)
 800797a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800797e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007986:	d017      	beq.n	80079b8 <UART_SetConfig+0x234>
 8007988:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800798c:	d817      	bhi.n	80079be <UART_SetConfig+0x23a>
 800798e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007992:	d00b      	beq.n	80079ac <UART_SetConfig+0x228>
 8007994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007998:	d811      	bhi.n	80079be <UART_SetConfig+0x23a>
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <UART_SetConfig+0x222>
 800799e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079a2:	d006      	beq.n	80079b2 <UART_SetConfig+0x22e>
 80079a4:	e00b      	b.n	80079be <UART_SetConfig+0x23a>
 80079a6:	2300      	movs	r3, #0
 80079a8:	76fb      	strb	r3, [r7, #27]
 80079aa:	e038      	b.n	8007a1e <UART_SetConfig+0x29a>
 80079ac:	2302      	movs	r3, #2
 80079ae:	76fb      	strb	r3, [r7, #27]
 80079b0:	e035      	b.n	8007a1e <UART_SetConfig+0x29a>
 80079b2:	2304      	movs	r3, #4
 80079b4:	76fb      	strb	r3, [r7, #27]
 80079b6:	e032      	b.n	8007a1e <UART_SetConfig+0x29a>
 80079b8:	2308      	movs	r3, #8
 80079ba:	76fb      	strb	r3, [r7, #27]
 80079bc:	e02f      	b.n	8007a1e <UART_SetConfig+0x29a>
 80079be:	2310      	movs	r3, #16
 80079c0:	76fb      	strb	r3, [r7, #27]
 80079c2:	e02c      	b.n	8007a1e <UART_SetConfig+0x29a>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a2b      	ldr	r2, [pc, #172]	; (8007a78 <UART_SetConfig+0x2f4>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d125      	bne.n	8007a1a <UART_SetConfig+0x296>
 80079ce:	4b2c      	ldr	r3, [pc, #176]	; (8007a80 <UART_SetConfig+0x2fc>)
 80079d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80079d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079dc:	d017      	beq.n	8007a0e <UART_SetConfig+0x28a>
 80079de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079e2:	d817      	bhi.n	8007a14 <UART_SetConfig+0x290>
 80079e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079e8:	d00b      	beq.n	8007a02 <UART_SetConfig+0x27e>
 80079ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079ee:	d811      	bhi.n	8007a14 <UART_SetConfig+0x290>
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d003      	beq.n	80079fc <UART_SetConfig+0x278>
 80079f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079f8:	d006      	beq.n	8007a08 <UART_SetConfig+0x284>
 80079fa:	e00b      	b.n	8007a14 <UART_SetConfig+0x290>
 80079fc:	2300      	movs	r3, #0
 80079fe:	76fb      	strb	r3, [r7, #27]
 8007a00:	e00d      	b.n	8007a1e <UART_SetConfig+0x29a>
 8007a02:	2302      	movs	r3, #2
 8007a04:	76fb      	strb	r3, [r7, #27]
 8007a06:	e00a      	b.n	8007a1e <UART_SetConfig+0x29a>
 8007a08:	2304      	movs	r3, #4
 8007a0a:	76fb      	strb	r3, [r7, #27]
 8007a0c:	e007      	b.n	8007a1e <UART_SetConfig+0x29a>
 8007a0e:	2308      	movs	r3, #8
 8007a10:	76fb      	strb	r3, [r7, #27]
 8007a12:	e004      	b.n	8007a1e <UART_SetConfig+0x29a>
 8007a14:	2310      	movs	r3, #16
 8007a16:	76fb      	strb	r3, [r7, #27]
 8007a18:	e001      	b.n	8007a1e <UART_SetConfig+0x29a>
 8007a1a:	2310      	movs	r3, #16
 8007a1c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a15      	ldr	r2, [pc, #84]	; (8007a78 <UART_SetConfig+0x2f4>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	f040 809f 	bne.w	8007b68 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a2a:	7efb      	ldrb	r3, [r7, #27]
 8007a2c:	2b08      	cmp	r3, #8
 8007a2e:	d837      	bhi.n	8007aa0 <UART_SetConfig+0x31c>
 8007a30:	a201      	add	r2, pc, #4	; (adr r2, 8007a38 <UART_SetConfig+0x2b4>)
 8007a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a36:	bf00      	nop
 8007a38:	08007a5d 	.word	0x08007a5d
 8007a3c:	08007aa1 	.word	0x08007aa1
 8007a40:	08007a65 	.word	0x08007a65
 8007a44:	08007aa1 	.word	0x08007aa1
 8007a48:	08007a6b 	.word	0x08007a6b
 8007a4c:	08007aa1 	.word	0x08007aa1
 8007a50:	08007aa1 	.word	0x08007aa1
 8007a54:	08007aa1 	.word	0x08007aa1
 8007a58:	08007a99 	.word	0x08007a99
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a5c:	f7fd fa44 	bl	8004ee8 <HAL_RCC_GetPCLK1Freq>
 8007a60:	6178      	str	r0, [r7, #20]
        break;
 8007a62:	e022      	b.n	8007aaa <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a64:	4b0b      	ldr	r3, [pc, #44]	; (8007a94 <UART_SetConfig+0x310>)
 8007a66:	617b      	str	r3, [r7, #20]
        break;
 8007a68:	e01f      	b.n	8007aaa <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a6a:	f7fd f9a5 	bl	8004db8 <HAL_RCC_GetSysClockFreq>
 8007a6e:	6178      	str	r0, [r7, #20]
        break;
 8007a70:	e01b      	b.n	8007aaa <UART_SetConfig+0x326>
 8007a72:	bf00      	nop
 8007a74:	cfff69f3 	.word	0xcfff69f3
 8007a78:	40008000 	.word	0x40008000
 8007a7c:	40013800 	.word	0x40013800
 8007a80:	40021000 	.word	0x40021000
 8007a84:	40004400 	.word	0x40004400
 8007a88:	40004800 	.word	0x40004800
 8007a8c:	40004c00 	.word	0x40004c00
 8007a90:	40005000 	.word	0x40005000
 8007a94:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a9c:	617b      	str	r3, [r7, #20]
        break;
 8007a9e:	e004      	b.n	8007aaa <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	76bb      	strb	r3, [r7, #26]
        break;
 8007aa8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 811b 	beq.w	8007ce8 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab6:	4a96      	ldr	r2, [pc, #600]	; (8007d10 <UART_SetConfig+0x58c>)
 8007ab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007abc:	461a      	mov	r2, r3
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ac4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	4613      	mov	r3, r2
 8007acc:	005b      	lsls	r3, r3, #1
 8007ace:	4413      	add	r3, r2
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d305      	bcc.n	8007ae2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d902      	bls.n	8007ae8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	76bb      	strb	r3, [r7, #26]
 8007ae6:	e0ff      	b.n	8007ce8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f04f 0100 	mov.w	r1, #0
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af4:	4a86      	ldr	r2, [pc, #536]	; (8007d10 <UART_SetConfig+0x58c>)
 8007af6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	f04f 0300 	mov.w	r3, #0
 8007b00:	f7f8 fb7e 	bl	8000200 <__aeabi_uldivmod>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	4610      	mov	r0, r2
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	f04f 0200 	mov.w	r2, #0
 8007b10:	f04f 0300 	mov.w	r3, #0
 8007b14:	020b      	lsls	r3, r1, #8
 8007b16:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b1a:	0202      	lsls	r2, r0, #8
 8007b1c:	6879      	ldr	r1, [r7, #4]
 8007b1e:	6849      	ldr	r1, [r1, #4]
 8007b20:	0849      	lsrs	r1, r1, #1
 8007b22:	4608      	mov	r0, r1
 8007b24:	f04f 0100 	mov.w	r1, #0
 8007b28:	1814      	adds	r4, r2, r0
 8007b2a:	eb43 0501 	adc.w	r5, r3, r1
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	461a      	mov	r2, r3
 8007b34:	f04f 0300 	mov.w	r3, #0
 8007b38:	4620      	mov	r0, r4
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	f7f8 fb60 	bl	8000200 <__aeabi_uldivmod>
 8007b40:	4602      	mov	r2, r0
 8007b42:	460b      	mov	r3, r1
 8007b44:	4613      	mov	r3, r2
 8007b46:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b4e:	d308      	bcc.n	8007b62 <UART_SetConfig+0x3de>
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b56:	d204      	bcs.n	8007b62 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	60da      	str	r2, [r3, #12]
 8007b60:	e0c2      	b.n	8007ce8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	76bb      	strb	r3, [r7, #26]
 8007b66:	e0bf      	b.n	8007ce8 <UART_SetConfig+0x564>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	69db      	ldr	r3, [r3, #28]
 8007b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b70:	d165      	bne.n	8007c3e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8007b72:	7efb      	ldrb	r3, [r7, #27]
 8007b74:	2b08      	cmp	r3, #8
 8007b76:	d828      	bhi.n	8007bca <UART_SetConfig+0x446>
 8007b78:	a201      	add	r2, pc, #4	; (adr r2, 8007b80 <UART_SetConfig+0x3fc>)
 8007b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7e:	bf00      	nop
 8007b80:	08007ba5 	.word	0x08007ba5
 8007b84:	08007bad 	.word	0x08007bad
 8007b88:	08007bb5 	.word	0x08007bb5
 8007b8c:	08007bcb 	.word	0x08007bcb
 8007b90:	08007bbb 	.word	0x08007bbb
 8007b94:	08007bcb 	.word	0x08007bcb
 8007b98:	08007bcb 	.word	0x08007bcb
 8007b9c:	08007bcb 	.word	0x08007bcb
 8007ba0:	08007bc3 	.word	0x08007bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ba4:	f7fd f9a0 	bl	8004ee8 <HAL_RCC_GetPCLK1Freq>
 8007ba8:	6178      	str	r0, [r7, #20]
        break;
 8007baa:	e013      	b.n	8007bd4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bac:	f7fd f9b2 	bl	8004f14 <HAL_RCC_GetPCLK2Freq>
 8007bb0:	6178      	str	r0, [r7, #20]
        break;
 8007bb2:	e00f      	b.n	8007bd4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bb4:	4b57      	ldr	r3, [pc, #348]	; (8007d14 <UART_SetConfig+0x590>)
 8007bb6:	617b      	str	r3, [r7, #20]
        break;
 8007bb8:	e00c      	b.n	8007bd4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bba:	f7fd f8fd 	bl	8004db8 <HAL_RCC_GetSysClockFreq>
 8007bbe:	6178      	str	r0, [r7, #20]
        break;
 8007bc0:	e008      	b.n	8007bd4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bc6:	617b      	str	r3, [r7, #20]
        break;
 8007bc8:	e004      	b.n	8007bd4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	76bb      	strb	r3, [r7, #26]
        break;
 8007bd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f000 8086 	beq.w	8007ce8 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be0:	4a4b      	ldr	r2, [pc, #300]	; (8007d10 <UART_SetConfig+0x58c>)
 8007be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007be6:	461a      	mov	r2, r3
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bee:	005a      	lsls	r2, r3, #1
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	085b      	lsrs	r3, r3, #1
 8007bf6:	441a      	add	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	2b0f      	cmp	r3, #15
 8007c08:	d916      	bls.n	8007c38 <UART_SetConfig+0x4b4>
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c10:	d212      	bcs.n	8007c38 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	f023 030f 	bic.w	r3, r3, #15
 8007c1a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	085b      	lsrs	r3, r3, #1
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	f003 0307 	and.w	r3, r3, #7
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	89fb      	ldrh	r3, [r7, #14]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	89fa      	ldrh	r2, [r7, #14]
 8007c34:	60da      	str	r2, [r3, #12]
 8007c36:	e057      	b.n	8007ce8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	76bb      	strb	r3, [r7, #26]
 8007c3c:	e054      	b.n	8007ce8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c3e:	7efb      	ldrb	r3, [r7, #27]
 8007c40:	2b08      	cmp	r3, #8
 8007c42:	d828      	bhi.n	8007c96 <UART_SetConfig+0x512>
 8007c44:	a201      	add	r2, pc, #4	; (adr r2, 8007c4c <UART_SetConfig+0x4c8>)
 8007c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4a:	bf00      	nop
 8007c4c:	08007c71 	.word	0x08007c71
 8007c50:	08007c79 	.word	0x08007c79
 8007c54:	08007c81 	.word	0x08007c81
 8007c58:	08007c97 	.word	0x08007c97
 8007c5c:	08007c87 	.word	0x08007c87
 8007c60:	08007c97 	.word	0x08007c97
 8007c64:	08007c97 	.word	0x08007c97
 8007c68:	08007c97 	.word	0x08007c97
 8007c6c:	08007c8f 	.word	0x08007c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c70:	f7fd f93a 	bl	8004ee8 <HAL_RCC_GetPCLK1Freq>
 8007c74:	6178      	str	r0, [r7, #20]
        break;
 8007c76:	e013      	b.n	8007ca0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c78:	f7fd f94c 	bl	8004f14 <HAL_RCC_GetPCLK2Freq>
 8007c7c:	6178      	str	r0, [r7, #20]
        break;
 8007c7e:	e00f      	b.n	8007ca0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c80:	4b24      	ldr	r3, [pc, #144]	; (8007d14 <UART_SetConfig+0x590>)
 8007c82:	617b      	str	r3, [r7, #20]
        break;
 8007c84:	e00c      	b.n	8007ca0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c86:	f7fd f897 	bl	8004db8 <HAL_RCC_GetSysClockFreq>
 8007c8a:	6178      	str	r0, [r7, #20]
        break;
 8007c8c:	e008      	b.n	8007ca0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c92:	617b      	str	r3, [r7, #20]
        break;
 8007c94:	e004      	b.n	8007ca0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	76bb      	strb	r3, [r7, #26]
        break;
 8007c9e:	bf00      	nop
    }

    if (pclk != 0U)
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d020      	beq.n	8007ce8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007caa:	4a19      	ldr	r2, [pc, #100]	; (8007d10 <UART_SetConfig+0x58c>)
 8007cac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	fbb3 f2f2 	udiv	r2, r3, r2
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	085b      	lsrs	r3, r3, #1
 8007cbe:	441a      	add	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	2b0f      	cmp	r3, #15
 8007cd0:	d908      	bls.n	8007ce4 <UART_SetConfig+0x560>
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cd8:	d204      	bcs.n	8007ce4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	60da      	str	r2, [r3, #12]
 8007ce2:	e001      	b.n	8007ce8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007d04:	7ebb      	ldrb	r3, [r7, #26]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3720      	adds	r7, #32
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	0800bcf4 	.word	0x0800bcf4
 8007d14:	00f42400 	.word	0x00f42400

08007d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00a      	beq.n	8007d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d46:	f003 0302 	and.w	r3, r3, #2
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00a      	beq.n	8007d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	430a      	orrs	r2, r1
 8007d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d68:	f003 0304 	and.w	r3, r3, #4
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00a      	beq.n	8007d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8a:	f003 0308 	and.w	r3, r3, #8
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00a      	beq.n	8007da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	430a      	orrs	r2, r1
 8007da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dac:	f003 0310 	and.w	r3, r3, #16
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00a      	beq.n	8007dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dce:	f003 0320 	and.w	r3, r3, #32
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00a      	beq.n	8007dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	430a      	orrs	r2, r1
 8007dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d01a      	beq.n	8007e2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e16:	d10a      	bne.n	8007e2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	605a      	str	r2, [r3, #4]
  }
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af02      	add	r7, sp, #8
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e6c:	f7f9 fcb6 	bl	80017dc <HAL_GetTick>
 8007e70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0308 	and.w	r3, r3, #8
 8007e7c:	2b08      	cmp	r3, #8
 8007e7e:	d10e      	bne.n	8007e9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f82f 	bl	8007ef2 <UART_WaitOnFlagUntilTimeout>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d001      	beq.n	8007e9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e025      	b.n	8007eea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0304 	and.w	r3, r3, #4
 8007ea8:	2b04      	cmp	r3, #4
 8007eaa:	d10e      	bne.n	8007eca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f819 	bl	8007ef2 <UART_WaitOnFlagUntilTimeout>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e00f      	b.n	8007eea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b084      	sub	sp, #16
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	60f8      	str	r0, [r7, #12]
 8007efa:	60b9      	str	r1, [r7, #8]
 8007efc:	603b      	str	r3, [r7, #0]
 8007efe:	4613      	mov	r3, r2
 8007f00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f02:	e062      	b.n	8007fca <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f0a:	d05e      	beq.n	8007fca <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f0c:	f7f9 fc66 	bl	80017dc <HAL_GetTick>
 8007f10:	4602      	mov	r2, r0
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	69ba      	ldr	r2, [r7, #24]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d302      	bcc.n	8007f22 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d11d      	bne.n	8007f5e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f30:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	689a      	ldr	r2, [r3, #8]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f022 0201 	bic.w	r2, r2, #1
 8007f40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2220      	movs	r2, #32
 8007f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2220      	movs	r2, #32
 8007f4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e045      	b.n	8007fea <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 0304 	and.w	r3, r3, #4
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d02e      	beq.n	8007fca <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	69db      	ldr	r3, [r3, #28]
 8007f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f7a:	d126      	bne.n	8007fca <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f94:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	689a      	ldr	r2, [r3, #8]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f022 0201 	bic.w	r2, r2, #1
 8007fa4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2220      	movs	r2, #32
 8007faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2220      	movs	r2, #32
 8007fb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2220      	movs	r2, #32
 8007fba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e00f      	b.n	8007fea <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	69da      	ldr	r2, [r3, #28]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	bf0c      	ite	eq
 8007fda:	2301      	moveq	r3, #1
 8007fdc:	2300      	movne	r3, #0
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	79fb      	ldrb	r3, [r7, #7]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d08d      	beq.n	8007f04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b083      	sub	sp, #12
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008008:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	6812      	ldr	r2, [r2, #0]
 8008014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008018:	f023 0301 	bic.w	r3, r3, #1
 800801c:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008022:	2b01      	cmp	r3, #1
 8008024:	d107      	bne.n	8008036 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f022 0210 	bic.w	r2, r2, #16
 8008034:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2220      	movs	r2, #32
 800803a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	671a      	str	r2, [r3, #112]	; 0x70
}
 800804a:	bf00      	nop
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b084      	sub	sp, #16
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008062:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2200      	movs	r2, #0
 8008068:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800807e:	bf00      	nop
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b082      	sub	sp, #8
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800809c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2220      	movs	r2, #32
 80080a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	675a      	str	r2, [r3, #116]	; 0x74

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080b6:	bf00      	nop
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80080be:	b480      	push	{r7}
 80080c0:	b083      	sub	sp, #12
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80080c6:	bf00      	nop
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80080da:	bf00      	nop
 80080dc:	370c      	adds	r7, #12
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr

080080e6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b083      	sub	sp, #12
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80080ee:	bf00      	nop
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b085      	sub	sp, #20
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008108:	2b01      	cmp	r3, #1
 800810a:	d101      	bne.n	8008110 <HAL_UARTEx_DisableFifoMode+0x16>
 800810c:	2302      	movs	r3, #2
 800810e:	e027      	b.n	8008160 <HAL_UARTEx_DisableFifoMode+0x66>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2224      	movs	r2, #36	; 0x24
 800811c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f022 0201 	bic.w	r2, r2, #1
 8008136:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800813e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2220      	movs	r2, #32
 8008152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800817c:	2b01      	cmp	r3, #1
 800817e:	d101      	bne.n	8008184 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008180:	2302      	movs	r3, #2
 8008182:	e02d      	b.n	80081e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2224      	movs	r2, #36	; 0x24
 8008190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 0201 	bic.w	r2, r2, #1
 80081aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	683a      	ldr	r2, [r7, #0]
 80081bc:	430a      	orrs	r2, r1
 80081be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f84f 	bl	8008264 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2220      	movs	r2, #32
 80081d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d101      	bne.n	8008200 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80081fc:	2302      	movs	r3, #2
 80081fe:	e02d      	b.n	800825c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2224      	movs	r2, #36	; 0x24
 800820c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f022 0201 	bic.w	r2, r2, #1
 8008226:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	430a      	orrs	r2, r1
 800823a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f811 	bl	8008264 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2220      	movs	r2, #32
 800824e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008270:	2b00      	cmp	r3, #0
 8008272:	d108      	bne.n	8008286 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008284:	e031      	b.n	80082ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008286:	2308      	movs	r3, #8
 8008288:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800828a:	2308      	movs	r3, #8
 800828c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	0e5b      	lsrs	r3, r3, #25
 8008296:	b2db      	uxtb	r3, r3
 8008298:	f003 0307 	and.w	r3, r3, #7
 800829c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	0f5b      	lsrs	r3, r3, #29
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	f003 0307 	and.w	r3, r3, #7
 80082ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082ae:	7bbb      	ldrb	r3, [r7, #14]
 80082b0:	7b3a      	ldrb	r2, [r7, #12]
 80082b2:	4911      	ldr	r1, [pc, #68]	; (80082f8 <UARTEx_SetNbDataToProcess+0x94>)
 80082b4:	5c8a      	ldrb	r2, [r1, r2]
 80082b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80082ba:	7b3a      	ldrb	r2, [r7, #12]
 80082bc:	490f      	ldr	r1, [pc, #60]	; (80082fc <UARTEx_SetNbDataToProcess+0x98>)
 80082be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
 80082ce:	7b7a      	ldrb	r2, [r7, #13]
 80082d0:	4909      	ldr	r1, [pc, #36]	; (80082f8 <UARTEx_SetNbDataToProcess+0x94>)
 80082d2:	5c8a      	ldrb	r2, [r1, r2]
 80082d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80082d8:	7b7a      	ldrb	r2, [r7, #13]
 80082da:	4908      	ldr	r1, [pc, #32]	; (80082fc <UARTEx_SetNbDataToProcess+0x98>)
 80082dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082de:	fb93 f3f2 	sdiv	r3, r3, r2
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80082ea:	bf00      	nop
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	0800bd0c 	.word	0x0800bd0c
 80082fc:	0800bd14 	.word	0x0800bd14

08008300 <__NVIC_SetPriority>:
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	4603      	mov	r3, r0
 8008308:	6039      	str	r1, [r7, #0]
 800830a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800830c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008310:	2b00      	cmp	r3, #0
 8008312:	db0a      	blt.n	800832a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	b2da      	uxtb	r2, r3
 8008318:	490c      	ldr	r1, [pc, #48]	; (800834c <__NVIC_SetPriority+0x4c>)
 800831a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800831e:	0112      	lsls	r2, r2, #4
 8008320:	b2d2      	uxtb	r2, r2
 8008322:	440b      	add	r3, r1
 8008324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008328:	e00a      	b.n	8008340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	b2da      	uxtb	r2, r3
 800832e:	4908      	ldr	r1, [pc, #32]	; (8008350 <__NVIC_SetPriority+0x50>)
 8008330:	79fb      	ldrb	r3, [r7, #7]
 8008332:	f003 030f 	and.w	r3, r3, #15
 8008336:	3b04      	subs	r3, #4
 8008338:	0112      	lsls	r2, r2, #4
 800833a:	b2d2      	uxtb	r2, r2
 800833c:	440b      	add	r3, r1
 800833e:	761a      	strb	r2, [r3, #24]
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	e000e100 	.word	0xe000e100
 8008350:	e000ed00 	.word	0xe000ed00

08008354 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008354:	b580      	push	{r7, lr}
 8008356:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008358:	4b05      	ldr	r3, [pc, #20]	; (8008370 <SysTick_Handler+0x1c>)
 800835a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800835c:	f002 f9a8 	bl	800a6b0 <xTaskGetSchedulerState>
 8008360:	4603      	mov	r3, r0
 8008362:	2b01      	cmp	r3, #1
 8008364:	d001      	beq.n	800836a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008366:	f003 f84f 	bl	800b408 <xPortSysTickHandler>
  }
}
 800836a:	bf00      	nop
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	e000e010 	.word	0xe000e010

08008374 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008374:	b580      	push	{r7, lr}
 8008376:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008378:	2100      	movs	r1, #0
 800837a:	f06f 0004 	mvn.w	r0, #4
 800837e:	f7ff ffbf 	bl	8008300 <__NVIC_SetPriority>
#endif
}
 8008382:	bf00      	nop
 8008384:	bd80      	pop	{r7, pc}
	...

08008388 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800838e:	f3ef 8305 	mrs	r3, IPSR
 8008392:	603b      	str	r3, [r7, #0]
  return(result);
 8008394:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008396:	2b00      	cmp	r3, #0
 8008398:	d003      	beq.n	80083a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800839a:	f06f 0305 	mvn.w	r3, #5
 800839e:	607b      	str	r3, [r7, #4]
 80083a0:	e00f      	b.n	80083c2 <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 80083a2:	4b0a      	ldr	r3, [pc, #40]	; (80083cc <osKernelInitialize+0x44>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d108      	bne.n	80083bc <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 80083aa:	4809      	ldr	r0, [pc, #36]	; (80083d0 <osKernelInitialize+0x48>)
 80083ac:	f003 fa20 	bl	800b7f0 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 80083b0:	4b06      	ldr	r3, [pc, #24]	; (80083cc <osKernelInitialize+0x44>)
 80083b2:	2201      	movs	r2, #1
 80083b4:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80083b6:	2300      	movs	r3, #0
 80083b8:	607b      	str	r3, [r7, #4]
 80083ba:	e002      	b.n	80083c2 <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 80083bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083c0:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80083c2:	687b      	ldr	r3, [r7, #4]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	2000025c 	.word	0x2000025c
 80083d0:	2000000c 	.word	0x2000000c

080083d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083da:	f3ef 8305 	mrs	r3, IPSR
 80083de:	603b      	str	r3, [r7, #0]
  return(result);
 80083e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80083e6:	f06f 0305 	mvn.w	r3, #5
 80083ea:	607b      	str	r3, [r7, #4]
 80083ec:	e010      	b.n	8008410 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80083ee:	4b0b      	ldr	r3, [pc, #44]	; (800841c <osKernelStart+0x48>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d109      	bne.n	800840a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80083f6:	f7ff ffbd 	bl	8008374 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80083fa:	4b08      	ldr	r3, [pc, #32]	; (800841c <osKernelStart+0x48>)
 80083fc:	2202      	movs	r2, #2
 80083fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008400:	f001 fc8e 	bl	8009d20 <vTaskStartScheduler>
      stat = osOK;
 8008404:	2300      	movs	r3, #0
 8008406:	607b      	str	r3, [r7, #4]
 8008408:	e002      	b.n	8008410 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800840a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800840e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008410:	687b      	ldr	r3, [r7, #4]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	2000025c 	.word	0x2000025c

08008420 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008420:	b580      	push	{r7, lr}
 8008422:	b08e      	sub	sp, #56	; 0x38
 8008424:	af04      	add	r7, sp, #16
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800842c:	2300      	movs	r3, #0
 800842e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008430:	f3ef 8305 	mrs	r3, IPSR
 8008434:	617b      	str	r3, [r7, #20]
  return(result);
 8008436:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008438:	2b00      	cmp	r3, #0
 800843a:	d17f      	bne.n	800853c <osThreadNew+0x11c>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d07c      	beq.n	800853c <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8008442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008446:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008448:	2318      	movs	r3, #24
 800844a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800844c:	2300      	movs	r3, #0
 800844e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008454:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d045      	beq.n	80084e8 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <osThreadNew+0x4a>
        name = attr->name;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d002      	beq.n	8008478 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d008      	beq.n	8008490 <osThreadNew+0x70>
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	2b38      	cmp	r3, #56	; 0x38
 8008482:	d805      	bhi.n	8008490 <osThreadNew+0x70>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <osThreadNew+0x74>
        return (NULL);
 8008490:	2300      	movs	r3, #0
 8008492:	e054      	b.n	800853e <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	695b      	ldr	r3, [r3, #20]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d003      	beq.n	80084a4 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	695b      	ldr	r3, [r3, #20]
 80084a0:	089b      	lsrs	r3, r3, #2
 80084a2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00e      	beq.n	80084ca <osThreadNew+0xaa>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	2bc7      	cmp	r3, #199	; 0xc7
 80084b2:	d90a      	bls.n	80084ca <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d006      	beq.n	80084ca <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <osThreadNew+0xaa>
        mem = 1;
 80084c4:	2301      	movs	r3, #1
 80084c6:	61bb      	str	r3, [r7, #24]
 80084c8:	e010      	b.n	80084ec <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10c      	bne.n	80084ec <osThreadNew+0xcc>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d108      	bne.n	80084ec <osThreadNew+0xcc>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d104      	bne.n	80084ec <osThreadNew+0xcc>
          mem = 0;
 80084e2:	2300      	movs	r3, #0
 80084e4:	61bb      	str	r3, [r7, #24]
 80084e6:	e001      	b.n	80084ec <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80084e8:	2300      	movs	r3, #0
 80084ea:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d110      	bne.n	8008514 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084fa:	9202      	str	r2, [sp, #8]
 80084fc:	9301      	str	r3, [sp, #4]
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	6a3a      	ldr	r2, [r7, #32]
 8008506:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f001 fa13 	bl	8009934 <xTaskCreateStatic>
 800850e:	4603      	mov	r3, r0
 8008510:	613b      	str	r3, [r7, #16]
 8008512:	e013      	b.n	800853c <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d110      	bne.n	800853c <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800851a:	6a3b      	ldr	r3, [r7, #32]
 800851c:	b29a      	uxth	r2, r3
 800851e:	f107 0310 	add.w	r3, r7, #16
 8008522:	9301      	str	r3, [sp, #4]
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f001 fa5e 	bl	80099ee <xTaskCreate>
 8008532:	4603      	mov	r3, r0
 8008534:	2b01      	cmp	r3, #1
 8008536:	d001      	beq.n	800853c <osThreadNew+0x11c>
            hTask = NULL;
 8008538:	2300      	movs	r3, #0
 800853a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800853c:	693b      	ldr	r3, [r7, #16]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3728      	adds	r7, #40	; 0x28
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800854e:	f3ef 8305 	mrs	r3, IPSR
 8008552:	60bb      	str	r3, [r7, #8]
  return(result);
 8008554:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008556:	2b00      	cmp	r3, #0
 8008558:	d003      	beq.n	8008562 <osDelay+0x1c>
    stat = osErrorISR;
 800855a:	f06f 0305 	mvn.w	r3, #5
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	e007      	b.n	8008572 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008562:	2300      	movs	r3, #0
 8008564:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d002      	beq.n	8008572 <osDelay+0x2c>
      vTaskDelay(ticks);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f001 fba3 	bl	8009cb8 <vTaskDelay>
    }
  }

  return (stat);
 8008572:	68fb      	ldr	r3, [r7, #12]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f002 fd61 	bl	800b04c <pvTimerGetTimerID>
 800858a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d005      	beq.n	800859e <TimerCallback+0x22>
    callb->func (callb->arg);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	6852      	ldr	r2, [r2, #4]
 800859a:	4610      	mov	r0, r2
 800859c:	4798      	blx	r3
  }
}
 800859e:	bf00      	nop
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
	...

080085a8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b08c      	sub	sp, #48	; 0x30
 80085ac:	af02      	add	r7, sp, #8
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	607a      	str	r2, [r7, #4]
 80085b2:	603b      	str	r3, [r7, #0]
 80085b4:	460b      	mov	r3, r1
 80085b6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80085b8:	2300      	movs	r3, #0
 80085ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085bc:	f3ef 8305 	mrs	r3, IPSR
 80085c0:	613b      	str	r3, [r7, #16]
  return(result);
 80085c2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d163      	bne.n	8008690 <osTimerNew+0xe8>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d060      	beq.n	8008690 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80085ce:	2008      	movs	r0, #8
 80085d0:	f002 ffaa 	bl	800b528 <pvPortMalloc>
 80085d4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d059      	beq.n	8008690 <osTimerNew+0xe8>
      callb->func = func;
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80085e8:	7afb      	ldrb	r3, [r7, #11]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d102      	bne.n	80085f4 <osTimerNew+0x4c>
        reload = pdFALSE;
 80085ee:	2300      	movs	r3, #0
 80085f0:	61fb      	str	r3, [r7, #28]
 80085f2:	e001      	b.n	80085f8 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80085f4:	2301      	movs	r3, #1
 80085f6:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80085f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085fc:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80085fe:	2300      	movs	r3, #0
 8008600:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d01c      	beq.n	8008642 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <osTimerNew+0x6e>
          name = attr->name;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d006      	beq.n	800862c <osTimerNew+0x84>
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	2b2b      	cmp	r3, #43	; 0x2b
 8008624:	d902      	bls.n	800862c <osTimerNew+0x84>
          mem = 1;
 8008626:	2301      	movs	r3, #1
 8008628:	61bb      	str	r3, [r7, #24]
 800862a:	e00c      	b.n	8008646 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d108      	bne.n	8008646 <osTimerNew+0x9e>
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d104      	bne.n	8008646 <osTimerNew+0x9e>
            mem = 0;
 800863c:	2300      	movs	r3, #0
 800863e:	61bb      	str	r3, [r7, #24]
 8008640:	e001      	b.n	8008646 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d10c      	bne.n	8008666 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	9301      	str	r3, [sp, #4]
 8008652:	4b12      	ldr	r3, [pc, #72]	; (800869c <osTimerNew+0xf4>)
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	69fa      	ldr	r2, [r7, #28]
 800865a:	2101      	movs	r1, #1
 800865c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800865e:	f002 f976 	bl	800a94e <xTimerCreateStatic>
 8008662:	6238      	str	r0, [r7, #32]
 8008664:	e00b      	b.n	800867e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d108      	bne.n	800867e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800866c:	4b0b      	ldr	r3, [pc, #44]	; (800869c <osTimerNew+0xf4>)
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	69fa      	ldr	r2, [r7, #28]
 8008674:	2101      	movs	r1, #1
 8008676:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008678:	f002 f948 	bl	800a90c <xTimerCreate>
 800867c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800867e:	6a3b      	ldr	r3, [r7, #32]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d105      	bne.n	8008690 <osTimerNew+0xe8>
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d002      	beq.n	8008690 <osTimerNew+0xe8>
        vPortFree (callb);
 800868a:	6978      	ldr	r0, [r7, #20]
 800868c:	f002 fff4 	bl	800b678 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8008690:	6a3b      	ldr	r3, [r7, #32]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3728      	adds	r7, #40	; 0x28
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	0800857d 	.word	0x0800857d

080086a0 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80086a8:	2300      	movs	r3, #0
 80086aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086ac:	f3ef 8305 	mrs	r3, IPSR
 80086b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80086b2:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d12d      	bne.n	8008714 <osEventFlagsNew+0x74>
    mem = -1;
 80086b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086bc:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d015      	beq.n	80086f0 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d006      	beq.n	80086da <osEventFlagsNew+0x3a>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	2b1f      	cmp	r3, #31
 80086d2:	d902      	bls.n	80086da <osEventFlagsNew+0x3a>
        mem = 1;
 80086d4:	2301      	movs	r3, #1
 80086d6:	613b      	str	r3, [r7, #16]
 80086d8:	e00c      	b.n	80086f4 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d108      	bne.n	80086f4 <osEventFlagsNew+0x54>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d104      	bne.n	80086f4 <osEventFlagsNew+0x54>
          mem = 0;
 80086ea:	2300      	movs	r3, #0
 80086ec:	613b      	str	r3, [r7, #16]
 80086ee:	e001      	b.n	80086f4 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d106      	bne.n	8008708 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	4618      	mov	r0, r3
 8008700:	f000 f9e8 	bl	8008ad4 <xEventGroupCreateStatic>
 8008704:	6178      	str	r0, [r7, #20]
 8008706:	e005      	b.n	8008714 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d102      	bne.n	8008714 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800870e:	f000 fa18 	bl	8008b42 <xEventGroupCreate>
 8008712:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8008714:	697b      	ldr	r3, [r7, #20]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800871e:	b580      	push	{r7, lr}
 8008720:	b088      	sub	sp, #32
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008726:	2300      	movs	r3, #0
 8008728:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800872a:	f3ef 8305 	mrs	r3, IPSR
 800872e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008730:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008732:	2b00      	cmp	r3, #0
 8008734:	d174      	bne.n	8008820 <osMutexNew+0x102>
    if (attr != NULL) {
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d003      	beq.n	8008744 <osMutexNew+0x26>
      type = attr->attr_bits;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	61bb      	str	r3, [r7, #24]
 8008742:	e001      	b.n	8008748 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008744:	2300      	movs	r3, #0
 8008746:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	2b00      	cmp	r3, #0
 8008750:	d002      	beq.n	8008758 <osMutexNew+0x3a>
      rmtx = 1U;
 8008752:	2301      	movs	r3, #1
 8008754:	617b      	str	r3, [r7, #20]
 8008756:	e001      	b.n	800875c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008758:	2300      	movs	r3, #0
 800875a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	f003 0308 	and.w	r3, r3, #8
 8008762:	2b00      	cmp	r3, #0
 8008764:	d15c      	bne.n	8008820 <osMutexNew+0x102>
      mem = -1;
 8008766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800876a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d015      	beq.n	800879e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d006      	beq.n	8008788 <osMutexNew+0x6a>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	2b4f      	cmp	r3, #79	; 0x4f
 8008780:	d902      	bls.n	8008788 <osMutexNew+0x6a>
          mem = 1;
 8008782:	2301      	movs	r3, #1
 8008784:	613b      	str	r3, [r7, #16]
 8008786:	e00c      	b.n	80087a2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d108      	bne.n	80087a2 <osMutexNew+0x84>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d104      	bne.n	80087a2 <osMutexNew+0x84>
            mem = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	613b      	str	r3, [r7, #16]
 800879c:	e001      	b.n	80087a2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800879e:	2300      	movs	r3, #0
 80087a0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d112      	bne.n	80087ce <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d007      	beq.n	80087be <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	4619      	mov	r1, r3
 80087b4:	2004      	movs	r0, #4
 80087b6:	f000 fc02 	bl	8008fbe <xQueueCreateMutexStatic>
 80087ba:	61f8      	str	r0, [r7, #28]
 80087bc:	e016      	b.n	80087ec <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	4619      	mov	r1, r3
 80087c4:	2001      	movs	r0, #1
 80087c6:	f000 fbfa 	bl	8008fbe <xQueueCreateMutexStatic>
 80087ca:	61f8      	str	r0, [r7, #28]
 80087cc:	e00e      	b.n	80087ec <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10b      	bne.n	80087ec <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d004      	beq.n	80087e4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80087da:	2004      	movs	r0, #4
 80087dc:	f000 fbd7 	bl	8008f8e <xQueueCreateMutex>
 80087e0:	61f8      	str	r0, [r7, #28]
 80087e2:	e003      	b.n	80087ec <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80087e4:	2001      	movs	r0, #1
 80087e6:	f000 fbd2 	bl	8008f8e <xQueueCreateMutex>
 80087ea:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00c      	beq.n	800880c <osMutexNew+0xee>
        if (attr != NULL) {
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d003      	beq.n	8008800 <osMutexNew+0xe2>
          name = attr->name;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	60fb      	str	r3, [r7, #12]
 80087fe:	e001      	b.n	8008804 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008800:	2300      	movs	r3, #0
 8008802:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008804:	68f9      	ldr	r1, [r7, #12]
 8008806:	69f8      	ldr	r0, [r7, #28]
 8008808:	f001 f80c 	bl	8009824 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d006      	beq.n	8008820 <osMutexNew+0x102>
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d003      	beq.n	8008820 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	f043 0301 	orr.w	r3, r3, #1
 800881e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008820:	69fb      	ldr	r3, [r7, #28]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3720      	adds	r7, #32
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800882a:	b580      	push	{r7, lr}
 800882c:	b08a      	sub	sp, #40	; 0x28
 800882e:	af02      	add	r7, sp, #8
 8008830:	60f8      	str	r0, [r7, #12]
 8008832:	60b9      	str	r1, [r7, #8]
 8008834:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008836:	2300      	movs	r3, #0
 8008838:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800883a:	f3ef 8305 	mrs	r3, IPSR
 800883e:	613b      	str	r3, [r7, #16]
  return(result);
 8008840:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008842:	2b00      	cmp	r3, #0
 8008844:	d175      	bne.n	8008932 <osSemaphoreNew+0x108>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d072      	beq.n	8008932 <osSemaphoreNew+0x108>
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	429a      	cmp	r2, r3
 8008852:	d86e      	bhi.n	8008932 <osSemaphoreNew+0x108>
    mem = -1;
 8008854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008858:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d015      	beq.n	800888c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d006      	beq.n	8008876 <osSemaphoreNew+0x4c>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	2b4f      	cmp	r3, #79	; 0x4f
 800886e:	d902      	bls.n	8008876 <osSemaphoreNew+0x4c>
        mem = 1;
 8008870:	2301      	movs	r3, #1
 8008872:	61bb      	str	r3, [r7, #24]
 8008874:	e00c      	b.n	8008890 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d108      	bne.n	8008890 <osSemaphoreNew+0x66>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d104      	bne.n	8008890 <osSemaphoreNew+0x66>
          mem = 0;
 8008886:	2300      	movs	r3, #0
 8008888:	61bb      	str	r3, [r7, #24]
 800888a:	e001      	b.n	8008890 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800888c:	2300      	movs	r3, #0
 800888e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008896:	d04c      	beq.n	8008932 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d128      	bne.n	80088f0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d10a      	bne.n	80088ba <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	2203      	movs	r2, #3
 80088aa:	9200      	str	r2, [sp, #0]
 80088ac:	2200      	movs	r2, #0
 80088ae:	2100      	movs	r1, #0
 80088b0:	2001      	movs	r0, #1
 80088b2:	f000 fa7d 	bl	8008db0 <xQueueGenericCreateStatic>
 80088b6:	61f8      	str	r0, [r7, #28]
 80088b8:	e005      	b.n	80088c6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80088ba:	2203      	movs	r2, #3
 80088bc:	2100      	movs	r1, #0
 80088be:	2001      	movs	r0, #1
 80088c0:	f000 faee 	bl	8008ea0 <xQueueGenericCreate>
 80088c4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d022      	beq.n	8008912 <osSemaphoreNew+0xe8>
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d01f      	beq.n	8008912 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80088d2:	2300      	movs	r3, #0
 80088d4:	2200      	movs	r2, #0
 80088d6:	2100      	movs	r1, #0
 80088d8:	69f8      	ldr	r0, [r7, #28]
 80088da:	f000 fbf5 	bl	80090c8 <xQueueGenericSend>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d016      	beq.n	8008912 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80088e4:	69f8      	ldr	r0, [r7, #28]
 80088e6:	f000 fe69 	bl	80095bc <vQueueDelete>
            hSemaphore = NULL;
 80088ea:	2300      	movs	r3, #0
 80088ec:	61fb      	str	r3, [r7, #28]
 80088ee:	e010      	b.n	8008912 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d108      	bne.n	8008908 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	461a      	mov	r2, r3
 80088fc:	68b9      	ldr	r1, [r7, #8]
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f000 fb78 	bl	8008ff4 <xQueueCreateCountingSemaphoreStatic>
 8008904:	61f8      	str	r0, [r7, #28]
 8008906:	e004      	b.n	8008912 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008908:	68b9      	ldr	r1, [r7, #8]
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f000 fba9 	bl	8009062 <xQueueCreateCountingSemaphore>
 8008910:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00c      	beq.n	8008932 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <osSemaphoreNew+0xfc>
          name = attr->name;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	617b      	str	r3, [r7, #20]
 8008924:	e001      	b.n	800892a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008926:	2300      	movs	r3, #0
 8008928:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800892a:	6979      	ldr	r1, [r7, #20]
 800892c:	69f8      	ldr	r0, [r7, #28]
 800892e:	f000 ff79 	bl	8009824 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008932:	69fb      	ldr	r3, [r7, #28]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3720      	adds	r7, #32
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800893c:	b580      	push	{r7, lr}
 800893e:	b08a      	sub	sp, #40	; 0x28
 8008940:	af02      	add	r7, sp, #8
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008948:	2300      	movs	r3, #0
 800894a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800894c:	f3ef 8305 	mrs	r3, IPSR
 8008950:	613b      	str	r3, [r7, #16]
  return(result);
 8008952:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008954:	2b00      	cmp	r3, #0
 8008956:	d15f      	bne.n	8008a18 <osMessageQueueNew+0xdc>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d05c      	beq.n	8008a18 <osMessageQueueNew+0xdc>
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d059      	beq.n	8008a18 <osMessageQueueNew+0xdc>
    mem = -1;
 8008964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008968:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d029      	beq.n	80089c4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d012      	beq.n	800899e <osMessageQueueNew+0x62>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	2b4f      	cmp	r3, #79	; 0x4f
 800897e:	d90e      	bls.n	800899e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00a      	beq.n	800899e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	695a      	ldr	r2, [r3, #20]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	68b9      	ldr	r1, [r7, #8]
 8008990:	fb01 f303 	mul.w	r3, r1, r3
 8008994:	429a      	cmp	r2, r3
 8008996:	d302      	bcc.n	800899e <osMessageQueueNew+0x62>
        mem = 1;
 8008998:	2301      	movs	r3, #1
 800899a:	61bb      	str	r3, [r7, #24]
 800899c:	e014      	b.n	80089c8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d110      	bne.n	80089c8 <osMessageQueueNew+0x8c>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10c      	bne.n	80089c8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d108      	bne.n	80089c8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d104      	bne.n	80089c8 <osMessageQueueNew+0x8c>
          mem = 0;
 80089be:	2300      	movs	r3, #0
 80089c0:	61bb      	str	r3, [r7, #24]
 80089c2:	e001      	b.n	80089c8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80089c4:	2300      	movs	r3, #0
 80089c6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d10b      	bne.n	80089e6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	691a      	ldr	r2, [r3, #16]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	2100      	movs	r1, #0
 80089d8:	9100      	str	r1, [sp, #0]
 80089da:	68b9      	ldr	r1, [r7, #8]
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 f9e7 	bl	8008db0 <xQueueGenericCreateStatic>
 80089e2:	61f8      	str	r0, [r7, #28]
 80089e4:	e008      	b.n	80089f8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d105      	bne.n	80089f8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80089ec:	2200      	movs	r2, #0
 80089ee:	68b9      	ldr	r1, [r7, #8]
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 fa55 	bl	8008ea0 <xQueueGenericCreate>
 80089f6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00c      	beq.n	8008a18 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d003      	beq.n	8008a0c <osMessageQueueNew+0xd0>
        name = attr->name;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	617b      	str	r3, [r7, #20]
 8008a0a:	e001      	b.n	8008a10 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008a10:	6979      	ldr	r1, [r7, #20]
 8008a12:	69f8      	ldr	r0, [r7, #28]
 8008a14:	f000 ff06 	bl	8009824 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008a18:	69fb      	ldr	r3, [r7, #28]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3720      	adds	r7, #32
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <vApplicationIdleHook>:

/**
  Dummy implementation of the callback function vApplicationIdleHook().
*/
#if (configUSE_IDLE_HOOK == 1)
__WEAK void vApplicationIdleHook (void){}
 8008a22:	b480      	push	{r7}
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	bf00      	nop
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <vApplicationTickHook>:

/**
  Dummy implementation of the callback function vApplicationTickHook().
*/
#if (configUSE_TICK_HOOK == 1)
 __WEAK void vApplicationTickHook (void){}
 8008a30:	b480      	push	{r7}
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	bf00      	nop
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <vApplicationMallocFailedHook>:

/**
  Dummy implementation of the callback function vApplicationMallocFailedHook().
*/
#if (configUSE_MALLOC_FAILED_HOOK == 1)
__WEAK void vApplicationMallocFailedHook (void){}
 8008a3e:	b480      	push	{r7}
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	bf00      	nop
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <vApplicationStackOverflowHook>:

/**
  Dummy implementation of the callback function vApplicationStackOverflowHook().
*/
#if (configCHECK_FOR_STACK_OVERFLOW > 0)
__WEAK void vApplicationStackOverflowHook (TaskHandle_t xTask, signed char *pcTaskName) {
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008a68:	bf00      	nop
  (void)xTask;
  (void)pcTaskName;
  configASSERT(0);
 8008a6a:	e7fe      	b.n	8008a6a <vApplicationStackOverflowHook+0x1e>

08008a6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4a07      	ldr	r2, [pc, #28]	; (8008a98 <vApplicationGetIdleTaskMemory+0x2c>)
 8008a7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	4a06      	ldr	r2, [pc, #24]	; (8008a9c <vApplicationGetIdleTaskMemory+0x30>)
 8008a82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a8a:	601a      	str	r2, [r3, #0]
}
 8008a8c:	bf00      	nop
 8008a8e:	3714      	adds	r7, #20
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr
 8008a98:	20030fa0 	.word	0x20030fa0
 8008a9c:	20031068 	.word	0x20031068

08008aa0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	4a07      	ldr	r2, [pc, #28]	; (8008acc <vApplicationGetTimerTaskMemory+0x2c>)
 8008ab0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	4a06      	ldr	r2, [pc, #24]	; (8008ad0 <vApplicationGetTimerTaskMemory+0x30>)
 8008ab6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008abe:	601a      	str	r2, [r3, #0]
}
 8008ac0:	bf00      	nop
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	20031868 	.word	0x20031868
 8008ad0:	20031930 	.word	0x20031930

08008ad4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10a      	bne.n	8008af8 <xEventGroupCreateStatic+0x24>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	613b      	str	r3, [r7, #16]
}
 8008af4:	bf00      	nop
 8008af6:	e7fe      	b.n	8008af6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8008af8:	2320      	movs	r3, #32
 8008afa:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	2b20      	cmp	r3, #32
 8008b00:	d00a      	beq.n	8008b18 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8008b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	60fb      	str	r3, [r7, #12]
}
 8008b14:	bf00      	nop
 8008b16:	e7fe      	b.n	8008b16 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00a      	beq.n	8008b38 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	2200      	movs	r2, #0
 8008b26:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	3304      	adds	r3, #4
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f000 f822 	bl	8008b76 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	2201      	movs	r2, #1
 8008b36:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8008b38:	697b      	ldr	r3, [r7, #20]
	}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3718      	adds	r7, #24
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b082      	sub	sp, #8
 8008b46:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8008b48:	2020      	movs	r0, #32
 8008b4a:	f002 fced 	bl	800b528 <pvPortMalloc>
 8008b4e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00a      	beq.n	8008b6c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	3304      	adds	r3, #4
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 f808 	bl	8008b76 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8008b6c:	687b      	ldr	r3, [r7, #4]
	}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b76:	b480      	push	{r7}
 8008b78:	b083      	sub	sp, #12
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f103 0208 	add.w	r2, r3, #8
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b8e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f103 0208 	add.w	r2, r3, #8
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f103 0208 	add.w	r2, r3, #8
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008baa:	bf00      	nop
 8008bac:	370c      	adds	r7, #12
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b083      	sub	sp, #12
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	689a      	ldr	r2, [r3, #8]
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	683a      	ldr	r2, [r7, #0]
 8008bf4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	1c5a      	adds	r2, r3, #1
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	601a      	str	r2, [r3, #0]
}
 8008c0c:	bf00      	nop
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c2e:	d103      	bne.n	8008c38 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	60fb      	str	r3, [r7, #12]
 8008c36:	e00c      	b.n	8008c52 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	3308      	adds	r3, #8
 8008c3c:	60fb      	str	r3, [r7, #12]
 8008c3e:	e002      	b.n	8008c46 <vListInsert+0x2e>
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	60fb      	str	r3, [r7, #12]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68ba      	ldr	r2, [r7, #8]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d2f6      	bcs.n	8008c40 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	685a      	ldr	r2, [r3, #4]
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	683a      	ldr	r2, [r7, #0]
 8008c6c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	1c5a      	adds	r2, r3, #1
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	601a      	str	r2, [r3, #0]
}
 8008c7e:	bf00      	nop
 8008c80:	3714      	adds	r7, #20
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b085      	sub	sp, #20
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	6892      	ldr	r2, [r2, #8]
 8008ca0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	6852      	ldr	r2, [r2, #4]
 8008caa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d103      	bne.n	8008cbe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	689a      	ldr	r2, [r3, #8]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	1e5a      	subs	r2, r3, #1
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
	...

08008ce0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10a      	bne.n	8008d0a <xQueueGenericReset+0x2a>
	__asm volatile
 8008cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	60bb      	str	r3, [r7, #8]
}
 8008d06:	bf00      	nop
 8008d08:	e7fe      	b.n	8008d08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008d0a:	f002 faeb 	bl	800b2e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d16:	68f9      	ldr	r1, [r7, #12]
 8008d18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d1a:	fb01 f303 	mul.w	r3, r1, r3
 8008d1e:	441a      	add	r2, r3
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	68f9      	ldr	r1, [r7, #12]
 8008d3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d40:	fb01 f303 	mul.w	r3, r1, r3
 8008d44:	441a      	add	r2, r3
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	22ff      	movs	r2, #255	; 0xff
 8008d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	22ff      	movs	r2, #255	; 0xff
 8008d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d114      	bne.n	8008d8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	691b      	ldr	r3, [r3, #16]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d01a      	beq.n	8008d9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	3310      	adds	r3, #16
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f001 facb 	bl	800a308 <xTaskRemoveFromEventList>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d012      	beq.n	8008d9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d78:	4b0c      	ldr	r3, [pc, #48]	; (8008dac <xQueueGenericReset+0xcc>)
 8008d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	e009      	b.n	8008d9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	3310      	adds	r3, #16
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7ff fef1 	bl	8008b76 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	3324      	adds	r3, #36	; 0x24
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7ff feec 	bl	8008b76 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d9e:	f002 fad1 	bl	800b344 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008da2:	2301      	movs	r3, #1
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	e000ed04 	.word	0xe000ed04

08008db0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b08e      	sub	sp, #56	; 0x38
 8008db4:	af02      	add	r7, sp, #8
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
 8008dbc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d10a      	bne.n	8008dda <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc8:	f383 8811 	msr	BASEPRI, r3
 8008dcc:	f3bf 8f6f 	isb	sy
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008dd6:	bf00      	nop
 8008dd8:	e7fe      	b.n	8008dd8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10a      	bne.n	8008df6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008df2:	bf00      	nop
 8008df4:	e7fe      	b.n	8008df4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d002      	beq.n	8008e02 <xQueueGenericCreateStatic+0x52>
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <xQueueGenericCreateStatic+0x56>
 8008e02:	2301      	movs	r3, #1
 8008e04:	e000      	b.n	8008e08 <xQueueGenericCreateStatic+0x58>
 8008e06:	2300      	movs	r3, #0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d10a      	bne.n	8008e22 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	623b      	str	r3, [r7, #32]
}
 8008e1e:	bf00      	nop
 8008e20:	e7fe      	b.n	8008e20 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d102      	bne.n	8008e2e <xQueueGenericCreateStatic+0x7e>
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <xQueueGenericCreateStatic+0x82>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e000      	b.n	8008e34 <xQueueGenericCreateStatic+0x84>
 8008e32:	2300      	movs	r3, #0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10a      	bne.n	8008e4e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3c:	f383 8811 	msr	BASEPRI, r3
 8008e40:	f3bf 8f6f 	isb	sy
 8008e44:	f3bf 8f4f 	dsb	sy
 8008e48:	61fb      	str	r3, [r7, #28]
}
 8008e4a:	bf00      	nop
 8008e4c:	e7fe      	b.n	8008e4c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008e4e:	2350      	movs	r3, #80	; 0x50
 8008e50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	2b50      	cmp	r3, #80	; 0x50
 8008e56:	d00a      	beq.n	8008e6e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5c:	f383 8811 	msr	BASEPRI, r3
 8008e60:	f3bf 8f6f 	isb	sy
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	61bb      	str	r3, [r7, #24]
}
 8008e6a:	bf00      	nop
 8008e6c:	e7fe      	b.n	8008e6c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e6e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00d      	beq.n	8008e96 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	68b9      	ldr	r1, [r7, #8]
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f000 f83f 	bl	8008f14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3730      	adds	r7, #48	; 0x30
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b08a      	sub	sp, #40	; 0x28
 8008ea4:	af02      	add	r7, sp, #8
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10a      	bne.n	8008eca <xQueueGenericCreate+0x2a>
	__asm volatile
 8008eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	613b      	str	r3, [r7, #16]
}
 8008ec6:	bf00      	nop
 8008ec8:	e7fe      	b.n	8008ec8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	fb02 f303 	mul.w	r3, r2, r3
 8008ed2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	3350      	adds	r3, #80	; 0x50
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f002 fb25 	bl	800b528 <pvPortMalloc>
 8008ede:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d011      	beq.n	8008f0a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	3350      	adds	r3, #80	; 0x50
 8008eee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ef8:	79fa      	ldrb	r2, [r7, #7]
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	4613      	mov	r3, r2
 8008f00:	697a      	ldr	r2, [r7, #20]
 8008f02:	68b9      	ldr	r1, [r7, #8]
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	f000 f805 	bl	8008f14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f0a:	69bb      	ldr	r3, [r7, #24]
	}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3720      	adds	r7, #32
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]
 8008f20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d103      	bne.n	8008f30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	69ba      	ldr	r2, [r7, #24]
 8008f2c:	601a      	str	r2, [r3, #0]
 8008f2e:	e002      	b.n	8008f36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008f42:	2101      	movs	r1, #1
 8008f44:	69b8      	ldr	r0, [r7, #24]
 8008f46:	f7ff fecb 	bl	8008ce0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	78fa      	ldrb	r2, [r7, #3]
 8008f4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008f52:	bf00      	nop
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b082      	sub	sp, #8
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00e      	beq.n	8008f86 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	2100      	movs	r1, #0
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f8a1 	bl	80090c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008f86:	bf00      	nop
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b086      	sub	sp, #24
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	4603      	mov	r3, r0
 8008f96:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	617b      	str	r3, [r7, #20]
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008fa0:	79fb      	ldrb	r3, [r7, #7]
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	6939      	ldr	r1, [r7, #16]
 8008fa6:	6978      	ldr	r0, [r7, #20]
 8008fa8:	f7ff ff7a 	bl	8008ea0 <xQueueGenericCreate>
 8008fac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f7ff ffd3 	bl	8008f5a <prvInitialiseMutex>

		return xNewQueue;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
	}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3718      	adds	r7, #24
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b088      	sub	sp, #32
 8008fc2:	af02      	add	r7, sp, #8
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	6039      	str	r1, [r7, #0]
 8008fc8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	617b      	str	r3, [r7, #20]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008fd2:	79fb      	ldrb	r3, [r7, #7]
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	6939      	ldr	r1, [r7, #16]
 8008fdc:	6978      	ldr	r0, [r7, #20]
 8008fde:	f7ff fee7 	bl	8008db0 <xQueueGenericCreateStatic>
 8008fe2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f7ff ffb8 	bl	8008f5a <prvInitialiseMutex>

		return xNewQueue;
 8008fea:	68fb      	ldr	r3, [r7, #12]
	}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3718      	adds	r7, #24
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b08a      	sub	sp, #40	; 0x28
 8008ff8:	af02      	add	r7, sp, #8
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10a      	bne.n	800901c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	61bb      	str	r3, [r7, #24]
}
 8009018:	bf00      	nop
 800901a:	e7fe      	b.n	800901a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800901c:	68ba      	ldr	r2, [r7, #8]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	429a      	cmp	r2, r3
 8009022:	d90a      	bls.n	800903a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	617b      	str	r3, [r7, #20]
}
 8009036:	bf00      	nop
 8009038:	e7fe      	b.n	8009038 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800903a:	2302      	movs	r3, #2
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	2100      	movs	r1, #0
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f7ff feb3 	bl	8008db0 <xQueueGenericCreateStatic>
 800904a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d002      	beq.n	8009058 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	68ba      	ldr	r2, [r7, #8]
 8009056:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009058:	69fb      	ldr	r3, [r7, #28]
	}
 800905a:	4618      	mov	r0, r3
 800905c:	3720      	adds	r7, #32
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009062:	b580      	push	{r7, lr}
 8009064:	b086      	sub	sp, #24
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10a      	bne.n	8009088 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009076:	f383 8811 	msr	BASEPRI, r3
 800907a:	f3bf 8f6f 	isb	sy
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	613b      	str	r3, [r7, #16]
}
 8009084:	bf00      	nop
 8009086:	e7fe      	b.n	8009086 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	429a      	cmp	r2, r3
 800908e:	d90a      	bls.n	80090a6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	60fb      	str	r3, [r7, #12]
}
 80090a2:	bf00      	nop
 80090a4:	e7fe      	b.n	80090a4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80090a6:	2202      	movs	r2, #2
 80090a8:	2100      	movs	r1, #0
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f7ff fef8 	bl	8008ea0 <xQueueGenericCreate>
 80090b0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d002      	beq.n	80090be <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	683a      	ldr	r2, [r7, #0]
 80090bc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80090be:	697b      	ldr	r3, [r7, #20]
	}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3718      	adds	r7, #24
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b08e      	sub	sp, #56	; 0x38
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
 80090d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80090d6:	2300      	movs	r3, #0
 80090d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d10a      	bne.n	80090fa <xQueueGenericSend+0x32>
	__asm volatile
 80090e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e8:	f383 8811 	msr	BASEPRI, r3
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80090f6:	bf00      	nop
 80090f8:	e7fe      	b.n	80090f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d103      	bne.n	8009108 <xQueueGenericSend+0x40>
 8009100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009104:	2b00      	cmp	r3, #0
 8009106:	d101      	bne.n	800910c <xQueueGenericSend+0x44>
 8009108:	2301      	movs	r3, #1
 800910a:	e000      	b.n	800910e <xQueueGenericSend+0x46>
 800910c:	2300      	movs	r3, #0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d10a      	bne.n	8009128 <xQueueGenericSend+0x60>
	__asm volatile
 8009112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009116:	f383 8811 	msr	BASEPRI, r3
 800911a:	f3bf 8f6f 	isb	sy
 800911e:	f3bf 8f4f 	dsb	sy
 8009122:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009124:	bf00      	nop
 8009126:	e7fe      	b.n	8009126 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2b02      	cmp	r3, #2
 800912c:	d103      	bne.n	8009136 <xQueueGenericSend+0x6e>
 800912e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009132:	2b01      	cmp	r3, #1
 8009134:	d101      	bne.n	800913a <xQueueGenericSend+0x72>
 8009136:	2301      	movs	r3, #1
 8009138:	e000      	b.n	800913c <xQueueGenericSend+0x74>
 800913a:	2300      	movs	r3, #0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10a      	bne.n	8009156 <xQueueGenericSend+0x8e>
	__asm volatile
 8009140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009144:	f383 8811 	msr	BASEPRI, r3
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	623b      	str	r3, [r7, #32]
}
 8009152:	bf00      	nop
 8009154:	e7fe      	b.n	8009154 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009156:	f001 faab 	bl	800a6b0 <xTaskGetSchedulerState>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d102      	bne.n	8009166 <xQueueGenericSend+0x9e>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d101      	bne.n	800916a <xQueueGenericSend+0xa2>
 8009166:	2301      	movs	r3, #1
 8009168:	e000      	b.n	800916c <xQueueGenericSend+0xa4>
 800916a:	2300      	movs	r3, #0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10a      	bne.n	8009186 <xQueueGenericSend+0xbe>
	__asm volatile
 8009170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	61fb      	str	r3, [r7, #28]
}
 8009182:	bf00      	nop
 8009184:	e7fe      	b.n	8009184 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009186:	f002 f8ad 	bl	800b2e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800918a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800918e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009192:	429a      	cmp	r2, r3
 8009194:	d302      	bcc.n	800919c <xQueueGenericSend+0xd4>
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	2b02      	cmp	r3, #2
 800919a:	d129      	bne.n	80091f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800919c:	683a      	ldr	r2, [r7, #0]
 800919e:	68b9      	ldr	r1, [r7, #8]
 80091a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091a2:	f000 fa2e 	bl	8009602 <prvCopyDataToQueue>
 80091a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d010      	beq.n	80091d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b2:	3324      	adds	r3, #36	; 0x24
 80091b4:	4618      	mov	r0, r3
 80091b6:	f001 f8a7 	bl	800a308 <xTaskRemoveFromEventList>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d013      	beq.n	80091e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80091c0:	4b3f      	ldr	r3, [pc, #252]	; (80092c0 <xQueueGenericSend+0x1f8>)
 80091c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091c6:	601a      	str	r2, [r3, #0]
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	f3bf 8f6f 	isb	sy
 80091d0:	e00a      	b.n	80091e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80091d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d007      	beq.n	80091e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80091d8:	4b39      	ldr	r3, [pc, #228]	; (80092c0 <xQueueGenericSend+0x1f8>)
 80091da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091de:	601a      	str	r2, [r3, #0]
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80091e8:	f002 f8ac 	bl	800b344 <vPortExitCritical>
				return pdPASS;
 80091ec:	2301      	movs	r3, #1
 80091ee:	e063      	b.n	80092b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d103      	bne.n	80091fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091f6:	f002 f8a5 	bl	800b344 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80091fa:	2300      	movs	r3, #0
 80091fc:	e05c      	b.n	80092b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009200:	2b00      	cmp	r3, #0
 8009202:	d106      	bne.n	8009212 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009204:	f107 0314 	add.w	r3, r7, #20
 8009208:	4618      	mov	r0, r3
 800920a:	f001 f8e1 	bl	800a3d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800920e:	2301      	movs	r3, #1
 8009210:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009212:	f002 f897 	bl	800b344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009216:	f000 fdf5 	bl	8009e04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800921a:	f002 f863 	bl	800b2e4 <vPortEnterCritical>
 800921e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009220:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009224:	b25b      	sxtb	r3, r3
 8009226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800922a:	d103      	bne.n	8009234 <xQueueGenericSend+0x16c>
 800922c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922e:	2200      	movs	r2, #0
 8009230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009236:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800923a:	b25b      	sxtb	r3, r3
 800923c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009240:	d103      	bne.n	800924a <xQueueGenericSend+0x182>
 8009242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009244:	2200      	movs	r2, #0
 8009246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800924a:	f002 f87b 	bl	800b344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800924e:	1d3a      	adds	r2, r7, #4
 8009250:	f107 0314 	add.w	r3, r7, #20
 8009254:	4611      	mov	r1, r2
 8009256:	4618      	mov	r0, r3
 8009258:	f001 f8d0 	bl	800a3fc <xTaskCheckForTimeOut>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d124      	bne.n	80092ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009262:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009264:	f000 fac5 	bl	80097f2 <prvIsQueueFull>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d018      	beq.n	80092a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800926e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009270:	3310      	adds	r3, #16
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	4611      	mov	r1, r2
 8009276:	4618      	mov	r0, r3
 8009278:	f000 fff6 	bl	800a268 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800927c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800927e:	f000 fa50 	bl	8009722 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009282:	f000 fdcd 	bl	8009e20 <xTaskResumeAll>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	f47f af7c 	bne.w	8009186 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800928e:	4b0c      	ldr	r3, [pc, #48]	; (80092c0 <xQueueGenericSend+0x1f8>)
 8009290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009294:	601a      	str	r2, [r3, #0]
 8009296:	f3bf 8f4f 	dsb	sy
 800929a:	f3bf 8f6f 	isb	sy
 800929e:	e772      	b.n	8009186 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80092a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092a2:	f000 fa3e 	bl	8009722 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80092a6:	f000 fdbb 	bl	8009e20 <xTaskResumeAll>
 80092aa:	e76c      	b.n	8009186 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80092ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092ae:	f000 fa38 	bl	8009722 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092b2:	f000 fdb5 	bl	8009e20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80092b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3738      	adds	r7, #56	; 0x38
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	e000ed04 	.word	0xe000ed04

080092c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b090      	sub	sp, #64	; 0x40
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
 80092d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80092d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10a      	bne.n	80092f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80092dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e0:	f383 8811 	msr	BASEPRI, r3
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	f3bf 8f4f 	dsb	sy
 80092ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80092ee:	bf00      	nop
 80092f0:	e7fe      	b.n	80092f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d103      	bne.n	8009300 <xQueueGenericSendFromISR+0x3c>
 80092f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d101      	bne.n	8009304 <xQueueGenericSendFromISR+0x40>
 8009300:	2301      	movs	r3, #1
 8009302:	e000      	b.n	8009306 <xQueueGenericSendFromISR+0x42>
 8009304:	2300      	movs	r3, #0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d10a      	bne.n	8009320 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800930a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930e:	f383 8811 	msr	BASEPRI, r3
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800931c:	bf00      	nop
 800931e:	e7fe      	b.n	800931e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	2b02      	cmp	r3, #2
 8009324:	d103      	bne.n	800932e <xQueueGenericSendFromISR+0x6a>
 8009326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800932a:	2b01      	cmp	r3, #1
 800932c:	d101      	bne.n	8009332 <xQueueGenericSendFromISR+0x6e>
 800932e:	2301      	movs	r3, #1
 8009330:	e000      	b.n	8009334 <xQueueGenericSendFromISR+0x70>
 8009332:	2300      	movs	r3, #0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10a      	bne.n	800934e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933c:	f383 8811 	msr	BASEPRI, r3
 8009340:	f3bf 8f6f 	isb	sy
 8009344:	f3bf 8f4f 	dsb	sy
 8009348:	623b      	str	r3, [r7, #32]
}
 800934a:	bf00      	nop
 800934c:	e7fe      	b.n	800934c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800934e:	f002 f8ab 	bl	800b4a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009352:	f3ef 8211 	mrs	r2, BASEPRI
 8009356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935a:	f383 8811 	msr	BASEPRI, r3
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	61fa      	str	r2, [r7, #28]
 8009368:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800936a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800936c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800936e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009376:	429a      	cmp	r2, r3
 8009378:	d302      	bcc.n	8009380 <xQueueGenericSendFromISR+0xbc>
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	2b02      	cmp	r3, #2
 800937e:	d12f      	bne.n	80093e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009382:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800938a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009390:	683a      	ldr	r2, [r7, #0]
 8009392:	68b9      	ldr	r1, [r7, #8]
 8009394:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009396:	f000 f934 	bl	8009602 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800939a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800939e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093a2:	d112      	bne.n	80093ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d016      	beq.n	80093da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ae:	3324      	adds	r3, #36	; 0x24
 80093b0:	4618      	mov	r0, r3
 80093b2:	f000 ffa9 	bl	800a308 <xTaskRemoveFromEventList>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00e      	beq.n	80093da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00b      	beq.n	80093da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2201      	movs	r2, #1
 80093c6:	601a      	str	r2, [r3, #0]
 80093c8:	e007      	b.n	80093da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80093ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80093ce:	3301      	adds	r3, #1
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	b25a      	sxtb	r2, r3
 80093d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80093da:	2301      	movs	r3, #1
 80093dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80093de:	e001      	b.n	80093e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80093e0:	2300      	movs	r3, #0
 80093e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80093ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80093f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3740      	adds	r7, #64	; 0x40
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
	...

080093fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b08c      	sub	sp, #48	; 0x30
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009408:	2300      	movs	r3, #0
 800940a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10a      	bne.n	800942c <xQueueReceive+0x30>
	__asm volatile
 8009416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	623b      	str	r3, [r7, #32]
}
 8009428:	bf00      	nop
 800942a:	e7fe      	b.n	800942a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d103      	bne.n	800943a <xQueueReceive+0x3e>
 8009432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009436:	2b00      	cmp	r3, #0
 8009438:	d101      	bne.n	800943e <xQueueReceive+0x42>
 800943a:	2301      	movs	r3, #1
 800943c:	e000      	b.n	8009440 <xQueueReceive+0x44>
 800943e:	2300      	movs	r3, #0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d10a      	bne.n	800945a <xQueueReceive+0x5e>
	__asm volatile
 8009444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009448:	f383 8811 	msr	BASEPRI, r3
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	61fb      	str	r3, [r7, #28]
}
 8009456:	bf00      	nop
 8009458:	e7fe      	b.n	8009458 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800945a:	f001 f929 	bl	800a6b0 <xTaskGetSchedulerState>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d102      	bne.n	800946a <xQueueReceive+0x6e>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d101      	bne.n	800946e <xQueueReceive+0x72>
 800946a:	2301      	movs	r3, #1
 800946c:	e000      	b.n	8009470 <xQueueReceive+0x74>
 800946e:	2300      	movs	r3, #0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10a      	bne.n	800948a <xQueueReceive+0x8e>
	__asm volatile
 8009474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009478:	f383 8811 	msr	BASEPRI, r3
 800947c:	f3bf 8f6f 	isb	sy
 8009480:	f3bf 8f4f 	dsb	sy
 8009484:	61bb      	str	r3, [r7, #24]
}
 8009486:	bf00      	nop
 8009488:	e7fe      	b.n	8009488 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800948a:	f001 ff2b 	bl	800b2e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800948e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009492:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009496:	2b00      	cmp	r3, #0
 8009498:	d01f      	beq.n	80094da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800949a:	68b9      	ldr	r1, [r7, #8]
 800949c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800949e:	f000 f91a 	bl	80096d6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80094a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a4:	1e5a      	subs	r2, r3, #1
 80094a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00f      	beq.n	80094d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b4:	3310      	adds	r3, #16
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 ff26 	bl	800a308 <xTaskRemoveFromEventList>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d007      	beq.n	80094d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80094c2:	4b3d      	ldr	r3, [pc, #244]	; (80095b8 <xQueueReceive+0x1bc>)
 80094c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094c8:	601a      	str	r2, [r3, #0]
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80094d2:	f001 ff37 	bl	800b344 <vPortExitCritical>
				return pdPASS;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e069      	b.n	80095ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d103      	bne.n	80094e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80094e0:	f001 ff30 	bl	800b344 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80094e4:	2300      	movs	r3, #0
 80094e6:	e062      	b.n	80095ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80094e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d106      	bne.n	80094fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094ee:	f107 0310 	add.w	r3, r7, #16
 80094f2:	4618      	mov	r0, r3
 80094f4:	f000 ff6c 	bl	800a3d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094f8:	2301      	movs	r3, #1
 80094fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094fc:	f001 ff22 	bl	800b344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009500:	f000 fc80 	bl	8009e04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009504:	f001 feee 	bl	800b2e4 <vPortEnterCritical>
 8009508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800950e:	b25b      	sxtb	r3, r3
 8009510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009514:	d103      	bne.n	800951e <xQueueReceive+0x122>
 8009516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009518:	2200      	movs	r2, #0
 800951a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800951e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009520:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009524:	b25b      	sxtb	r3, r3
 8009526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800952a:	d103      	bne.n	8009534 <xQueueReceive+0x138>
 800952c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952e:	2200      	movs	r2, #0
 8009530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009534:	f001 ff06 	bl	800b344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009538:	1d3a      	adds	r2, r7, #4
 800953a:	f107 0310 	add.w	r3, r7, #16
 800953e:	4611      	mov	r1, r2
 8009540:	4618      	mov	r0, r3
 8009542:	f000 ff5b 	bl	800a3fc <xTaskCheckForTimeOut>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d123      	bne.n	8009594 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800954c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800954e:	f000 f93a 	bl	80097c6 <prvIsQueueEmpty>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d017      	beq.n	8009588 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955a:	3324      	adds	r3, #36	; 0x24
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	4611      	mov	r1, r2
 8009560:	4618      	mov	r0, r3
 8009562:	f000 fe81 	bl	800a268 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009568:	f000 f8db 	bl	8009722 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800956c:	f000 fc58 	bl	8009e20 <xTaskResumeAll>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d189      	bne.n	800948a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009576:	4b10      	ldr	r3, [pc, #64]	; (80095b8 <xQueueReceive+0x1bc>)
 8009578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800957c:	601a      	str	r2, [r3, #0]
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	e780      	b.n	800948a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800958a:	f000 f8ca 	bl	8009722 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800958e:	f000 fc47 	bl	8009e20 <xTaskResumeAll>
 8009592:	e77a      	b.n	800948a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009596:	f000 f8c4 	bl	8009722 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800959a:	f000 fc41 	bl	8009e20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800959e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095a0:	f000 f911 	bl	80097c6 <prvIsQueueEmpty>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f43f af6f 	beq.w	800948a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80095ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3730      	adds	r7, #48	; 0x30
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	e000ed04 	.word	0xe000ed04

080095bc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10a      	bne.n	80095e4 <vQueueDelete+0x28>
	__asm volatile
 80095ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d2:	f383 8811 	msr	BASEPRI, r3
 80095d6:	f3bf 8f6f 	isb	sy
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	60bb      	str	r3, [r7, #8]
}
 80095e0:	bf00      	nop
 80095e2:	e7fe      	b.n	80095e2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f000 f947 	bl	8009878 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d102      	bne.n	80095fa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f002 f83f 	bl	800b678 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80095fa:	bf00      	nop
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b086      	sub	sp, #24
 8009606:	af00      	add	r7, sp, #0
 8009608:	60f8      	str	r0, [r7, #12]
 800960a:	60b9      	str	r1, [r7, #8]
 800960c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800960e:	2300      	movs	r3, #0
 8009610:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009616:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10d      	bne.n	800963c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d14d      	bne.n	80096c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	4618      	mov	r0, r3
 800962e:	f001 f85d 	bl	800a6ec <xTaskPriorityDisinherit>
 8009632:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2200      	movs	r2, #0
 8009638:	609a      	str	r2, [r3, #8]
 800963a:	e043      	b.n	80096c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d119      	bne.n	8009676 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6858      	ldr	r0, [r3, #4]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964a:	461a      	mov	r2, r3
 800964c:	68b9      	ldr	r1, [r7, #8]
 800964e:	f002 f9bf 	bl	800b9d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	685a      	ldr	r2, [r3, #4]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800965a:	441a      	add	r2, r3
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	685a      	ldr	r2, [r3, #4]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	429a      	cmp	r2, r3
 800966a:	d32b      	bcc.n	80096c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	605a      	str	r2, [r3, #4]
 8009674:	e026      	b.n	80096c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	68d8      	ldr	r0, [r3, #12]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967e:	461a      	mov	r2, r3
 8009680:	68b9      	ldr	r1, [r7, #8]
 8009682:	f002 f9a5 	bl	800b9d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	68da      	ldr	r2, [r3, #12]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968e:	425b      	negs	r3, r3
 8009690:	441a      	add	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	68da      	ldr	r2, [r3, #12]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d207      	bcs.n	80096b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	689a      	ldr	r2, [r3, #8]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096aa:	425b      	negs	r3, r3
 80096ac:	441a      	add	r2, r3
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d105      	bne.n	80096c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d002      	beq.n	80096c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	3b01      	subs	r3, #1
 80096c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	1c5a      	adds	r2, r3, #1
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80096cc:	697b      	ldr	r3, [r7, #20]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3718      	adds	r7, #24
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b082      	sub	sp, #8
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d018      	beq.n	800971a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	68da      	ldr	r2, [r3, #12]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f0:	441a      	add	r2, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	68da      	ldr	r2, [r3, #12]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d303      	bcc.n	800970a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	68d9      	ldr	r1, [r3, #12]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009712:	461a      	mov	r2, r3
 8009714:	6838      	ldr	r0, [r7, #0]
 8009716:	f002 f95b 	bl	800b9d0 <memcpy>
	}
}
 800971a:	bf00      	nop
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b084      	sub	sp, #16
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800972a:	f001 fddb 	bl	800b2e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009734:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009736:	e011      	b.n	800975c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973c:	2b00      	cmp	r3, #0
 800973e:	d012      	beq.n	8009766 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3324      	adds	r3, #36	; 0x24
 8009744:	4618      	mov	r0, r3
 8009746:	f000 fddf 	bl	800a308 <xTaskRemoveFromEventList>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d001      	beq.n	8009754 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009750:	f000 fec6 	bl	800a4e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009754:	7bfb      	ldrb	r3, [r7, #15]
 8009756:	3b01      	subs	r3, #1
 8009758:	b2db      	uxtb	r3, r3
 800975a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800975c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009760:	2b00      	cmp	r3, #0
 8009762:	dce9      	bgt.n	8009738 <prvUnlockQueue+0x16>
 8009764:	e000      	b.n	8009768 <prvUnlockQueue+0x46>
					break;
 8009766:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	22ff      	movs	r2, #255	; 0xff
 800976c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009770:	f001 fde8 	bl	800b344 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009774:	f001 fdb6 	bl	800b2e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800977e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009780:	e011      	b.n	80097a6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d012      	beq.n	80097b0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	3310      	adds	r3, #16
 800978e:	4618      	mov	r0, r3
 8009790:	f000 fdba 	bl	800a308 <xTaskRemoveFromEventList>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d001      	beq.n	800979e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800979a:	f000 fea1 	bl	800a4e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800979e:	7bbb      	ldrb	r3, [r7, #14]
 80097a0:	3b01      	subs	r3, #1
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	dce9      	bgt.n	8009782 <prvUnlockQueue+0x60>
 80097ae:	e000      	b.n	80097b2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80097b0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	22ff      	movs	r2, #255	; 0xff
 80097b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80097ba:	f001 fdc3 	bl	800b344 <vPortExitCritical>
}
 80097be:	bf00      	nop
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b084      	sub	sp, #16
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097ce:	f001 fd89 	bl	800b2e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d102      	bne.n	80097e0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80097da:	2301      	movs	r3, #1
 80097dc:	60fb      	str	r3, [r7, #12]
 80097de:	e001      	b.n	80097e4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80097e0:	2300      	movs	r3, #0
 80097e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80097e4:	f001 fdae 	bl	800b344 <vPortExitCritical>

	return xReturn;
 80097e8:	68fb      	ldr	r3, [r7, #12]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b084      	sub	sp, #16
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097fa:	f001 fd73 	bl	800b2e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009806:	429a      	cmp	r2, r3
 8009808:	d102      	bne.n	8009810 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800980a:	2301      	movs	r3, #1
 800980c:	60fb      	str	r3, [r7, #12]
 800980e:	e001      	b.n	8009814 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009810:	2300      	movs	r3, #0
 8009812:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009814:	f001 fd96 	bl	800b344 <vPortExitCritical>

	return xReturn;
 8009818:	68fb      	ldr	r3, [r7, #12]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
	...

08009824 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800982e:	2300      	movs	r3, #0
 8009830:	60fb      	str	r3, [r7, #12]
 8009832:	e014      	b.n	800985e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009834:	4a0f      	ldr	r2, [pc, #60]	; (8009874 <vQueueAddToRegistry+0x50>)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10b      	bne.n	8009858 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009840:	490c      	ldr	r1, [pc, #48]	; (8009874 <vQueueAddToRegistry+0x50>)
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	683a      	ldr	r2, [r7, #0]
 8009846:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800984a:	4a0a      	ldr	r2, [pc, #40]	; (8009874 <vQueueAddToRegistry+0x50>)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	00db      	lsls	r3, r3, #3
 8009850:	4413      	add	r3, r2
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009856:	e006      	b.n	8009866 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	3301      	adds	r3, #1
 800985c:	60fb      	str	r3, [r7, #12]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2b07      	cmp	r3, #7
 8009862:	d9e7      	bls.n	8009834 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009864:	bf00      	nop
 8009866:	bf00      	nop
 8009868:	3714      	adds	r7, #20
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	20033480 	.word	0x20033480

08009878 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009880:	2300      	movs	r3, #0
 8009882:	60fb      	str	r3, [r7, #12]
 8009884:	e016      	b.n	80098b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009886:	4a10      	ldr	r2, [pc, #64]	; (80098c8 <vQueueUnregisterQueue+0x50>)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	00db      	lsls	r3, r3, #3
 800988c:	4413      	add	r3, r2
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	429a      	cmp	r2, r3
 8009894:	d10b      	bne.n	80098ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009896:	4a0c      	ldr	r2, [pc, #48]	; (80098c8 <vQueueUnregisterQueue+0x50>)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2100      	movs	r1, #0
 800989c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80098a0:	4a09      	ldr	r2, [pc, #36]	; (80098c8 <vQueueUnregisterQueue+0x50>)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	00db      	lsls	r3, r3, #3
 80098a6:	4413      	add	r3, r2
 80098a8:	2200      	movs	r2, #0
 80098aa:	605a      	str	r2, [r3, #4]
				break;
 80098ac:	e006      	b.n	80098bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	3301      	adds	r3, #1
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2b07      	cmp	r3, #7
 80098b8:	d9e5      	bls.n	8009886 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80098ba:	bf00      	nop
 80098bc:	bf00      	nop
 80098be:	3714      	adds	r7, #20
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr
 80098c8:	20033480 	.word	0x20033480

080098cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b086      	sub	sp, #24
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80098dc:	f001 fd02 	bl	800b2e4 <vPortEnterCritical>
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098e6:	b25b      	sxtb	r3, r3
 80098e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098ec:	d103      	bne.n	80098f6 <vQueueWaitForMessageRestricted+0x2a>
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098fc:	b25b      	sxtb	r3, r3
 80098fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009902:	d103      	bne.n	800990c <vQueueWaitForMessageRestricted+0x40>
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	2200      	movs	r2, #0
 8009908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800990c:	f001 fd1a 	bl	800b344 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009914:	2b00      	cmp	r3, #0
 8009916:	d106      	bne.n	8009926 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	3324      	adds	r3, #36	; 0x24
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	68b9      	ldr	r1, [r7, #8]
 8009920:	4618      	mov	r0, r3
 8009922:	f000 fcc5 	bl	800a2b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009926:	6978      	ldr	r0, [r7, #20]
 8009928:	f7ff fefb 	bl	8009722 <prvUnlockQueue>
	}
 800992c:	bf00      	nop
 800992e:	3718      	adds	r7, #24
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009934:	b580      	push	{r7, lr}
 8009936:	b08e      	sub	sp, #56	; 0x38
 8009938:	af04      	add	r7, sp, #16
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009944:	2b00      	cmp	r3, #0
 8009946:	d10a      	bne.n	800995e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994c:	f383 8811 	msr	BASEPRI, r3
 8009950:	f3bf 8f6f 	isb	sy
 8009954:	f3bf 8f4f 	dsb	sy
 8009958:	623b      	str	r3, [r7, #32]
}
 800995a:	bf00      	nop
 800995c:	e7fe      	b.n	800995c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800995e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10a      	bne.n	800997a <xTaskCreateStatic+0x46>
	__asm volatile
 8009964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009968:	f383 8811 	msr	BASEPRI, r3
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	f3bf 8f4f 	dsb	sy
 8009974:	61fb      	str	r3, [r7, #28]
}
 8009976:	bf00      	nop
 8009978:	e7fe      	b.n	8009978 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800997a:	23c8      	movs	r3, #200	; 0xc8
 800997c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	2bc8      	cmp	r3, #200	; 0xc8
 8009982:	d00a      	beq.n	800999a <xTaskCreateStatic+0x66>
	__asm volatile
 8009984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009988:	f383 8811 	msr	BASEPRI, r3
 800998c:	f3bf 8f6f 	isb	sy
 8009990:	f3bf 8f4f 	dsb	sy
 8009994:	61bb      	str	r3, [r7, #24]
}
 8009996:	bf00      	nop
 8009998:	e7fe      	b.n	8009998 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800999a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800999c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d01e      	beq.n	80099e0 <xTaskCreateStatic+0xac>
 80099a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d01b      	beq.n	80099e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80099a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80099ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80099b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b4:	2202      	movs	r2, #2
 80099b6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80099ba:	2300      	movs	r3, #0
 80099bc:	9303      	str	r3, [sp, #12]
 80099be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c0:	9302      	str	r3, [sp, #8]
 80099c2:	f107 0314 	add.w	r3, r7, #20
 80099c6:	9301      	str	r3, [sp, #4]
 80099c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	68b9      	ldr	r1, [r7, #8]
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f000 f850 	bl	8009a78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80099d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099da:	f000 f8fd 	bl	8009bd8 <prvAddNewTaskToReadyList>
 80099de:	e001      	b.n	80099e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80099e0:	2300      	movs	r3, #0
 80099e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80099e4:	697b      	ldr	r3, [r7, #20]
	}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3728      	adds	r7, #40	; 0x28
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b08c      	sub	sp, #48	; 0x30
 80099f2:	af04      	add	r7, sp, #16
 80099f4:	60f8      	str	r0, [r7, #12]
 80099f6:	60b9      	str	r1, [r7, #8]
 80099f8:	603b      	str	r3, [r7, #0]
 80099fa:	4613      	mov	r3, r2
 80099fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80099fe:	88fb      	ldrh	r3, [r7, #6]
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4618      	mov	r0, r3
 8009a04:	f001 fd90 	bl	800b528 <pvPortMalloc>
 8009a08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00e      	beq.n	8009a2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009a10:	20c8      	movs	r0, #200	; 0xc8
 8009a12:	f001 fd89 	bl	800b528 <pvPortMalloc>
 8009a16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d003      	beq.n	8009a26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009a1e:	69fb      	ldr	r3, [r7, #28]
 8009a20:	697a      	ldr	r2, [r7, #20]
 8009a22:	631a      	str	r2, [r3, #48]	; 0x30
 8009a24:	e005      	b.n	8009a32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009a26:	6978      	ldr	r0, [r7, #20]
 8009a28:	f001 fe26 	bl	800b678 <vPortFree>
 8009a2c:	e001      	b.n	8009a32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d017      	beq.n	8009a68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009a40:	88fa      	ldrh	r2, [r7, #6]
 8009a42:	2300      	movs	r3, #0
 8009a44:	9303      	str	r3, [sp, #12]
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	9302      	str	r3, [sp, #8]
 8009a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a4c:	9301      	str	r3, [sp, #4]
 8009a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a50:	9300      	str	r3, [sp, #0]
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	68b9      	ldr	r1, [r7, #8]
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f000 f80e 	bl	8009a78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a5c:	69f8      	ldr	r0, [r7, #28]
 8009a5e:	f000 f8bb 	bl	8009bd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009a62:	2301      	movs	r3, #1
 8009a64:	61bb      	str	r3, [r7, #24]
 8009a66:	e002      	b.n	8009a6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009a6e:	69bb      	ldr	r3, [r7, #24]
	}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3720      	adds	r7, #32
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b088      	sub	sp, #32
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	607a      	str	r2, [r7, #4]
 8009a84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	461a      	mov	r2, r3
 8009a90:	21a5      	movs	r1, #165	; 0xa5
 8009a92:	f001 ffab 	bl	800b9ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	4413      	add	r3, r2
 8009aa6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	f023 0307 	bic.w	r3, r3, #7
 8009aae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	f003 0307 	and.w	r3, r3, #7
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00a      	beq.n	8009ad0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abe:	f383 8811 	msr	BASEPRI, r3
 8009ac2:	f3bf 8f6f 	isb	sy
 8009ac6:	f3bf 8f4f 	dsb	sy
 8009aca:	617b      	str	r3, [r7, #20]
}
 8009acc:	bf00      	nop
 8009ace:	e7fe      	b.n	8009ace <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8009ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad2:	69ba      	ldr	r2, [r7, #24]
 8009ad4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d01f      	beq.n	8009b1c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009adc:	2300      	movs	r3, #0
 8009ade:	61fb      	str	r3, [r7, #28]
 8009ae0:	e012      	b.n	8009b08 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	7819      	ldrb	r1, [r3, #0]
 8009aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	4413      	add	r3, r2
 8009af0:	3334      	adds	r3, #52	; 0x34
 8009af2:	460a      	mov	r2, r1
 8009af4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009af6:	68ba      	ldr	r2, [r7, #8]
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	4413      	add	r3, r2
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d006      	beq.n	8009b10 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	3301      	adds	r3, #1
 8009b06:	61fb      	str	r3, [r7, #28]
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	2b0f      	cmp	r3, #15
 8009b0c:	d9e9      	bls.n	8009ae2 <prvInitialiseNewTask+0x6a>
 8009b0e:	e000      	b.n	8009b12 <prvInitialiseNewTask+0x9a>
			{
				break;
 8009b10:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b14:	2200      	movs	r2, #0
 8009b16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b1a:	e003      	b.n	8009b24 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b26:	2b37      	cmp	r3, #55	; 0x37
 8009b28:	d901      	bls.n	8009b2e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009b2a:	2337      	movs	r3, #55	; 0x37
 8009b2c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b32:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b38:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8009b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b42:	3304      	adds	r3, #4
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7ff f836 	bl	8008bb6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4c:	3318      	adds	r3, #24
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7ff f831 	bl	8008bb6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b68:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b72:	2200      	movs	r2, #0
 8009b74:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b82:	335c      	adds	r3, #92	; 0x5c
 8009b84:	2260      	movs	r2, #96	; 0x60
 8009b86:	2100      	movs	r1, #0
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f001 ff2f 	bl	800b9ec <memset>
 8009b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b90:	4a0e      	ldr	r2, [pc, #56]	; (8009bcc <prvInitialiseNewTask+0x154>)
 8009b92:	661a      	str	r2, [r3, #96]	; 0x60
 8009b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b96:	4a0e      	ldr	r2, [pc, #56]	; (8009bd0 <prvInitialiseNewTask+0x158>)
 8009b98:	665a      	str	r2, [r3, #100]	; 0x64
 8009b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9c:	4a0d      	ldr	r2, [pc, #52]	; (8009bd4 <prvInitialiseNewTask+0x15c>)
 8009b9e:	669a      	str	r2, [r3, #104]	; 0x68
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8009ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ba8:	683a      	ldr	r2, [r7, #0]
 8009baa:	68f9      	ldr	r1, [r7, #12]
 8009bac:	69b8      	ldr	r0, [r7, #24]
 8009bae:	f001 fa6d 	bl	800b08c <pxPortInitialiseStack>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d002      	beq.n	8009bc4 <prvInitialiseNewTask+0x14c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bc2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bc4:	bf00      	nop
 8009bc6:	3720      	adds	r7, #32
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	0800bd3c 	.word	0x0800bd3c
 8009bd0:	0800bd5c 	.word	0x0800bd5c
 8009bd4:	0800bd1c 	.word	0x0800bd1c

08009bd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009be0:	f001 fb80 	bl	800b2e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009be4:	4b2d      	ldr	r3, [pc, #180]	; (8009c9c <prvAddNewTaskToReadyList+0xc4>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	3301      	adds	r3, #1
 8009bea:	4a2c      	ldr	r2, [pc, #176]	; (8009c9c <prvAddNewTaskToReadyList+0xc4>)
 8009bec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009bee:	4b2c      	ldr	r3, [pc, #176]	; (8009ca0 <prvAddNewTaskToReadyList+0xc8>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d109      	bne.n	8009c0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009bf6:	4a2a      	ldr	r2, [pc, #168]	; (8009ca0 <prvAddNewTaskToReadyList+0xc8>)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009bfc:	4b27      	ldr	r3, [pc, #156]	; (8009c9c <prvAddNewTaskToReadyList+0xc4>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d110      	bne.n	8009c26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009c04:	f000 fc92 	bl	800a52c <prvInitialiseTaskLists>
 8009c08:	e00d      	b.n	8009c26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009c0a:	4b26      	ldr	r3, [pc, #152]	; (8009ca4 <prvAddNewTaskToReadyList+0xcc>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d109      	bne.n	8009c26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009c12:	4b23      	ldr	r3, [pc, #140]	; (8009ca0 <prvAddNewTaskToReadyList+0xc8>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d802      	bhi.n	8009c26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009c20:	4a1f      	ldr	r2, [pc, #124]	; (8009ca0 <prvAddNewTaskToReadyList+0xc8>)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009c26:	4b20      	ldr	r3, [pc, #128]	; (8009ca8 <prvAddNewTaskToReadyList+0xd0>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	4a1e      	ldr	r2, [pc, #120]	; (8009ca8 <prvAddNewTaskToReadyList+0xd0>)
 8009c2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009c30:	4b1d      	ldr	r3, [pc, #116]	; (8009ca8 <prvAddNewTaskToReadyList+0xd0>)
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c3c:	4b1b      	ldr	r3, [pc, #108]	; (8009cac <prvAddNewTaskToReadyList+0xd4>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d903      	bls.n	8009c4c <prvAddNewTaskToReadyList+0x74>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c48:	4a18      	ldr	r2, [pc, #96]	; (8009cac <prvAddNewTaskToReadyList+0xd4>)
 8009c4a:	6013      	str	r3, [r2, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c50:	4613      	mov	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4413      	add	r3, r2
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	4a15      	ldr	r2, [pc, #84]	; (8009cb0 <prvAddNewTaskToReadyList+0xd8>)
 8009c5a:	441a      	add	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	3304      	adds	r3, #4
 8009c60:	4619      	mov	r1, r3
 8009c62:	4610      	mov	r0, r2
 8009c64:	f7fe ffb4 	bl	8008bd0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009c68:	f001 fb6c 	bl	800b344 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009c6c:	4b0d      	ldr	r3, [pc, #52]	; (8009ca4 <prvAddNewTaskToReadyList+0xcc>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00e      	beq.n	8009c92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009c74:	4b0a      	ldr	r3, [pc, #40]	; (8009ca0 <prvAddNewTaskToReadyList+0xc8>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d207      	bcs.n	8009c92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009c82:	4b0c      	ldr	r3, [pc, #48]	; (8009cb4 <prvAddNewTaskToReadyList+0xdc>)
 8009c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c88:	601a      	str	r2, [r3, #0]
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c92:	bf00      	nop
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20032e08 	.word	0x20032e08
 8009ca0:	20032930 	.word	0x20032930
 8009ca4:	20032e14 	.word	0x20032e14
 8009ca8:	20032e24 	.word	0x20032e24
 8009cac:	20032e10 	.word	0x20032e10
 8009cb0:	20032934 	.word	0x20032934
 8009cb4:	e000ed04 	.word	0xe000ed04

08009cb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d017      	beq.n	8009cfa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009cca:	4b13      	ldr	r3, [pc, #76]	; (8009d18 <vTaskDelay+0x60>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00a      	beq.n	8009ce8 <vTaskDelay+0x30>
	__asm volatile
 8009cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd6:	f383 8811 	msr	BASEPRI, r3
 8009cda:	f3bf 8f6f 	isb	sy
 8009cde:	f3bf 8f4f 	dsb	sy
 8009ce2:	60bb      	str	r3, [r7, #8]
}
 8009ce4:	bf00      	nop
 8009ce6:	e7fe      	b.n	8009ce6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009ce8:	f000 f88c 	bl	8009e04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009cec:	2100      	movs	r1, #0
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fd6a 	bl	800a7c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009cf4:	f000 f894 	bl	8009e20 <xTaskResumeAll>
 8009cf8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d107      	bne.n	8009d10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009d00:	4b06      	ldr	r3, [pc, #24]	; (8009d1c <vTaskDelay+0x64>)
 8009d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d06:	601a      	str	r2, [r3, #0]
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d10:	bf00      	nop
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	20032e30 	.word	0x20032e30
 8009d1c:	e000ed04 	.word	0xe000ed04

08009d20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b08a      	sub	sp, #40	; 0x28
 8009d24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009d26:	2300      	movs	r3, #0
 8009d28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009d2e:	463a      	mov	r2, r7
 8009d30:	1d39      	adds	r1, r7, #4
 8009d32:	f107 0308 	add.w	r3, r7, #8
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fe fe98 	bl	8008a6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009d3c:	6839      	ldr	r1, [r7, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	68ba      	ldr	r2, [r7, #8]
 8009d42:	9202      	str	r2, [sp, #8]
 8009d44:	9301      	str	r3, [sp, #4]
 8009d46:	2300      	movs	r3, #0
 8009d48:	9300      	str	r3, [sp, #0]
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	460a      	mov	r2, r1
 8009d4e:	4925      	ldr	r1, [pc, #148]	; (8009de4 <vTaskStartScheduler+0xc4>)
 8009d50:	4825      	ldr	r0, [pc, #148]	; (8009de8 <vTaskStartScheduler+0xc8>)
 8009d52:	f7ff fdef 	bl	8009934 <xTaskCreateStatic>
 8009d56:	4603      	mov	r3, r0
 8009d58:	4a24      	ldr	r2, [pc, #144]	; (8009dec <vTaskStartScheduler+0xcc>)
 8009d5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009d5c:	4b23      	ldr	r3, [pc, #140]	; (8009dec <vTaskStartScheduler+0xcc>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d002      	beq.n	8009d6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009d64:	2301      	movs	r3, #1
 8009d66:	617b      	str	r3, [r7, #20]
 8009d68:	e001      	b.n	8009d6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d102      	bne.n	8009d7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009d74:	f000 fd82 	bl	800a87c <xTimerCreateTimerTask>
 8009d78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d11d      	bne.n	8009dbc <vTaskStartScheduler+0x9c>
	__asm volatile
 8009d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d84:	f383 8811 	msr	BASEPRI, r3
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	613b      	str	r3, [r7, #16]
}
 8009d92:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d94:	4b16      	ldr	r3, [pc, #88]	; (8009df0 <vTaskStartScheduler+0xd0>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	335c      	adds	r3, #92	; 0x5c
 8009d9a:	4a16      	ldr	r2, [pc, #88]	; (8009df4 <vTaskStartScheduler+0xd4>)
 8009d9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009d9e:	4b16      	ldr	r3, [pc, #88]	; (8009df8 <vTaskStartScheduler+0xd8>)
 8009da0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009da4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009da6:	4b15      	ldr	r3, [pc, #84]	; (8009dfc <vTaskStartScheduler+0xdc>)
 8009da8:	2201      	movs	r2, #1
 8009daa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009dac:	4b14      	ldr	r3, [pc, #80]	; (8009e00 <vTaskStartScheduler+0xe0>)
 8009dae:	2200      	movs	r2, #0
 8009db0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8009db2:	f7f6 fda7 	bl	8000904 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009db6:	f001 f9f3 	bl	800b1a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009dba:	e00e      	b.n	8009dda <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dc2:	d10a      	bne.n	8009dda <vTaskStartScheduler+0xba>
	__asm volatile
 8009dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	60fb      	str	r3, [r7, #12]
}
 8009dd6:	bf00      	nop
 8009dd8:	e7fe      	b.n	8009dd8 <vTaskStartScheduler+0xb8>
}
 8009dda:	bf00      	nop
 8009ddc:	3718      	adds	r7, #24
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	0800bc6c 	.word	0x0800bc6c
 8009de8:	0800a4f9 	.word	0x0800a4f9
 8009dec:	20032e2c 	.word	0x20032e2c
 8009df0:	20032930 	.word	0x20032930
 8009df4:	20000020 	.word	0x20000020
 8009df8:	20032e28 	.word	0x20032e28
 8009dfc:	20032e14 	.word	0x20032e14
 8009e00:	20032e0c 	.word	0x20032e0c

08009e04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009e04:	b480      	push	{r7}
 8009e06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009e08:	4b04      	ldr	r3, [pc, #16]	; (8009e1c <vTaskSuspendAll+0x18>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	4a03      	ldr	r2, [pc, #12]	; (8009e1c <vTaskSuspendAll+0x18>)
 8009e10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009e12:	bf00      	nop
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr
 8009e1c:	20032e30 	.word	0x20032e30

08009e20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009e26:	2300      	movs	r3, #0
 8009e28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009e2e:	4b42      	ldr	r3, [pc, #264]	; (8009f38 <xTaskResumeAll+0x118>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10a      	bne.n	8009e4c <xTaskResumeAll+0x2c>
	__asm volatile
 8009e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3a:	f383 8811 	msr	BASEPRI, r3
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	603b      	str	r3, [r7, #0]
}
 8009e48:	bf00      	nop
 8009e4a:	e7fe      	b.n	8009e4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009e4c:	f001 fa4a 	bl	800b2e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009e50:	4b39      	ldr	r3, [pc, #228]	; (8009f38 <xTaskResumeAll+0x118>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3b01      	subs	r3, #1
 8009e56:	4a38      	ldr	r2, [pc, #224]	; (8009f38 <xTaskResumeAll+0x118>)
 8009e58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e5a:	4b37      	ldr	r3, [pc, #220]	; (8009f38 <xTaskResumeAll+0x118>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d162      	bne.n	8009f28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009e62:	4b36      	ldr	r3, [pc, #216]	; (8009f3c <xTaskResumeAll+0x11c>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d05e      	beq.n	8009f28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e6a:	e02f      	b.n	8009ecc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e6c:	4b34      	ldr	r3, [pc, #208]	; (8009f40 <xTaskResumeAll+0x120>)
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	3318      	adds	r3, #24
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7fe ff06 	bl	8008c8a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	3304      	adds	r3, #4
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fe ff01 	bl	8008c8a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e8c:	4b2d      	ldr	r3, [pc, #180]	; (8009f44 <xTaskResumeAll+0x124>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d903      	bls.n	8009e9c <xTaskResumeAll+0x7c>
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e98:	4a2a      	ldr	r2, [pc, #168]	; (8009f44 <xTaskResumeAll+0x124>)
 8009e9a:	6013      	str	r3, [r2, #0]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4413      	add	r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4a27      	ldr	r2, [pc, #156]	; (8009f48 <xTaskResumeAll+0x128>)
 8009eaa:	441a      	add	r2, r3
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	3304      	adds	r3, #4
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	4610      	mov	r0, r2
 8009eb4:	f7fe fe8c 	bl	8008bd0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ebc:	4b23      	ldr	r3, [pc, #140]	; (8009f4c <xTaskResumeAll+0x12c>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d302      	bcc.n	8009ecc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009ec6:	4b22      	ldr	r3, [pc, #136]	; (8009f50 <xTaskResumeAll+0x130>)
 8009ec8:	2201      	movs	r2, #1
 8009eca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ecc:	4b1c      	ldr	r3, [pc, #112]	; (8009f40 <xTaskResumeAll+0x120>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1cb      	bne.n	8009e6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d001      	beq.n	8009ede <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009eda:	f000 fbc9 	bl	800a670 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009ede:	4b1d      	ldr	r3, [pc, #116]	; (8009f54 <xTaskResumeAll+0x134>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d010      	beq.n	8009f0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009eea:	f000 f847 	bl	8009f7c <xTaskIncrementTick>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d002      	beq.n	8009efa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009ef4:	4b16      	ldr	r3, [pc, #88]	; (8009f50 <xTaskResumeAll+0x130>)
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	3b01      	subs	r3, #1
 8009efe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1f1      	bne.n	8009eea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009f06:	4b13      	ldr	r3, [pc, #76]	; (8009f54 <xTaskResumeAll+0x134>)
 8009f08:	2200      	movs	r2, #0
 8009f0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009f0c:	4b10      	ldr	r3, [pc, #64]	; (8009f50 <xTaskResumeAll+0x130>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d009      	beq.n	8009f28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009f14:	2301      	movs	r3, #1
 8009f16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009f18:	4b0f      	ldr	r3, [pc, #60]	; (8009f58 <xTaskResumeAll+0x138>)
 8009f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f1e:	601a      	str	r2, [r3, #0]
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f28:	f001 fa0c 	bl	800b344 <vPortExitCritical>

	return xAlreadyYielded;
 8009f2c:	68bb      	ldr	r3, [r7, #8]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	20032e30 	.word	0x20032e30
 8009f3c:	20032e08 	.word	0x20032e08
 8009f40:	20032dc4 	.word	0x20032dc4
 8009f44:	20032e10 	.word	0x20032e10
 8009f48:	20032934 	.word	0x20032934
 8009f4c:	20032930 	.word	0x20032930
 8009f50:	20032e1c 	.word	0x20032e1c
 8009f54:	20032e18 	.word	0x20032e18
 8009f58:	e000ed04 	.word	0xe000ed04

08009f5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009f62:	4b05      	ldr	r3, [pc, #20]	; (8009f78 <xTaskGetTickCount+0x1c>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009f68:	687b      	ldr	r3, [r7, #4]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	370c      	adds	r7, #12
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	20032e0c 	.word	0x20032e0c

08009f7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009f82:	2300      	movs	r3, #0
 8009f84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f86:	4b53      	ldr	r3, [pc, #332]	; (800a0d4 <xTaskIncrementTick+0x158>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f040 8095 	bne.w	800a0ba <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009f90:	4b51      	ldr	r3, [pc, #324]	; (800a0d8 <xTaskIncrementTick+0x15c>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	3301      	adds	r3, #1
 8009f96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009f98:	4a4f      	ldr	r2, [pc, #316]	; (800a0d8 <xTaskIncrementTick+0x15c>)
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d120      	bne.n	8009fe6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009fa4:	4b4d      	ldr	r3, [pc, #308]	; (800a0dc <xTaskIncrementTick+0x160>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00a      	beq.n	8009fc4 <xTaskIncrementTick+0x48>
	__asm volatile
 8009fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	603b      	str	r3, [r7, #0]
}
 8009fc0:	bf00      	nop
 8009fc2:	e7fe      	b.n	8009fc2 <xTaskIncrementTick+0x46>
 8009fc4:	4b45      	ldr	r3, [pc, #276]	; (800a0dc <xTaskIncrementTick+0x160>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	60fb      	str	r3, [r7, #12]
 8009fca:	4b45      	ldr	r3, [pc, #276]	; (800a0e0 <xTaskIncrementTick+0x164>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a43      	ldr	r2, [pc, #268]	; (800a0dc <xTaskIncrementTick+0x160>)
 8009fd0:	6013      	str	r3, [r2, #0]
 8009fd2:	4a43      	ldr	r2, [pc, #268]	; (800a0e0 <xTaskIncrementTick+0x164>)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6013      	str	r3, [r2, #0]
 8009fd8:	4b42      	ldr	r3, [pc, #264]	; (800a0e4 <xTaskIncrementTick+0x168>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	3301      	adds	r3, #1
 8009fde:	4a41      	ldr	r2, [pc, #260]	; (800a0e4 <xTaskIncrementTick+0x168>)
 8009fe0:	6013      	str	r3, [r2, #0]
 8009fe2:	f000 fb45 	bl	800a670 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009fe6:	4b40      	ldr	r3, [pc, #256]	; (800a0e8 <xTaskIncrementTick+0x16c>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	693a      	ldr	r2, [r7, #16]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d349      	bcc.n	800a084 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ff0:	4b3a      	ldr	r3, [pc, #232]	; (800a0dc <xTaskIncrementTick+0x160>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d104      	bne.n	800a004 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ffa:	4b3b      	ldr	r3, [pc, #236]	; (800a0e8 <xTaskIncrementTick+0x16c>)
 8009ffc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a000:	601a      	str	r2, [r3, #0]
					break;
 800a002:	e03f      	b.n	800a084 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a004:	4b35      	ldr	r3, [pc, #212]	; (800a0dc <xTaskIncrementTick+0x160>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a014:	693a      	ldr	r2, [r7, #16]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d203      	bcs.n	800a024 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a01c:	4a32      	ldr	r2, [pc, #200]	; (800a0e8 <xTaskIncrementTick+0x16c>)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a022:	e02f      	b.n	800a084 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	3304      	adds	r3, #4
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fe fe2e 	bl	8008c8a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a032:	2b00      	cmp	r3, #0
 800a034:	d004      	beq.n	800a040 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	3318      	adds	r3, #24
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fe fe25 	bl	8008c8a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a044:	4b29      	ldr	r3, [pc, #164]	; (800a0ec <xTaskIncrementTick+0x170>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d903      	bls.n	800a054 <xTaskIncrementTick+0xd8>
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a050:	4a26      	ldr	r2, [pc, #152]	; (800a0ec <xTaskIncrementTick+0x170>)
 800a052:	6013      	str	r3, [r2, #0]
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a058:	4613      	mov	r3, r2
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	4413      	add	r3, r2
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4a23      	ldr	r2, [pc, #140]	; (800a0f0 <xTaskIncrementTick+0x174>)
 800a062:	441a      	add	r2, r3
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	3304      	adds	r3, #4
 800a068:	4619      	mov	r1, r3
 800a06a:	4610      	mov	r0, r2
 800a06c:	f7fe fdb0 	bl	8008bd0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a074:	4b1f      	ldr	r3, [pc, #124]	; (800a0f4 <xTaskIncrementTick+0x178>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d3b8      	bcc.n	8009ff0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a07e:	2301      	movs	r3, #1
 800a080:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a082:	e7b5      	b.n	8009ff0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a084:	4b1b      	ldr	r3, [pc, #108]	; (800a0f4 <xTaskIncrementTick+0x178>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a08a:	4919      	ldr	r1, [pc, #100]	; (800a0f0 <xTaskIncrementTick+0x174>)
 800a08c:	4613      	mov	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4413      	add	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	440b      	add	r3, r1
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d901      	bls.n	800a0a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a09c:	2301      	movs	r3, #1
 800a09e:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800a0a0:	4b15      	ldr	r3, [pc, #84]	; (800a0f8 <xTaskIncrementTick+0x17c>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d101      	bne.n	800a0ac <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800a0a8:	f7fe fcc2 	bl	8008a30 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a0ac:	4b13      	ldr	r3, [pc, #76]	; (800a0fc <xTaskIncrementTick+0x180>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d009      	beq.n	800a0c8 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	617b      	str	r3, [r7, #20]
 800a0b8:	e006      	b.n	800a0c8 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a0ba:	4b0f      	ldr	r3, [pc, #60]	; (800a0f8 <xTaskIncrementTick+0x17c>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	4a0d      	ldr	r2, [pc, #52]	; (800a0f8 <xTaskIncrementTick+0x17c>)
 800a0c2:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800a0c4:	f7fe fcb4 	bl	8008a30 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800a0c8:	697b      	ldr	r3, [r7, #20]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3718      	adds	r7, #24
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	20032e30 	.word	0x20032e30
 800a0d8:	20032e0c 	.word	0x20032e0c
 800a0dc:	20032dbc 	.word	0x20032dbc
 800a0e0:	20032dc0 	.word	0x20032dc0
 800a0e4:	20032e20 	.word	0x20032e20
 800a0e8:	20032e28 	.word	0x20032e28
 800a0ec:	20032e10 	.word	0x20032e10
 800a0f0:	20032934 	.word	0x20032934
 800a0f4:	20032930 	.word	0x20032930
 800a0f8:	20032e18 	.word	0x20032e18
 800a0fc:	20032e1c 	.word	0x20032e1c

0800a100 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b086      	sub	sp, #24
 800a104:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a106:	4b4f      	ldr	r3, [pc, #316]	; (800a244 <vTaskSwitchContext+0x144>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d003      	beq.n	800a116 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a10e:	4b4e      	ldr	r3, [pc, #312]	; (800a248 <vTaskSwitchContext+0x148>)
 800a110:	2201      	movs	r2, #1
 800a112:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a114:	e092      	b.n	800a23c <vTaskSwitchContext+0x13c>
		xYieldPending = pdFALSE;
 800a116:	4b4c      	ldr	r3, [pc, #304]	; (800a248 <vTaskSwitchContext+0x148>)
 800a118:	2200      	movs	r2, #0
 800a11a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a11c:	f7f6 fbf9 	bl	8000912 <getRunTimeCounterValue>
 800a120:	4603      	mov	r3, r0
 800a122:	4a4a      	ldr	r2, [pc, #296]	; (800a24c <vTaskSwitchContext+0x14c>)
 800a124:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800a126:	4b49      	ldr	r3, [pc, #292]	; (800a24c <vTaskSwitchContext+0x14c>)
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	4b49      	ldr	r3, [pc, #292]	; (800a250 <vTaskSwitchContext+0x150>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d909      	bls.n	800a146 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a132:	4b48      	ldr	r3, [pc, #288]	; (800a254 <vTaskSwitchContext+0x154>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800a138:	4a44      	ldr	r2, [pc, #272]	; (800a24c <vTaskSwitchContext+0x14c>)
 800a13a:	6810      	ldr	r0, [r2, #0]
 800a13c:	4a44      	ldr	r2, [pc, #272]	; (800a250 <vTaskSwitchContext+0x150>)
 800a13e:	6812      	ldr	r2, [r2, #0]
 800a140:	1a82      	subs	r2, r0, r2
 800a142:	440a      	add	r2, r1
 800a144:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800a146:	4b41      	ldr	r3, [pc, #260]	; (800a24c <vTaskSwitchContext+0x14c>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a41      	ldr	r2, [pc, #260]	; (800a250 <vTaskSwitchContext+0x150>)
 800a14c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800a14e:	4b41      	ldr	r3, [pc, #260]	; (800a254 <vTaskSwitchContext+0x154>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a154:	613b      	str	r3, [r7, #16]
 800a156:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800a15a:	60fb      	str	r3, [r7, #12]
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	429a      	cmp	r2, r3
 800a164:	d111      	bne.n	800a18a <vTaskSwitchContext+0x8a>
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	3304      	adds	r3, #4
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d10b      	bne.n	800a18a <vTaskSwitchContext+0x8a>
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	3308      	adds	r3, #8
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	68fa      	ldr	r2, [r7, #12]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d105      	bne.n	800a18a <vTaskSwitchContext+0x8a>
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	330c      	adds	r3, #12
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	429a      	cmp	r2, r3
 800a188:	d008      	beq.n	800a19c <vTaskSwitchContext+0x9c>
 800a18a:	4b32      	ldr	r3, [pc, #200]	; (800a254 <vTaskSwitchContext+0x154>)
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	4b31      	ldr	r3, [pc, #196]	; (800a254 <vTaskSwitchContext+0x154>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	3334      	adds	r3, #52	; 0x34
 800a194:	4619      	mov	r1, r3
 800a196:	4610      	mov	r0, r2
 800a198:	f7fe fc58 	bl	8008a4c <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 800a19c:	4b2d      	ldr	r3, [pc, #180]	; (800a254 <vTaskSwitchContext+0x154>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a2d      	ldr	r2, [pc, #180]	; (800a258 <vTaskSwitchContext+0x158>)
 800a1a2:	6812      	ldr	r2, [r2, #0]
 800a1a4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1a8:	4b2c      	ldr	r3, [pc, #176]	; (800a25c <vTaskSwitchContext+0x15c>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	617b      	str	r3, [r7, #20]
 800a1ae:	e010      	b.n	800a1d2 <vTaskSwitchContext+0xd2>
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d10a      	bne.n	800a1cc <vTaskSwitchContext+0xcc>
	__asm volatile
 800a1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ba:	f383 8811 	msr	BASEPRI, r3
 800a1be:	f3bf 8f6f 	isb	sy
 800a1c2:	f3bf 8f4f 	dsb	sy
 800a1c6:	607b      	str	r3, [r7, #4]
}
 800a1c8:	bf00      	nop
 800a1ca:	e7fe      	b.n	800a1ca <vTaskSwitchContext+0xca>
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	617b      	str	r3, [r7, #20]
 800a1d2:	4923      	ldr	r1, [pc, #140]	; (800a260 <vTaskSwitchContext+0x160>)
 800a1d4:	697a      	ldr	r2, [r7, #20]
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	4413      	add	r3, r2
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	440b      	add	r3, r1
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d0e4      	beq.n	800a1b0 <vTaskSwitchContext+0xb0>
 800a1e6:	697a      	ldr	r2, [r7, #20]
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	4413      	add	r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	4a1b      	ldr	r2, [pc, #108]	; (800a260 <vTaskSwitchContext+0x160>)
 800a1f2:	4413      	add	r3, r2
 800a1f4:	60bb      	str	r3, [r7, #8]
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	685a      	ldr	r2, [r3, #4]
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	605a      	str	r2, [r3, #4]
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	685a      	ldr	r2, [r3, #4]
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	3308      	adds	r3, #8
 800a208:	429a      	cmp	r2, r3
 800a20a:	d104      	bne.n	800a216 <vTaskSwitchContext+0x116>
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	685a      	ldr	r2, [r3, #4]
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	605a      	str	r2, [r3, #4]
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	4a0d      	ldr	r2, [pc, #52]	; (800a254 <vTaskSwitchContext+0x154>)
 800a21e:	6013      	str	r3, [r2, #0]
 800a220:	4a0e      	ldr	r2, [pc, #56]	; (800a25c <vTaskSwitchContext+0x15c>)
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800a226:	4b0b      	ldr	r3, [pc, #44]	; (800a254 <vTaskSwitchContext+0x154>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a22e:	4a0a      	ldr	r2, [pc, #40]	; (800a258 <vTaskSwitchContext+0x158>)
 800a230:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a232:	4b08      	ldr	r3, [pc, #32]	; (800a254 <vTaskSwitchContext+0x154>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	335c      	adds	r3, #92	; 0x5c
 800a238:	4a0a      	ldr	r2, [pc, #40]	; (800a264 <vTaskSwitchContext+0x164>)
 800a23a:	6013      	str	r3, [r2, #0]
}
 800a23c:	bf00      	nop
 800a23e:	3718      	adds	r7, #24
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	20032e30 	.word	0x20032e30
 800a248:	20032e1c 	.word	0x20032e1c
 800a24c:	20032e38 	.word	0x20032e38
 800a250:	20032e34 	.word	0x20032e34
 800a254:	20032930 	.word	0x20032930
 800a258:	20032e04 	.word	0x20032e04
 800a25c:	20032e10 	.word	0x20032e10
 800a260:	20032934 	.word	0x20032934
 800a264:	20000020 	.word	0x20000020

0800a268 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d10a      	bne.n	800a28e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	60fb      	str	r3, [r7, #12]
}
 800a28a:	bf00      	nop
 800a28c:	e7fe      	b.n	800a28c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a28e:	4b07      	ldr	r3, [pc, #28]	; (800a2ac <vTaskPlaceOnEventList+0x44>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	3318      	adds	r3, #24
 800a294:	4619      	mov	r1, r3
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f7fe fcbe 	bl	8008c18 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a29c:	2101      	movs	r1, #1
 800a29e:	6838      	ldr	r0, [r7, #0]
 800a2a0:	f000 fa92 	bl	800a7c8 <prvAddCurrentTaskToDelayedList>
}
 800a2a4:	bf00      	nop
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	20032930 	.word	0x20032930

0800a2b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d10a      	bne.n	800a2d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c6:	f383 8811 	msr	BASEPRI, r3
 800a2ca:	f3bf 8f6f 	isb	sy
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	617b      	str	r3, [r7, #20]
}
 800a2d4:	bf00      	nop
 800a2d6:	e7fe      	b.n	800a2d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a2d8:	4b0a      	ldr	r3, [pc, #40]	; (800a304 <vTaskPlaceOnEventListRestricted+0x54>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	3318      	adds	r3, #24
 800a2de:	4619      	mov	r1, r3
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f7fe fc75 	bl	8008bd0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d002      	beq.n	800a2f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a2ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a2f2:	6879      	ldr	r1, [r7, #4]
 800a2f4:	68b8      	ldr	r0, [r7, #8]
 800a2f6:	f000 fa67 	bl	800a7c8 <prvAddCurrentTaskToDelayedList>
	}
 800a2fa:	bf00      	nop
 800a2fc:	3718      	adds	r7, #24
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	20032930 	.word	0x20032930

0800a308 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b086      	sub	sp, #24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d10a      	bne.n	800a334 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a322:	f383 8811 	msr	BASEPRI, r3
 800a326:	f3bf 8f6f 	isb	sy
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	60fb      	str	r3, [r7, #12]
}
 800a330:	bf00      	nop
 800a332:	e7fe      	b.n	800a332 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	3318      	adds	r3, #24
 800a338:	4618      	mov	r0, r3
 800a33a:	f7fe fca6 	bl	8008c8a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a33e:	4b1e      	ldr	r3, [pc, #120]	; (800a3b8 <xTaskRemoveFromEventList+0xb0>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d11d      	bne.n	800a382 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	3304      	adds	r3, #4
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7fe fc9d 	bl	8008c8a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a354:	4b19      	ldr	r3, [pc, #100]	; (800a3bc <xTaskRemoveFromEventList+0xb4>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d903      	bls.n	800a364 <xTaskRemoveFromEventList+0x5c>
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a360:	4a16      	ldr	r2, [pc, #88]	; (800a3bc <xTaskRemoveFromEventList+0xb4>)
 800a362:	6013      	str	r3, [r2, #0]
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a368:	4613      	mov	r3, r2
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	4413      	add	r3, r2
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	4a13      	ldr	r2, [pc, #76]	; (800a3c0 <xTaskRemoveFromEventList+0xb8>)
 800a372:	441a      	add	r2, r3
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	3304      	adds	r3, #4
 800a378:	4619      	mov	r1, r3
 800a37a:	4610      	mov	r0, r2
 800a37c:	f7fe fc28 	bl	8008bd0 <vListInsertEnd>
 800a380:	e005      	b.n	800a38e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	3318      	adds	r3, #24
 800a386:	4619      	mov	r1, r3
 800a388:	480e      	ldr	r0, [pc, #56]	; (800a3c4 <xTaskRemoveFromEventList+0xbc>)
 800a38a:	f7fe fc21 	bl	8008bd0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a392:	4b0d      	ldr	r3, [pc, #52]	; (800a3c8 <xTaskRemoveFromEventList+0xc0>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a398:	429a      	cmp	r2, r3
 800a39a:	d905      	bls.n	800a3a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a39c:	2301      	movs	r3, #1
 800a39e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a3a0:	4b0a      	ldr	r3, [pc, #40]	; (800a3cc <xTaskRemoveFromEventList+0xc4>)
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	601a      	str	r2, [r3, #0]
 800a3a6:	e001      	b.n	800a3ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a3ac:	697b      	ldr	r3, [r7, #20]
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3718      	adds	r7, #24
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	20032e30 	.word	0x20032e30
 800a3bc:	20032e10 	.word	0x20032e10
 800a3c0:	20032934 	.word	0x20032934
 800a3c4:	20032dc4 	.word	0x20032dc4
 800a3c8:	20032930 	.word	0x20032930
 800a3cc:	20032e1c 	.word	0x20032e1c

0800a3d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a3d8:	4b06      	ldr	r3, [pc, #24]	; (800a3f4 <vTaskInternalSetTimeOutState+0x24>)
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a3e0:	4b05      	ldr	r3, [pc, #20]	; (800a3f8 <vTaskInternalSetTimeOutState+0x28>)
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	605a      	str	r2, [r3, #4]
}
 800a3e8:	bf00      	nop
 800a3ea:	370c      	adds	r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr
 800a3f4:	20032e20 	.word	0x20032e20
 800a3f8:	20032e0c 	.word	0x20032e0c

0800a3fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b088      	sub	sp, #32
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d10a      	bne.n	800a422 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a410:	f383 8811 	msr	BASEPRI, r3
 800a414:	f3bf 8f6f 	isb	sy
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	613b      	str	r3, [r7, #16]
}
 800a41e:	bf00      	nop
 800a420:	e7fe      	b.n	800a420 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10a      	bne.n	800a43e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42c:	f383 8811 	msr	BASEPRI, r3
 800a430:	f3bf 8f6f 	isb	sy
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	60fb      	str	r3, [r7, #12]
}
 800a43a:	bf00      	nop
 800a43c:	e7fe      	b.n	800a43c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a43e:	f000 ff51 	bl	800b2e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a442:	4b24      	ldr	r3, [pc, #144]	; (800a4d4 <xTaskCheckForTimeOut+0xd8>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	69ba      	ldr	r2, [r7, #24]
 800a44e:	1ad3      	subs	r3, r2, r3
 800a450:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800a452:	4b21      	ldr	r3, [pc, #132]	; (800a4d8 <xTaskCheckForTimeOut+0xdc>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d007      	beq.n	800a46e <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a45e:	4b1e      	ldr	r3, [pc, #120]	; (800a4d8 <xTaskCheckForTimeOut+0xdc>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2200      	movs	r2, #0
 800a464:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				xReturn = pdTRUE;
 800a468:	2301      	movs	r3, #1
 800a46a:	61fb      	str	r3, [r7, #28]
 800a46c:	e02b      	b.n	800a4c6 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a476:	d102      	bne.n	800a47e <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a478:	2300      	movs	r3, #0
 800a47a:	61fb      	str	r3, [r7, #28]
 800a47c:	e023      	b.n	800a4c6 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	4b16      	ldr	r3, [pc, #88]	; (800a4dc <xTaskCheckForTimeOut+0xe0>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	429a      	cmp	r2, r3
 800a488:	d007      	beq.n	800a49a <xTaskCheckForTimeOut+0x9e>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	69ba      	ldr	r2, [r7, #24]
 800a490:	429a      	cmp	r2, r3
 800a492:	d302      	bcc.n	800a49a <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a494:	2301      	movs	r3, #1
 800a496:	61fb      	str	r3, [r7, #28]
 800a498:	e015      	b.n	800a4c6 <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	697a      	ldr	r2, [r7, #20]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d20b      	bcs.n	800a4bc <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	1ad2      	subs	r2, r2, r3
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f7ff ff8d 	bl	800a3d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	61fb      	str	r3, [r7, #28]
 800a4ba:	e004      	b.n	800a4c6 <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a4c6:	f000 ff3d 	bl	800b344 <vPortExitCritical>

	return xReturn;
 800a4ca:	69fb      	ldr	r3, [r7, #28]
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3720      	adds	r7, #32
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	20032e0c 	.word	0x20032e0c
 800a4d8:	20032930 	.word	0x20032930
 800a4dc:	20032e20 	.word	0x20032e20

0800a4e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a4e4:	4b03      	ldr	r3, [pc, #12]	; (800a4f4 <vTaskMissedYield+0x14>)
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	601a      	str	r2, [r3, #0]
}
 800a4ea:	bf00      	nop
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr
 800a4f4:	20032e1c 	.word	0x20032e1c

0800a4f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a500:	f000 f854 	bl	800a5ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a504:	4b07      	ldr	r3, [pc, #28]	; (800a524 <prvIdleTask+0x2c>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d907      	bls.n	800a51c <prvIdleTask+0x24>
			{
				taskYIELD();
 800a50c:	4b06      	ldr	r3, [pc, #24]	; (800a528 <prvIdleTask+0x30>)
 800a50e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a512:	601a      	str	r2, [r3, #0]
 800a514:	f3bf 8f4f 	dsb	sy
 800a518:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a51c:	f7fe fa81 	bl	8008a22 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a520:	e7ee      	b.n	800a500 <prvIdleTask+0x8>
 800a522:	bf00      	nop
 800a524:	20032934 	.word	0x20032934
 800a528:	e000ed04 	.word	0xe000ed04

0800a52c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a532:	2300      	movs	r3, #0
 800a534:	607b      	str	r3, [r7, #4]
 800a536:	e00c      	b.n	800a552 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	4613      	mov	r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	4413      	add	r3, r2
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	4a12      	ldr	r2, [pc, #72]	; (800a58c <prvInitialiseTaskLists+0x60>)
 800a544:	4413      	add	r3, r2
 800a546:	4618      	mov	r0, r3
 800a548:	f7fe fb15 	bl	8008b76 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	3301      	adds	r3, #1
 800a550:	607b      	str	r3, [r7, #4]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2b37      	cmp	r3, #55	; 0x37
 800a556:	d9ef      	bls.n	800a538 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a558:	480d      	ldr	r0, [pc, #52]	; (800a590 <prvInitialiseTaskLists+0x64>)
 800a55a:	f7fe fb0c 	bl	8008b76 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a55e:	480d      	ldr	r0, [pc, #52]	; (800a594 <prvInitialiseTaskLists+0x68>)
 800a560:	f7fe fb09 	bl	8008b76 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a564:	480c      	ldr	r0, [pc, #48]	; (800a598 <prvInitialiseTaskLists+0x6c>)
 800a566:	f7fe fb06 	bl	8008b76 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a56a:	480c      	ldr	r0, [pc, #48]	; (800a59c <prvInitialiseTaskLists+0x70>)
 800a56c:	f7fe fb03 	bl	8008b76 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a570:	480b      	ldr	r0, [pc, #44]	; (800a5a0 <prvInitialiseTaskLists+0x74>)
 800a572:	f7fe fb00 	bl	8008b76 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a576:	4b0b      	ldr	r3, [pc, #44]	; (800a5a4 <prvInitialiseTaskLists+0x78>)
 800a578:	4a05      	ldr	r2, [pc, #20]	; (800a590 <prvInitialiseTaskLists+0x64>)
 800a57a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a57c:	4b0a      	ldr	r3, [pc, #40]	; (800a5a8 <prvInitialiseTaskLists+0x7c>)
 800a57e:	4a05      	ldr	r2, [pc, #20]	; (800a594 <prvInitialiseTaskLists+0x68>)
 800a580:	601a      	str	r2, [r3, #0]
}
 800a582:	bf00      	nop
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	20032934 	.word	0x20032934
 800a590:	20032d94 	.word	0x20032d94
 800a594:	20032da8 	.word	0x20032da8
 800a598:	20032dc4 	.word	0x20032dc4
 800a59c:	20032dd8 	.word	0x20032dd8
 800a5a0:	20032df0 	.word	0x20032df0
 800a5a4:	20032dbc 	.word	0x20032dbc
 800a5a8:	20032dc0 	.word	0x20032dc0

0800a5ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5b2:	e019      	b.n	800a5e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a5b4:	f000 fe96 	bl	800b2e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5b8:	4b10      	ldr	r3, [pc, #64]	; (800a5fc <prvCheckTasksWaitingTermination+0x50>)
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	3304      	adds	r3, #4
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fe fb60 	bl	8008c8a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a5ca:	4b0d      	ldr	r3, [pc, #52]	; (800a600 <prvCheckTasksWaitingTermination+0x54>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	4a0b      	ldr	r2, [pc, #44]	; (800a600 <prvCheckTasksWaitingTermination+0x54>)
 800a5d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a5d4:	4b0b      	ldr	r3, [pc, #44]	; (800a604 <prvCheckTasksWaitingTermination+0x58>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	4a0a      	ldr	r2, [pc, #40]	; (800a604 <prvCheckTasksWaitingTermination+0x58>)
 800a5dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a5de:	f000 feb1 	bl	800b344 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f810 	bl	800a608 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5e8:	4b06      	ldr	r3, [pc, #24]	; (800a604 <prvCheckTasksWaitingTermination+0x58>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d1e1      	bne.n	800a5b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a5f0:	bf00      	nop
 800a5f2:	bf00      	nop
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	20032dd8 	.word	0x20032dd8
 800a600:	20032e08 	.word	0x20032e08
 800a604:	20032dec 	.word	0x20032dec

0800a608 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	335c      	adds	r3, #92	; 0x5c
 800a614:	4618      	mov	r0, r3
 800a616:	f001 fa4f 	bl	800bab8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800a620:	2b00      	cmp	r3, #0
 800a622:	d108      	bne.n	800a636 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a628:	4618      	mov	r0, r3
 800a62a:	f001 f825 	bl	800b678 <vPortFree>
				vPortFree( pxTCB );
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f001 f822 	bl	800b678 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a634:	e018      	b.n	800a668 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d103      	bne.n	800a648 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f001 f819 	bl	800b678 <vPortFree>
	}
 800a646:	e00f      	b.n	800a668 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800a64e:	2b02      	cmp	r3, #2
 800a650:	d00a      	beq.n	800a668 <prvDeleteTCB+0x60>
	__asm volatile
 800a652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a656:	f383 8811 	msr	BASEPRI, r3
 800a65a:	f3bf 8f6f 	isb	sy
 800a65e:	f3bf 8f4f 	dsb	sy
 800a662:	60fb      	str	r3, [r7, #12]
}
 800a664:	bf00      	nop
 800a666:	e7fe      	b.n	800a666 <prvDeleteTCB+0x5e>
	}
 800a668:	bf00      	nop
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a676:	4b0c      	ldr	r3, [pc, #48]	; (800a6a8 <prvResetNextTaskUnblockTime+0x38>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d104      	bne.n	800a68a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a680:	4b0a      	ldr	r3, [pc, #40]	; (800a6ac <prvResetNextTaskUnblockTime+0x3c>)
 800a682:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a686:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a688:	e008      	b.n	800a69c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a68a:	4b07      	ldr	r3, [pc, #28]	; (800a6a8 <prvResetNextTaskUnblockTime+0x38>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	4a04      	ldr	r2, [pc, #16]	; (800a6ac <prvResetNextTaskUnblockTime+0x3c>)
 800a69a:	6013      	str	r3, [r2, #0]
}
 800a69c:	bf00      	nop
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr
 800a6a8:	20032dbc 	.word	0x20032dbc
 800a6ac:	20032e28 	.word	0x20032e28

0800a6b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a6b6:	4b0b      	ldr	r3, [pc, #44]	; (800a6e4 <xTaskGetSchedulerState+0x34>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d102      	bne.n	800a6c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	607b      	str	r3, [r7, #4]
 800a6c2:	e008      	b.n	800a6d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6c4:	4b08      	ldr	r3, [pc, #32]	; (800a6e8 <xTaskGetSchedulerState+0x38>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d102      	bne.n	800a6d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	607b      	str	r3, [r7, #4]
 800a6d0:	e001      	b.n	800a6d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a6d6:	687b      	ldr	r3, [r7, #4]
	}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr
 800a6e4:	20032e14 	.word	0x20032e14
 800a6e8:	20032e30 	.word	0x20032e30

0800a6ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d056      	beq.n	800a7b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a702:	4b2e      	ldr	r3, [pc, #184]	; (800a7bc <xTaskPriorityDisinherit+0xd0>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	693a      	ldr	r2, [r7, #16]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d00a      	beq.n	800a722 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a710:	f383 8811 	msr	BASEPRI, r3
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	60fb      	str	r3, [r7, #12]
}
 800a71e:	bf00      	nop
 800a720:	e7fe      	b.n	800a720 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a726:	2b00      	cmp	r3, #0
 800a728:	d10a      	bne.n	800a740 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72e:	f383 8811 	msr	BASEPRI, r3
 800a732:	f3bf 8f6f 	isb	sy
 800a736:	f3bf 8f4f 	dsb	sy
 800a73a:	60bb      	str	r3, [r7, #8]
}
 800a73c:	bf00      	nop
 800a73e:	e7fe      	b.n	800a73e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a744:	1e5a      	subs	r2, r3, #1
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a752:	429a      	cmp	r2, r3
 800a754:	d02c      	beq.n	800a7b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d128      	bne.n	800a7b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	3304      	adds	r3, #4
 800a762:	4618      	mov	r0, r3
 800a764:	f7fe fa91 	bl	8008c8a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a774:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a780:	4b0f      	ldr	r3, [pc, #60]	; (800a7c0 <xTaskPriorityDisinherit+0xd4>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	429a      	cmp	r2, r3
 800a786:	d903      	bls.n	800a790 <xTaskPriorityDisinherit+0xa4>
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78c:	4a0c      	ldr	r2, [pc, #48]	; (800a7c0 <xTaskPriorityDisinherit+0xd4>)
 800a78e:	6013      	str	r3, [r2, #0]
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a794:	4613      	mov	r3, r2
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	4413      	add	r3, r2
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	4a09      	ldr	r2, [pc, #36]	; (800a7c4 <xTaskPriorityDisinherit+0xd8>)
 800a79e:	441a      	add	r2, r3
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	f7fe fa12 	bl	8008bd0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a7b0:	697b      	ldr	r3, [r7, #20]
	}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3718      	adds	r7, #24
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	20032930 	.word	0x20032930
 800a7c0:	20032e10 	.word	0x20032e10
 800a7c4:	20032934 	.word	0x20032934

0800a7c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a7d2:	4b24      	ldr	r3, [pc, #144]	; (800a864 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a7d8:	4b23      	ldr	r3, [pc, #140]	; (800a868 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7e2:	4b21      	ldr	r3, [pc, #132]	; (800a868 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	3304      	adds	r3, #4
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7fe fa4e 	bl	8008c8a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7f4:	d10a      	bne.n	800a80c <prvAddCurrentTaskToDelayedList+0x44>
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d007      	beq.n	800a80c <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7fc:	4b1a      	ldr	r3, [pc, #104]	; (800a868 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	3304      	adds	r3, #4
 800a802:	4619      	mov	r1, r3
 800a804:	4819      	ldr	r0, [pc, #100]	; (800a86c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a806:	f7fe f9e3 	bl	8008bd0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a80a:	e026      	b.n	800a85a <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4413      	add	r3, r2
 800a812:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a814:	4b14      	ldr	r3, [pc, #80]	; (800a868 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	68ba      	ldr	r2, [r7, #8]
 800a81a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a81c:	68ba      	ldr	r2, [r7, #8]
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	429a      	cmp	r2, r3
 800a822:	d209      	bcs.n	800a838 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a824:	4b12      	ldr	r3, [pc, #72]	; (800a870 <prvAddCurrentTaskToDelayedList+0xa8>)
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	4b0f      	ldr	r3, [pc, #60]	; (800a868 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	3304      	adds	r3, #4
 800a82e:	4619      	mov	r1, r3
 800a830:	4610      	mov	r0, r2
 800a832:	f7fe f9f1 	bl	8008c18 <vListInsert>
}
 800a836:	e010      	b.n	800a85a <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a838:	4b0e      	ldr	r3, [pc, #56]	; (800a874 <prvAddCurrentTaskToDelayedList+0xac>)
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	4b0a      	ldr	r3, [pc, #40]	; (800a868 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3304      	adds	r3, #4
 800a842:	4619      	mov	r1, r3
 800a844:	4610      	mov	r0, r2
 800a846:	f7fe f9e7 	bl	8008c18 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a84a:	4b0b      	ldr	r3, [pc, #44]	; (800a878 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	429a      	cmp	r2, r3
 800a852:	d202      	bcs.n	800a85a <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800a854:	4a08      	ldr	r2, [pc, #32]	; (800a878 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	6013      	str	r3, [r2, #0]
}
 800a85a:	bf00      	nop
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	20032e0c 	.word	0x20032e0c
 800a868:	20032930 	.word	0x20032930
 800a86c:	20032df0 	.word	0x20032df0
 800a870:	20032dc0 	.word	0x20032dc0
 800a874:	20032dbc 	.word	0x20032dbc
 800a878:	20032e28 	.word	0x20032e28

0800a87c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b08a      	sub	sp, #40	; 0x28
 800a880:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a882:	2300      	movs	r3, #0
 800a884:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a886:	f000 fba1 	bl	800afcc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a88a:	4b1c      	ldr	r3, [pc, #112]	; (800a8fc <xTimerCreateTimerTask+0x80>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d021      	beq.n	800a8d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a892:	2300      	movs	r3, #0
 800a894:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a896:	2300      	movs	r3, #0
 800a898:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a89a:	1d3a      	adds	r2, r7, #4
 800a89c:	f107 0108 	add.w	r1, r7, #8
 800a8a0:	f107 030c 	add.w	r3, r7, #12
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7fe f8fb 	bl	8008aa0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a8aa:	6879      	ldr	r1, [r7, #4]
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	9202      	str	r2, [sp, #8]
 800a8b2:	9301      	str	r3, [sp, #4]
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	9300      	str	r3, [sp, #0]
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	460a      	mov	r2, r1
 800a8bc:	4910      	ldr	r1, [pc, #64]	; (800a900 <xTimerCreateTimerTask+0x84>)
 800a8be:	4811      	ldr	r0, [pc, #68]	; (800a904 <xTimerCreateTimerTask+0x88>)
 800a8c0:	f7ff f838 	bl	8009934 <xTaskCreateStatic>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	4a10      	ldr	r2, [pc, #64]	; (800a908 <xTimerCreateTimerTask+0x8c>)
 800a8c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a8ca:	4b0f      	ldr	r3, [pc, #60]	; (800a908 <xTimerCreateTimerTask+0x8c>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d001      	beq.n	800a8d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d10a      	bne.n	800a8f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e0:	f383 8811 	msr	BASEPRI, r3
 800a8e4:	f3bf 8f6f 	isb	sy
 800a8e8:	f3bf 8f4f 	dsb	sy
 800a8ec:	613b      	str	r3, [r7, #16]
}
 800a8ee:	bf00      	nop
 800a8f0:	e7fe      	b.n	800a8f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a8f2:	697b      	ldr	r3, [r7, #20]
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3718      	adds	r7, #24
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	20032e6c 	.word	0x20032e6c
 800a900:	0800bc9c 	.word	0x0800bc9c
 800a904:	0800ab75 	.word	0x0800ab75
 800a908:	20032e70 	.word	0x20032e70

0800a90c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b088      	sub	sp, #32
 800a910:	af02      	add	r7, sp, #8
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	607a      	str	r2, [r7, #4]
 800a918:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a91a:	202c      	movs	r0, #44	; 0x2c
 800a91c:	f000 fe04 	bl	800b528 <pvPortMalloc>
 800a920:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d00d      	beq.n	800a944 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	9301      	str	r3, [sp, #4]
 800a934:	6a3b      	ldr	r3, [r7, #32]
 800a936:	9300      	str	r3, [sp, #0]
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	68b9      	ldr	r1, [r7, #8]
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	f000 f843 	bl	800a9ca <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a944:	697b      	ldr	r3, [r7, #20]
	}
 800a946:	4618      	mov	r0, r3
 800a948:	3718      	adds	r7, #24
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}

0800a94e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b08a      	sub	sp, #40	; 0x28
 800a952:	af02      	add	r7, sp, #8
 800a954:	60f8      	str	r0, [r7, #12]
 800a956:	60b9      	str	r1, [r7, #8]
 800a958:	607a      	str	r2, [r7, #4]
 800a95a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a95c:	232c      	movs	r3, #44	; 0x2c
 800a95e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	2b2c      	cmp	r3, #44	; 0x2c
 800a964:	d00a      	beq.n	800a97c <xTimerCreateStatic+0x2e>
	__asm volatile
 800a966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a96a:	f383 8811 	msr	BASEPRI, r3
 800a96e:	f3bf 8f6f 	isb	sy
 800a972:	f3bf 8f4f 	dsb	sy
 800a976:	61bb      	str	r3, [r7, #24]
}
 800a978:	bf00      	nop
 800a97a:	e7fe      	b.n	800a97a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a97c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10a      	bne.n	800a99a <xTimerCreateStatic+0x4c>
	__asm volatile
 800a984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a988:	f383 8811 	msr	BASEPRI, r3
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	617b      	str	r3, [r7, #20]
}
 800a996:	bf00      	nop
 800a998:	e7fe      	b.n	800a998 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800a99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a99e:	69fb      	ldr	r3, [r7, #28]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d00d      	beq.n	800a9c0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a9a4:	69fb      	ldr	r3, [r7, #28]
 800a9a6:	2202      	movs	r2, #2
 800a9a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	9301      	str	r3, [sp, #4]
 800a9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	68b9      	ldr	r1, [r7, #8]
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	f000 f805 	bl	800a9ca <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a9c0:	69fb      	ldr	r3, [r7, #28]
	}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3720      	adds	r7, #32
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b086      	sub	sp, #24
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	60f8      	str	r0, [r7, #12]
 800a9d2:	60b9      	str	r1, [r7, #8]
 800a9d4:	607a      	str	r2, [r7, #4]
 800a9d6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d10a      	bne.n	800a9f4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800a9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e2:	f383 8811 	msr	BASEPRI, r3
 800a9e6:	f3bf 8f6f 	isb	sy
 800a9ea:	f3bf 8f4f 	dsb	sy
 800a9ee:	617b      	str	r3, [r7, #20]
}
 800a9f0:	bf00      	nop
 800a9f2:	e7fe      	b.n	800a9f2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800a9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d01e      	beq.n	800aa38 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a9fa:	f000 fae7 	bl	800afcc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800aa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0c:	683a      	ldr	r2, [r7, #0]
 800aa0e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa12:	6a3a      	ldr	r2, [r7, #32]
 800aa14:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800aa16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa18:	3304      	adds	r3, #4
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7fe f8cb 	bl	8008bb6 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d008      	beq.n	800aa38 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800aa26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa2c:	f043 0304 	orr.w	r3, r3, #4
 800aa30:	b2da      	uxtb	r2, r3
 800aa32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800aa38:	bf00      	nop
 800aa3a:	3718      	adds	r7, #24
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b08a      	sub	sp, #40	; 0x28
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	607a      	str	r2, [r7, #4]
 800aa4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d10a      	bne.n	800aa6e <xTimerGenericCommand+0x2e>
	__asm volatile
 800aa58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5c:	f383 8811 	msr	BASEPRI, r3
 800aa60:	f3bf 8f6f 	isb	sy
 800aa64:	f3bf 8f4f 	dsb	sy
 800aa68:	623b      	str	r3, [r7, #32]
}
 800aa6a:	bf00      	nop
 800aa6c:	e7fe      	b.n	800aa6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aa6e:	4b1a      	ldr	r3, [pc, #104]	; (800aad8 <xTimerGenericCommand+0x98>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d02a      	beq.n	800aacc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	2b05      	cmp	r3, #5
 800aa86:	dc18      	bgt.n	800aaba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aa88:	f7ff fe12 	bl	800a6b0 <xTaskGetSchedulerState>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d109      	bne.n	800aaa6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aa92:	4b11      	ldr	r3, [pc, #68]	; (800aad8 <xTimerGenericCommand+0x98>)
 800aa94:	6818      	ldr	r0, [r3, #0]
 800aa96:	f107 0110 	add.w	r1, r7, #16
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa9e:	f7fe fb13 	bl	80090c8 <xQueueGenericSend>
 800aaa2:	6278      	str	r0, [r7, #36]	; 0x24
 800aaa4:	e012      	b.n	800aacc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aaa6:	4b0c      	ldr	r3, [pc, #48]	; (800aad8 <xTimerGenericCommand+0x98>)
 800aaa8:	6818      	ldr	r0, [r3, #0]
 800aaaa:	f107 0110 	add.w	r1, r7, #16
 800aaae:	2300      	movs	r3, #0
 800aab0:	2200      	movs	r2, #0
 800aab2:	f7fe fb09 	bl	80090c8 <xQueueGenericSend>
 800aab6:	6278      	str	r0, [r7, #36]	; 0x24
 800aab8:	e008      	b.n	800aacc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aaba:	4b07      	ldr	r3, [pc, #28]	; (800aad8 <xTimerGenericCommand+0x98>)
 800aabc:	6818      	ldr	r0, [r3, #0]
 800aabe:	f107 0110 	add.w	r1, r7, #16
 800aac2:	2300      	movs	r3, #0
 800aac4:	683a      	ldr	r2, [r7, #0]
 800aac6:	f7fe fbfd 	bl	80092c4 <xQueueGenericSendFromISR>
 800aaca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3728      	adds	r7, #40	; 0x28
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	20032e6c 	.word	0x20032e6c

0800aadc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b088      	sub	sp, #32
 800aae0:	af02      	add	r7, sp, #8
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aae6:	4b22      	ldr	r3, [pc, #136]	; (800ab70 <prvProcessExpiredTimer+0x94>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	3304      	adds	r3, #4
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7fe f8c8 	bl	8008c8a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab00:	f003 0304 	and.w	r3, r3, #4
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d022      	beq.n	800ab4e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	699a      	ldr	r2, [r3, #24]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	18d1      	adds	r1, r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	683a      	ldr	r2, [r7, #0]
 800ab14:	6978      	ldr	r0, [r7, #20]
 800ab16:	f000 f8d1 	bl	800acbc <prvInsertTimerInActiveList>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d01f      	beq.n	800ab60 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab20:	2300      	movs	r3, #0
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	2300      	movs	r3, #0
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	2100      	movs	r1, #0
 800ab2a:	6978      	ldr	r0, [r7, #20]
 800ab2c:	f7ff ff88 	bl	800aa40 <xTimerGenericCommand>
 800ab30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d113      	bne.n	800ab60 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ab38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3c:	f383 8811 	msr	BASEPRI, r3
 800ab40:	f3bf 8f6f 	isb	sy
 800ab44:	f3bf 8f4f 	dsb	sy
 800ab48:	60fb      	str	r3, [r7, #12]
}
 800ab4a:	bf00      	nop
 800ab4c:	e7fe      	b.n	800ab4c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab54:	f023 0301 	bic.w	r3, r3, #1
 800ab58:	b2da      	uxtb	r2, r3
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	6a1b      	ldr	r3, [r3, #32]
 800ab64:	6978      	ldr	r0, [r7, #20]
 800ab66:	4798      	blx	r3
}
 800ab68:	bf00      	nop
 800ab6a:	3718      	adds	r7, #24
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	20032e64 	.word	0x20032e64

0800ab74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab7c:	f107 0308 	add.w	r3, r7, #8
 800ab80:	4618      	mov	r0, r3
 800ab82:	f000 f857 	bl	800ac34 <prvGetNextExpireTime>
 800ab86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	f000 f803 	bl	800ab98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ab92:	f000 f8d5 	bl	800ad40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab96:	e7f1      	b.n	800ab7c <prvTimerTask+0x8>

0800ab98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aba2:	f7ff f92f 	bl	8009e04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aba6:	f107 0308 	add.w	r3, r7, #8
 800abaa:	4618      	mov	r0, r3
 800abac:	f000 f866 	bl	800ac7c <prvSampleTimeNow>
 800abb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d130      	bne.n	800ac1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d10a      	bne.n	800abd4 <prvProcessTimerOrBlockTask+0x3c>
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d806      	bhi.n	800abd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800abc6:	f7ff f92b 	bl	8009e20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800abca:	68f9      	ldr	r1, [r7, #12]
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f7ff ff85 	bl	800aadc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800abd2:	e024      	b.n	800ac1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d008      	beq.n	800abec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800abda:	4b13      	ldr	r3, [pc, #76]	; (800ac28 <prvProcessTimerOrBlockTask+0x90>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d101      	bne.n	800abe8 <prvProcessTimerOrBlockTask+0x50>
 800abe4:	2301      	movs	r3, #1
 800abe6:	e000      	b.n	800abea <prvProcessTimerOrBlockTask+0x52>
 800abe8:	2300      	movs	r3, #0
 800abea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800abec:	4b0f      	ldr	r3, [pc, #60]	; (800ac2c <prvProcessTimerOrBlockTask+0x94>)
 800abee:	6818      	ldr	r0, [r3, #0]
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	1ad3      	subs	r3, r2, r3
 800abf6:	683a      	ldr	r2, [r7, #0]
 800abf8:	4619      	mov	r1, r3
 800abfa:	f7fe fe67 	bl	80098cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800abfe:	f7ff f90f 	bl	8009e20 <xTaskResumeAll>
 800ac02:	4603      	mov	r3, r0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d10a      	bne.n	800ac1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ac08:	4b09      	ldr	r3, [pc, #36]	; (800ac30 <prvProcessTimerOrBlockTask+0x98>)
 800ac0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac0e:	601a      	str	r2, [r3, #0]
 800ac10:	f3bf 8f4f 	dsb	sy
 800ac14:	f3bf 8f6f 	isb	sy
}
 800ac18:	e001      	b.n	800ac1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ac1a:	f7ff f901 	bl	8009e20 <xTaskResumeAll>
}
 800ac1e:	bf00      	nop
 800ac20:	3710      	adds	r7, #16
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	20032e68 	.word	0x20032e68
 800ac2c:	20032e6c 	.word	0x20032e6c
 800ac30:	e000ed04 	.word	0xe000ed04

0800ac34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ac34:	b480      	push	{r7}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ac3c:	4b0e      	ldr	r3, [pc, #56]	; (800ac78 <prvGetNextExpireTime+0x44>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d101      	bne.n	800ac4a <prvGetNextExpireTime+0x16>
 800ac46:	2201      	movs	r2, #1
 800ac48:	e000      	b.n	800ac4c <prvGetNextExpireTime+0x18>
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d105      	bne.n	800ac64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac58:	4b07      	ldr	r3, [pc, #28]	; (800ac78 <prvGetNextExpireTime+0x44>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	60fb      	str	r3, [r7, #12]
 800ac62:	e001      	b.n	800ac68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ac64:	2300      	movs	r3, #0
 800ac66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ac68:	68fb      	ldr	r3, [r7, #12]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3714      	adds	r7, #20
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr
 800ac76:	bf00      	nop
 800ac78:	20032e64 	.word	0x20032e64

0800ac7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ac84:	f7ff f96a 	bl	8009f5c <xTaskGetTickCount>
 800ac88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ac8a:	4b0b      	ldr	r3, [pc, #44]	; (800acb8 <prvSampleTimeNow+0x3c>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d205      	bcs.n	800aca0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ac94:	f000 f936 	bl	800af04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	601a      	str	r2, [r3, #0]
 800ac9e:	e002      	b.n	800aca6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aca6:	4a04      	ldr	r2, [pc, #16]	; (800acb8 <prvSampleTimeNow+0x3c>)
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800acac:	68fb      	ldr	r3, [r7, #12]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	20032e74 	.word	0x20032e74

0800acbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b086      	sub	sp, #24
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	60b9      	str	r1, [r7, #8]
 800acc6:	607a      	str	r2, [r7, #4]
 800acc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800acca:	2300      	movs	r3, #0
 800accc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	68ba      	ldr	r2, [r7, #8]
 800acd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800acda:	68ba      	ldr	r2, [r7, #8]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d812      	bhi.n	800ad08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	1ad2      	subs	r2, r2, r3
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	699b      	ldr	r3, [r3, #24]
 800acec:	429a      	cmp	r2, r3
 800acee:	d302      	bcc.n	800acf6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800acf0:	2301      	movs	r3, #1
 800acf2:	617b      	str	r3, [r7, #20]
 800acf4:	e01b      	b.n	800ad2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800acf6:	4b10      	ldr	r3, [pc, #64]	; (800ad38 <prvInsertTimerInActiveList+0x7c>)
 800acf8:	681a      	ldr	r2, [r3, #0]
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	3304      	adds	r3, #4
 800acfe:	4619      	mov	r1, r3
 800ad00:	4610      	mov	r0, r2
 800ad02:	f7fd ff89 	bl	8008c18 <vListInsert>
 800ad06:	e012      	b.n	800ad2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d206      	bcs.n	800ad1e <prvInsertTimerInActiveList+0x62>
 800ad10:	68ba      	ldr	r2, [r7, #8]
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d302      	bcc.n	800ad1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	617b      	str	r3, [r7, #20]
 800ad1c:	e007      	b.n	800ad2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad1e:	4b07      	ldr	r3, [pc, #28]	; (800ad3c <prvInsertTimerInActiveList+0x80>)
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	3304      	adds	r3, #4
 800ad26:	4619      	mov	r1, r3
 800ad28:	4610      	mov	r0, r2
 800ad2a:	f7fd ff75 	bl	8008c18 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ad2e:	697b      	ldr	r3, [r7, #20]
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3718      	adds	r7, #24
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	20032e68 	.word	0x20032e68
 800ad3c:	20032e64 	.word	0x20032e64

0800ad40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b08e      	sub	sp, #56	; 0x38
 800ad44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad46:	e0ca      	b.n	800aede <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	da18      	bge.n	800ad80 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ad4e:	1d3b      	adds	r3, r7, #4
 800ad50:	3304      	adds	r3, #4
 800ad52:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ad54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d10a      	bne.n	800ad70 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ad5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5e:	f383 8811 	msr	BASEPRI, r3
 800ad62:	f3bf 8f6f 	isb	sy
 800ad66:	f3bf 8f4f 	dsb	sy
 800ad6a:	61fb      	str	r3, [r7, #28]
}
 800ad6c:	bf00      	nop
 800ad6e:	e7fe      	b.n	800ad6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ad70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad76:	6850      	ldr	r0, [r2, #4]
 800ad78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad7a:	6892      	ldr	r2, [r2, #8]
 800ad7c:	4611      	mov	r1, r2
 800ad7e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f2c0 80aa 	blt.w	800aedc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ad8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8e:	695b      	ldr	r3, [r3, #20]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d004      	beq.n	800ad9e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad96:	3304      	adds	r3, #4
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7fd ff76 	bl	8008c8a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad9e:	463b      	mov	r3, r7
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7ff ff6b 	bl	800ac7c <prvSampleTimeNow>
 800ada6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2b09      	cmp	r3, #9
 800adac:	f200 8097 	bhi.w	800aede <prvProcessReceivedCommands+0x19e>
 800adb0:	a201      	add	r2, pc, #4	; (adr r2, 800adb8 <prvProcessReceivedCommands+0x78>)
 800adb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb6:	bf00      	nop
 800adb8:	0800ade1 	.word	0x0800ade1
 800adbc:	0800ade1 	.word	0x0800ade1
 800adc0:	0800ade1 	.word	0x0800ade1
 800adc4:	0800ae55 	.word	0x0800ae55
 800adc8:	0800ae69 	.word	0x0800ae69
 800adcc:	0800aeb3 	.word	0x0800aeb3
 800add0:	0800ade1 	.word	0x0800ade1
 800add4:	0800ade1 	.word	0x0800ade1
 800add8:	0800ae55 	.word	0x0800ae55
 800addc:	0800ae69 	.word	0x0800ae69
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ade0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ade6:	f043 0301 	orr.w	r3, r3, #1
 800adea:	b2da      	uxtb	r2, r3
 800adec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf6:	699b      	ldr	r3, [r3, #24]
 800adf8:	18d1      	adds	r1, r2, r3
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae00:	f7ff ff5c 	bl	800acbc <prvInsertTimerInActiveList>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d069      	beq.n	800aede <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0c:	6a1b      	ldr	r3, [r3, #32]
 800ae0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae18:	f003 0304 	and.w	r3, r3, #4
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d05e      	beq.n	800aede <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ae20:	68ba      	ldr	r2, [r7, #8]
 800ae22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae24:	699b      	ldr	r3, [r3, #24]
 800ae26:	441a      	add	r2, r3
 800ae28:	2300      	movs	r3, #0
 800ae2a:	9300      	str	r3, [sp, #0]
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	2100      	movs	r1, #0
 800ae30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae32:	f7ff fe05 	bl	800aa40 <xTimerGenericCommand>
 800ae36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ae38:	6a3b      	ldr	r3, [r7, #32]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d14f      	bne.n	800aede <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ae3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	61bb      	str	r3, [r7, #24]
}
 800ae50:	bf00      	nop
 800ae52:	e7fe      	b.n	800ae52 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae5a:	f023 0301 	bic.w	r3, r3, #1
 800ae5e:	b2da      	uxtb	r2, r3
 800ae60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ae66:	e03a      	b.n	800aede <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae6e:	f043 0301 	orr.w	r3, r3, #1
 800ae72:	b2da      	uxtb	r2, r3
 800ae74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ae80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae82:	699b      	ldr	r3, [r3, #24]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10a      	bne.n	800ae9e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ae88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8c:	f383 8811 	msr	BASEPRI, r3
 800ae90:	f3bf 8f6f 	isb	sy
 800ae94:	f3bf 8f4f 	dsb	sy
 800ae98:	617b      	str	r3, [r7, #20]
}
 800ae9a:	bf00      	nop
 800ae9c:	e7fe      	b.n	800ae9c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ae9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea0:	699a      	ldr	r2, [r3, #24]
 800aea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea4:	18d1      	adds	r1, r2, r3
 800aea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeac:	f7ff ff06 	bl	800acbc <prvInsertTimerInActiveList>
					break;
 800aeb0:	e015      	b.n	800aede <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aeb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aeb8:	f003 0302 	and.w	r3, r3, #2
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d103      	bne.n	800aec8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aec2:	f000 fbd9 	bl	800b678 <vPortFree>
 800aec6:	e00a      	b.n	800aede <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aece:	f023 0301 	bic.w	r3, r3, #1
 800aed2:	b2da      	uxtb	r2, r3
 800aed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aeda:	e000      	b.n	800aede <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aedc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aede:	4b08      	ldr	r3, [pc, #32]	; (800af00 <prvProcessReceivedCommands+0x1c0>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	1d39      	adds	r1, r7, #4
 800aee4:	2200      	movs	r2, #0
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7fe fa88 	bl	80093fc <xQueueReceive>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	f47f af2a 	bne.w	800ad48 <prvProcessReceivedCommands+0x8>
	}
}
 800aef4:	bf00      	nop
 800aef6:	bf00      	nop
 800aef8:	3730      	adds	r7, #48	; 0x30
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	20032e6c 	.word	0x20032e6c

0800af04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b088      	sub	sp, #32
 800af08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af0a:	e048      	b.n	800af9e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af0c:	4b2d      	ldr	r3, [pc, #180]	; (800afc4 <prvSwitchTimerLists+0xc0>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af16:	4b2b      	ldr	r3, [pc, #172]	; (800afc4 <prvSwitchTimerLists+0xc0>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	3304      	adds	r3, #4
 800af24:	4618      	mov	r0, r3
 800af26:	f7fd feb0 	bl	8008c8a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	6a1b      	ldr	r3, [r3, #32]
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af38:	f003 0304 	and.w	r3, r3, #4
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d02e      	beq.n	800af9e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	699b      	ldr	r3, [r3, #24]
 800af44:	693a      	ldr	r2, [r7, #16]
 800af46:	4413      	add	r3, r2
 800af48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800af4a:	68ba      	ldr	r2, [r7, #8]
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d90e      	bls.n	800af70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	68ba      	ldr	r2, [r7, #8]
 800af56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af5e:	4b19      	ldr	r3, [pc, #100]	; (800afc4 <prvSwitchTimerLists+0xc0>)
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	3304      	adds	r3, #4
 800af66:	4619      	mov	r1, r3
 800af68:	4610      	mov	r0, r2
 800af6a:	f7fd fe55 	bl	8008c18 <vListInsert>
 800af6e:	e016      	b.n	800af9e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af70:	2300      	movs	r3, #0
 800af72:	9300      	str	r3, [sp, #0]
 800af74:	2300      	movs	r3, #0
 800af76:	693a      	ldr	r2, [r7, #16]
 800af78:	2100      	movs	r1, #0
 800af7a:	68f8      	ldr	r0, [r7, #12]
 800af7c:	f7ff fd60 	bl	800aa40 <xTimerGenericCommand>
 800af80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10a      	bne.n	800af9e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800af88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8c:	f383 8811 	msr	BASEPRI, r3
 800af90:	f3bf 8f6f 	isb	sy
 800af94:	f3bf 8f4f 	dsb	sy
 800af98:	603b      	str	r3, [r7, #0]
}
 800af9a:	bf00      	nop
 800af9c:	e7fe      	b.n	800af9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af9e:	4b09      	ldr	r3, [pc, #36]	; (800afc4 <prvSwitchTimerLists+0xc0>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d1b1      	bne.n	800af0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800afa8:	4b06      	ldr	r3, [pc, #24]	; (800afc4 <prvSwitchTimerLists+0xc0>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800afae:	4b06      	ldr	r3, [pc, #24]	; (800afc8 <prvSwitchTimerLists+0xc4>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a04      	ldr	r2, [pc, #16]	; (800afc4 <prvSwitchTimerLists+0xc0>)
 800afb4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800afb6:	4a04      	ldr	r2, [pc, #16]	; (800afc8 <prvSwitchTimerLists+0xc4>)
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	6013      	str	r3, [r2, #0]
}
 800afbc:	bf00      	nop
 800afbe:	3718      	adds	r7, #24
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	20032e64 	.word	0x20032e64
 800afc8:	20032e68 	.word	0x20032e68

0800afcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800afd2:	f000 f987 	bl	800b2e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800afd6:	4b15      	ldr	r3, [pc, #84]	; (800b02c <prvCheckForValidListAndQueue+0x60>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d120      	bne.n	800b020 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800afde:	4814      	ldr	r0, [pc, #80]	; (800b030 <prvCheckForValidListAndQueue+0x64>)
 800afe0:	f7fd fdc9 	bl	8008b76 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800afe4:	4813      	ldr	r0, [pc, #76]	; (800b034 <prvCheckForValidListAndQueue+0x68>)
 800afe6:	f7fd fdc6 	bl	8008b76 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800afea:	4b13      	ldr	r3, [pc, #76]	; (800b038 <prvCheckForValidListAndQueue+0x6c>)
 800afec:	4a10      	ldr	r2, [pc, #64]	; (800b030 <prvCheckForValidListAndQueue+0x64>)
 800afee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aff0:	4b12      	ldr	r3, [pc, #72]	; (800b03c <prvCheckForValidListAndQueue+0x70>)
 800aff2:	4a10      	ldr	r2, [pc, #64]	; (800b034 <prvCheckForValidListAndQueue+0x68>)
 800aff4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aff6:	2300      	movs	r3, #0
 800aff8:	9300      	str	r3, [sp, #0]
 800affa:	4b11      	ldr	r3, [pc, #68]	; (800b040 <prvCheckForValidListAndQueue+0x74>)
 800affc:	4a11      	ldr	r2, [pc, #68]	; (800b044 <prvCheckForValidListAndQueue+0x78>)
 800affe:	2110      	movs	r1, #16
 800b000:	200a      	movs	r0, #10
 800b002:	f7fd fed5 	bl	8008db0 <xQueueGenericCreateStatic>
 800b006:	4603      	mov	r3, r0
 800b008:	4a08      	ldr	r2, [pc, #32]	; (800b02c <prvCheckForValidListAndQueue+0x60>)
 800b00a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b00c:	4b07      	ldr	r3, [pc, #28]	; (800b02c <prvCheckForValidListAndQueue+0x60>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d005      	beq.n	800b020 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b014:	4b05      	ldr	r3, [pc, #20]	; (800b02c <prvCheckForValidListAndQueue+0x60>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	490b      	ldr	r1, [pc, #44]	; (800b048 <prvCheckForValidListAndQueue+0x7c>)
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fe fc02 	bl	8009824 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b020:	f000 f990 	bl	800b344 <vPortExitCritical>
}
 800b024:	bf00      	nop
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	20032e6c 	.word	0x20032e6c
 800b030:	20032e3c 	.word	0x20032e3c
 800b034:	20032e50 	.word	0x20032e50
 800b038:	20032e64 	.word	0x20032e64
 800b03c:	20032e68 	.word	0x20032e68
 800b040:	20032f18 	.word	0x20032f18
 800b044:	20032e78 	.word	0x20032e78
 800b048:	0800bca4 	.word	0x0800bca4

0800b04c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b086      	sub	sp, #24
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d10a      	bne.n	800b074 <pvTimerGetTimerID+0x28>
	__asm volatile
 800b05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b062:	f383 8811 	msr	BASEPRI, r3
 800b066:	f3bf 8f6f 	isb	sy
 800b06a:	f3bf 8f4f 	dsb	sy
 800b06e:	60fb      	str	r3, [r7, #12]
}
 800b070:	bf00      	nop
 800b072:	e7fe      	b.n	800b072 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800b074:	f000 f936 	bl	800b2e4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	69db      	ldr	r3, [r3, #28]
 800b07c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b07e:	f000 f961 	bl	800b344 <vPortExitCritical>

	return pvReturn;
 800b082:	693b      	ldr	r3, [r7, #16]
}
 800b084:	4618      	mov	r0, r3
 800b086:	3718      	adds	r7, #24
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b08c:	b480      	push	{r7}
 800b08e:	b085      	sub	sp, #20
 800b090:	af00      	add	r7, sp, #0
 800b092:	60f8      	str	r0, [r7, #12]
 800b094:	60b9      	str	r1, [r7, #8]
 800b096:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	3b04      	subs	r3, #4
 800b09c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b0a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	3b04      	subs	r3, #4
 800b0aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	f023 0201 	bic.w	r2, r3, #1
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	3b04      	subs	r3, #4
 800b0ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b0bc:	4a0c      	ldr	r2, [pc, #48]	; (800b0f0 <pxPortInitialiseStack+0x64>)
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	3b14      	subs	r3, #20
 800b0c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	3b04      	subs	r3, #4
 800b0d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f06f 0202 	mvn.w	r2, #2
 800b0da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	3b20      	subs	r3, #32
 800b0e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3714      	adds	r7, #20
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr
 800b0f0:	0800b0f5 	.word	0x0800b0f5

0800b0f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b0fe:	4b12      	ldr	r3, [pc, #72]	; (800b148 <prvTaskExitError+0x54>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b106:	d00a      	beq.n	800b11e <prvTaskExitError+0x2a>
	__asm volatile
 800b108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10c:	f383 8811 	msr	BASEPRI, r3
 800b110:	f3bf 8f6f 	isb	sy
 800b114:	f3bf 8f4f 	dsb	sy
 800b118:	60fb      	str	r3, [r7, #12]
}
 800b11a:	bf00      	nop
 800b11c:	e7fe      	b.n	800b11c <prvTaskExitError+0x28>
	__asm volatile
 800b11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b122:	f383 8811 	msr	BASEPRI, r3
 800b126:	f3bf 8f6f 	isb	sy
 800b12a:	f3bf 8f4f 	dsb	sy
 800b12e:	60bb      	str	r3, [r7, #8]
}
 800b130:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b132:	bf00      	nop
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d0fc      	beq.n	800b134 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b13a:	bf00      	nop
 800b13c:	bf00      	nop
 800b13e:	3714      	adds	r7, #20
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr
 800b148:	2000001c 	.word	0x2000001c
 800b14c:	00000000 	.word	0x00000000

0800b150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b150:	4b07      	ldr	r3, [pc, #28]	; (800b170 <pxCurrentTCBConst2>)
 800b152:	6819      	ldr	r1, [r3, #0]
 800b154:	6808      	ldr	r0, [r1, #0]
 800b156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b15a:	f380 8809 	msr	PSP, r0
 800b15e:	f3bf 8f6f 	isb	sy
 800b162:	f04f 0000 	mov.w	r0, #0
 800b166:	f380 8811 	msr	BASEPRI, r0
 800b16a:	4770      	bx	lr
 800b16c:	f3af 8000 	nop.w

0800b170 <pxCurrentTCBConst2>:
 800b170:	20032930 	.word	0x20032930
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b174:	bf00      	nop
 800b176:	bf00      	nop

0800b178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b178:	4808      	ldr	r0, [pc, #32]	; (800b19c <prvPortStartFirstTask+0x24>)
 800b17a:	6800      	ldr	r0, [r0, #0]
 800b17c:	6800      	ldr	r0, [r0, #0]
 800b17e:	f380 8808 	msr	MSP, r0
 800b182:	f04f 0000 	mov.w	r0, #0
 800b186:	f380 8814 	msr	CONTROL, r0
 800b18a:	b662      	cpsie	i
 800b18c:	b661      	cpsie	f
 800b18e:	f3bf 8f4f 	dsb	sy
 800b192:	f3bf 8f6f 	isb	sy
 800b196:	df00      	svc	0
 800b198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b19a:	bf00      	nop
 800b19c:	e000ed08 	.word	0xe000ed08

0800b1a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b086      	sub	sp, #24
 800b1a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b1a6:	4b46      	ldr	r3, [pc, #280]	; (800b2c0 <xPortStartScheduler+0x120>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a46      	ldr	r2, [pc, #280]	; (800b2c4 <xPortStartScheduler+0x124>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d10a      	bne.n	800b1c6 <xPortStartScheduler+0x26>
	__asm volatile
 800b1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b4:	f383 8811 	msr	BASEPRI, r3
 800b1b8:	f3bf 8f6f 	isb	sy
 800b1bc:	f3bf 8f4f 	dsb	sy
 800b1c0:	613b      	str	r3, [r7, #16]
}
 800b1c2:	bf00      	nop
 800b1c4:	e7fe      	b.n	800b1c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b1c6:	4b3e      	ldr	r3, [pc, #248]	; (800b2c0 <xPortStartScheduler+0x120>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a3f      	ldr	r2, [pc, #252]	; (800b2c8 <xPortStartScheduler+0x128>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d10a      	bne.n	800b1e6 <xPortStartScheduler+0x46>
	__asm volatile
 800b1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	60fb      	str	r3, [r7, #12]
}
 800b1e2:	bf00      	nop
 800b1e4:	e7fe      	b.n	800b1e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b1e6:	4b39      	ldr	r3, [pc, #228]	; (800b2cc <xPortStartScheduler+0x12c>)
 800b1e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	22ff      	movs	r2, #255	; 0xff
 800b1f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b200:	78fb      	ldrb	r3, [r7, #3]
 800b202:	b2db      	uxtb	r3, r3
 800b204:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b208:	b2da      	uxtb	r2, r3
 800b20a:	4b31      	ldr	r3, [pc, #196]	; (800b2d0 <xPortStartScheduler+0x130>)
 800b20c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b20e:	4b31      	ldr	r3, [pc, #196]	; (800b2d4 <xPortStartScheduler+0x134>)
 800b210:	2207      	movs	r2, #7
 800b212:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b214:	e009      	b.n	800b22a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b216:	4b2f      	ldr	r3, [pc, #188]	; (800b2d4 <xPortStartScheduler+0x134>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	3b01      	subs	r3, #1
 800b21c:	4a2d      	ldr	r2, [pc, #180]	; (800b2d4 <xPortStartScheduler+0x134>)
 800b21e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b220:	78fb      	ldrb	r3, [r7, #3]
 800b222:	b2db      	uxtb	r3, r3
 800b224:	005b      	lsls	r3, r3, #1
 800b226:	b2db      	uxtb	r3, r3
 800b228:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b22a:	78fb      	ldrb	r3, [r7, #3]
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b232:	2b80      	cmp	r3, #128	; 0x80
 800b234:	d0ef      	beq.n	800b216 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b236:	4b27      	ldr	r3, [pc, #156]	; (800b2d4 <xPortStartScheduler+0x134>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f1c3 0307 	rsb	r3, r3, #7
 800b23e:	2b04      	cmp	r3, #4
 800b240:	d00a      	beq.n	800b258 <xPortStartScheduler+0xb8>
	__asm volatile
 800b242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b246:	f383 8811 	msr	BASEPRI, r3
 800b24a:	f3bf 8f6f 	isb	sy
 800b24e:	f3bf 8f4f 	dsb	sy
 800b252:	60bb      	str	r3, [r7, #8]
}
 800b254:	bf00      	nop
 800b256:	e7fe      	b.n	800b256 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b258:	4b1e      	ldr	r3, [pc, #120]	; (800b2d4 <xPortStartScheduler+0x134>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	021b      	lsls	r3, r3, #8
 800b25e:	4a1d      	ldr	r2, [pc, #116]	; (800b2d4 <xPortStartScheduler+0x134>)
 800b260:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b262:	4b1c      	ldr	r3, [pc, #112]	; (800b2d4 <xPortStartScheduler+0x134>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b26a:	4a1a      	ldr	r2, [pc, #104]	; (800b2d4 <xPortStartScheduler+0x134>)
 800b26c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	b2da      	uxtb	r2, r3
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b276:	4b18      	ldr	r3, [pc, #96]	; (800b2d8 <xPortStartScheduler+0x138>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a17      	ldr	r2, [pc, #92]	; (800b2d8 <xPortStartScheduler+0x138>)
 800b27c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b280:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b282:	4b15      	ldr	r3, [pc, #84]	; (800b2d8 <xPortStartScheduler+0x138>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a14      	ldr	r2, [pc, #80]	; (800b2d8 <xPortStartScheduler+0x138>)
 800b288:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b28c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b28e:	f000 f8dd 	bl	800b44c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b292:	4b12      	ldr	r3, [pc, #72]	; (800b2dc <xPortStartScheduler+0x13c>)
 800b294:	2200      	movs	r2, #0
 800b296:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b298:	f000 f8fc 	bl	800b494 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b29c:	4b10      	ldr	r3, [pc, #64]	; (800b2e0 <xPortStartScheduler+0x140>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a0f      	ldr	r2, [pc, #60]	; (800b2e0 <xPortStartScheduler+0x140>)
 800b2a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b2a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b2a8:	f7ff ff66 	bl	800b178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b2ac:	f7fe ff28 	bl	800a100 <vTaskSwitchContext>
	prvTaskExitError();
 800b2b0:	f7ff ff20 	bl	800b0f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3718      	adds	r7, #24
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	e000ed00 	.word	0xe000ed00
 800b2c4:	410fc271 	.word	0x410fc271
 800b2c8:	410fc270 	.word	0x410fc270
 800b2cc:	e000e400 	.word	0xe000e400
 800b2d0:	20032f68 	.word	0x20032f68
 800b2d4:	20032f6c 	.word	0x20032f6c
 800b2d8:	e000ed20 	.word	0xe000ed20
 800b2dc:	2000001c 	.word	0x2000001c
 800b2e0:	e000ef34 	.word	0xe000ef34

0800b2e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
	__asm volatile
 800b2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ee:	f383 8811 	msr	BASEPRI, r3
 800b2f2:	f3bf 8f6f 	isb	sy
 800b2f6:	f3bf 8f4f 	dsb	sy
 800b2fa:	607b      	str	r3, [r7, #4]
}
 800b2fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b2fe:	4b0f      	ldr	r3, [pc, #60]	; (800b33c <vPortEnterCritical+0x58>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	3301      	adds	r3, #1
 800b304:	4a0d      	ldr	r2, [pc, #52]	; (800b33c <vPortEnterCritical+0x58>)
 800b306:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b308:	4b0c      	ldr	r3, [pc, #48]	; (800b33c <vPortEnterCritical+0x58>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d10f      	bne.n	800b330 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b310:	4b0b      	ldr	r3, [pc, #44]	; (800b340 <vPortEnterCritical+0x5c>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	b2db      	uxtb	r3, r3
 800b316:	2b00      	cmp	r3, #0
 800b318:	d00a      	beq.n	800b330 <vPortEnterCritical+0x4c>
	__asm volatile
 800b31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31e:	f383 8811 	msr	BASEPRI, r3
 800b322:	f3bf 8f6f 	isb	sy
 800b326:	f3bf 8f4f 	dsb	sy
 800b32a:	603b      	str	r3, [r7, #0]
}
 800b32c:	bf00      	nop
 800b32e:	e7fe      	b.n	800b32e <vPortEnterCritical+0x4a>
	}
}
 800b330:	bf00      	nop
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr
 800b33c:	2000001c 	.word	0x2000001c
 800b340:	e000ed04 	.word	0xe000ed04

0800b344 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b34a:	4b12      	ldr	r3, [pc, #72]	; (800b394 <vPortExitCritical+0x50>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d10a      	bne.n	800b368 <vPortExitCritical+0x24>
	__asm volatile
 800b352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b356:	f383 8811 	msr	BASEPRI, r3
 800b35a:	f3bf 8f6f 	isb	sy
 800b35e:	f3bf 8f4f 	dsb	sy
 800b362:	607b      	str	r3, [r7, #4]
}
 800b364:	bf00      	nop
 800b366:	e7fe      	b.n	800b366 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b368:	4b0a      	ldr	r3, [pc, #40]	; (800b394 <vPortExitCritical+0x50>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	3b01      	subs	r3, #1
 800b36e:	4a09      	ldr	r2, [pc, #36]	; (800b394 <vPortExitCritical+0x50>)
 800b370:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b372:	4b08      	ldr	r3, [pc, #32]	; (800b394 <vPortExitCritical+0x50>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d105      	bne.n	800b386 <vPortExitCritical+0x42>
 800b37a:	2300      	movs	r3, #0
 800b37c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	f383 8811 	msr	BASEPRI, r3
}
 800b384:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b386:	bf00      	nop
 800b388:	370c      	adds	r7, #12
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr
 800b392:	bf00      	nop
 800b394:	2000001c 	.word	0x2000001c
	...

0800b3a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b3a0:	f3ef 8009 	mrs	r0, PSP
 800b3a4:	f3bf 8f6f 	isb	sy
 800b3a8:	4b15      	ldr	r3, [pc, #84]	; (800b400 <pxCurrentTCBConst>)
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	f01e 0f10 	tst.w	lr, #16
 800b3b0:	bf08      	it	eq
 800b3b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b3b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ba:	6010      	str	r0, [r2, #0]
 800b3bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b3c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b3c4:	f380 8811 	msr	BASEPRI, r0
 800b3c8:	f3bf 8f4f 	dsb	sy
 800b3cc:	f3bf 8f6f 	isb	sy
 800b3d0:	f7fe fe96 	bl	800a100 <vTaskSwitchContext>
 800b3d4:	f04f 0000 	mov.w	r0, #0
 800b3d8:	f380 8811 	msr	BASEPRI, r0
 800b3dc:	bc09      	pop	{r0, r3}
 800b3de:	6819      	ldr	r1, [r3, #0]
 800b3e0:	6808      	ldr	r0, [r1, #0]
 800b3e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e6:	f01e 0f10 	tst.w	lr, #16
 800b3ea:	bf08      	it	eq
 800b3ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b3f0:	f380 8809 	msr	PSP, r0
 800b3f4:	f3bf 8f6f 	isb	sy
 800b3f8:	4770      	bx	lr
 800b3fa:	bf00      	nop
 800b3fc:	f3af 8000 	nop.w

0800b400 <pxCurrentTCBConst>:
 800b400:	20032930 	.word	0x20032930
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b404:	bf00      	nop
 800b406:	bf00      	nop

0800b408 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
	__asm volatile
 800b40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b412:	f383 8811 	msr	BASEPRI, r3
 800b416:	f3bf 8f6f 	isb	sy
 800b41a:	f3bf 8f4f 	dsb	sy
 800b41e:	607b      	str	r3, [r7, #4]
}
 800b420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b422:	f7fe fdab 	bl	8009f7c <xTaskIncrementTick>
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d003      	beq.n	800b434 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b42c:	4b06      	ldr	r3, [pc, #24]	; (800b448 <xPortSysTickHandler+0x40>)
 800b42e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b432:	601a      	str	r2, [r3, #0]
 800b434:	2300      	movs	r3, #0
 800b436:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	f383 8811 	msr	BASEPRI, r3
}
 800b43e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b440:	bf00      	nop
 800b442:	3708      	adds	r7, #8
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	e000ed04 	.word	0xe000ed04

0800b44c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b44c:	b480      	push	{r7}
 800b44e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b450:	4b0b      	ldr	r3, [pc, #44]	; (800b480 <vPortSetupTimerInterrupt+0x34>)
 800b452:	2200      	movs	r2, #0
 800b454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b456:	4b0b      	ldr	r3, [pc, #44]	; (800b484 <vPortSetupTimerInterrupt+0x38>)
 800b458:	2200      	movs	r2, #0
 800b45a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b45c:	4b0a      	ldr	r3, [pc, #40]	; (800b488 <vPortSetupTimerInterrupt+0x3c>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a0a      	ldr	r2, [pc, #40]	; (800b48c <vPortSetupTimerInterrupt+0x40>)
 800b462:	fba2 2303 	umull	r2, r3, r2, r3
 800b466:	099b      	lsrs	r3, r3, #6
 800b468:	4a09      	ldr	r2, [pc, #36]	; (800b490 <vPortSetupTimerInterrupt+0x44>)
 800b46a:	3b01      	subs	r3, #1
 800b46c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b46e:	4b04      	ldr	r3, [pc, #16]	; (800b480 <vPortSetupTimerInterrupt+0x34>)
 800b470:	2207      	movs	r2, #7
 800b472:	601a      	str	r2, [r3, #0]
}
 800b474:	bf00      	nop
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr
 800b47e:	bf00      	nop
 800b480:	e000e010 	.word	0xe000e010
 800b484:	e000e018 	.word	0xe000e018
 800b488:	20000000 	.word	0x20000000
 800b48c:	10624dd3 	.word	0x10624dd3
 800b490:	e000e014 	.word	0xe000e014

0800b494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b494:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b4a4 <vPortEnableVFP+0x10>
 800b498:	6801      	ldr	r1, [r0, #0]
 800b49a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b49e:	6001      	str	r1, [r0, #0]
 800b4a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b4a2:	bf00      	nop
 800b4a4:	e000ed88 	.word	0xe000ed88

0800b4a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b085      	sub	sp, #20
 800b4ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b4ae:	f3ef 8305 	mrs	r3, IPSR
 800b4b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2b0f      	cmp	r3, #15
 800b4b8:	d914      	bls.n	800b4e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b4ba:	4a17      	ldr	r2, [pc, #92]	; (800b518 <vPortValidateInterruptPriority+0x70>)
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	4413      	add	r3, r2
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b4c4:	4b15      	ldr	r3, [pc, #84]	; (800b51c <vPortValidateInterruptPriority+0x74>)
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	7afa      	ldrb	r2, [r7, #11]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d20a      	bcs.n	800b4e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d2:	f383 8811 	msr	BASEPRI, r3
 800b4d6:	f3bf 8f6f 	isb	sy
 800b4da:	f3bf 8f4f 	dsb	sy
 800b4de:	607b      	str	r3, [r7, #4]
}
 800b4e0:	bf00      	nop
 800b4e2:	e7fe      	b.n	800b4e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b4e4:	4b0e      	ldr	r3, [pc, #56]	; (800b520 <vPortValidateInterruptPriority+0x78>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b4ec:	4b0d      	ldr	r3, [pc, #52]	; (800b524 <vPortValidateInterruptPriority+0x7c>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d90a      	bls.n	800b50a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f8:	f383 8811 	msr	BASEPRI, r3
 800b4fc:	f3bf 8f6f 	isb	sy
 800b500:	f3bf 8f4f 	dsb	sy
 800b504:	603b      	str	r3, [r7, #0]
}
 800b506:	bf00      	nop
 800b508:	e7fe      	b.n	800b508 <vPortValidateInterruptPriority+0x60>
	}
 800b50a:	bf00      	nop
 800b50c:	3714      	adds	r7, #20
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr
 800b516:	bf00      	nop
 800b518:	e000e3f0 	.word	0xe000e3f0
 800b51c:	20032f68 	.word	0x20032f68
 800b520:	e000ed0c 	.word	0xe000ed0c
 800b524:	20032f6c 	.word	0x20032f6c

0800b528 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b088      	sub	sp, #32
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b530:	2300      	movs	r3, #0
 800b532:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 800b534:	4b4a      	ldr	r3, [pc, #296]	; (800b660 <pvPortMalloc+0x138>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d10a      	bne.n	800b552 <pvPortMalloc+0x2a>
	__asm volatile
 800b53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b540:	f383 8811 	msr	BASEPRI, r3
 800b544:	f3bf 8f6f 	isb	sy
 800b548:	f3bf 8f4f 	dsb	sy
 800b54c:	60fb      	str	r3, [r7, #12]
}
 800b54e:	bf00      	nop
 800b550:	e7fe      	b.n	800b550 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 800b552:	f7fe fc57 	bl	8009e04 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b556:	4b43      	ldr	r3, [pc, #268]	; (800b664 <pvPortMalloc+0x13c>)
 800b558:	681a      	ldr	r2, [r3, #0]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	4013      	ands	r3, r2
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d172      	bne.n	800b648 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d00d      	beq.n	800b584 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800b568:	2208      	movs	r2, #8
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	4413      	add	r3, r2
 800b56e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f003 0307 	and.w	r3, r3, #7
 800b576:	2b00      	cmp	r3, #0
 800b578:	d004      	beq.n	800b584 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f023 0307 	bic.w	r3, r3, #7
 800b580:	3308      	adds	r3, #8
 800b582:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d05e      	beq.n	800b648 <pvPortMalloc+0x120>
 800b58a:	4b37      	ldr	r3, [pc, #220]	; (800b668 <pvPortMalloc+0x140>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	429a      	cmp	r2, r3
 800b592:	d859      	bhi.n	800b648 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b594:	4b35      	ldr	r3, [pc, #212]	; (800b66c <pvPortMalloc+0x144>)
 800b596:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 800b598:	4b34      	ldr	r3, [pc, #208]	; (800b66c <pvPortMalloc+0x144>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b59e:	e004      	b.n	800b5aa <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800b5a0:	69fb      	ldr	r3, [r7, #28]
 800b5a2:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d903      	bls.n	800b5bc <pvPortMalloc+0x94>
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1f1      	bne.n	800b5a0 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b5bc:	4b28      	ldr	r3, [pc, #160]	; (800b660 <pvPortMalloc+0x138>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	69fa      	ldr	r2, [r7, #28]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d040      	beq.n	800b648 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	2208      	movs	r2, #8
 800b5cc:	4413      	add	r3, r2
 800b5ce:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	685a      	ldr	r2, [r3, #4]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	1ad2      	subs	r2, r2, r3
 800b5e0:	2308      	movs	r3, #8
 800b5e2:	005b      	lsls	r3, r3, #1
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d90f      	bls.n	800b608 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b5e8:	69fa      	ldr	r2, [r7, #28]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4413      	add	r3, r2
 800b5ee:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	685a      	ldr	r2, [r3, #4]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	1ad2      	subs	r2, r2, r3
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800b602:	6938      	ldr	r0, [r7, #16]
 800b604:	f000 f89a 	bl	800b73c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b608:	4b17      	ldr	r3, [pc, #92]	; (800b668 <pvPortMalloc+0x140>)
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	1ad3      	subs	r3, r2, r3
 800b612:	4a15      	ldr	r2, [pc, #84]	; (800b668 <pvPortMalloc+0x140>)
 800b614:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b616:	4b14      	ldr	r3, [pc, #80]	; (800b668 <pvPortMalloc+0x140>)
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	4b15      	ldr	r3, [pc, #84]	; (800b670 <pvPortMalloc+0x148>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d203      	bcs.n	800b62a <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b622:	4b11      	ldr	r3, [pc, #68]	; (800b668 <pvPortMalloc+0x140>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4a12      	ldr	r2, [pc, #72]	; (800b670 <pvPortMalloc+0x148>)
 800b628:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	685a      	ldr	r2, [r3, #4]
 800b62e:	4b0d      	ldr	r3, [pc, #52]	; (800b664 <pvPortMalloc+0x13c>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	431a      	orrs	r2, r3
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	2200      	movs	r2, #0
 800b63c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b63e:	4b0d      	ldr	r3, [pc, #52]	; (800b674 <pvPortMalloc+0x14c>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	3301      	adds	r3, #1
 800b644:	4a0b      	ldr	r2, [pc, #44]	; (800b674 <pvPortMalloc+0x14c>)
 800b646:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b648:	f7fe fbea 	bl	8009e20 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d101      	bne.n	800b656 <pvPortMalloc+0x12e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800b652:	f7fd f9f4 	bl	8008a3e <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 800b656:	697b      	ldr	r3, [r7, #20]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3720      	adds	r7, #32
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	20032f78 	.word	0x20032f78
 800b664:	20032f8c 	.word	0x20032f8c
 800b668:	20032f7c 	.word	0x20032f7c
 800b66c:	20032f70 	.word	0x20032f70
 800b670:	20032f80 	.word	0x20032f80
 800b674:	20032f84 	.word	0x20032f84

0800b678 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b086      	sub	sp, #24
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d04d      	beq.n	800b726 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b68a:	2308      	movs	r3, #8
 800b68c:	425b      	negs	r3, r3
 800b68e:	697a      	ldr	r2, [r7, #20]
 800b690:	4413      	add	r3, r2
 800b692:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	685a      	ldr	r2, [r3, #4]
 800b69c:	4b24      	ldr	r3, [pc, #144]	; (800b730 <vPortFree+0xb8>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4013      	ands	r3, r2
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d10a      	bne.n	800b6bc <vPortFree+0x44>
	__asm volatile
 800b6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6aa:	f383 8811 	msr	BASEPRI, r3
 800b6ae:	f3bf 8f6f 	isb	sy
 800b6b2:	f3bf 8f4f 	dsb	sy
 800b6b6:	60fb      	str	r3, [r7, #12]
}
 800b6b8:	bf00      	nop
 800b6ba:	e7fe      	b.n	800b6ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d00a      	beq.n	800b6da <vPortFree+0x62>
	__asm volatile
 800b6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c8:	f383 8811 	msr	BASEPRI, r3
 800b6cc:	f3bf 8f6f 	isb	sy
 800b6d0:	f3bf 8f4f 	dsb	sy
 800b6d4:	60bb      	str	r3, [r7, #8]
}
 800b6d6:	bf00      	nop
 800b6d8:	e7fe      	b.n	800b6d8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	685a      	ldr	r2, [r3, #4]
 800b6de:	4b14      	ldr	r3, [pc, #80]	; (800b730 <vPortFree+0xb8>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4013      	ands	r3, r2
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d01e      	beq.n	800b726 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d11a      	bne.n	800b726 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	685a      	ldr	r2, [r3, #4]
 800b6f4:	4b0e      	ldr	r3, [pc, #56]	; (800b730 <vPortFree+0xb8>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	43db      	mvns	r3, r3
 800b6fa:	401a      	ands	r2, r3
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b700:	f7fe fb80 	bl	8009e04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	685a      	ldr	r2, [r3, #4]
 800b708:	4b0a      	ldr	r3, [pc, #40]	; (800b734 <vPortFree+0xbc>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4413      	add	r3, r2
 800b70e:	4a09      	ldr	r2, [pc, #36]	; (800b734 <vPortFree+0xbc>)
 800b710:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b712:	6938      	ldr	r0, [r7, #16]
 800b714:	f000 f812 	bl	800b73c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b718:	4b07      	ldr	r3, [pc, #28]	; (800b738 <vPortFree+0xc0>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	3301      	adds	r3, #1
 800b71e:	4a06      	ldr	r2, [pc, #24]	; (800b738 <vPortFree+0xc0>)
 800b720:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b722:	f7fe fb7d 	bl	8009e20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b726:	bf00      	nop
 800b728:	3718      	adds	r7, #24
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	20032f8c 	.word	0x20032f8c
 800b734:	20032f7c 	.word	0x20032f7c
 800b738:	20032f88 	.word	0x20032f88

0800b73c <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b73c:	b480      	push	{r7}
 800b73e:	b085      	sub	sp, #20
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b744:	4b28      	ldr	r3, [pc, #160]	; (800b7e8 <prvInsertBlockIntoFreeList+0xac>)
 800b746:	60fb      	str	r3, [r7, #12]
 800b748:	e002      	b.n	800b750 <prvInsertBlockIntoFreeList+0x14>
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	60fb      	str	r3, [r7, #12]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	429a      	cmp	r2, r3
 800b758:	d8f7      	bhi.n	800b74a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	68ba      	ldr	r2, [r7, #8]
 800b764:	4413      	add	r3, r2
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d108      	bne.n	800b77e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	685a      	ldr	r2, [r3, #4]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	441a      	add	r2, r3
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	68ba      	ldr	r2, [r7, #8]
 800b788:	441a      	add	r2, r3
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d118      	bne.n	800b7c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	4b15      	ldr	r3, [pc, #84]	; (800b7ec <prvInsertBlockIntoFreeList+0xb0>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d00d      	beq.n	800b7ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	685a      	ldr	r2, [r3, #4]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	441a      	add	r2, r3
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	601a      	str	r2, [r3, #0]
 800b7b8:	e008      	b.n	800b7cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b7ba:	4b0c      	ldr	r3, [pc, #48]	; (800b7ec <prvInsertBlockIntoFreeList+0xb0>)
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	601a      	str	r2, [r3, #0]
 800b7c2:	e003      	b.n	800b7cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681a      	ldr	r2, [r3, #0]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d002      	beq.n	800b7da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7da:	bf00      	nop
 800b7dc:	3714      	adds	r7, #20
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr
 800b7e6:	bf00      	nop
 800b7e8:	20032f70 	.word	0x20032f70
 800b7ec:	20032f78 	.word	0x20032f78

0800b7f0 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b08f      	sub	sp, #60	; 0x3c
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 800b800:	2300      	movs	r3, #0
 800b802:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800b804:	4b5a      	ldr	r3, [pc, #360]	; (800b970 <vPortDefineHeapRegions+0x180>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d00a      	beq.n	800b822 <vPortDefineHeapRegions+0x32>
	__asm volatile
 800b80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b810:	f383 8811 	msr	BASEPRI, r3
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	617b      	str	r3, [r7, #20]
}
 800b81e:	bf00      	nop
 800b820:	e7fe      	b.n	800b820 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800b822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b824:	00db      	lsls	r3, r3, #3
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	4413      	add	r3, r2
 800b82a:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 800b82c:	e07d      	b.n	800b92a <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 800b82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 800b834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83c:	f003 0307 	and.w	r3, r3, #7
 800b840:	2b00      	cmp	r3, #0
 800b842:	d00e      	beq.n	800b862 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 800b844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b846:	3307      	adds	r3, #7
 800b848:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800b84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84c:	f023 0307 	bic.w	r3, r3, #7
 800b850:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 800b852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	461a      	mov	r2, r3
 800b858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85a:	1ad3      	subs	r3, r2, r3
 800b85c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b85e:	4413      	add	r3, r2
 800b860:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 800b862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b864:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 800b866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d106      	bne.n	800b87a <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800b86c:	69fb      	ldr	r3, [r7, #28]
 800b86e:	4a41      	ldr	r2, [pc, #260]	; (800b974 <vPortDefineHeapRegions+0x184>)
 800b870:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 800b872:	4b40      	ldr	r3, [pc, #256]	; (800b974 <vPortDefineHeapRegions+0x184>)
 800b874:	2200      	movs	r2, #0
 800b876:	605a      	str	r2, [r3, #4]
 800b878:	e01f      	b.n	800b8ba <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 800b87a:	4b3d      	ldr	r3, [pc, #244]	; (800b970 <vPortDefineHeapRegions+0x180>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d10a      	bne.n	800b898 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 800b882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b886:	f383 8811 	msr	BASEPRI, r3
 800b88a:	f3bf 8f6f 	isb	sy
 800b88e:	f3bf 8f4f 	dsb	sy
 800b892:	613b      	str	r3, [r7, #16]
}
 800b894:	bf00      	nop
 800b896:	e7fe      	b.n	800b896 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 800b898:	4b35      	ldr	r3, [pc, #212]	; (800b970 <vPortDefineHeapRegions+0x180>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	461a      	mov	r2, r3
 800b89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d80a      	bhi.n	800b8ba <vPortDefineHeapRegions+0xca>
	__asm volatile
 800b8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a8:	f383 8811 	msr	BASEPRI, r3
 800b8ac:	f3bf 8f6f 	isb	sy
 800b8b0:	f3bf 8f4f 	dsb	sy
 800b8b4:	60fb      	str	r3, [r7, #12]
}
 800b8b6:	bf00      	nop
 800b8b8:	e7fe      	b.n	800b8b8 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 800b8ba:	4b2d      	ldr	r3, [pc, #180]	; (800b970 <vPortDefineHeapRegions+0x180>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 800b8c0:	69fa      	ldr	r2, [r7, #28]
 800b8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8c4:	4413      	add	r3, r2
 800b8c6:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 800b8c8:	2208      	movs	r2, #8
 800b8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8cc:	1a9b      	subs	r3, r3, r2
 800b8ce:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800b8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d2:	f023 0307 	bic.w	r3, r3, #7
 800b8d6:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 800b8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8da:	4a25      	ldr	r2, [pc, #148]	; (800b970 <vPortDefineHeapRegions+0x180>)
 800b8dc:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 800b8de:	4b24      	ldr	r3, [pc, #144]	; (800b970 <vPortDefineHeapRegions+0x180>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 800b8e6:	4b22      	ldr	r3, [pc, #136]	; (800b970 <vPortDefineHeapRegions+0x180>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800b8f2:	6a3b      	ldr	r3, [r7, #32]
 800b8f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8f6:	1ad2      	subs	r2, r2, r3
 800b8f8:	6a3b      	ldr	r3, [r7, #32]
 800b8fa:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800b8fc:	4b1c      	ldr	r3, [pc, #112]	; (800b970 <vPortDefineHeapRegions+0x180>)
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	6a3b      	ldr	r3, [r7, #32]
 800b902:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d002      	beq.n	800b910 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	6a3a      	ldr	r2, [r7, #32]
 800b90e:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800b910:	6a3b      	ldr	r3, [r7, #32]
 800b912:	685b      	ldr	r3, [r3, #4]
 800b914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b916:	4413      	add	r3, r2
 800b918:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800b91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b91c:	3301      	adds	r3, #1
 800b91e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800b920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b922:	00db      	lsls	r3, r3, #3
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	4413      	add	r3, r2
 800b928:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 800b92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	f47f af7d 	bne.w	800b82e <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800b934:	4a10      	ldr	r2, [pc, #64]	; (800b978 <vPortDefineHeapRegions+0x188>)
 800b936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b938:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800b93a:	4a10      	ldr	r2, [pc, #64]	; (800b97c <vPortDefineHeapRegions+0x18c>)
 800b93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93e:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800b940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b942:	2b00      	cmp	r3, #0
 800b944:	d10a      	bne.n	800b95c <vPortDefineHeapRegions+0x16c>
	__asm volatile
 800b946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94a:	f383 8811 	msr	BASEPRI, r3
 800b94e:	f3bf 8f6f 	isb	sy
 800b952:	f3bf 8f4f 	dsb	sy
 800b956:	60bb      	str	r3, [r7, #8]
}
 800b958:	bf00      	nop
 800b95a:	e7fe      	b.n	800b95a <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b95c:	4b08      	ldr	r3, [pc, #32]	; (800b980 <vPortDefineHeapRegions+0x190>)
 800b95e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b962:	601a      	str	r2, [r3, #0]
}
 800b964:	bf00      	nop
 800b966:	373c      	adds	r7, #60	; 0x3c
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr
 800b970:	20032f78 	.word	0x20032f78
 800b974:	20032f70 	.word	0x20032f70
 800b978:	20032f80 	.word	0x20032f80
 800b97c:	20032f7c 	.word	0x20032f7c
 800b980:	20032f8c 	.word	0x20032f8c

0800b984 <__libc_init_array>:
 800b984:	b570      	push	{r4, r5, r6, lr}
 800b986:	4d0d      	ldr	r5, [pc, #52]	; (800b9bc <__libc_init_array+0x38>)
 800b988:	4c0d      	ldr	r4, [pc, #52]	; (800b9c0 <__libc_init_array+0x3c>)
 800b98a:	1b64      	subs	r4, r4, r5
 800b98c:	10a4      	asrs	r4, r4, #2
 800b98e:	2600      	movs	r6, #0
 800b990:	42a6      	cmp	r6, r4
 800b992:	d109      	bne.n	800b9a8 <__libc_init_array+0x24>
 800b994:	4d0b      	ldr	r5, [pc, #44]	; (800b9c4 <__libc_init_array+0x40>)
 800b996:	4c0c      	ldr	r4, [pc, #48]	; (800b9c8 <__libc_init_array+0x44>)
 800b998:	f000 f8f6 	bl	800bb88 <_init>
 800b99c:	1b64      	subs	r4, r4, r5
 800b99e:	10a4      	asrs	r4, r4, #2
 800b9a0:	2600      	movs	r6, #0
 800b9a2:	42a6      	cmp	r6, r4
 800b9a4:	d105      	bne.n	800b9b2 <__libc_init_array+0x2e>
 800b9a6:	bd70      	pop	{r4, r5, r6, pc}
 800b9a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9ac:	4798      	blx	r3
 800b9ae:	3601      	adds	r6, #1
 800b9b0:	e7ee      	b.n	800b990 <__libc_init_array+0xc>
 800b9b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9b6:	4798      	blx	r3
 800b9b8:	3601      	adds	r6, #1
 800b9ba:	e7f2      	b.n	800b9a2 <__libc_init_array+0x1e>
 800b9bc:	0800bd84 	.word	0x0800bd84
 800b9c0:	0800bd84 	.word	0x0800bd84
 800b9c4:	0800bd84 	.word	0x0800bd84
 800b9c8:	0800bd88 	.word	0x0800bd88

0800b9cc <__retarget_lock_acquire_recursive>:
 800b9cc:	4770      	bx	lr

0800b9ce <__retarget_lock_release_recursive>:
 800b9ce:	4770      	bx	lr

0800b9d0 <memcpy>:
 800b9d0:	440a      	add	r2, r1
 800b9d2:	4291      	cmp	r1, r2
 800b9d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b9d8:	d100      	bne.n	800b9dc <memcpy+0xc>
 800b9da:	4770      	bx	lr
 800b9dc:	b510      	push	{r4, lr}
 800b9de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9e6:	4291      	cmp	r1, r2
 800b9e8:	d1f9      	bne.n	800b9de <memcpy+0xe>
 800b9ea:	bd10      	pop	{r4, pc}

0800b9ec <memset>:
 800b9ec:	4402      	add	r2, r0
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d100      	bne.n	800b9f6 <memset+0xa>
 800b9f4:	4770      	bx	lr
 800b9f6:	f803 1b01 	strb.w	r1, [r3], #1
 800b9fa:	e7f9      	b.n	800b9f0 <memset+0x4>

0800b9fc <_free_r>:
 800b9fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9fe:	2900      	cmp	r1, #0
 800ba00:	d048      	beq.n	800ba94 <_free_r+0x98>
 800ba02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba06:	9001      	str	r0, [sp, #4]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	f1a1 0404 	sub.w	r4, r1, #4
 800ba0e:	bfb8      	it	lt
 800ba10:	18e4      	addlt	r4, r4, r3
 800ba12:	f000 f8ad 	bl	800bb70 <__malloc_lock>
 800ba16:	4a20      	ldr	r2, [pc, #128]	; (800ba98 <_free_r+0x9c>)
 800ba18:	9801      	ldr	r0, [sp, #4]
 800ba1a:	6813      	ldr	r3, [r2, #0]
 800ba1c:	4615      	mov	r5, r2
 800ba1e:	b933      	cbnz	r3, 800ba2e <_free_r+0x32>
 800ba20:	6063      	str	r3, [r4, #4]
 800ba22:	6014      	str	r4, [r2, #0]
 800ba24:	b003      	add	sp, #12
 800ba26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba2a:	f000 b8a7 	b.w	800bb7c <__malloc_unlock>
 800ba2e:	42a3      	cmp	r3, r4
 800ba30:	d90b      	bls.n	800ba4a <_free_r+0x4e>
 800ba32:	6821      	ldr	r1, [r4, #0]
 800ba34:	1862      	adds	r2, r4, r1
 800ba36:	4293      	cmp	r3, r2
 800ba38:	bf04      	itt	eq
 800ba3a:	681a      	ldreq	r2, [r3, #0]
 800ba3c:	685b      	ldreq	r3, [r3, #4]
 800ba3e:	6063      	str	r3, [r4, #4]
 800ba40:	bf04      	itt	eq
 800ba42:	1852      	addeq	r2, r2, r1
 800ba44:	6022      	streq	r2, [r4, #0]
 800ba46:	602c      	str	r4, [r5, #0]
 800ba48:	e7ec      	b.n	800ba24 <_free_r+0x28>
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	b10b      	cbz	r3, 800ba54 <_free_r+0x58>
 800ba50:	42a3      	cmp	r3, r4
 800ba52:	d9fa      	bls.n	800ba4a <_free_r+0x4e>
 800ba54:	6811      	ldr	r1, [r2, #0]
 800ba56:	1855      	adds	r5, r2, r1
 800ba58:	42a5      	cmp	r5, r4
 800ba5a:	d10b      	bne.n	800ba74 <_free_r+0x78>
 800ba5c:	6824      	ldr	r4, [r4, #0]
 800ba5e:	4421      	add	r1, r4
 800ba60:	1854      	adds	r4, r2, r1
 800ba62:	42a3      	cmp	r3, r4
 800ba64:	6011      	str	r1, [r2, #0]
 800ba66:	d1dd      	bne.n	800ba24 <_free_r+0x28>
 800ba68:	681c      	ldr	r4, [r3, #0]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	6053      	str	r3, [r2, #4]
 800ba6e:	4421      	add	r1, r4
 800ba70:	6011      	str	r1, [r2, #0]
 800ba72:	e7d7      	b.n	800ba24 <_free_r+0x28>
 800ba74:	d902      	bls.n	800ba7c <_free_r+0x80>
 800ba76:	230c      	movs	r3, #12
 800ba78:	6003      	str	r3, [r0, #0]
 800ba7a:	e7d3      	b.n	800ba24 <_free_r+0x28>
 800ba7c:	6825      	ldr	r5, [r4, #0]
 800ba7e:	1961      	adds	r1, r4, r5
 800ba80:	428b      	cmp	r3, r1
 800ba82:	bf04      	itt	eq
 800ba84:	6819      	ldreq	r1, [r3, #0]
 800ba86:	685b      	ldreq	r3, [r3, #4]
 800ba88:	6063      	str	r3, [r4, #4]
 800ba8a:	bf04      	itt	eq
 800ba8c:	1949      	addeq	r1, r1, r5
 800ba8e:	6021      	streq	r1, [r4, #0]
 800ba90:	6054      	str	r4, [r2, #4]
 800ba92:	e7c7      	b.n	800ba24 <_free_r+0x28>
 800ba94:	b003      	add	sp, #12
 800ba96:	bd30      	pop	{r4, r5, pc}
 800ba98:	20032f90 	.word	0x20032f90

0800ba9c <cleanup_glue>:
 800ba9c:	b538      	push	{r3, r4, r5, lr}
 800ba9e:	460c      	mov	r4, r1
 800baa0:	6809      	ldr	r1, [r1, #0]
 800baa2:	4605      	mov	r5, r0
 800baa4:	b109      	cbz	r1, 800baaa <cleanup_glue+0xe>
 800baa6:	f7ff fff9 	bl	800ba9c <cleanup_glue>
 800baaa:	4621      	mov	r1, r4
 800baac:	4628      	mov	r0, r5
 800baae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bab2:	f7ff bfa3 	b.w	800b9fc <_free_r>
	...

0800bab8 <_reclaim_reent>:
 800bab8:	4b2c      	ldr	r3, [pc, #176]	; (800bb6c <_reclaim_reent+0xb4>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4283      	cmp	r3, r0
 800babe:	b570      	push	{r4, r5, r6, lr}
 800bac0:	4604      	mov	r4, r0
 800bac2:	d051      	beq.n	800bb68 <_reclaim_reent+0xb0>
 800bac4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bac6:	b143      	cbz	r3, 800bada <_reclaim_reent+0x22>
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d14a      	bne.n	800bb64 <_reclaim_reent+0xac>
 800bace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bad0:	6819      	ldr	r1, [r3, #0]
 800bad2:	b111      	cbz	r1, 800bada <_reclaim_reent+0x22>
 800bad4:	4620      	mov	r0, r4
 800bad6:	f7ff ff91 	bl	800b9fc <_free_r>
 800bada:	6961      	ldr	r1, [r4, #20]
 800badc:	b111      	cbz	r1, 800bae4 <_reclaim_reent+0x2c>
 800bade:	4620      	mov	r0, r4
 800bae0:	f7ff ff8c 	bl	800b9fc <_free_r>
 800bae4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bae6:	b111      	cbz	r1, 800baee <_reclaim_reent+0x36>
 800bae8:	4620      	mov	r0, r4
 800baea:	f7ff ff87 	bl	800b9fc <_free_r>
 800baee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800baf0:	b111      	cbz	r1, 800baf8 <_reclaim_reent+0x40>
 800baf2:	4620      	mov	r0, r4
 800baf4:	f7ff ff82 	bl	800b9fc <_free_r>
 800baf8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bafa:	b111      	cbz	r1, 800bb02 <_reclaim_reent+0x4a>
 800bafc:	4620      	mov	r0, r4
 800bafe:	f7ff ff7d 	bl	800b9fc <_free_r>
 800bb02:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bb04:	b111      	cbz	r1, 800bb0c <_reclaim_reent+0x54>
 800bb06:	4620      	mov	r0, r4
 800bb08:	f7ff ff78 	bl	800b9fc <_free_r>
 800bb0c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bb0e:	b111      	cbz	r1, 800bb16 <_reclaim_reent+0x5e>
 800bb10:	4620      	mov	r0, r4
 800bb12:	f7ff ff73 	bl	800b9fc <_free_r>
 800bb16:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bb18:	b111      	cbz	r1, 800bb20 <_reclaim_reent+0x68>
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	f7ff ff6e 	bl	800b9fc <_free_r>
 800bb20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb22:	b111      	cbz	r1, 800bb2a <_reclaim_reent+0x72>
 800bb24:	4620      	mov	r0, r4
 800bb26:	f7ff ff69 	bl	800b9fc <_free_r>
 800bb2a:	69a3      	ldr	r3, [r4, #24]
 800bb2c:	b1e3      	cbz	r3, 800bb68 <_reclaim_reent+0xb0>
 800bb2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bb30:	4620      	mov	r0, r4
 800bb32:	4798      	blx	r3
 800bb34:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bb36:	b1b9      	cbz	r1, 800bb68 <_reclaim_reent+0xb0>
 800bb38:	4620      	mov	r0, r4
 800bb3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb3e:	f7ff bfad 	b.w	800ba9c <cleanup_glue>
 800bb42:	5949      	ldr	r1, [r1, r5]
 800bb44:	b941      	cbnz	r1, 800bb58 <_reclaim_reent+0xa0>
 800bb46:	3504      	adds	r5, #4
 800bb48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb4a:	2d80      	cmp	r5, #128	; 0x80
 800bb4c:	68d9      	ldr	r1, [r3, #12]
 800bb4e:	d1f8      	bne.n	800bb42 <_reclaim_reent+0x8a>
 800bb50:	4620      	mov	r0, r4
 800bb52:	f7ff ff53 	bl	800b9fc <_free_r>
 800bb56:	e7ba      	b.n	800bace <_reclaim_reent+0x16>
 800bb58:	680e      	ldr	r6, [r1, #0]
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	f7ff ff4e 	bl	800b9fc <_free_r>
 800bb60:	4631      	mov	r1, r6
 800bb62:	e7ef      	b.n	800bb44 <_reclaim_reent+0x8c>
 800bb64:	2500      	movs	r5, #0
 800bb66:	e7ef      	b.n	800bb48 <_reclaim_reent+0x90>
 800bb68:	bd70      	pop	{r4, r5, r6, pc}
 800bb6a:	bf00      	nop
 800bb6c:	20000020 	.word	0x20000020

0800bb70 <__malloc_lock>:
 800bb70:	4801      	ldr	r0, [pc, #4]	; (800bb78 <__malloc_lock+0x8>)
 800bb72:	f7ff bf2b 	b.w	800b9cc <__retarget_lock_acquire_recursive>
 800bb76:	bf00      	nop
 800bb78:	200334c4 	.word	0x200334c4

0800bb7c <__malloc_unlock>:
 800bb7c:	4801      	ldr	r0, [pc, #4]	; (800bb84 <__malloc_unlock+0x8>)
 800bb7e:	f7ff bf26 	b.w	800b9ce <__retarget_lock_release_recursive>
 800bb82:	bf00      	nop
 800bb84:	200334c4 	.word	0x200334c4

0800bb88 <_init>:
 800bb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb8a:	bf00      	nop
 800bb8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb8e:	bc08      	pop	{r3}
 800bb90:	469e      	mov	lr, r3
 800bb92:	4770      	bx	lr

0800bb94 <_fini>:
 800bb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb96:	bf00      	nop
 800bb98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb9a:	bc08      	pop	{r3}
 800bb9c:	469e      	mov	lr, r3
 800bb9e:	4770      	bx	lr
